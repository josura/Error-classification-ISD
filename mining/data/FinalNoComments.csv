"ids","error","source","code","solution"
"1","junit.framework.AssertionFailedError","/source/org/jfree/chart/util/ShapeList.java","
         if (!(obj instanceof ShapeList)) {
             return false;
         }
         return super.equals(obj);
 
     }
 
","
         if (!(obj instanceof ShapeList)) {
             return false;
         }
         ShapeList that = (ShapeList) obj;
         int listSize = size();
         for (int i = 0; i < listSize; i +) {
            if (!ShapeUtilities.equal((Shape) get(i), (Shape) that.get(i))) {
                return false;
            }
         }
         return true;
 
     }
 
"
"2","junit.framework.ComparisonFailure","/source/org/jfree/chart/imagemap/StandardToolTipTagFragmentGenerator.java","
        return "" title=\"""" + toolTipText
             + ""\"" alt=\""\"""";
     }
 
","
        return "" title=\"""" + ImageMapUtilities.htmlEscape(toolTipText) 
             + ""\"" alt=\""\"""";
     }
 
"
"3","java.lang.IllegalArgumentException","/source/org/jfree/data/time/TimeSeries.java","
             endIndex = -(endIndex + 1);              endIndex = endIndex - 1;             }
        if (endIndex < 0) {
             emptyRange = true;
         }
         if (emptyRange) {
","
             endIndex = -(endIndex + 1);              endIndex = endIndex - 1;             }
        if ((endIndex < 0)  || (endIndex < startIndex)) {
             emptyRange = true;
         }
         if (emptyRange) {
"
"4","junit.framework.AssertionFailedError","/source/org/jfree/data/time/Week.java","
  
     public Week(Date time, TimeZone zone) {
                 this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());
     }
 
","
    
     public Week(Date time, TimeZone zone) {
                 this(time, zone, Locale.getDefault());
     }
 
"
"5","junit.framework.AssertionFailedError","/source/org/jfree/data/time/TimePeriodValues.java","
         }
         
         if (this.maxMiddleIndex >= 0) {
            long s = getDataItem(this.minMiddleIndex).getPeriod().getStart()
                 .getTime();
            long e = getDataItem(this.minMiddleIndex).getPeriod().getEnd()
                 .getTime();
             long maxMiddle = s + (e - s) / 2;
             if (middle > maxMiddle) {
","
         }
         
         if (this.maxMiddleIndex >= 0) {
            long s = getDataItem(this.maxMiddleIndex).getPeriod().getStart()
                 .getTime();
            long e = getDataItem(this.maxMiddleIndex).getPeriod().getEnd()
                 .getTime();
             long maxMiddle = s + (e - s) / 2;
             if (middle > maxMiddle) {
"
"6","java.lang.IndexOutOfBoundsException","/source/org/jfree/data/xy/XYSeries.java","
         if (x == null) {
             throw new IllegalArgumentException(""Null 'x' argument."");
         }
 
                  XYDataItem overwritten = null;
         int index = indexOf(x);
        if (index >= 0 && !this.allowDuplicateXValues) {
             XYDataItem existing = (XYDataItem) this.data.get(index);
             try {
                 overwritten = (XYDataItem) existing.clone();
","
         if (x == null) {
             throw new IllegalArgumentException(""Null 'x' argument."");
         }
        if (this.allowDuplicateXValues) {
            add(x, y);
            return null;
        }
 
                  XYDataItem overwritten = null;
         int index = indexOf(x);
        if (index >= 0) {
             XYDataItem existing = (XYDataItem) this.data.get(index);
             try {
                 overwritten = (XYDataItem) existing.clone();
"
"7","junit.framework.AssertionFailedError","/source/org/jfree/data/time/TimeSeries.java","
             throw new IllegalArgumentException(""Requires start <= end."");
         }
         TimeSeries copy = (TimeSeries) super.clone();
         copy.data = new java.util.ArrayList();
         if (this.data.size() > 0) {
             for (int index = start; index <= end; index++) {
","
             throw new IllegalArgumentException(""Requires start <= end."");
         }
         TimeSeries copy = (TimeSeries) super.clone();
        copy.minY = Double.NaN;
        copy.maxY = Double.NaN;
         copy.data = new java.util.ArrayList();
         if (this.data.size() > 0) {
             for (int index = start; index <= end; index++) {
"
"8","java.lang.NullPointerException","/source/org/jfree/chart/plot/XYPlot.java","
                     }
                 }
                 
                     Collection c = r.getAnnotations();
                     Iterator i = c.iterator();
                     while (i.hasNext()) {

                             includedAnnotations.add(a);
                         }
                     }
             }
         }
 
","
                     }
                 }
                 
                if (r != null) {
                     Collection c = r.getAnnotations();
                     Iterator i = c.iterator();
                     while (i.hasNext()) {

                             includedAnnotations.add(a);
                         }
                     }
                }
             }
         }
 
"
"9","java.lang.NullPointerException","/source/org/jfree/data/general/DatasetUtilities.java","
             for (int series = 0; series < seriesCount; series++) {
                 int itemCount = dataset.getItemCount(series);
                 for (int item = 0; item < itemCount; item++) {
                     lvalue = intervalXYData.getStartXValue(series, item);
                     uvalue = intervalXYData.getEndXValue(series, item);
                     if (!Double.isNaN(lvalue)) {
                         minimum = Math.min(minimum, lvalue);
                     }
                     if (!Double.isNaN(uvalue)) {
                         maximum = Math.max(maximum, uvalue);
                     }
                 }

             for (int series = 0; series < seriesCount; series++) {
                 int itemCount = dataset.getItemCount(series);
                 for (int item = 0; item < itemCount; item++) {
                     double lvalue = ixyd.getStartYValue(series, item);
                     double uvalue = ixyd.getEndYValue(series, item);
                     if (!Double.isNaN(lvalue)) {
                         minimum = Math.min(minimum, lvalue);
                     }
                     if (!Double.isNaN(uvalue)) {
                         maximum = Math.max(maximum, uvalue);
                     }
                 }
","
             for (int series = 0; series < seriesCount; series++) {
                 int itemCount = dataset.getItemCount(series);
                 for (int item = 0; item < itemCount; item++) {
                    double value = intervalXYData.getXValue(series, item);
                     lvalue = intervalXYData.getStartXValue(series, item);
                     uvalue = intervalXYData.getEndXValue(series, item);
                    if (!Double.isNaN(value)) {
                        minimum = Math.min(minimum, value);
                        maximum = Math.max(maximum, value);
                    }
                     if (!Double.isNaN(lvalue)) {
                         minimum = Math.min(minimum, lvalue);
                        maximum = Math.max(maximum, lvalue);
                     }
                     if (!Double.isNaN(uvalue)) {
                        minimum = Math.min(minimum, uvalue);
                         maximum = Math.max(maximum, uvalue);
                     }
                 }

             for (int series = 0; series < seriesCount; series++) {
                 int itemCount = dataset.getItemCount(series);
                 for (int item = 0; item < itemCount; item++) {
                    double value = ixyd.getYValue(series, item);
                     double lvalue = ixyd.getStartYValue(series, item);
                     double uvalue = ixyd.getEndYValue(series, item);
                    if (!Double.isNaN(value)) {
                        minimum = Math.min(minimum, value);
                        maximum = Math.max(maximum, value);
                    }
                     if (!Double.isNaN(lvalue)) {
                         minimum = Math.min(minimum, lvalue);
                        maximum = Math.max(maximum, lvalue);
                     }
                     if (!Double.isNaN(uvalue)) {
                        minimum = Math.min(minimum, uvalue);
                         maximum = Math.max(maximum, uvalue);
                     }
                 }
"
"10","junit.framework.AssertionFailedError","/source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java","
         }
         int index = this.plot.getIndexOf(this);
         CategoryDataset dataset = this.plot.getDataset(index);
        if (dataset != null) {
             return result;
         }
         int seriesCount = dataset.getRowCount();
","
         }
         int index = this.plot.getIndexOf(this);
         CategoryDataset dataset = this.plot.getDataset(index);
        if (dataset == null) {
             return result;
         }
         int seriesCount = dataset.getRowCount();
"
"11","junit.framework.AssertionFailedError","/source/org/jfree/chart/plot/MultiplePiePlot.java","
      
     public MultiplePiePlot(CategoryDataset dataset) {
         super();
        this.dataset = dataset;
         PiePlot piePlot = new PiePlot(null);
         this.pieChart = new JFreeChart(piePlot);
         this.pieChart.removeLegend();
","
      
     public MultiplePiePlot(CategoryDataset dataset) {
         super();
        setDataset(dataset);
         PiePlot piePlot = new PiePlot(null);
         this.pieChart = new JFreeChart(piePlot);
         this.pieChart.removeLegend();
"
"12","junit.framework.AssertionFailedError","/source/org/jfree/chart/util/ShapeUtilities.java","
             return false;
         }
         PathIterator iterator1 = p1.getPathIterator(null);
        PathIterator iterator2 = p1.getPathIterator(null);
         double[] d1 = new double[6];
         double[] d2 = new double[6];
         boolean done = iterator1.isDone() && iterator2.isDone();
","
             return false;
         }
         PathIterator iterator1 = p1.getPathIterator(null);
        PathIterator iterator2 = p2.getPathIterator(null);
         double[] d1 = new double[6];
         double[] d2 = new double[6];
         boolean done = iterator1.isDone() && iterator2.isDone();
"
"13","java.lang.IllegalArgumentException","/source/org/jfree/chart/block/BorderArrangement.java","
         h[3] = h[2];
         if (this.rightBlock != null) {
             RectangleConstraint c4 = new RectangleConstraint(0.0,
                    new Range(0.0, constraint.getWidth() - w[2]),
                     LengthConstraintType.RANGE, h[2], null,
                     LengthConstraintType.FIXED);
             Size2D size = this.rightBlock.arrange(g2, c4);
","
         h[3] = h[2];
         if (this.rightBlock != null) {
             RectangleConstraint c4 = new RectangleConstraint(0.0,
                    new Range(0.0, Math.max(constraint.getWidth() - w[2], 0.0)),
                     LengthConstraintType.RANGE, h[2], null,
                     LengthConstraintType.FIXED);
             Size2D size = this.rightBlock.arrange(g2, c4);
"
"14","java.lang.IndexOutOfBoundsException","/source/org/jfree/data/DefaultKeyedValues.java","
     public void removeValue(int index) {
         this.keys.remove(index);
         this.values.remove(index);
        if (index < this.keys.size()) {
         rebuildIndex();
        }
     }
 
     public void removeValue(Comparable key) {
         int index = getIndex(key);
         if (index < 0) {
			return;
         }
         removeValue(index);
     }
  

     public void removeColumn(Comparable columnKey) {
         Iterator iterator = this.rows.iterator();
         while (iterator.hasNext()) {
             DefaultKeyedValues rowData = (DefaultKeyedValues) iterator.next();
                 rowData.removeValue(columnKey);
         }
         this.columnKeys.remove(columnKey);
     }
 
     
","
     public void removeValue(int index) {
         this.keys.remove(index);
         this.values.remove(index);
         rebuildIndex();
     }
 
     
     public void removeValue(Comparable key) {
         int index = getIndex(key);
         if (index < 0) {
            throw new UnknownKeyException(""The key ("" + key 
                    + "") is not recognised."");
         }
         removeValue(index);
     }
     
     

     public void removeColumn(Comparable columnKey) {
    	if (columnKey == null) {
    		throw new IllegalArgumentException(""Null 'columnKey' argument."");
    	}
    	if (!this.columnKeys.contains(columnKey)) {
    		throw new UnknownKeyException(""Unknown key: "" + columnKey);
    	}
         Iterator iterator = this.rows.iterator();
         while (iterator.hasNext()) {
             DefaultKeyedValues rowData = (DefaultKeyedValues) iterator.next();
            int index = rowData.getIndex(columnKey);
            if (index >= 0) {
                 rowData.removeValue(columnKey);
            }
         }
         this.columnKeys.remove(columnKey);
     }
 
     
"
"15","java.lang.NullPointerException","/source/org/jfree/chart/plot/CategoryPlot.java","
             markers = (ArrayList) this.backgroundDomainMarkers.get(new Integer(
                     index));
         }
         boolean removed = markers.remove(marker);
         if (removed && notify) {
             fireChangeEvent();

             markers = (ArrayList) this.backgroundRangeMarkers.get(new Integer(
                     index));
         }
         boolean removed = markers.remove(marker);
         if (removed && notify) {
             fireChangeEvent();

             markers = (ArrayList) this.backgroundDomainMarkers.get(new Integer(
                     index));
         }
         boolean removed = markers.remove(marker);
         if (removed && notify) {
             fireChangeEvent();

             markers = (ArrayList) this.backgroundRangeMarkers.get(new Integer(
                     index));
         }
         boolean removed = markers.remove(marker);
         if (removed && notify) {
             fireChangeEvent();
","
             markers = (ArrayList) this.backgroundDomainMarkers.get(new Integer(
                     index));
         }
        if (markers == null) {
            return false;
        }
         boolean removed = markers.remove(marker);
         if (removed && notify) {
             fireChangeEvent();

             markers = (ArrayList) this.backgroundRangeMarkers.get(new Integer(
                     index));
         }
        if (markers == null) {
            return false;
        }
         boolean removed = markers.remove(marker);
         if (removed && notify) {
             fireChangeEvent();

             markers = (ArrayList) this.backgroundDomainMarkers.get(new Integer(
                     index));
         }
        if (markers == null) {
            return false;
        }
         boolean removed = markers.remove(marker);
         if (removed && notify) {
             fireChangeEvent();

             markers = (ArrayList) this.backgroundRangeMarkers.get(new Integer(
                     index));
         }
        if (markers == null) {
            return false;
        }
         boolean removed = markers.remove(marker);
         if (removed && notify) {
             fireChangeEvent();
"
"16","junit.framework.AssertionFailedError","/source/org/jfree/data/statistics/DefaultBoxAndWhiskerCategoryDataset.java","
                 && this.minimumRangeValueColumn == c))  {
             updateBounds();
         }
             double minval = Double.NaN;
             if (item.getMinOutlier() != null) {

                 this.minimumRangeValueRow = r;
                 this.minimumRangeValueColumn = c;
             }
         this.rangeBounds = new Range(this.minimumRangeValue,
               this.maximumRangeValue);

      
     private void updateBounds() {
         this.minimumRangeValue = Double.NaN;
         this.maximumRangeValue = Double.NaN;
     }
","
                 && this.minimumRangeValueColumn == c))  {
             updateBounds();
         }
        else {
         
             double minval = Double.NaN;
             if (item.getMinOutlier() != null) {

                 this.minimumRangeValueRow = r;
                 this.minimumRangeValueColumn = c;
             }
        }
         
         this.rangeBounds = new Range(this.minimumRangeValue,
               this.maximumRangeValue);

      
     private void updateBounds() {
         this.minimumRangeValue = Double.NaN;
        this.minimumRangeValueRow = -1;
        this.minimumRangeValueColumn = -1;
         this.maximumRangeValue = Double.NaN;
        this.maximumRangeValueRow = -1;
        this.maximumRangeValueColumn = -1;
        int rowCount = getRowCount();
        int columnCount = getColumnCount();
        for (int r = 0; r < rowCount; r++) {
            for (int c = 0; c < columnCount; c++) {
                BoxAndWhiskerItem item = getItem(r, c);
                if (item != null) {
                    Number min = item.getMinOutlier();
                    if (min != null) {
                        double minv = min.doubleValue();
                        if (!Double.isNaN(minv)) {
                            if (minv < this.minimumRangeValue || Double.isNaN(
                                    this.minimumRangeValue)) {
                                this.minimumRangeValue = minv;
                                this.minimumRangeValueRow = r;
                                this.minimumRangeValueColumn = c;
                            }
                        }
                    }
                    Number max = item.getMaxOutlier();
                    if (max != null) {
                        double maxv = max.doubleValue();
                        if (!Double.isNaN(maxv)) {
                            if (maxv > this.maximumRangeValue || Double.isNaN(
                                    this.maximumRangeValue)) {
                                this.maximumRangeValue = maxv;
                                this.maximumRangeValueRow = r;
                                this.maximumRangeValueColumn = c;
                            }
                        }
                    }
                }
            }
        }
     }
     
"
"17","junit.framework.AssertionFailedError","/source/org/jfree/chart/plot/PiePlot.java","
         double result = 0.0;
         Iterator iterator = this.dataset.getKeys().iterator();
         while (iterator.hasNext()) {

      
         PiePlotState state = new PiePlotState(info);
         state.setPassesRequired(2);
             state.setTotal(DatasetUtilities.calculatePieDatasetTotal(
                     plot.getDataset()));
         state.setLatestAngle(plot.getStartAngle());
         return state;
         
","
     public double getMaximumExplodePercent() {
        if (this.dataset == null) {
            return 0.0;
        }
         double result = 0.0;
         Iterator iterator = this.dataset.getKeys().iterator();
         while (iterator.hasNext()) {

      
         PiePlotState state = new PiePlotState(info);
         state.setPassesRequired(2);
        if (this.dataset != null) {
             state.setTotal(DatasetUtilities.calculatePieDatasetTotal(
                     plot.getDataset()));
        }
         state.setLatestAngle(plot.getStartAngle());
         return state;
         
"
"18","java.lang.NullPointerException","/source/org/jfree/data/category/DefaultIntervalCategoryDataset.java","
 
             }
             else {
                this.seriesKeys = null;
                this.categoryKeys = null;
             }
         }
 

         if (categoryKeys == null) {
             throw new IllegalArgumentException(""Null 'categoryKeys' argument."");
         }
        if (categoryKeys.length != this.startData[0].length) {
             throw new IllegalArgumentException(
                     ""The number of categories does not match the data."");
         }
","
 
             }
             else {
                this.seriesKeys = new Comparable[0];
                this.categoryKeys = new Comparable[0];
             }
         }
 

         if (categoryKeys == null) {
             throw new IllegalArgumentException(""Null 'categoryKeys' argument."");
         }
        if (categoryKeys.length != getCategoryCount()) {
             throw new IllegalArgumentException(
                     ""The number of categories does not match the data."");
         }
"
"19","java.lang.IllegalArgumentException","/source/org/jfree/data/time/TimeSeries.java","
        Object clone = createCopy(0, getItemCount() - 1);
         return clone;
     }
 
","
        TimeSeries clone = (TimeSeries) super.clone();
        clone.data = (List) ObjectUtilities.deepClone(this.data);
         return clone;
     }
 
"
"20","junit.framework.AssertionFailedError","/source/org/jfree/chart/plot/ValueMarker.java","
      
     public ValueMarker(double value, Paint paint, Stroke stroke, 
                        Paint outlinePaint, Stroke outlineStroke, float alpha) {
        super(paint, stroke, paint, stroke, alpha);
         this.value = value;
     }
     
","
      
     public ValueMarker(double value, Paint paint, Stroke stroke, 
                        Paint outlinePaint, Stroke outlineStroke, float alpha) {
        super(paint, stroke, outlinePaint, outlineStroke, alpha);
         this.value = value;
     }
     
"
"21","junit.framework.AssertionFailedError","/source/org/jfree/chart/plot/CategoryPlot.java","
  
     public int getDomainAxisIndex(CategoryAxis axis) {
         return this.domainAxes.indexOf(axis);
     }
     

         int result = this.rangeAxes.indexOf(axis);
         if (result < 0) {              Plot parent = getParent();
","
  
     public int getDomainAxisIndex(CategoryAxis axis) {
        if (axis == null) {
            throw new IllegalArgumentException(""Null 'axis' argument."");
        }
         return this.domainAxes.indexOf(axis);
     }
     

 
     public int getRangeAxisIndex(ValueAxis axis) {
        if (axis == null) {
            throw new IllegalArgumentException(""Null 'axis' argument."");
        }
         int result = this.rangeAxes.indexOf(axis);
         if (result < 0) {              Plot parent = getParent();
"
"22","org.jfree.data.UnknownKeyException","/source/org/jfree/data/KeyedObjects2D.java","
             throw new UnknownKeyException(""Column key ("" + columnKey 
                     + "") not recognised."");
         }
        if (row >= 0) {
         KeyedObjects rowData = (KeyedObjects) this.rows.get(row);
            return rowData.getObject(columnKey);
         }
         else {
             return null;

         }
         
              }

     public void removeRow(Comparable rowKey) {
         int index = getRowIndex(rowKey);
         removeRow(index);
     }
 

         Iterator iterator = this.rows.iterator();
         while (iterator.hasNext()) {
             KeyedObjects rowData = (KeyedObjects) iterator.next();
                rowData.removeValue(columnKey);
         }
         this.columnKeys.remove(columnKey);
     }
","
             throw new UnknownKeyException(""Column key ("" + columnKey 
                     + "") not recognised."");
         }
         KeyedObjects rowData = (KeyedObjects) this.rows.get(row);
        int index = rowData.getIndex(columnKey);
        if (index >= 0) {
            return rowData.getObject(index);
         }
         else {
             return null;

         }
         
                 allNull = true;
         
        for (int item = 0, itemCount = this.rows.size(); item < itemCount; 
             item++) {
            row = (KeyedObjects) this.rows.get(item);
            int columnIndex = row.getIndex(columnKey);
            if (columnIndex >= 0 && row.getObject(columnIndex) != null) {
                allNull = false;
                break;
            }
        }
         
        if (allNull) {
            for (int item = 0, itemCount = this.rows.size(); item < itemCount; 
                 item++) {
                row = (KeyedObjects) this.rows.get(item);
                int columnIndex = row.getIndex(columnKey);
                if (columnIndex >= 0) {
                    row.removeValue(columnIndex);
                }
            }
            this.columnKeys.remove(columnKey);
        }
     }
 

     public void removeRow(Comparable rowKey) {
         int index = getRowIndex(rowKey);
        if (index < 0) {
            throw new UnknownKeyException(""Row key ("" + rowKey 
                    + "") not recognised."");
        }
         removeRow(index);
     }
 

         Iterator iterator = this.rows.iterator();
         while (iterator.hasNext()) {
             KeyedObjects rowData = (KeyedObjects) iterator.next();
            int i = rowData.getIndex(columnKey);
            if (i >= 0) {
                rowData.removeValue(i);
            }
         }
         this.columnKeys.remove(columnKey);
     }
"
"23","junit.framework.AssertionFailedError","/source/org/jfree/chart/axis/Axis.java","
         }
         if (plotState != null && hotspot != null) {
             ChartRenderingInfo owner = plotState.getOwner();
                 EntityCollection entities = owner.getEntityCollection();
                 if (entities != null) {
                     entities.add(new AxisLabelEntity(this, hotspot, 
                             this.labelToolTip, this.labelURL));
                 }
         }
         return state;
 
","
         }
         if (plotState != null && hotspot != null) {
             ChartRenderingInfo owner = plotState.getOwner();
            if (owner != null) {
                 EntityCollection entities = owner.getEntityCollection();
                 if (entities != null) {
                     entities.add(new AxisLabelEntity(this, hotspot, 
                             this.labelToolTip, this.labelURL));
                 }
            }
         }
         return state;
 
"
"24","junit.framework.AssertionFailedError","/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java","
 
                  Number meanValue = dataset.getMeanValue(row, column);
 
         double value = meanValue.doubleValue();
         double base = 0.0;

 
                     double valueDelta = dataset.getStdDevValue(row, column).doubleValue();
             double highVal = rangeAxis.valueToJava2D(meanValue.doubleValue() 
                     + valueDelta, dataArea, yAxisLocation);
             double lowVal = rangeAxis.valueToJava2D(meanValue.doubleValue() 

                                      lowVal, rectY + rectHeight * 0.75);
             g2.draw(line);
         
         CategoryItemLabelGenerator generator = getItemLabelGenerator(row, 
                 column);

 
                  Number meanValue = dataset.getMeanValue(row, column);
 
         double value = meanValue.doubleValue();
         double base = 0.0;

 
                     double valueDelta = dataset.getStdDevValue(row, column).doubleValue();
             double highVal = rangeAxis.valueToJava2D(meanValue.doubleValue() 
                     + valueDelta, dataArea, yAxisLocation);
             double lowVal = rangeAxis.valueToJava2D(meanValue.doubleValue() 

                                      rectX + rectWidth / 2.0d + 5.0d, lowVal);
             g2.draw(line);
         
         CategoryItemLabelGenerator generator = getItemLabelGenerator(row, 
                 column);
","
 
                  Number meanValue = dataset.getMeanValue(row, column);
        if (meanValue == null) {
            return;
        }
 
         double value = meanValue.doubleValue();
         double base = 0.0;

 
                 Number n = dataset.getStdDevValue(row, column);
        if (n != null) {
            double valueDelta = n.doubleValue();
             double highVal = rangeAxis.valueToJava2D(meanValue.doubleValue() 
                     + valueDelta, dataArea, yAxisLocation);
             double lowVal = rangeAxis.valueToJava2D(meanValue.doubleValue() 

                                      lowVal, rectY + rectHeight * 0.75);
             g2.draw(line);
        }
         
         CategoryItemLabelGenerator generator = getItemLabelGenerator(row, 
                 column);

 
                  Number meanValue = dataset.getMeanValue(row, column);
        if (meanValue == null) {
            return;
        }
 
         double value = meanValue.doubleValue();
         double base = 0.0;

 
                 Number n = dataset.getStdDevValue(row, column);
        if (n != null) {
            double valueDelta = n.doubleValue();
             double highVal = rangeAxis.valueToJava2D(meanValue.doubleValue() 
                     + valueDelta, dataArea, yAxisLocation);
             double lowVal = rangeAxis.valueToJava2D(meanValue.doubleValue() 

                                      rectX + rectWidth / 2.0d + 5.0d, lowVal);
             g2.draw(line);
        }
         
         CategoryItemLabelGenerator generator = getItemLabelGenerator(row, 
                 column);
"
"25","junit.framework.AssertionFailedError","/source/org/jfree/chart/renderer/category/MinMaxCategoryRenderer.java","
    
","
    public boolean equals(Object obj) {
        if (obj == this) {
            return true;
        }
        if (!(obj instanceof MinMaxCategoryRenderer)) {
            return false;
        }
        MinMaxCategoryRenderer that = (MinMaxCategoryRenderer) obj;
        if (this.plotLines != that.plotLines) {
            return false;
        }
        if (!PaintUtilities.equal(this.groupPaint, that.groupPaint)) {
            return false;
        }
        if (!this.groupStroke.equals(that.groupStroke)) {
            return false;
        }
        return super.equals(obj);
    }
 
"
"26","java.lang.IllegalArgumentException","/source/org/jfree/chart/renderer/GrayPaintScale.java","
     public Paint getPaint(double value) {
         double v = Math.max(value, this.lowerBound);
         v = Math.min(v, this.upperBound);
        int g = (int) ((value - this.lowerBound) / (this.upperBound 
                 - this.lowerBound) * 255.0);
         return new Color(g, g, g);
     }
","
     public Paint getPaint(double value) {
         double v = Math.max(value, this.lowerBound);
         v = Math.min(v, this.upperBound);
        int g = (int) ((v - this.lowerBound) / (this.upperBound 
                 - this.lowerBound) * 255.0);
         return new Color(g, g, g);
     }
"
"27","junit.framework.AssertionFailedError","/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java","
     reachingUses = new MaybeReachingVariableUse(cfg, t.getScope(), compiler);
     reachingUses.analyze();
     for (Candidate c : candidates) {
      if (c.canInline()) {
         c.inlineVariable();
 
         
       return defMetadata.node;
     }
 
    private boolean canInline() {
              if (getDefCfgNode().isFunction()) {
         return false;

                   case Token.REGEXP:
                   case Token.NEW:
                     return true;
                 }
                 return false;
               }
","
     reachingUses = new MaybeReachingVariableUse(cfg, t.getScope(), compiler);
     reachingUses.analyze();
     for (Candidate c : candidates) {
      if (c.canInline(t.getScope())) {
         c.inlineVariable();
 
         
       return defMetadata.node;
     }
 
    private boolean canInline(final Scope scope) {
              if (getDefCfgNode().isFunction()) {
         return false;

                   case Token.REGEXP:
                   case Token.NEW:
                     return true;
                  case Token.NAME:
                    Var var = scope.getOwnSlot(input.getString());
                    if (var != null
                        && var.getParentNode().isCatch()) {
                      return true;
                    }
                 }
                 return false;
               }
"
"28","junit.framework.AssertionFailedError","/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java","
     public JSType caseObjectType(ObjectType type) {
       if (value.equals(""function"")) {
         JSType ctorType = getNativeType(U2U_CONSTRUCTOR_TYPE);
        return resultEqualsValue && ctorType.isSubtype(type) ? ctorType : null;
                             }
       return matchesExpectation(""object"") ? type : null;
     }
","
     public JSType caseObjectType(ObjectType type) {
       if (value.equals(""function"")) {
         JSType ctorType = getNativeType(U2U_CONSTRUCTOR_TYPE);
        if (resultEqualsValue) {
                     return ctorType.getGreatestSubtype(type);
        } else {
                     return type.isSubtype(ctorType) ? null : type;
        }
       }
       return matchesExpectation(""object"") ? type : null;
     }
"
"29","junit.framework.AssertionFailedError","/src/com/google/javascript/jscomp/InlineObjectLiterals.java","
 
                       
                      ","
 
                                if (gramps.isDelProp()) {
            return false;
          }
 
                      "
"30","junit.framework.AssertionFailedError","/src/com/google/javascript/jscomp/TypeValidator.java","
       JSType leftType, Node owner, String propName) {
          if (!leftType.isNoType() && !rightType.canAssignTo(leftType)) {
      if ((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) {
        registerMismatch(rightType, leftType, null);
      } else {
                     
           ""assignment to property "" + propName + "" of "" +
           getReadableJSTypeName(owner, true),
           rightType, leftType);
      }
       return false;
     }
     return true;

   boolean expectCanAssignTo(NodeTraversal t, Node n, JSType rightType,
       JSType leftType, String msg) {
     if (!rightType.canAssignTo(leftType)) {
      if ((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) {
        registerMismatch(rightType, leftType, null);
      } else {
       mismatch(t, n, msg, rightType, leftType);
      }
       return false;
     }
     return true;
","
       JSType leftType, Node owner, String propName) {
          if (!leftType.isNoType() && !rightType.canAssignTo(leftType)) {
                     
           ""assignment to property "" + propName + "" of "" +
           getReadableJSTypeName(owner, true),
           rightType, leftType);
       return false;
     }
     return true;

   boolean expectCanAssignTo(NodeTraversal t, Node n, JSType rightType,
       JSType leftType, String msg) {
     if (!rightType.canAssignTo(leftType)) {
       mismatch(t, n, msg, rightType, leftType);
       return false;
     }
     return true;
"
"31","java.lang.NullPointerException","/src/com/google/javascript/jscomp/TypeCheck.java","
       ObjectType interfaceType) {
     ObjectType implicitProto = interfaceType.getImplicitPrototype();
     Set<String> currentPropertyNames;
                     currentPropertyNames = implicitProto.getOwnPropertyNames();
     for (String name : currentPropertyNames) {
       ObjectType oType = properties.get(name);
       if (oType != null) {
","
       ObjectType interfaceType) {
     ObjectType implicitProto = interfaceType.getImplicitPrototype();
     Set<String> currentPropertyNames;
    if (implicitProto == null) {
                    currentPropertyNames = ImmutableSet.of();
    } else {
       currentPropertyNames = implicitProto.getOwnPropertyNames();
    }
     for (String name : currentPropertyNames) {
       ObjectType oType = properties.get(name);
       if (oType != null) {
"
"32","junit.framework.AssertionFailedError","/src/com/google/javascript/jscomp/RemoveUnusedVars.java","
                
     Node function = fnScope.getRootNode();
 
","
                   if (!removeGlobals) {
      return;
    }
 
     Node function = fnScope.getRootNode();
 
"
"33","junit.framework.AssertionFailedError","/src/com/google/javascript/rhino/jstype/NamedType.java","
               boolean resolved = resolveViaRegistry(t, enclosing);
    if (detectImplicitPrototypeCycle()) {
       handleTypeCycle(t);
     }
 

     }
 
     resolveViaProperties(t, enclosing);
    if (detectImplicitPrototypeCycle()) {
       handleTypeCycle(t);
     }
 
","
               boolean resolved = resolveViaRegistry(t, enclosing);
    if (detectInheritanceCycle()) {
       handleTypeCycle(t);
     }
 

     }
 
     resolveViaProperties(t, enclosing);
    if (detectInheritanceCycle()) {
       handleTypeCycle(t);
     }
 
"
"34","junit.framework.AssertionFailedError","/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java","
       Var var = s.getVar(lhs.getString());
       return var != null
           && var.getScope() == s
           && !blacklistedVars.contains(var);
     }
   }
 
 
   private void applyCollapses() {
     for (Collapse collapse : collapses) {
","
       Var var = s.getVar(lhs.getString());
       return var != null
           && var.getScope() == s
          && !isNamedParameter(var)
           && !blacklistedVars.contains(var);
     }
   }
 
  private boolean isNamedParameter(Var v) {
    return v.getParentNode().isParamList();
  }
 
   private void applyCollapses() {
     for (Collapse collapse : collapses) {
"
"35","junit.framework.ComparisonFailure","/src/com/google/javascript/jscomp/ProcessCommonJSModules.java","
   private String normalizeSourceName(String filename) {
           
     if (filename.indexOf(filenamePrefix) == 0) {
       filename = filename.substring(filenamePrefix.length());

       Preconditions.checkArgument(scriptNodeCount == 1,
           ""ProcessCommonJSModules supports only one invocation per "" +
           ""CompilerInput / script node"");
      String moduleName = guessCJSModuleName(normalizeSourceName(script.getSourceFileName()));
       script.addChildToFront(IR.var(IR.name(moduleName), IR.objectlit())
           .copyInformationFromForTree(script));
       if (reportDependencies) {
","
   private String normalizeSourceName(String filename) {
              filename = filename.replace(""\\"", ""/"");
 
     if (filename.indexOf(filenamePrefix) == 0) {
       filename = filename.substring(filenamePrefix.length());

       Preconditions.checkArgument(scriptNodeCount == 1,
           ""ProcessCommonJSModules supports only one invocation per "" +
           ""CompilerInput / script node"");
      String moduleName = guessCJSModuleName(script.getSourceFileName());
       script.addChildToFront(IR.var(IR.name(moduleName), IR.objectlit())
           .copyInformationFromForTree(script));
       if (reportDependencies) {
"
"36","junit.framework.AssertionFailedError","/src/com/google/javascript/jscomp/TypeCheck.java","
 
     if (childType.isDict()) {
       report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, ""'.'"", ""dict"");
    } else if (n.getJSType() != null && parent.isAssign()) {
      return;
     } else if (validator.expectNotNullOrUndefined(t, n, childType,
         ""No properties on this expression"", getNativeType(OBJECT_TYPE))) {
       checkPropertyAccess(childType, property.getString(), t, n);
","
 
     if (childType.isDict()) {
       report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, ""'.'"", ""dict"");
     } else if (validator.expectNotNullOrUndefined(t, n, childType,
         ""No properties on this expression"", getNativeType(OBJECT_TYPE))) {
       checkPropertyAccess(childType, property.getString(), t, n);
"
"37","junit.framework.AssertionFailedError","/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java","
   }
 
   private boolean hasExceptionHandler(Node cfgNode) {
    return false;
   }
 
","
   }
 
   private boolean hasExceptionHandler(Node cfgNode) {
    List<DiGraphEdge<Node, Branch>> branchEdges = getCfg().getOutEdges(cfgNode);
    for (DiGraphEdge<Node, Branch> edge : branchEdges) {
      if (edge.getValue() == Branch.ON_EX) {
        return true;
      }
    }
     return false;
   }
 
"
"38","junit.framework.AssertionFailedError","/src/com/google/javascript/jscomp/NodeUtil.java","
 
   static boolean mayBeString(Node n, boolean recurse) {
     if (recurse) {
      return allResultsMatch(n, MAY_BE_STRING_PREDICATE);
     } else {
       return mayBeStringHelper(n);
     }
","
 
   static boolean mayBeString(Node n, boolean recurse) {
     if (recurse) {
      return anyResultsMatch(n, MAY_BE_STRING_PREDICATE);
     } else {
       return mayBeStringHelper(n);
     }
"
"39","junit.framework.AssertionFailedError","/src/com/google/javascript/jscomp/ControlFlowAnalysis.java","
         } else if (parent.getLastChild() == node){
           if (cfa != null) {
             for (Node finallyNode : cfa.finallyMap.get(parent)) {
              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);
             }
           }
           return computeFollowNode(fromNode, parent, cfa);
","
         } else if (parent.getLastChild() == node){
           if (cfa != null) {
             for (Node finallyNode : cfa.finallyMap.get(parent)) {
              cfa.createEdge(fromNode, Branch.ON_EX, finallyNode);
             }
           }
           return computeFollowNode(fromNode, parent, cfa);
"
"40","junit.framework.ComparisonFailure","/src/com/google/javascript/jscomp/TypedScopeCreator.java","
           if (info.isConstant()) {
             JSType knownType = null;
             if (rValue != null) {
              if (rValue.getJSType() != null && !rValue.getJSType().isUnknownType()) {
                                                                    return rValue.getJSType();
","
           if (info.isConstant()) {
             JSType knownType = null;
             if (rValue != null) {
              JSDocInfo rValueInfo = rValue.getJSDocInfo();
              if (rValueInfo != null && rValueInfo.hasType()) {
                                 return rValueInfo.getType().evaluate(scope, typeRegistry);
              } else if (rValue.getJSType() != null
                  && !rValue.getJSType().isUnknownType()) {
                                                   return rValue.getJSType();
"
"41","junit.framework.AssertionFailedError","/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java","
     do {
       Node c = node.getFirstChild();
       while(c != null) {
        traverse(c);
         Node next = c.getNext();
         c = next;
       }
 
","
     do {
       Node c = node.getFirstChild();
       while(c != null) {
         Node next = c.getNext();
        traverse(c);
         c = next;
       }
 
"
"42","junit.framework.AssertionFailedError","/src/com/google/javascript/jscomp/CheckSideEffects.java","
                   if (n.isExprResult()) {
       return;
     }
 

 
     boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);
     boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());
    if (parent.getType() == Token.COMMA) {
      if (isResultUsed) {
        return;
      }
      if (n == parent.getLastChild()) {
        for (Node an : parent.getAncestors()) {
          int ancestorType = an.getType();
          if (ancestorType == Token.COMMA) continue;
          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;
          else break;
        }
      }
    } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {
      if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {
        return;
      }
    }
    if (
    if (!isResultUsed &&
         (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {
       String msg = ""This code lacks side-effects. Is there a bug?"";
       if (n.isString()) {
","
                   if (n.isExprResult() || n.isBlock()) {
       return;
     }
 

 
     boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);
     boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());
    if (!isResultUsed &&
         (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {
       String msg = ""This code lacks side-effects. Is there a bug?"";
       if (n.isString()) {
"
"43","junit.framework.AssertionFailedError","/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java","
           return true;
         }
 
         for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
           if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {
","
           return true;
         }
 
        if (n.isDelProp()) {
          return true;
        }
 
         for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
           if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {
"
"44","junit.framework.AssertionFailedError","/src/com/google/javascript/jscomp/ScopedAliases.java","
 
   private class AliasedTypeNode implements AliasUsage {
     private final Node typeReference;
     private final String aliasName;
 
    AliasedTypeNode(Node typeReference,
         String aliasName) {
       this.typeReference = typeReference;
       this.aliasName = aliasName;
     }
 
     @Override
     public void applyAlias() {
      typeReference.setString(aliasName);
     }
   }
 

         Var aliasVar = aliases.get(baseName);
         if (aliasVar != null) {
           Node aliasedNode = aliasVar.getInitialValue();
          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));
         }
       }
 
","
 
   private class AliasedTypeNode implements AliasUsage {
     private final Node typeReference;
    private final Node aliasDefinition;
     private final String aliasName;
 
    AliasedTypeNode(Node typeReference, Node aliasDefinition,
         String aliasName) {
       this.typeReference = typeReference;
      this.aliasDefinition = aliasDefinition;
       this.aliasName = aliasName;
     }
 
     @Override
     public void applyAlias() {
      String typeName = typeReference.getString();
      String aliasExpanded =
          Preconditions.checkNotNull(aliasDefinition.getQualifiedName());
      Preconditions.checkState(typeName.startsWith(aliasName));
      typeReference.setString(typeName.replaceFirst(aliasName, aliasExpanded));
     }
   }
 

         Var aliasVar = aliases.get(baseName);
         if (aliasVar != null) {
           Node aliasedNode = aliasVar.getInitialValue();
          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode, baseName));
         }
       }
 
"
"45","junit.framework.AssertionFailedError","/src/com/google/javascript/jscomp/Compiler.java","
 
              boolean staleInputs = false;
      if (options.dependencyOptions.needsManagement() && options.closurePass) {
         for (CompilerInput input : inputs) {
                      ","
 
              boolean staleInputs = false;
      if (options.dependencyOptions.needsManagement()) {
         for (CompilerInput input : inputs) {
                      "
"46","junit.framework.AssertionFailedError","/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java","
                     Node value = callTarget.getNext();
      if (value != null) {
         Node addition = IR.add(
             IR.string("""").srcref(callTarget),
             value.detachFromParent());
","
                     Node value = callTarget.getNext();
      if (value != null && value.getNext() == null &&
          NodeUtil.isImmutableValue(value)) {
         Node addition = IR.add(
             IR.string("""").srcref(callTarget),
             value.detachFromParent());
"
"47","java.lang.IllegalArgumentException","/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java","
         scope.inferQualifiedSlot(node, qualifiedName, origType, type);
         break;
 
          
       default:
         throw new IllegalArgumentException(""Node cannot be refined. \n"" +
","
         scope.inferQualifiedSlot(node, qualifiedName, origType, type);
         break;
 
      case Token.THIS:
                 break;
 
       default:
         throw new IllegalArgumentException(""Node cannot be refined. \n"" +
"
"48","junit.framework.AssertionFailedError","/src/com/google/javascript/jscomp/PeepholeFoldConstants.java","
 
     Node current = left.getFirstChild();
     Node elem = null;
    for (int i = 0; current != null && i < intIndex; i++) {
         elem = current;
 
       current = current.getNext();
     }
","
 
     Node current = left.getFirstChild();
     Node elem = null;
    for (int i = 0; current != null; i++) {
      if (i != intIndex) {
        if (mayHaveSideEffects(current)) {
          return n;
        }
      } else {
         elem = current;
      }
 
       current = current.getNext();
     }
"
"49","junit.framework.AssertionFailedError","/src/com/google/javascript/jscomp/ScopedAliases.java","
         Node n = v.getNode();
         int type = n.getType();
         Node parent = n.getParent();
        if (parent.isVar()) {
          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
           String name = n.getString();
           Var aliasVar = scope.getVar(name);
           aliases.put(name, aliasVar);

           String qualifiedName =
               aliasVar.getInitialValue().getQualifiedName();
           transformation.addAlias(name, qualifiedName);
                                                     } else {
                      report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
         }
        }
       }
     }
 
","
         Node n = v.getNode();
         int type = n.getType();
         Node parent = n.getParent();
        if (parent.isVar() &&
            n.hasChildren() && n.getFirstChild().isQualifiedName()) {
           String name = n.getString();
           Var aliasVar = scope.getVar(name);
           aliases.put(name, aliasVar);

           String qualifiedName =
               aliasVar.getInitialValue().getQualifiedName();
           transformation.addAlias(name, qualifiedName);
        } else if (v.isBleedingFunction()) {
                              } else if (parent.getType() == Token.LP) {
                               } else {
                      report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
         }
       }
     }
 
"
"50","junit.framework.AssertionFailedError","/src/com/google/javascript/jscomp/CheckSideEffects.java","
                   if (parent.getType() == Token.COMMA) {
      Node gramps = parent.getParent();
      if (gramps.isCall() && parent == gramps.getFirstChild()) {
        if (n == parent.getFirstChild() && parent.getChildCount() == 2 && n.getNext().isName() && ""eval"".equals(n.getNext().getString())) {
       return;
        }
     }
 
                if (n == parent.getLastChild()) {
        for (Node an : parent.getAncestors()) {
          int ancestorType = an.getType();
          if (ancestorType == Token.COMMA)
            continue;
          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK)
            return;
          else
            break;
        }
      }
    } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {
      if (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() ||
           n == parent.getFirstChild().getNext().getNext())) {
      } else {
       return;
      }
     }
 
     boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);
     boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());
     if (!isResultUsed &&
         (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {
      if (n.isQualifiedName() && n.getJSDocInfo() != null) {
        return;
      } else if (n.isExprResult()) {
        return;
      }
       String msg = ""This code lacks side-effects. Is there a bug?"";
       if (n.isString()) {
         msg = ""Is there a missing '+' on the previous line?"";
","
                   if (n.isExprResult() || n.isBlock()) {
       return;
     }
 
              if (n.isQualifiedName() && n.getJSDocInfo() != null) {
       return;
     }
 
     boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);
     boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());
     if (!isResultUsed &&
         (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {
       String msg = ""This code lacks side-effects. Is there a bug?"";
       if (n.isString()) {
         msg = ""Is there a missing '+' on the previous line?"";
"
"51","junit.framework.AssertionFailedError","/src/com/google/javascript/jscomp/ProcessCommonJSModules.java","
       AbstractPostOrderCallback {
 
     private int scriptNodeCount = 0;
 
     @Override
     public void visit(NodeTraversal t, Node n, Node parent) {

      
     private void emitOptionalModuleExportsOverride(Node script,
         String moduleName) {
 
       Node moduleExportsProp = IR.getprop(IR.name(moduleName),
           IR.string(""module$exports""));

       Node exports = prop.getChildAtIndex(1);
       exports.putProp(Node.ORIGINALNAME_PROP, ""exports"");
       exports.setString(""module$exports"");
     }
","
       AbstractPostOrderCallback {
 
     private int scriptNodeCount = 0;
    private Set<String> modulesWithExports = Sets.newHashSet();
 
     @Override
     public void visit(NodeTraversal t, Node n, Node parent) {

      
     private void emitOptionalModuleExportsOverride(Node script,
         String moduleName) {
      if (!modulesWithExports.contains(moduleName)) {
        return;
      }
 
       Node moduleExportsProp = IR.getprop(IR.name(moduleName),
           IR.string(""module$exports""));

       Node exports = prop.getChildAtIndex(1);
       exports.putProp(Node.ORIGINALNAME_PROP, ""exports"");
       exports.setString(""module$exports"");
      modulesWithExports.add(moduleName);
     }
 
"
"52","junit.framework.ComparisonFailure","/src/com/google/javascript/jscomp/TypeInference.java","
   }
 
   private FlowScope traverseNew(Node n, FlowScope scope) {
 
     Node constructor = n.getFirstChild();
    scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {

         }
         if (ct != null && ct.isConstructor()) {
           type = ct.getInstanceType();
         }
       }
     }
     n.setJSType(type);
    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
      scope = traverse(arg, scope);
    }
     return scope;
   }
 
","
   }
 
   private FlowScope traverseNew(Node n, FlowScope scope) {
    scope = traverseChildren(n, scope);
 
     Node constructor = n.getFirstChild();
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {

         }
         if (ct != null && ct.isConstructor()) {
           type = ct.getInstanceType();
          backwardsInferenceFromCallSite(n, ct);
         }
       }
     }
     n.setJSType(type);
     return scope;
   }
 
"
"53","java.lang.IllegalStateException","/src/com/google/javascript/rhino/IR.java","
     return block;
   }
 
 
   public static Node script(Node ... stmts) {
     
   }
 
   public static Node tryFinally(Node tryBody, Node finallyBody) {
    Preconditions.checkState(tryBody.isLabelName());
    Preconditions.checkState(finallyBody.isLabelName());
     Node catchBody = block().copyInformationFrom(tryBody);
     return new Node(Token.TRY, tryBody, catchBody, finallyBody);
   }

   public static Node tryCatch(Node tryBody, Node catchNode) {
     Preconditions.checkState(tryBody.isBlock());
     Preconditions.checkState(catchNode.isCatch());
    Node catchBody = block(catchNode).copyInformationFrom(catchNode);
     return new Node(Token.TRY, tryBody, catchBody);
   }
 
","
     return block;
   }
 
  private static Node blockUnchecked(Node stmt) {
    return new Node(Token.BLOCK, stmt);
  }
 
   public static Node script(Node ... stmts) {
     
   }
 
   public static Node tryFinally(Node tryBody, Node finallyBody) {
    Preconditions.checkState(tryBody.isBlock());
    Preconditions.checkState(finallyBody.isBlock());
     Node catchBody = block().copyInformationFrom(tryBody);
     return new Node(Token.TRY, tryBody, catchBody, finallyBody);
   }

   public static Node tryCatch(Node tryBody, Node catchNode) {
     Preconditions.checkState(tryBody.isBlock());
     Preconditions.checkState(catchNode.isCatch());
    Node catchBody = blockUnchecked(catchNode).copyInformationFrom(catchNode);
     return new Node(Token.TRY, tryBody, catchBody);
   }
 
"
"54","junit.framework.AssertionFailedError","/src/com/google/javascript/jscomp/InlineObjectLiterals.java","
      
     private boolean isInlinableObject(List<Reference> refs) {
       boolean ret = false;
       for (Reference ref : refs) {
         Node name = ref.getNode();
         Node parent = ref.getParent();

                                            continue;
         }
 

             return false;
           }
 
 
           Node childVal = child.getFirstChild();
           ","
      
     private boolean isInlinableObject(List<Reference> refs) {
       boolean ret = false;
      Set<String> validProperties = Sets.newHashSet();
       for (Reference ref : refs) {
         Node name = ref.getNode();
         Node parent = ref.getParent();

                                           String propName = parent.getLastChild().getString();
          if (!validProperties.contains(propName)) {
            if (NodeUtil.isVarOrSimpleAssignLhs(parent, gramps)) {
              validProperties.add(propName);
            } else {
              return false;
            }
          }
           continue;
         }
 

             return false;
           }
 
          validProperties.add(child.getString());
 
           Node childVal = child.getFirstChild();
           "
"55","junit.framework.AssertionFailedError","/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java","
 
   @Override
   public void process(Node externs, Node root) {
    (new NodeTraversal(compiler, this)).traverse(root);
   }
 
   @Override

   private static class Definition {
     final Node node;
     final Set<Var> depends = Sets.newHashSet();
 
     Definition(Node node) {
       this.node = node;

         new AbstractCfgNodeTraversalCallback() {
       @Override
       public void visit(NodeTraversal t, Node n, Node parent) {
        if (n.isName() && jsScope.isDeclared(n.getString(), true)) {
           Var dep = jsScope.getVar(n.getString());
             def.depends.add(dep);
         }
       }
     });

     GraphNode<Node, Branch> n = getCfg().getNode(useNode);
     FlowState<MustDef> state = n.getAnnotation();
     Definition def = state.getIn().reachingDef.get(jsScope.getVar(name));
 
     for (Var s : def.depends) {
       if (s.scope != jsScope) {
","
 
   @Override
   public void process(Node externs, Node root) {
    (new NodeTraversal(compiler, this)).traverseRoots(externs, root);
   }
 
   @Override

   private static class Definition {
     final Node node;
     final Set<Var> depends = Sets.newHashSet();
    private boolean unknownDependencies = false;
 
     Definition(Node node) {
       this.node = node;

         new AbstractCfgNodeTraversalCallback() {
       @Override
       public void visit(NodeTraversal t, Node n, Node parent) {
        if (n.isName()) {
           Var dep = jsScope.getVar(n.getString());
          if (dep == null) {
            def.unknownDependencies = true;
          } else {
             def.depends.add(dep);
          }
         }
       }
     });

     GraphNode<Node, Branch> n = getCfg().getNode(useNode);
     FlowState<MustDef> state = n.getAnnotation();
     Definition def = state.getIn().reachingDef.get(jsScope.getVar(name));
    if (def.unknownDependencies) {
      return true;
    }
 
     for (Var s : def.depends) {
       if (s.scope != jsScope) {
"
"56","junit.framework.AssertionFailedError","/src/com/google/javascript/jscomp/Compiler.java","
 
              if (options.dependencyOptions.needsManagement() &&
          !options.skipAllPasses &&
           options.closurePass) {
         for (CompilerInput input : inputs) {
           ","
 
              if (options.dependencyOptions.needsManagement() &&
           options.closurePass) {
         for (CompilerInput input : inputs) {
           "
57,"junit.framework.ComparisonFailure","/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java","
                
     do {
       switch (token) {
         case STAR:
           if (ignoreStar) {
                        } else {
                          if (builder.length() > 0) {

           }
 
           ignoreStar = true;
           token = next();
           continue;
 

           ignoreStar = false;
           state = State.SEARCHING_ANNOTATION;
 
                
           if (token == JsDocToken.EOC ||
               token == JsDocToken.EOF ||

             return new ExtractionInfo(multilineText, token);
           }
 
          if (builder.length() > 0) {
            builder.append(' ');
          }
           builder.append(toString(token));
 
           line = stream.getRemainingJSDocLine();
","
                   int lineStartChar = -1;
 
     do {
       switch (token) {
         case STAR:
           if (ignoreStar) {
                         lineStartChar = stream.getCharno() + 1;
           } else {
                          if (builder.length() > 0) {

           }
 
           ignoreStar = true;
          lineStartChar = 0;
           token = next();
           continue;
 

           ignoreStar = false;
           state = State.SEARCHING_ANNOTATION;
 
          boolean isEOC = token == JsDocToken.EOC;
          if (!isEOC) {
            if (lineStartChar != -1 && option == WhitespaceOption.PRESERVE) {
              int numSpaces = stream.getCharno() - lineStartChar;
              for (int i = 0; i < numSpaces; i++) {
                builder.append(' ');
              }
              lineStartChar = -1;
            } else if (builder.length() > 0) {
                             builder.append(' ');
            }
          }
 
           if (token == JsDocToken.EOC ||
               token == JsDocToken.EOF ||

             return new ExtractionInfo(multilineText, token);
           }
 
           builder.append(toString(token));
 
           line = stream.getRemainingJSDocLine();
"
58,"junit.framework.AssertionFailedError","/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java","
   @Override
   public void matchConstraint(ObjectType constraintObj) {
      
          ","
   @Override
   public void matchConstraint(ObjectType constraintObj) {
         if (hasReferenceName()) {
      return;
    }
 
          "
59,"junit.framework.AssertionFailedError","/src/com/google/javascript/jscomp/InlineCostEstimator.java","
 }
","
    void addConstant(String newcode) {
      add(""0"");
    }
   }
 }
"
60,"java.lang.StackOverflowError","/src/com/google/javascript/jscomp/CodeGenerator.java","
         cc.addOp(opstr, true);
         addExpr(last, p, rhsContext);
       } else {
        addExpr(first, p, context);
        cc.addOp(opstr, true);
        addExpr(last, p + 1, rhsContext);
       }
       return;
     }

     Node current = firstNonOperator;
     do {
       current = current.getParent();
      cc.listSeparator();
       addExpr(current.getFirstChild().getNext(), rightPrecedence, rhsContext);
     } while (current != n);
   }

     @Override
     void appendOp(String op, boolean binOp) {
       if (binOp) {
        if (getLastChar() != ' ') {
           append("" "");
         }
         append(op);
","
         cc.addOp(opstr, true);
         addExpr(last, p, rhsContext);
       } else {
        unrollBinaryOperator(n, type, opstr, context, rhsContext, p, p + 1);
       }
       return;
     }

     Node current = firstNonOperator;
     do {
       current = current.getParent();
      cc.addOp(opStr, true);
       addExpr(current.getFirstChild().getNext(), rightPrecedence, rhsContext);
     } while (current != n);
   }

     @Override
     void appendOp(String op, boolean binOp) {
       if (binOp) {
        if (getLastChar() != ' ' && op.charAt(0) != ',') {
           append("" "");
         }
         append(op);
"
61,"junit.framework.AssertionFailedError","/src/com/google/javascript/jscomp/TypeInference.java","
 
     ObjectType constraintObj =
         ObjectType.cast(constraint.restrictByNotNullOrUndefined());
    if (constraintObj != null && constraintObj.isRecordType()) {
      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());
      if (objType != null) {
        for (String prop : constraintObj.getOwnPropertyNames()) {
          JSType propType = constraintObj.getPropertyType(prop);
          if (!objType.isPropertyTypeDeclared(prop)) {
            JSType typeToInfer = propType;
            if (!objType.hasProperty(prop)) {
              typeToInfer =
                  getNativeType(VOID_TYPE).getLeastSupertype(propType);
            }
            objType.defineInferredProperty(prop, typeToInfer, null);
          }
        }
      }
     }
   }
 
","
 
     ObjectType constraintObj =
         ObjectType.cast(constraint.restrictByNotNullOrUndefined());
    if (constraintObj != null) {
      type.matchConstraint(constraintObj);
     }
   }
 
"
62,"java.lang.RuntimeException","/src/com/google/javascript/jscomp/NodeTraversal.java","
 
          Preconditions.checkState(body.getNext() == null &&
            body.isBlock());
     traverseBranch(body, n);
 
     popScope();

       node.addChildToBack(lp);
 
       Node bodyNode = transform(functionNode.getBody());
                                  parseDirectives(bodyNode);
       node.addChildToBack(bodyNode);
      return node;
","
 
          Preconditions.checkState(body.getNext() == null &&
            body.isBlock(), body);
     traverseBranch(body, n);
 
     popScope();

       node.addChildToBack(lp);
 
       Node bodyNode = transform(functionNode.getBody());
      if (!bodyNode.isBlock()) {
                                   Preconditions.checkState(config.isIdeMode);
        bodyNode = IR.block();
      }
       parseDirectives(bodyNode);
       node.addChildToBack(bodyNode);
      return node;
"
63,"junit.framework.AssertionFailedError","/src/com/google/javascript/jscomp/InlineVariables.java","
 
                               }
       }
 
","
 
                                if (convention.getSingletonGetterClassName(callNode) != null) {
            return false;
          }
         }
       }
 
"
64,"junit.framework.ComparisonFailure","/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java","
 
         sb.append(property);
         sb.append("": "");
        sb.append(getPropertyType(property).toString());
 
         ++i;
        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
           sb.append("", ..."");
           break;
         }

       prettyPrint = true;
       return sb.toString();
     } else {
      return ""{...}"";
     }
   }
 
","
 
         sb.append(property);
         sb.append("": "");
        sb.append(getPropertyType(property).toStringHelper(forAnnotations));
 
         ++i;
        if (!forAnnotations && i == MAX_PRETTY_PRINTED_PROPERTIES) {
           sb.append("", ..."");
           break;
         }

       prettyPrint = true;
       return sb.toString();
     } else {
      return forAnnotations ? ""?"" : ""{...}"";
     }
   }
 
"
65,"junit.framework.AssertionFailedError","/src/com/google/javascript/jscomp/RemoveUnusedVars.java","
             assignedToUnknownValue = true;
           }
 
           for (Assign assign : assignsByVar.get(var)) {
             if (assign.isPropertyAssign) {
               hasPropertyAssign = true;

                 assign.assignNode.getLastChild(), true)) {
               assignedToUnknownValue = true;
             }
           }
 
          if (assignedToUnknownValue && hasPropertyAssign) {
             changes = markReferencedVar(var) || changes;
             maybeUnreferenced.remove(current);
             current--;

       this.nameNode = nameNode;
       this.isPropertyAssign = isPropertyAssign;
 
      this.maybeAliased = !assignNode.getParent().isExprResult();
       this.mayHaveSecondarySideEffects =
           maybeAliased ||
           NodeUtil.mayHaveSideEffects(assignNode.getFirstChild()) ||
","
             assignedToUnknownValue = true;
           }
 
          boolean maybeEscaped = false;
           for (Assign assign : assignsByVar.get(var)) {
             if (assign.isPropertyAssign) {
               hasPropertyAssign = true;

                 assign.assignNode.getLastChild(), true)) {
               assignedToUnknownValue = true;
             }
            if (assign.maybeAliased) {
              maybeEscaped = true;
            }
           }
 
          if ((assignedToUnknownValue || maybeEscaped) && hasPropertyAssign) {
             changes = markReferencedVar(var) || changes;
             maybeUnreferenced.remove(current);
             current--;

       this.nameNode = nameNode;
       this.isPropertyAssign = isPropertyAssign;
 
      this.maybeAliased = NodeUtil.isExpressionResultUsed(assignNode);
       this.mayHaveSecondarySideEffects =
           maybeAliased ||
           NodeUtil.mayHaveSideEffects(assignNode.getFirstChild()) ||
"
66,"junit.framework.ComparisonFailure","/src/com/google/javascript/jscomp/CodeConsumer.java","
          char prev = getLastChar();
     boolean negativeZero = isNegativeZero(x);
    if (x < 0 && prev == '-') {
       add("" "");
     }
 
","
          char prev = getLastChar();
     boolean negativeZero = isNegativeZero(x);
    if ((x < 0 || negativeZero) && prev == '-') {
       add("" "");
     }
 
"
67,"java.lang.RuntimeException","/src/com/google/javascript/jscomp/NameAnalyzer.java","
         Node nameNode = n.getFirstChild();
         NameInformation ns = createNameInformation(t, nameNode, n);
         if (ns != null && ns.onlyAffectsClassDef) {
          JsName name = getName(ns.name, false);
          if (name != null) {
           refNodes.add(new ClassDefiningFunctionNode(
               name, n, parent, parent.getParent()));
          }
         }
       }
     }
","
         Node nameNode = n.getFirstChild();
         NameInformation ns = createNameInformation(t, nameNode, n);
         if (ns != null && ns.onlyAffectsClassDef) {
          JsName name = getName(ns.name, true);
           refNodes.add(new ClassDefiningFunctionNode(
               name, n, parent, parent.getParent()));
         }
       }
     }
"
68,"junit.framework.AssertionFailedError","/src/com/google/javascript/jscomp/parsing/IRFactory.java","
 
     @Override
     Node processForInLoop(ForInLoop loopNode) {
 
                return newNode(
           Token.FOR,
           transform(loopNode.getIterator()),
","
 
     @Override
     Node processForInLoop(ForInLoop loopNode) {
      if (loopNode.isForEach()) {
        errorReporter.error(
            ""unsupported language extension: for each"",
            sourceName,
            loopNode.getLineno(), """", 0);
 
                 return newNode(Token.EXPR_RESULT, Node.newNumber(0));
      }
       return newNode(
           Token.FOR,
           transform(loopNode.getIterator()),
"
69,"junit.framework.AssertionFailedError","/src/com/google/javascript/jscomp/FunctionTypeBuilder.java","
       }
 
        
       parametersNode = paramBuilder.build();
     }

     }
 
      
     if (templateTypeName != null && !foundTemplateType) {
       reportError(TEMPLATE_TYPE_EXPECTED, fnName);
","
       }
 
             while (oldParams.hasNext()) {
        paramBuilder.newParameterFromNode(oldParams.next());
      }
 
       parametersNode = paramBuilder.build();
     }

     }
 
         if (!isVarArgs) {
      while (oldParameterType != null && !isVarArgs) {
        builder.newParameterFromNode(oldParameterType);
        oldParameterType = oldParameterType.getNext();
      }
    }
 
     if (templateTypeName != null && !foundTemplateType) {
       reportError(TEMPLATE_TYPE_EXPECTED, fnName);
"
70,"junit.framework.ComparisonFailure","/src/com/google/javascript/jscomp/CodeConsumer.java","
                     append("" "");
                                        }
 
     append(newcode);
","
                     append("" "");
    } else if (c == '/' && getLastChar() == '/') {
                                         append("" "");
     }
 
     append(newcode);
"
71,"junit.framework.ComparisonFailure","/src/com/google/javascript/jscomp/TypedScopeCreator.java","
   private JSType getNativeType(JSTypeNative nativeType) {
     return typeRegistry.getNativeType(nativeType);
   }
 
   private abstract class AbstractScopeBuilder
       implements NodeTraversal.Callback {
 
     final Scope scope;
 
     private final List<DeferredSetType> deferredSetTypes =
         Lists.newArrayList();
 
     private final List<Node> nonExternFunctions = Lists.newArrayList();
 
 
     private final List<StubDeclaration> stubDeclarations =
         Lists.newArrayList();
      private String sourceName = null;
 
     private InputId inputId;
 

     public void visit(NodeTraversal t, Node n, Node parent) {
       inputId = t.getInputId();
       attachLiteralTypes(t, n);
 
       switch (n.getType()) {
         case Token.CALL:
           checkForClassDefiningCalls(t, n, parent);
           checkForCallingConventionDefiningCalls(n, delegateCallingConventions);
           break;
 
         case Token.FUNCTION:
           if (t.getInput() == null || !t.getInput().isExtern()) {
             nonExternFunctions.add(n);
           }
 
                      if (!NodeUtil.isHoistedFunctionDeclaration(n)) {
             defineFunctionLiteral(n, parent);
           }
           break;
 
         case Token.ASSIGN:
                      Node firstChild = n.getFirstChild();
           if (firstChild.isGetProp() &&
               firstChild.isQualifiedName()) {
             maybeDeclareQualifiedName(t, n.getJSDocInfo(),
                 firstChild, n, firstChild.getNext());
           }
           break;
 
         case Token.CATCH:
           defineCatch(n, parent);
           break;
 
         case Token.VAR:
           defineVar(n, parent);
           break;
 
         case Token.GETPROP:
                      if (parent.isExprResult() &&
               n.isQualifiedName()) {
             maybeDeclareQualifiedName(t, n.getJSDocInfo(), n, parent, null);
           }
           break;
       }
 
            }
 
     private void attachLiteralTypes(NodeTraversal t, Node n) {
       switch (n.getType()) {
         case Token.NULL:
           n.setJSType(getNativeType(NULL_TYPE));
           break;
 
         case Token.VOID:
           n.setJSType(getNativeType(VOID_TYPE));
           break;
 
         case Token.STRING:
                      if (!NodeUtil.isObjectLitKey(n, n.getParent())) {
             n.setJSType(getNativeType(STRING_TYPE));
           }
           break;
 
         case Token.NUMBER:
           n.setJSType(getNativeType(NUMBER_TYPE));
           break;
 
         case Token.TRUE:
         case Token.FALSE:
           n.setJSType(getNativeType(BOOLEAN_TYPE));
           break;
 
         case Token.REGEXP:
           n.setJSType(getNativeType(REGEXP_TYPE));
           break;
 
         case Token.OBJECTLIT:
             defineObjectLiteral(n);
           break;
 
                             }
     }
 
","
   private JSType getNativeType(JSTypeNative nativeType) {
     return typeRegistry.getNativeType(nativeType);
   }
 
   private abstract class AbstractScopeBuilder
       implements NodeTraversal.Callback {     final Scope scope;
 
     private final List<DeferredSetType> deferredSetTypes =
         Lists.newArrayList();     private final List<Node> nonExternFunctions = Lists.newArrayList();
 
    private List<Node> lentObjectLiterals = null;
 
     private final List<StubDeclaration> stubDeclarations =
         Lists.newArrayList();
 
     private String sourceName = null;
 
     private InputId inputId;
 

     public void visit(NodeTraversal t, Node n, Node parent) {
       inputId = t.getInputId();
       attachLiteralTypes(t, n);
 
       switch (n.getType()) {
         case Token.CALL:
           checkForClassDefiningCalls(t, n, parent);
           checkForCallingConventionDefiningCalls(n, delegateCallingConventions);
           break;
 
         case Token.FUNCTION:
           if (t.getInput() == null || !t.getInput().isExtern()) {
             nonExternFunctions.add(n);
           }
 
                      if (!NodeUtil.isHoistedFunctionDeclaration(n)) {
             defineFunctionLiteral(n, parent);
           }
           break;
 
         case Token.ASSIGN:
                      Node firstChild = n.getFirstChild();
           if (firstChild.isGetProp() &&
               firstChild.isQualifiedName()) {
             maybeDeclareQualifiedName(t, n.getJSDocInfo(),
                 firstChild, n, firstChild.getNext());
           }
           break;
 
         case Token.CATCH:
           defineCatch(n, parent);
           break;
 
         case Token.VAR:
           defineVar(n, parent);
           break;
 
         case Token.GETPROP:
                      if (parent.isExprResult() &&
               n.isQualifiedName()) {
             maybeDeclareQualifiedName(t, n.getJSDocInfo(), n, parent, null);
           }
           break;
       }
 
             if (n.getParent() != null && NodeUtil.isStatement(n) &&
          lentObjectLiterals != null) {
        for (Node objLit : lentObjectLiterals) {
          defineObjectLiteral(objLit);
        }
        lentObjectLiterals.clear();
      }
     }
 
     private void attachLiteralTypes(NodeTraversal t, Node n) {
       switch (n.getType()) {
         case Token.NULL:
           n.setJSType(getNativeType(NULL_TYPE));
           break;
 
         case Token.VOID:
           n.setJSType(getNativeType(VOID_TYPE));
           break;
 
         case Token.STRING:
                      if (!NodeUtil.isObjectLitKey(n, n.getParent())) {
             n.setJSType(getNativeType(STRING_TYPE));
           }
           break;
 
         case Token.NUMBER:
           n.setJSType(getNativeType(NUMBER_TYPE));
           break;
 
         case Token.TRUE:
         case Token.FALSE:
           n.setJSType(getNativeType(BOOLEAN_TYPE));
           break;
 
         case Token.REGEXP:
           n.setJSType(getNativeType(REGEXP_TYPE));
           break;
 
         case Token.OBJECTLIT:
          JSDocInfo info = n.getJSDocInfo();
          if (info != null &&
              info.getLendsName() != null) {
            if (lentObjectLiterals == null) {
              lentObjectLiterals = Lists.newArrayList();
            }
            lentObjectLiterals.add(n);
          } else {
             defineObjectLiteral(n);
          }
           break;
 
                             }
     }
 
"
72,"junit.framework.AssertionFailedError","/src/com/google/javascript/rhino/jstype/RecordType.java","
         propertyNode);
   }
 
  @Override
  public JSType getLeastSupertype(JSType that) {
    if (!that.isRecordType()) {
      return super.getLeastSupertype(that);
    }
    RecordTypeBuilder builder = new RecordTypeBuilder(registry);
    for (String property : properties.keySet()) {
      if (that.toMaybeRecordType().hasProperty(property) &&
          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(
              getPropertyType(property))) {
        builder.addProperty(property, getPropertyType(property),
            getPropertyNode(property));
      }
    }
    return builder.build();
  }
   JSType getGreatestSubtypeHelper(JSType that) {
     if (that.isRecordType()) {
       RecordType thatRecord = that.toMaybeRecordType();
","
         propertyNode);
   }
 
   JSType getGreatestSubtypeHelper(JSType that) {
     if (that.isRecordType()) {
       RecordType thatRecord = that.toMaybeRecordType();
"
73,"junit.framework.AssertionFailedError","/src/com/google/debugging/sourcemap/SourceMapConsumerV3.java","
              Builder x = OriginalMapping.newBuilder()
         .setOriginalFile(sources[entry.getSourceFileId()])
        .setLineNumber(entry.getSourceLine())
        .setColumnPosition(entry.getSourceColumn());
       if (entry.getNameId() != UNMAPPED) {
         x.setIdentifier(names[entry.getNameId()]);
       }

                
     generator.addMapping(
         sourceFile, originalName,
        new FilePosition(node.getLineno(), node.getCharno()),
         outputStartPosition, outputEndPosition);
   }
 
","
              Builder x = OriginalMapping.newBuilder()
         .setOriginalFile(sources[entry.getSourceFileId()])
        .setLineNumber(entry.getSourceLine() + 1)
        .setColumnPosition(entry.getSourceColumn() + 1);
       if (entry.getNameId() != UNMAPPED) {
         x.setIdentifier(names[entry.getNameId()]);
       }

                   int lineBaseOffset = 1;
    if (generator instanceof SourceMapGeneratorV1
        || generator instanceof SourceMapGeneratorV2) {
      lineBaseOffset = 0;
    }
 
     generator.addMapping(
         sourceFile, originalName,
        new FilePosition(node.getLineno() - lineBaseOffset, node.getCharno()),
         outputStartPosition, outputEndPosition);
   }
 
"
74,"junit.framework.AssertionFailedError","/src/com/google/javascript/jscomp/TypedScopeCreator.java","
             || FunctionTypeBuilder.isFunctionTypeDeclaration(info));
       }
 
      if (inferred) {
                 inferred = !(rhsValue != null &&
            rhsValue.isFunction() &&
            (info != null || !scope.isDeclared(qName, false)));
       }
 
       if (!inferred) {
","
             || FunctionTypeBuilder.isFunctionTypeDeclaration(info));
       }
 
      if (inferred && rhsValue != null && rhsValue.isFunction()) {
                 if (info != null) {
          inferred = false;
        } else if (!scope.isDeclared(qName, false) &&
                   n.isUnscopedQualifiedName()) {
          inferred = false;
        }
       }
 
       if (!inferred) {
"
75,"junit.framework.AssertionFailedError","/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java","
       renamer = nameStack.peek().forChildScope();
     }
 
    if (declarationRoot.getType() == Token.FUNCTION) {
      for (Node c = declarationRoot.getFirstChild().getNext().getFirstChild(); c != null; c = c.getNext()) {
        String name = c.getString();
        renamer.addDeclaredName(name);
      }
      Node functionBody = declarationRoot.getLastChild();
      findDeclaredNames(functionBody, null, renamer);
    }  else 
     if (declarationRoot.getType() != Token.FUNCTION) {
              findDeclaredNames(declarationRoot, null, renamer);

             renamer.addDeclaredName(name);
           }
 
 
 
            
            
           nameStack.push(renamer);
         }

 
       case Token.FUNCTION:
                           nameStack.pop();
         break;
 
                            
       case Token.CATCH:
         ","
       renamer = nameStack.peek().forChildScope();
     }
 
     if (declarationRoot.getType() != Token.FUNCTION) {
              findDeclaredNames(declarationRoot, null, renamer);

             renamer.addDeclaredName(name);
           }
 
          nameStack.push(renamer);
        }
        break;
 
      case Token.LP: {
          Renamer renamer = nameStack.peek().forChildScope();
 
                     for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
            String name = c.getString();
            renamer.addDeclaredName(name);
          }
 
                     Node functionBody = n.getNext();
          findDeclaredNames(functionBody, null, renamer);
 
           nameStack.push(renamer);
         }

 
       case Token.FUNCTION:
                 nameStack.pop();
                  nameStack.pop();
         break;
 
      case Token.LP:
                                   break;
 
       case Token.CATCH:
         "
76,"junit.framework.AssertionFailedError","/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java","
 
     Node right = callTarget.getNext();
     if (right != null) {
      if (!NodeUtil.isImmutableValue(right)) {
         return n;
       }
     }

       return n;
     }
 
        
     String joinString = (right == null) ? "","" : NodeUtil.getStringValue(right);
     List<Node> arrayFoldedChildren = Lists.newLinkedList();
","
 
     Node right = callTarget.getNext();
     if (right != null) {
      if (right.getNext() != null || !NodeUtil.isImmutableValue(right)) {
         return n;
       }
     }

       return n;
     }
 
    if (right != null && right.getType() == Token.STRING
        && "","".equals(right.getString())) {
             n.removeChild(right);
      reportCodeChange();
    }
 
     String joinString = (right == null) ? "","" : NodeUtil.getStringValue(right);
     List<Node> arrayFoldedChildren = Lists.newLinkedList();
"
77,"java.lang.RuntimeException","/src/com/google/javascript/jscomp/InlineObjectLiterals.java","
       }
 
       Node replacement;
                           nodes.add(new Node(Token.TRUE));

         }
         cur.addChildToFront(nodes.get(i));
         cur.addChildToFront(nodes.get(i + 1));
 
       Node replace = ref.getParent();
       replacement.copyInformationFromForTree(replace);
","
       }
 
       Node replacement;
      if (nodes.isEmpty()) {
        replacement = new Node(Token.TRUE);
      } else {
                           nodes.add(new Node(Token.TRUE));

         }
         cur.addChildToFront(nodes.get(i));
         cur.addChildToFront(nodes.get(i + 1));
      }
 
       Node replace = ref.getParent();
       replacement.copyInformationFromForTree(replace);
"
78,"junit.framework.ComparisonFailure","/src/com/google/javascript/jscomp/CodeConsumer.java","
       add("" "");
     }
 
    if ((long) x == x) {
       long value = (long) x;
       long mantissa = value;
       int exp = 0;
","
       add("" "");
     }
 
    if ((long) x == x && !isNegativeZero(x)) {
       long value = (long) x;
       long mantissa = value;
       int exp = 0;
"
79,"junit.framework.ComparisonFailure","/src/com/google/javascript/jscomp/CodeGenerator.java","
         return false;
       }
     }
    return len > 0;
   }
 
   static double getSimpleNumber(String s) {
","
         return false;
       }
     }
    return len > 0 && s.charAt(0) != '0';
   }
 
   static double getSimpleNumber(String s) {
"
80,"junit.framework.AssertionFailedError","/src/com/google/javascript/jscomp/Compiler.java","
           CheckLevel.OFF);
     }
 
    if (options.checkGlobalThisLevel.isOn()) {
       options.setWarningLevel(
           DiagnosticGroups.GLOBAL_THIS,
           options.checkGlobalThisLevel);
","
           CheckLevel.OFF);
     }
 
    if (options.checkGlobalThisLevel.isOn() &&
        !options.disables(DiagnosticGroups.GLOBAL_THIS)) {
       options.setWarningLevel(
           DiagnosticGroups.GLOBAL_THIS,
           options.checkGlobalThisLevel);
"
81,"java.lang.IllegalStateException","/src/com/google/javascript/jscomp/FunctionRewriter.java","
   }
 
   private static boolean isReduceableFunctionExpression(Node n) {
    return NodeUtil.isFunctionExpression(n);
   }
","
   }
 
   private static boolean isReduceableFunctionExpression(Node n) {
    return NodeUtil.isFunctionExpression(n)
        && !NodeUtil.isGetOrSetKey(n.getParent());
   }
"
82,"junit.framework.ComparisonFailure","/src/com/google/javascript/jscomp/TypedScopeCreator.java","
                                           if (!qVar.isTypeInferred()) {

               if (baseType.hasReferenceName() ||
        baseType.isUnknownType() ||
         isNativeObjectType() ||
         baseType.isFunctionPrototypeType() ||
         !(baseType instanceof PrototypeObjectType)) {

       return false;
     }
 
    boolean replacedPrototype = prototype != null;
 
     this.prototype = prototype;
     this.prototypeSlot = new SimpleSlot(""prototype"", prototype, true);
     this.prototype.setOwnerFunction(this);
 
               
     if (isConstructor() || isInterface()) {
       FunctionType superClass = getSuperClassConstructor();
","
                                           ObjectType qVarType = ObjectType.cast(qVar.getType());
          if (qVarType != null &&
              rhsValue != null &&
              rhsValue.getType() == Token.OBJECTLIT) {
            typeRegistry.resetImplicitPrototype(
                rhsValue.getJSType(), qVarType.getImplicitPrototype());
          } else if (!qVar.isTypeInferred()) {

               if (baseType.hasReferenceName() ||
         isNativeObjectType() ||
         baseType.isFunctionPrototypeType() ||
         !(baseType instanceof PrototypeObjectType)) {

       return false;
     }
 
    PrototypeObjectType oldPrototype = this.prototype;
    boolean replacedPrototype = oldPrototype != null;
 
     this.prototype = prototype;
     this.prototypeSlot = new SimpleSlot(""prototype"", prototype, true);
     this.prototype.setOwnerFunction(this);
 
    if (oldPrototype != null) {
                    oldPrototype.setOwnerFunction(null);
    }
 
     if (isConstructor() || isInterface()) {
       FunctionType superClass = getSuperClassConstructor();
"
83,"junit.framework.ComparisonFailure","/src/com/google/javascript/jscomp/SourceFile.java","
                              return null;
     } else {
       return js.substring(pos, js.indexOf('\n', pos));
     }
","
                           if (pos >= js.length()) {
         return null;
      } else {
        return js.substring(pos, js.length());
      }
     } else {
       return js.substring(pos, js.indexOf('\n', pos));
     }
"
84,"java.lang.IllegalStateException","/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java","
                          lhs = lhs.getLastChild();
           }
             addToSetIfLocal(lhs, kill);
             addToSetIfLocal(lhs, gen);
           computeGenKill(rhs, gen, kill, conditional);
         }
         return;
","
                          lhs = lhs.getLastChild();
           }
          if (NodeUtil.isName(lhs)) {
             addToSetIfLocal(lhs, kill);
             addToSetIfLocal(lhs, gen);
          } else {
            computeGenKill(lhs, gen, kill, conditional);
          }
           computeGenKill(rhs, gen, kill, conditional);
         }
         return;
"
85,"junit.framework.AssertionFailedError","/src/com/google/javascript/jscomp/ClosureCodingConvention.java","
         String qualifiedName = callee.getQualifiedName();
         if (functionName.equals(qualifiedName)) {
           Node target = callee.getNext();
          if (target != null) {
             className = target.getString();
           }
         }
","
         String qualifiedName = callee.getQualifiedName();
         if (functionName.equals(qualifiedName)) {
           Node target = callee.getNext();
          if (target != null && target.getType() == Token.STRING) {
             className = target.getString();
           }
         }
"
86,"junit.framework.ComparisonFailure","/src/com/google/javascript/jscomp/LightweightMessageFormatter.java","
                     if (excerpt.equals(LINE)
          && 0 <= charno && charno < sourceExcerpt.length()) {
         for (int i = 0; i < charno; i++) {
           char c = sourceExcerpt.charAt(i);
           if (Character.isWhitespace(c)) {
","
                     if (excerpt.equals(LINE)
          && 0 <= charno && charno <= sourceExcerpt.length()) {
         for (int i = 0; i < charno; i++) {
           char c = sourceExcerpt.charAt(i);
           if (Character.isWhitespace(c)) {
"
87,"junit.framework.AssertionFailedError","/src/com/google/javascript/jscomp/NodeUtil.java","
                  return TernaryValue.TRUE;
 
 
       default:
         return getPureBooleanValue(n);

         return TernaryValue.FALSE;
 
       case Token.VOID:
           return TernaryValue.FALSE;
 
       case Token.NAME:
         String name = n.getString();
","
                  return TernaryValue.TRUE;
 
      case Token.VOID:
        return TernaryValue.FALSE;
 
       default:
         return getPureBooleanValue(n);

         return TernaryValue.FALSE;
 
       case Token.VOID:
        if (!mayHaveSideEffects(n.getFirstChild())) {
           return TernaryValue.FALSE;
        }
        break;
 
       case Token.NAME:
         String name = n.getString();
"
88,"junit.framework.ComparisonFailure","/src/com/google/javascript/jscomp/LightweightMessageFormatter.java","
                     if (excerpt.equals(LINE)
          && 0 <= charno && charno < sourceExcerpt.length()) {
         for (int i = 0; i < charno; i++) {
           char c = sourceExcerpt.charAt(i);
           if (Character.isWhitespace(c)) {
","
                     if (excerpt.equals(LINE)
          && 0 <= charno && charno <= sourceExcerpt.length()) {
         for (int i = 0; i < charno; i++) {
           char c = sourceExcerpt.charAt(i);
           if (Character.isWhitespace(c)) {
"
89,"junit.framework.AssertionFailedError","/src/com/google/javascript/jscomp/NodeUtil.java","
       }
 
        
       if (compiler != null && !compiler.hasRegExpGlobalReferences()) {
         if (nameNode.getFirstChild().getType() == Token.REGEXP
","
       }
 
             if (nameNode.getFirstChild().getType() == Token.NAME) {
        String namespaceName = nameNode.getFirstChild().getString();
        if (namespaceName.equals(""Math"")) {
          return false;
        }
      }
 
       if (compiler != null && !compiler.hasRegExpGlobalReferences()) {
         if (nameNode.getFirstChild().getType() == Token.REGEXP
"
90,"junit.framework.AssertionFailedError","/src/com/google/javascript/jscomp/Compiler.java","
 
                          String code = toSource(root, sourceMap);
         if (!code.isEmpty()) {
           cb.append(code);
 

   @Override
   String toSource(Node n) {
     initCompilerOptionsIfTesting();
    return toSource(n, null);
   }
 
  private String toSource(Node n, SourceMap sourceMap) {
     CodePrinter.Builder builder = new CodePrinter.Builder(n);
     builder.setPrettyPrint(options.prettyPrint);
     builder.setLineBreak(options.lineBreak);
     builder.setSourceMap(sourceMap);
     builder.setSourceMapDetailLevel(options.sourceMapDetailLevel);
    builder.setTagAsStrict(
         options.getLanguageOut() == LanguageMode.ECMASCRIPT5_STRICT);
     builder.setLineLengthThreshold(options.lineLengthThreshold);
 
","
 
                          String code = toSource(root, sourceMap, inputSeqNum == 0);
         if (!code.isEmpty()) {
           cb.append(code);
 

   @Override
   String toSource(Node n) {
     initCompilerOptionsIfTesting();
    return toSource(n, null, true);
   }
 
  private String toSource(Node n, SourceMap sourceMap, boolean firstOutput) {
     CodePrinter.Builder builder = new CodePrinter.Builder(n);
     builder.setPrettyPrint(options.prettyPrint);
     builder.setLineBreak(options.lineBreak);
     builder.setSourceMap(sourceMap);
     builder.setSourceMapDetailLevel(options.sourceMapDetailLevel);
    builder.setTagAsStrict(firstOutput &&
         options.getLanguageOut() == LanguageMode.ECMASCRIPT5_STRICT);
     builder.setLineLengthThreshold(options.lineLengthThreshold);
 
"
91,"junit.framework.ComparisonFailure","/src/com/google/javascript/jscomp/CodeGenerator.java","
     for (int i = 0; i < s.length(); i++) {
       char c = s.charAt(i);
       switch (c) {
        case '\0': sb.append(""\\0""); break;
         case '\n': sb.append(""\\n""); break;
         case '\r': sb.append(""\\r""); break;
         case '\t': sb.append(""\\t""); break;
","
     for (int i = 0; i < s.length(); i++) {
       char c = s.charAt(i);
       switch (c) {
        case '\0': sb.append(""\\000""); break;
         case '\n': sb.append(""\\n""); break;
         case '\r': sb.append(""\\r""); break;
         case '\t': sb.append(""\\t""); break;
"
92,"junit.framework.AssertionFailedError","/src/com/google/javascript/jscomp/TypeCheck.java","
                  if (!NodeUtil.isObjectLitKey(n, n.getParent())) {
           ensureTyped(t, n, STRING_TYPE);
                    }
         break;
 
","
                  if (!NodeUtil.isObjectLitKey(n, n.getParent())) {
           ensureTyped(t, n, STRING_TYPE);
        } else {
                     typeable = false;
         }
         break;
 
"
93,"junit.framework.ComparisonFailure","/src/com/google/javascript/jscomp/CodeGenerator.java","
                                                   if (c > 0x1f && c <= 0x7f) {
               sb.append(c);
             } else {
               ","
                                                   if (c > 0x1f && c < 0x7f) {
               sb.append(c);
             } else {
               "
94,"junit.framework.AssertionFailedError","/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java","
       Node n = assign.getFirstChild();
       if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
           && n.getType() == Token.GETPROP
          ) {
                  boolean isChainedProperty =
             n.getFirstChild().getType() == Token.GETPROP;
","
       Node n = assign.getFirstChild();
       if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
           && n.getType() == Token.GETPROP
          && assign.getParent().getType() == Token.EXPR_RESULT) {
                  boolean isChainedProperty =
             n.getFirstChild().getType() == Token.GETPROP;
"
95,"junit.framework.AssertionFailedError","/src/com/google/javascript/jscomp/PeepholeFoldConstants.java","
           && right.getString().equals(""undefined""))
           || (Token.VOID == right.getType()
               && NodeUtil.isLiteralValue(right.getFirstChild(), false)));
    int lhType = left.getType();
    int rhType = right.getType();
     switch (lhType) {
       case Token.VOID:
         if (!NodeUtil.isLiteralValue(left.getFirstChild(), false)) {

","
           && right.getString().equals(""undefined""))
           || (Token.VOID == right.getType()
               && NodeUtil.isLiteralValue(right.getFirstChild(), false)));
    int lhType = getNormalizedNodeType(left);
    int rhType = getNormalizedNodeType(right);
     switch (lhType) {
       case Token.VOID:
         if (!NodeUtil.isLiteralValue(left.getFirstChild(), false)) {

    int type = n.getType();
    if (type == Token.NOT) {
      TernaryValue value = NodeUtil.getPureBooleanValue(n);
      switch (value) {
        case TRUE:
          return Token.TRUE;
        case FALSE:
          return Token.FALSE;
      }
    }
    return type;
  }
"
96,"junit.framework.AssertionFailedError","/src/com/google/javascript/jscomp/CheckAccessControls.java","
     if (objectType != null) {
                    boolean isOverride = t.inGlobalScope() &&
           parent.getType() == Token.ASSIGN &&
           parent.getFirstChild() == getprop;
 
","
     if (objectType != null) {
                    boolean isOverride = parent.getJSDocInfo() != null &&
           parent.getType() == Token.ASSIGN &&
           parent.getFirstChild() == getprop;
 
"
97,"junit.framework.AssertionFailedError","/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java","
                         }
                         break;
                     }
 
                   token = eatTokensUntilEOL();
                  }
                   continue retry;
               }
             }

       }
     }
 
     return reportGenericTypeSyntaxWarning();
   }


               if (token != JsDocToken.LP) {
       return reportTypeSyntaxWarning(""msg.jsdoc.missing.lp"");
     }
 
","
                         }
                         break;
                     }
                  }
 
                   token = eatTokensUntilEOL();
                   continue retry;
               }
             }

       }
     }
 
    restoreLookAhead(token);
     return reportGenericTypeSyntaxWarning();
   }
 

               if (token != JsDocToken.LP) {
      restoreLookAhead(token);
       return reportTypeSyntaxWarning(""msg.jsdoc.missing.lp"");
     }
 
"
98,"junit.framework.AssertionFailedError","/src/com/google/javascript/jscomp/TypeCheck.java","
 
               
       visitParameterList(t, n, functionType);
       ensureTyped(t, n, functionType.getReturnType());
","
 
                    if (functionType.isOrdinaryFunction() &&
          !functionType.getTypeOfThis().isUnknownType() &&
          !functionType.getTypeOfThis().isNativeObjectType() &&
          !(child.getType() == Token.GETELEM ||
            child.getType() == Token.GETPROP)) {
        report(t, n, EXPECTED_THIS_TYPE, functionType.toString());
      }
 
       visitParameterList(t, n, functionType);
       ensureTyped(t, n, functionType.getReturnType());
"
99,"junit.framework.AssertionFailedError","/src/com/google/javascript/jscomp/TypedScopeCreator.java","
           for (Node astParameter : astParameters.children()) {
             if (jsDocParameter != null) {
               defineSlot(astParameter, functionNode,
                  jsDocParameter.getJSType(), true);
               jsDocParameter = jsDocParameter.getNext();
             } else {
               defineSlot(astParameter, functionNode, null, true);
","
           for (Node astParameter : astParameters.children()) {
             if (jsDocParameter != null) {
               defineSlot(astParameter, functionNode,
                  jsDocParameter.getJSType(), false);
               jsDocParameter = jsDocParameter.getNext();
             } else {
               defineSlot(astParameter, functionNode, null, true);
"
100,"junit.framework.AssertionFailedError","/src/com/google/javascript/jscomp/FunctionToBlockMutator.java","
                 ""inline_"",
                 isCallInLoop)));
        }
 
   static class LabelNameSupplier implements Supplier<String> {

       String name = nameNode.getString();
       LabelInfo li = getLabelInfo(name);
             if (li.referenced) {
         String newName = getNameForId(li.id);
         if (!name.equals(newName)) {
           ","
                 ""inline_"",
                 isCallInLoop)));
         new RenameLabels(compiler, new LabelNameSupplier(idSupplier), false)
        .process(null, fnNode);
   }
 
   static class LabelNameSupplier implements Supplier<String> {

       String name = nameNode.getString();
       LabelInfo li = getLabelInfo(name);
             if (li.referenced || !removeUnused) {
         String newName = getNameForId(li.id);
         if (!name.equals(newName)) {
           "
101,"junit.framework.AssertionFailedError","/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java","
                                  
         case Token.HOOK:
                                  
         default:
           for(Node sibling = n.getNext(); sibling != null;
               sibling = sibling.getNext()) {
            if (!ControlFlowGraph.isEnteringNewCfgNode(sibling)) {
             state = isVariableReadBeforeKill(sibling, variable);
 
              if (state == VariableLiveness.READ) {
         return true;
       } else if (state == VariableLiveness.KILL) {
         return false;
            }
          }
      }
       }
       n = n.getParent();
     }

    
   private VariableLiveness isVariableReadBeforeKill(
       Node n, String variable) {
 
     if (NodeUtil.isName(n) && variable.equals(n.getString())) {
       if (NodeUtil.isLhs(n, n.getParent())) {

              case Token.OR:
       case Token.AND:
                         case Token.HOOK:
         return checkHookBranchReadBeforeKill(
             n.getFirstChild().getNext(), n.getLastChild(), variable);
 

                  for (Node child = n.getFirstChild();
             child != null; child = child.getNext()) {
          if (!ControlFlowGraph.isEnteringNewCfgNode(child)) {            VariableLiveness state = isVariableReadBeforeKill(child, variable);
           if (state != VariableLiveness.MAYBE_LIVE) {
             return state;
           }
         }
      }
     }
 
     return VariableLiveness.MAYBE_LIVE;
","
                                           if (n.getNext() != null) {
            state = isVariableReadBeforeKill(
                n.getNext(), variable);
            if (state == VariableLiveness.KILL) {
              state = VariableLiveness.MAYBE_LIVE;
            }
          }
          break;
 
         case Token.HOOK:
                                           if (n.getNext() != null && n.getNext().getNext() != null) {
            state = checkHookBranchReadBeforeKill(
                n.getNext(), n.getNext().getNext(), variable);
          }
          break;
 
         default:
           for(Node sibling = n.getNext(); sibling != null;
               sibling = sibling.getNext()) {
             state = isVariableReadBeforeKill(sibling, variable);
            if (state != VariableLiveness.MAYBE_LIVE) {
              break;
            }
          }
      }
 
              if (state == VariableLiveness.READ) {
         return true;
       } else if (state == VariableLiveness.KILL) {
         return false;
       }
       n = n.getParent();
     }

    
   private VariableLiveness isVariableReadBeforeKill(
       Node n, String variable) {
    if (ControlFlowGraph.isEnteringNewCfgNode(n)) {       return VariableLiveness.MAYBE_LIVE;
    }
 
     if (NodeUtil.isName(n) && variable.equals(n.getString())) {
       if (NodeUtil.isLhs(n, n.getParent())) {

              case Token.OR:
       case Token.AND:
        VariableLiveness v1 = isVariableReadBeforeKill(
          n.getFirstChild(), variable);
        VariableLiveness v2 = isVariableReadBeforeKill(
          n.getLastChild(), variable);
                          if (v1 != VariableLiveness.MAYBE_LIVE) {
          return v1;
        } else if (v2 == VariableLiveness.READ) {
          return VariableLiveness.READ;
        } else {
          return VariableLiveness.MAYBE_LIVE;
        }
       case Token.HOOK:
        VariableLiveness first = isVariableReadBeforeKill(
            n.getFirstChild(), variable);
        if (first != VariableLiveness.MAYBE_LIVE) {
          return first;
        }
         return checkHookBranchReadBeforeKill(
             n.getFirstChild().getNext(), n.getLastChild(), variable);
 

                  for (Node child = n.getFirstChild();
             child != null; child = child.getNext()) {
           VariableLiveness state = isVariableReadBeforeKill(child, variable);
           if (state != VariableLiveness.MAYBE_LIVE) {
             return state;
           }
         }
     }
 
     return VariableLiveness.MAYBE_LIVE;
"
102,"java.lang.RuntimeException","/src/com/google/javascript/jscomp/Normalize.java","
   public void process(Node externs, Node root) {
     new NodeTraversal(
         compiler, new NormalizeStatements(compiler, assertOnChange))
        .traverse(root);
     if (MAKE_LOCAL_NAMES_UNIQUE) {
       MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();
       NodeTraversal t = new NodeTraversal(compiler, renamer);

     getSynthesizedExternsRoot().addChildToBack(
         new Node(Token.VAR, nameNode));
     varsToDeclareInExterns.remove(varName);
   }
 
","
   public void process(Node externs, Node root) {
     new NodeTraversal(
         compiler, new NormalizeStatements(compiler, assertOnChange))
        .traverseRoots(externs, root);
     if (MAKE_LOCAL_NAMES_UNIQUE) {
       MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();
       NodeTraversal t = new NodeTraversal(compiler, renamer);

     getSynthesizedExternsRoot().addChildToBack(
         new Node(Token.VAR, nameNode));
     varsToDeclareInExterns.remove(varName);
    compiler.reportCodeChange();
   }
 
"
103,"junit.framework.ComparisonFailure","/src/com/google/javascript/jscomp/CodeGenerator.java","
     for (int i = 0; i < s.length(); i++) {
       char c = s.charAt(i);
       switch (c) {
         case '\n': sb.append(""\\n""); break;
         case '\r': sb.append(""\\r""); break;
         case '\t': sb.append(""\\t""); break;
","
     for (int i = 0; i < s.length(); i++) {
       char c = s.charAt(i);
       switch (c) {
        case '\0': sb.append(""\\0""); break;
         case '\n': sb.append(""\\n""); break;
         case '\r': sb.append(""\\r""); break;
         case '\t': sb.append(""\\t""); break;
"
104,"junit.framework.AssertionFailedError","/src/com/google/javascript/jscomp/NodeUtil.java","
   }
 
   static Double getStringNumberValue(String rawJsString) {
        
     String s = trimJsWhiteSpace(rawJsString);
     
   static TernaryValue isStrWhiteSpaceChar(int c) {
     switch (c) {
       case '\u000B':         return TernaryValue.TRUE;
       case ' ':        case '\n':        case '\r': ","
   }
 
   static Double getStringNumberValue(String rawJsString) {
    if (rawJsString.contains(""\u000b"")) {
             return null;
    }
 
     String s = trimJsWhiteSpace(rawJsString);
     
   static TernaryValue isStrWhiteSpaceChar(int c) {
     switch (c) {
       case '\u000B':         return TernaryValue.UNKNOWN;         case ' ':        case '\n':        case '\r': "
105,"junit.framework.AssertionFailedError","/src/com/google/javascript/jscomp/PeepholeFoldConstants.java","
         break;
       case Token.MOD:
         if (rval == 0) {
          error(DiagnosticType.error(""JSC_DIVIDE_BY_0_ERROR"", ""Divide by 0""), right);
           return null;
         }
         result = lval % rval;
         break;
       case Token.DIV:
         if (rval == 0) {
          error(DiagnosticType.error(""JSC_DIVIDE_BY_0_ERROR"", ""Divide by 0""), right);
           return null;
         }
         result = lval / rval;
","
         break;
       case Token.MOD:
         if (rval == 0) {
           return null;
         }
         result = lval % rval;
         break;
       case Token.DIV:
         if (rval == 0) {
           return null;
         }
         result = lval / rval;
"
106,"junit.framework.AssertionFailedError","/src/com/google/javascript/jscomp/CommandLineRunner.java","
 
       @Override
       public int parseArguments(Parameters params) throws CmdLineException {
        String param = params.getParameter(0);
 
         if (param == null) {
           setter.addValue(true);
","
 
       @Override
       public int parseArguments(Parameters params) throws CmdLineException {
        String param = null;
        try {
          param = params.getParameter(0);
        } catch (CmdLineException e) {}
 
         if (param == null) {
           setter.addValue(true);
"
107,"junit.framework.AssertionFailedError","/src/com/google/javascript/jscomp/NodeUtil.java","
              case Token.NOT:
                return true;
       default:
         return false;

       case Token.OBJECTLIT:
                  return true;
       case Token.IN:
                  return true;
","
              case Token.NOT:
             case Token.DELPROP:
         return true;
       default:
         return false;

       case Token.OBJECTLIT:
                  return true;
      case Token.DELPROP:
       case Token.IN:
                  return true;
"
108,"junit.framework.AssertionFailedError","/src/com/google/javascript/jscomp/parsing/IRFactory.java","
       Name name = functionNode.getFunctionName();
       Boolean isUnnamedFunction = false;
       if (name == null) {
         name = new Name();
         name.setIdentifier("""");
         isUnnamedFunction = true;
","
       Name name = functionNode.getFunctionName();
       Boolean isUnnamedFunction = false;
       if (name == null) {
        int functionType = functionNode.getFunctionType();
        if (functionType != FunctionNode.FUNCTION_EXPRESSION) {
          errorReporter.error(
            ""unnamed function statement"",
            sourceName,
            functionNode.getLineno(), """", 0);
        }
         name = new Name();
         name.setIdentifier("""");
         isUnnamedFunction = true;
"
109,"junit.framework.AssertionFailedError","/src/com/google/javascript/rhino/jstype/JSType.java","
   }
 
   public final boolean isEmptyType() {
    return isNoType() || isNoObjectType() || isNoResolvedType();
   }
 
   public boolean isNumberObjectType() {
","
   }
 
   public final boolean isEmptyType() {
    return isNoType() || isNoObjectType() || isNoResolvedType() ||
        (registry.getNativeFunctionType(
             JSTypeNative.LEAST_FUNCTION_TYPE) == this);
   }
 
   public boolean isNumberObjectType() {
"
110,"junit.framework.AssertionFailedError","/src/com/google/javascript/jscomp/UnreachableCodeElimination.java","
       return n;
     }
 
    if (n.getParent() == null) {
      List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges();
      if (outEdges.size() == 1) {
        return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
      }
    }
     switch (n.getType()) {
      case Token.BLOCK:
        if (n.hasChildren()) {
          Node first = n.getFirstChild();
          return tryRemoveUnconditionalBranching(first);
        } else {
          return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
        }
       case Token.RETURN:
         if (n.hasChildren()) {
           break;

             (n.getNext() == null || n.getNext().getType() == Token.FUNCTION)) {
 
           Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);
          Node fallThrough = tryRemoveUnconditionalBranching(computeFollowing(n));
           Node nextCfgNode = outEdges.get(0).getDestination().getValue();
           if (nextCfgNode == fallThrough) {
             removeDeadExprStatementSafely(n);

 
   private Node computeFollowing(Node n) {
     Node next = ControlFlowAnalysis.computeFollowNode(n);
     return next;
   }
 
","
       return n;
     }
 
     switch (n.getType()) {
       case Token.RETURN:
         if (n.hasChildren()) {
           break;

             (n.getNext() == null || n.getNext().getType() == Token.FUNCTION)) {
 
           Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);
          Node fallThrough = computeFollowing(n);
           Node nextCfgNode = outEdges.get(0).getDestination().getValue();
           if (nextCfgNode == fallThrough) {
             removeDeadExprStatementSafely(n);

 
   private Node computeFollowing(Node n) {
     Node next = ControlFlowAnalysis.computeFollowNode(n);
    while (next != null && next.getType() == Token.BLOCK) {
      if (next.hasChildren()) {
        next = next.getFirstChild();
      } else {
        next = computeFollowing(next);
      }
    }
     return next;
   }
 
"
111,"junit.framework.AssertionFailedError","/src/com/google/javascript/jscomp/NodeUtil.java","
                                   return true;
       case Token.FUNCTION:
       case Token.REGEXP:
       case Token.ARRAYLIT:
","
                                   return false;
       case Token.FUNCTION:
       case Token.REGEXP:
       case Token.ARRAYLIT:
"
112,"junit.framework.AssertionFailedError","/src/com/google/javascript/jscomp/parsing/IRFactory.java","
     @Override
     Node processAssignment(Assignment assignmentNode) {
       Node assign = processInfixExpression(assignmentNode);
       return assign;
     }
 

         operand.setDouble(-operand.getDouble());
         return operand;
       } else {
 
         Node node = newNode(type, operand);
         if (exprNode.isPostfix()) {

       }
     }
 
 
     @Override
     Node processVariableDeclaration(VariableDeclaration declarationNode) {
","
     @Override
     Node processAssignment(Assignment assignmentNode) {
       Node assign = processInfixExpression(assignmentNode);
      Node target = assign.getFirstChild();
      if (!validAssignmentTarget(target)) {
        errorReporter.error(
          ""invalid assignment target"",
          sourceName,
          target.getLineno(), """", 0);
      }
       return assign;
     }
 

         operand.setDouble(-operand.getDouble());
         return operand;
       } else {
        if (type == Token.INC || type == Token.DEC) {
          if (!validAssignmentTarget(operand)) {
            String msg = (type == Token.INC)
                ? ""invalid increment target""
                : ""invalid decrement target"";
            errorReporter.error(
              msg,
              sourceName,
              operand.getLineno(), """", 0);
          }
        }
 
         Node node = newNode(type, operand);
         if (exprNode.isPostfix()) {

       }
     }
 
    private boolean validAssignmentTarget(Node target) {
      switch (target.getType()) {
        case Token.NAME:
        case Token.GETPROP:
        case Token.GETELEM:
          return true;
      }
      return false;
    }
 
     @Override
     Node processVariableDeclaration(VariableDeclaration declarationNode) {
"
113,"junit.framework.AssertionFailedError","/src/com/google/javascript/jscomp/CollapseProperties.java","
     Node greatGramps = gramps.getParent();
     Node greatGreatGramps = greatGramps.getParent();
 
 
          Node nameNode = NodeUtil.newName(

       }
 
             if (type != Type.FUNCTION && aliasingGets > 0) {
         return false;
       }
 
","
     Node greatGramps = gramps.getParent();
     Node greatGreatGramps = greatGramps.getParent();
 
    if (rvalue != null && rvalue.getType() == Token.FUNCTION) {
      checkForHosedThisReferences(rvalue, refName.docInfo, refName);
    }
 
          Node nameNode = NodeUtil.newName(

       }
 
             if (aliasingGets > 0) {
         return false;
       }
 
"
114,"junit.framework.AssertionFailedError","/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java","
       Node n, String variable) {
     if (NodeUtil.isName(n) && variable.equals(n.getString())) {
       if (NodeUtil.isLhs(n, n.getParent())) {
                                    return VariableLiveness.KILL;
       } else {
         return VariableLiveness.READ;
","
       Node n, String variable) {
     if (NodeUtil.isName(n) && variable.equals(n.getString())) {
       if (NodeUtil.isLhs(n, n.getParent())) {
        Preconditions.checkState(n.getParent().getType() == Token.ASSIGN);
                                   Node rhs = n.getNext();
        VariableLiveness state = isVariableReadBeforeKill(rhs, variable);
        if (state == VariableLiveness.READ) {
          return state;
        }
         return VariableLiveness.KILL;
       } else {
         return VariableLiveness.READ;
"
115,"junit.framework.AssertionFailedError","/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java","
     if (n.getType() == Token.BLOCK) {
       if (n.hasOneChild()) {
         Node maybeExpr = n.getFirstChild();
                                                                   
                           
          return NodeUtil.isExpressionNode(maybeExpr);
       }
     }
 
","
     if (n.getType() == Token.BLOCK) {
       if (n.hasOneChild()) {
         Node maybeExpr = n.getFirstChild();
        if (maybeExpr.getType() == Token.EXPR_RESULT) {
                                                                            if (maybeExpr.getFirstChild().getType() == Token.CALL) {
            Node calledFn = maybeExpr.getFirstChild().getFirstChild();
 
                                      if (calledFn.getType() == Token.GETELEM) {
              return false;
            } else if (calledFn.getType() == Token.GETPROP &&
                       calledFn.getLastChild().getString().startsWith(""on"")) {
              return false;
            }
          }
 
          return true;
        }
        return false;
       }
     }
 
"
116,"junit.framework.AssertionFailedError","/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java","
         } else {
                                int indexOfDot = namespace.indexOf('.');
           if (indexOfDot == -1) {
                          compiler.getNodeForCodeInsertion(minimumModule)
","
         } else {
                                int indexOfDot = namespace.lastIndexOf('.');
           if (indexOfDot == -1) {
                          compiler.getNodeForCodeInsertion(minimumModule)
"
117,"junit.framework.AssertionFailedError","/src/com/google/javascript/jscomp/TypedScopeCreator.java","
                     Scope scopeToDeclareIn = scope;
 
                   
              if (scopeToDeclareIn.isDeclared(variableName, false)) {
","
                     Scope scopeToDeclareIn = scope;
      if (n.getType() == Token.GETPROP && !scope.isGlobal() &&
          isQnameRootedInGlobalScope(n)) {
        Scope globalScope = scope.getGlobalScope();
 
                          if (!globalScope.isDeclared(variableName, false)) {
          scopeToDeclareIn = scope.getGlobalScope();
        }
      }
 
              if (scopeToDeclareIn.isDeclared(variableName, false)) {
"
118,"junit.framework.AssertionFailedError","/src/com/google/javascript/jscomp/FunctionTypeBuilder.java","
                           if (!type.isSubtype(
               typeRegistry.getNativeType(OBJECT_TYPE))) {
         reportWarning(THIS_TYPE_NON_OBJECT, type.toString());
         return false;

               JSType maybeTypeOfThis = safeResolve(typeOfThis, t, scope);
     if (maybeTypeOfThis instanceof ObjectType) {
       typeOfThis = (ObjectType) maybeTypeOfThis;
     }
","
                           if (!type.restrictByNotNullOrUndefined().isSubtype(
               typeRegistry.getNativeType(OBJECT_TYPE))) {
         reportWarning(THIS_TYPE_NON_OBJECT, type.toString());
         return false;

               JSType maybeTypeOfThis = safeResolve(typeOfThis, t, scope);
    if (maybeTypeOfThis != null) {
      maybeTypeOfThis = maybeTypeOfThis.restrictByNotNullOrUndefined();
    }
     if (maybeTypeOfThis instanceof ObjectType) {
       typeOfThis = (ObjectType) maybeTypeOfThis;
     }
"
119,"junit.framework.AssertionFailedError","/src/com/google/javascript/jscomp/NodeUtil.java","
         return true;
 
              case Token.BITAND:
       case Token.BITNOT:
       case Token.BITOR:
       case Token.BITXOR:
 
              case Token.NOT:
       case Token.NEG:
         return isValidDefineValue(val.getFirstChild(), defines);
 
       ","
         return true;
 
             case Token.ADD:
       case Token.BITAND:
       case Token.BITNOT:
       case Token.BITOR:
       case Token.BITXOR:
      case Token.DIV:
      case Token.EQ:
      case Token.GE:
      case Token.GT:
      case Token.LE:
      case Token.LSH:
      case Token.LT:
      case Token.MOD:
      case Token.MUL:
      case Token.NE:
      case Token.RSH:
      case Token.SHEQ:
      case Token.SHNE:
      case Token.SUB:
      case Token.URSH:
        return isValidDefineValue(val.getFirstChild(), defines)
            && isValidDefineValue(val.getLastChild(), defines);
 
              case Token.NOT:
       case Token.NEG:
      case Token.POS:
         return isValidDefineValue(val.getFirstChild(), defines);
 
       "
120,"junit.framework.AssertionFailedError","/src/com/google/javascript/jscomp/CheckGlobalThis.java","
       }
 
            }
 
     if (parent != null && parent.getType() == Token.ASSIGN) {
","
       }
 
             Node gramps = parent.getParent();
      if (NodeUtil.isObjectLitKey(parent, gramps)) {
        JSDocInfo maybeLends = gramps.getJSDocInfo();
        if (maybeLends != null &&
            maybeLends.getLendsName() != null &&
            maybeLends.getLendsName().endsWith("".prototype"")) {
          return false;
        }
      }
     }
 
     if (parent != null && parent.getType() == Token.ASSIGN) {
"
121,"junit.framework.AssertionFailedError","/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java","
         } else {
                                int indexOfDot = namespace.indexOf('.');
           if (indexOfDot == -1) {
                          compiler.getNodeForCodeInsertion(minimumModule)
","
         } else {
                                int indexOfDot = namespace.lastIndexOf('.');
           if (indexOfDot == -1) {
                          compiler.getNodeForCodeInsertion(minimumModule)
"
122,"junit.framework.AssertionFailedError","/src/com/google/javascript/jscomp/PeepholeFoldConstants.java","
                                           result = lvalInt >>> rvalInt;
           break;
         default:
           throw new AssertionError(""Unknown shift operator: "" +
","
                                           long lvalLong = lvalInt & 0xffffffffL;
          result = lvalLong >>> rvalInt;
           break;
         default:
           throw new AssertionError(""Unknown shift operator: "" +
"
123,"junit.framework.AssertionFailedError","/src/com/google/javascript/jscomp/TypeCheck.java","
     Node parameter = null;
     Node argument = null;
     while (arguments.hasNext() &&
           parameters.hasNext()) {
                       parameter = parameters.next();
       argument = arguments.next();
       ordinal++;
 
","
     Node parameter = null;
     Node argument = null;
     while (arguments.hasNext() &&
           (parameters.hasNext() ||
            parameter != null && parameter.isVarArgs())) {
                    if (parameters.hasNext()) {
         parameter = parameters.next();
      }
       argument = arguments.next();
       ordinal++;
 
"
124,"junit.framework.AssertionFailedError","/src/com/google/javascript/jscomp/CommandLineRunner.java","
     for (FormattingOption formattingOption : flags.formatting) {
       formattingOption.applyToOptions(options);
     }
    if (flags.process_closure_primitives) {
      options.closurePass = true;
    }
 
     initOptionsFromFlags(options);
     return options;
   }
","
     for (FormattingOption formattingOption : flags.formatting) {
       formattingOption.applyToOptions(options);
     }
 
    options.closurePass = flags.process_closure_primitives;
     initOptionsFromFlags(options);
     return options;
   }
"
125,"junit.framework.AssertionFailedError","/src/com/google/javascript/jscomp/CheckGlobalThis.java","
                          }
 
     if (parent != null && parent.getType() == Token.ASSIGN) {

     }
 
         return false;
   }
 
","
                           int pType = parent.getType();
      if (!(pType == Token.BLOCK ||
            pType == Token.SCRIPT ||
            pType == Token.NAME ||
            pType == Token.ASSIGN)) {
        return false;
      }
     }
 
     if (parent != null && parent.getType() == Token.ASSIGN) {

     }
 
         return parent != null && NodeUtil.isGet(parent);
   }
 
"
126,"junit.framework.AssertionFailedError","/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java","
     boolean isAssignedOnceInLifetime() {
       Reference ref = getOneAndOnlyAssignment();
       if (ref == null) {
         return false;
       }
 
        
       return true;
     }
     public String getSourceName() {
       return sourceName;
     }
   }
 
  
   static final class BasicBlock {
 
     private final BasicBlock parent;
 
     private final boolean isHoisted;
 
 
 
   
     BasicBlock(BasicBlock parent, Node root) {
       this.parent = parent;
 
              this.isHoisted = NodeUtil.isHoistedFunctionDeclaration(root);
 
 
     }
 
","
     boolean isAssignedOnceInLifetime() {
       Reference ref = getOneAndOnlyAssignment();
       if (ref == null) {
         return false;
       }
 
             for (BasicBlock block = ref.getBasicBlock();
           block != null; block = block.getParent()) {
        if (block.isFunction) {
          break;
        } else if (block.isLoop) {
          return false;
        }
      }
 
       return true;
     }
     public String getSourceName() {
       return sourceName;
     }
   }   static final class BasicBlock {
 
     private final BasicBlock parent;
 
     private final boolean isHoisted;
 
    private final boolean isFunction;
 
 
    private final boolean isLoop;
      BasicBlock(BasicBlock parent, Node root) {
       this.parent = parent;
 
              this.isHoisted = NodeUtil.isHoistedFunctionDeclaration(root);
 
      this.isFunction = root.getType() == Token.FUNCTION;
 
      if (root.getParent() != null) {
        int pType = root.getParent().getType();
        this.isLoop = pType == Token.DO ||
            pType == Token.WHILE ||
            pType == Token.FOR;
      } else {
        this.isLoop = false;
      }
     }
 
"
127,"junit.framework.AssertionFailedError","/src/com/google/javascript/jscomp/CheckGlobalThis.java","
       JSDocInfo jsDoc = getFunctionJsDocInfo(n);
       if (jsDoc != null &&
           (jsDoc.isConstructor() ||
            jsDoc.hasThisType() ||
            jsDoc.isOverride())) {
         return false;

       } else {
                             if (lhs.getType() == Token.GETPROP &&
               lhs.getLastChild().getString().equals(""prototype"")) {
             return false;
           }
          if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains("".prototype."")) {
             return false;
           }
       }
     }
 
","
       JSDocInfo jsDoc = getFunctionJsDocInfo(n);
       if (jsDoc != null &&
           (jsDoc.isConstructor() ||
           jsDoc.isInterface() ||
            jsDoc.hasThisType() ||
            jsDoc.isOverride())) {
         return false;

       } else {
                          if (NodeUtil.isGet(lhs)) {
           if (lhs.getType() == Token.GETPROP &&
               lhs.getLastChild().getString().equals(""prototype"")) {
             return false;
           }
          Node llhs = lhs.getFirstChild();
          if (llhs.getType() == Token.GETPROP &&
              llhs.getLastChild().getString().equals(""prototype"")) {
             return false;
           }
        }
       }
     }
 
"
128,"junit.framework.AssertionFailedError","/src/com/google/javascript/rhino/jstype/UnionType.java","
       builder.addAlternate(that);
     }
     JSType result = builder.build();
    if (result != null) {
       return result;
     } else if (this.isObject() && that.isObject()) {
       return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
","
       builder.addAlternate(that);
     }
     JSType result = builder.build();
    if (!result.isNoType()) {
       return result;
     } else if (this.isObject() && that.isObject()) {
       return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
"
129,"junit.framework.AssertionFailedError","/src/com/google/javascript/jscomp/FoldConstants.java","
 
     String joinString = NodeUtil.getStringValue(right);
     List<Node> arrayFoldedChildren = Lists.newLinkedList();
    StringBuilder sb = new StringBuilder();
     int foldedSize = 0;
     Node elem = arrayNode.getFirstChild();
          while (elem != null) {
       if (NodeUtil.isImmutableValue(elem)) {
        if (sb.length() > 0) {
           sb.append(joinString);
         }
         sb.append(NodeUtil.getStringValue(elem));
       } else {
        if (sb.length() > 0) {
                      foldedSize += sb.length() + 2;
           arrayFoldedChildren.add(Node.newString(sb.toString()));
          sb = new StringBuilder();
         }
         foldedSize += InlineCostEstimator.getCost(elem);
         arrayFoldedChildren.add(elem);

       elem = elem.getNext();
     }
 
    if (sb.length() > 0) {
              foldedSize += sb.length() + 2;
       arrayFoldedChildren.add(Node.newString(sb.toString()));
","
 
     String joinString = NodeUtil.getStringValue(right);
     List<Node> arrayFoldedChildren = Lists.newLinkedList();
    StringBuilder sb = null;
     int foldedSize = 0;
     Node elem = arrayNode.getFirstChild();
          while (elem != null) {
       if (NodeUtil.isImmutableValue(elem)) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
           sb.append(joinString);
         }
         sb.append(NodeUtil.getStringValue(elem));
       } else {
        if (sb != null) {
                      foldedSize += sb.length() + 2;
           arrayFoldedChildren.add(Node.newString(sb.toString()));
          sb = null;
         }
         foldedSize += InlineCostEstimator.getCost(elem);
         arrayFoldedChildren.add(elem);

       elem = elem.getNext();
     }
 
    if (sb != null) {
              foldedSize += sb.length() + 2;
       arrayFoldedChildren.add(Node.newString(sb.toString()));
"
130,"junit.framework.AssertionFailedError","/src/com/google/javascript/jscomp/GlobalNamespace.java","
                      
       if (isClassOrEnum) {
         return true;

    if (parseDocumentation) {
     populated = true;
    }
     return currentInfo.documentBlock(description);
   }
 
","
                           Preconditions.checkNotNull(declaration);
      if (declaration.getTwin() != null) {
        return false;
      }
 
       if (isClassOrEnum) {
         return true;

     populated = true;
     return currentInfo.documentBlock(description);
   }
 
"
131,"junit.framework.AssertionFailedError","/src/com/google/javascript/jscomp/Normalize.java","
   @Override
   public void process(Node externs, Node root) {
     NodeTraversal.traverse(compiler, root, this);
     if (MAKE_LOCAL_NAMES_UNIQUE) {
       MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();
       NodeTraversal t = new NodeTraversal(compiler, renamer);
       t.traverseRoots(externs, root);
     }
    removeDuplicateDeclarations(root);
     new PropogateConstantAnnotations(compiler, assertOnChange)
         .process(externs, root);
   }
","
   @Override
   public void process(Node externs, Node root) {
     NodeTraversal.traverse(compiler, root, this);
    removeDuplicateDeclarations(root);
     if (MAKE_LOCAL_NAMES_UNIQUE) {
       MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();
       NodeTraversal t = new NodeTraversal(compiler, renamer);
       t.traverseRoots(externs, root);
     }
     new PropogateConstantAnnotations(compiler, assertOnChange)
         .process(externs, root);
   }
"
132,"junit.framework.AssertionFailedError","/src/com/google/javascript/jscomp/ControlFlowAnalysis.java","
       case Token.ASSIGN:
       case Token.INC:
       case Token.DEC:
         return true;
       case Token.FUNCTION:
         return false;

       }
                                                return foundType;
     }
 
","
       case Token.ASSIGN:
       case Token.INC:
       case Token.DEC:
      case Token.INSTANCEOF:
         return true;
       case Token.FUNCTION:
         return false;

       }
                    if (foundType == null) {
        ObjectType maybeType = ObjectType.cast(
            registry.getGreatestSubtypeWithProperty(type, field));
                                   if (maybeType != null && maybeType.hasOwnProperty(field)) {
          foundType = maybeType;
        }
      }
       return foundType;
     }
 
"
133,"junit.framework.AssertionFailedError","/src/com/google/javascript/jscomp/CommandLineRunner.java","
                     options.messageBundle = new EmptyMessageBundle();
     }
 
     return options;
","
                     options.messageBundle = new EmptyMessageBundle();
      options.setWarningLevel(JsMessageVisitor.MSG_CONVENTIONS, CheckLevel.OFF);
     }
 
     return options;
"
134,"java.lang.IllegalStateException","/src/com/google/javascript/jscomp/ScopedAliases.java","
     private final Map<String, Var> aliases = Maps.newHashMap();
 
      
          
 
       if (t.getScopeDepth() == 2) {
         renameNamespaceShadows(t);
         aliases.clear();
         forbiddenLocals.clear();
         transformation = null;

             } else {
               grandparent.addChildBefore(newDecl, varNode);
             }
           }
 
           
                           JSDocInfo info = n.getJSDocInfo();
        if (info != null) {
           for (Node node : info.getTypeNodes()) {
             fixTypeNode(node);
           }
","
     private final Map<String, Var> aliases = Maps.newHashMap();
 
         private final Set<Node> injectedDecls = Sets.newHashSet();
 
          
 
       if (t.getScopeDepth() == 2) {
         renameNamespaceShadows(t);
        injectedDecls.clear();
         aliases.clear();
         forbiddenLocals.clear();
         transformation = null;

             } else {
               grandparent.addChildBefore(newDecl, varNode);
             }
            injectedDecls.add(newDecl.getFirstChild());
           }
 
           
                           JSDocInfo info = n.getJSDocInfo();
        if (info != null && !injectedDecls.contains(n)) {
           for (Node node : info.getTypeNodes()) {
             fixTypeNode(node);
           }
"
135,"junit.framework.AssertionFailedError","/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java","
          return parseTypeName(token);
   }
 
","
    if (token == JsDocToken.QMARK) {
      return newNode(Token.QMARK);
    } else {
      return parseBasicTypeExpression(token);
    }
   }
 
"
136,"junit.framework.ComparisonFailure","/src/com/google/javascript/jscomp/TypeValidator.java","
 
      
          
       }
     }
 
    JSType type = getJSType(n);
    if (dereference) {
      ObjectType dereferenced = type.dereference();
      if (dereferenced != null) {
        type = dereferenced;
      }
    }
    if (type.isFunctionPrototypeType() ||
        (type.toObjectType() != null &&
         type.toObjectType().getConstructor() != null)) {
      return type.toString();
    }
     String qualifiedName = n.getQualifiedName();
     if (qualifiedName != null) {
       return qualifiedName;
","
    JSType type = getJSType(n);
    if (dereference) {
      ObjectType dereferenced = type.dereference();
      if (dereferenced != null) {
        type = dereferenced;
      }
    }
 
         if (type.isFunctionPrototypeType() ||
        (type.toObjectType() != null &&
         type.toObjectType().getConstructor() != null)) {
      return type.toString();
    }
 
          
       }
     }
 
     String qualifiedName = n.getQualifiedName();
     if (qualifiedName != null) {
       return qualifiedName;
"
137,"junit.framework.AssertionFailedError","/src/com/google/javascript/jscomp/TypeInference.java","
     }
 
         Map<TemplateType, JSType> inferred = 
        inferTemplateTypesFromParameters(fnType, n);
-
+
 
          ","
     }
 
     -
    Map<TemplateType, JSType> inferred = Maps.filterKeys(
        inferTemplateTypesFromParameters(fnType, n),
        new Predicate<TemplateType>() {
+
          @Override
          public boolean apply(TemplateType key) {
            return keys.contains(key);
          }}
        );
 
          "
138,"junit.framework.AssertionFailedError","/src/com/google/javascript/jscomp/NameAnalyzer.java","
           } else {
             recordDepScope(nameNode, ns);
           }
        } else {
                                 ","
           } else {
             recordDepScope(nameNode, ns);
           }
        } else if (!(parent.isCall() && parent.getFirstChild() == n)) {
                                 "
139,"junit.framework.AssertionFailedError","/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java","
                           if (provided != null) {
         parent.detachFromParent();
         compiler.reportCodeChange();
       }
","
                           if (provided != null || requiresLevel.isOn()) {
         parent.detachFromParent();
         compiler.reportCodeChange();
       }
"
140,"junit.framework.AssertionFailedError","/src/com/google/javascript/jscomp/FunctionInjector.java","
 
     Node block = fnNode.getLastChild();
 
    boolean hasSideEffects = false;
    if (block.hasChildren()) {
      Preconditions.checkState(block.hasOneChild());
      Node stmt = block.getFirstChild();
      if (stmt.isReturn()) {
        hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);
      }
    }
          Node cArg = callNode.getFirstChild().getNext();
 

              if (fnParam != null) {
         if (cArg != null) {
          if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {
            return CanInlineResult.NO;
          }
                                 ","
 
     Node block = fnNode.getLastChild();
 
          Node cArg = callNode.getFirstChild().getNext();
 

              if (fnParam != null) {
         if (cArg != null) {
                                 "
141,"junit.framework.AssertionFailedError","/src/com/google/javascript/jscomp/FunctionInjector.java","
 
     Node block = fnNode.getLastChild();
 
 
          Node cArg = callNode.getFirstChild().getNext();

              if (fnParam != null) {
         if (cArg != null) {
 
                      ","
 
     Node block = fnNode.getLastChild();
 
    boolean hasSideEffects = false;      if (block.hasChildren()) {
      Preconditions.checkState(block.hasOneChild());
      Node stmt = block.getFirstChild();
      if (stmt.isReturn()) {
        hasSideEffects = NodeUtil.mayHaveSideEffects(
            stmt.getFirstChild(), compiler);
      }
    }
 
          Node cArg = callNode.getFirstChild().getNext();

              if (fnParam != null) {
         if (cArg != null) {
          if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {
            return CanInlineResult.NO;
          }
 
                      "
142,"junit.framework.AssertionFailedError","/src/com/google/javascript/jscomp/type/ClosureReverseAbstractInterpreter.java","
       new RestrictByTrueTypeOfResultVisitor() {
         @Override
         protected JSType caseTopType(JSType topType) {
          return topType;
         }
 
         @Override
","
       new RestrictByTrueTypeOfResultVisitor() {
         @Override
         protected JSType caseTopType(JSType topType) {
          return topType.isAllType() ?
              getNativeType(ARRAY_TYPE) : topType;
         }
 
         @Override
"
143,"junit.framework.AssertionFailedError","/src/com/google/javascript/jscomp/ScopedAliases.java","
         Node n = v.getNode();
         Node parent = n.getParent();
         boolean isVar = parent.isVar();
         if (isVar && n.getFirstChild() != null && n.getFirstChild().isQualifiedName()) {
           recordAlias(v);
         } else if (v.isBleedingFunction()) {

         } else if (parent.getType() == Token.LP) {
                              } else if (isVar) {
           Node grandparent = parent.getParent();
          Node value = n.hasChildren() ?
              v.getInitialValue().detachFromParent() :
               null;
          Node varNode = parent;
 
           String name = n.getString();
           int nameCount = scopedAliasNames.count(name);

                    
                                        
                               
                    
             NodeUtil.setDebugInformation(
                 newDecl.getFirstChild().getFirstChild(), n, name);
 
               grandparent.addChildBefore(newDecl, varNode);
           }
 

       return null;
     }
     Node n = first;
 
     while (n.next != child) {
       n = n.next;
","
         Node n = v.getNode();
         Node parent = n.getParent();
         boolean isVar = parent.isVar();
        boolean isFunctionDecl = NodeUtil.isFunctionDeclaration(parent);
         if (isVar && n.getFirstChild() != null && n.getFirstChild().isQualifiedName()) {
           recordAlias(v);
         } else if (v.isBleedingFunction()) {

         } else if (parent.getType() == Token.LP) {
                              } else if (isVar || isFunctionDecl) {
          boolean isHoisted = NodeUtil.isHoistedFunctionDeclaration(parent);
           Node grandparent = parent.getParent();
          Node value = v.getInitialValue() != null ?
              v.getInitialValue() :
               null;
          Node varNode = null;
 
           String name = n.getString();
           int nameCount = scopedAliasNames.count(name);

 
                                if (isFunctionDecl) {
                         Node existingName = v.getNameNode();
 
                          
                                                   Node newName = IR.name("""").useSourceInfoFrom(existingName);
            value.replaceChild(existingName, newName);
 
            varNode = IR.var(existingName).useSourceInfoFrom(existingName);
            grandparent.replaceChild(parent, varNode);
          } else {
            if (value != null) {
                                            value.detachFromParent();
            }
            varNode = parent;
          }
 
                      
             NodeUtil.setDebugInformation(
                 newDecl.getFirstChild().getFirstChild(), n, name);
 
            if (isHoisted) {
              grandparent.addChildToFront(newDecl);
            } else {
               grandparent.addChildBefore(newDecl, varNode);
            }
           }
 

       return null;
     }
     Node n = first;
    if (n == null) {
      throw new RuntimeException(""node is not a child"");
    }
 
     while (n.next != child) {
       n = n.next;
"
144,"junit.framework.ComparisonFailure","/src/com/google/javascript/jscomp/DisambiguateProperties.java","
           child != null;
           child = child.getNext()) {
          
                  String name = child.getString();
","
           child != null;
           child = child.getNext()) {
                 if (child.isQuotedString()) {
          continue;
        }
 
                  String name = child.getString();
"
145,"junit.framework.AssertionFailedError","/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java","
       for (BasicBlock block = ref.getBasicBlock();
            block != null; block = block.getParent()) {
         if (block.isFunction) {
           break;
         } else if (block.isLoop) {
           return false;
","
       for (BasicBlock block = ref.getBasicBlock();
            block != null; block = block.getParent()) {
         if (block.isFunction) {
          if (ref.getSymbol().getScope() != ref.scope) {
            return false;
          }
           break;
         } else if (block.isLoop) {
           return false;
"
146,"junit.framework.AssertionFailedError","/src/com/google/javascript/jscomp/GlobalNamespace.java","
                 isSet = true;
                 type = Name.Type.FUNCTION;
                 break;
               case Token.INC:
               case Token.DEC:
                 isSet = true;
","
                 isSet = true;
                 type = Name.Type.FUNCTION;
                 break;
              case Token.CATCH:
               case Token.INC:
               case Token.DEC:
                 isSet = true;
"
147,"junit.framework.AssertionFailedError","/src/com/google/javascript/jscomp/InlineVariables.java","
       if (!maybeModifiedArguments &&
           !staleVars.contains(v) &&
           referenceInfo.isWellDefined() &&
          referenceInfo.isAssignedOnceInLifetime()) {
                                          List<Reference> refs = referenceInfo.references;
         for (int i = 1 ; i < refs.size(); i++) {
           Node nameNode = refs.get(i).getNode();
","
       if (!maybeModifiedArguments &&
           !staleVars.contains(v) &&
           referenceInfo.isWellDefined() &&
          referenceInfo.isAssignedOnceInLifetime() &&
                                           (isInlineableDeclaredConstant(v, referenceInfo) ||
           referenceInfo.isOnlyAssignmentSameScopeAsDeclaration())) {
         List<Reference> refs = referenceInfo.references;
         for (int i = 1 ; i < refs.size(); i++) {
           Node nameNode = refs.get(i).getNode();
"
148,"junit.framework.ComparisonFailure","/src/com/google/javascript/jscomp/CodeGenerator.java","
       case Token.HOOK: {
         Preconditions.checkState(childCount == 3);
         int p = NodeUtil.precedence(type);
        Context rhsContext = Context.OTHER;
         addExpr(first, p + 1, context);
         cc.addOp(""?"", true);
         addExpr(first.getNext(), 1, rhsContext);
","
       case Token.HOOK: {
         Preconditions.checkState(childCount == 3);
         int p = NodeUtil.precedence(type);
        Context rhsContext = getContextForNoInOperator(context);
         addExpr(first, p + 1, context);
         cc.addOp(""?"", true);
         addExpr(first.getNext(), 1, rhsContext);
"
149,"junit.framework.AssertionFailedError","/src/com/google/javascript/jscomp/parsing/IRFactory.java","
    if (comment.getValue().indexOf(""/* @"") != -1 || comment.getValue().indexOf(""\n * @"") != -1) {
       errorReporter.warning(
           SUSPICIOUS_COMMENT_WARNING,
           sourceName,
","
 
   private void handleBlockComment(Comment comment) {
    Pattern p = Pattern.compile(""(/|(\n[ \t]*))\\*[ \t]*@[a-zA-Z]"");
    if (p.matcher(comment.getValue()).find()) {
       errorReporter.warning(
           SUSPICIOUS_COMMENT_WARNING,
           sourceName,
"
150,"junit.framework.AssertionFailedError","/src/com/google/javascript/jscomp/MinimizeExitPoints.java","
        Node finallyBlock = n.getLastChild();
        tryMinimizeExits(finallyBlock, exitType, labelName);
      }
     }
 
     ","
     }
 
     "
151,"junit.framework.AssertionFailedError","/src/com/google/javascript/jscomp/ExploitAssigns.java","
     }
     Preconditions.checkArgument(node.isGetProp());
 
       node = node.getFirstChild();
     if (node.isName()
         && isNameAssignedTo(node.getString(), replacement)) {
       return false;
","
     }
     Preconditions.checkArgument(node.isGetProp());
 
    while (node.isGetProp()) {
       node = node.getFirstChild();
    }
     if (node.isName()
         && isNameAssignedTo(node.getString(), replacement)) {
       return false;
"
152,"junit.framework.AssertionFailedError","/src/com/google/javascript/jscomp/UnreachableCodeElimination.java","
                 outEdges.get(0).getValue() == Branch.UNCOND);
             Node fallThrough = computeFollowing(n);
             Node nextCfgNode = outEdges.get(0).getDestination().getValue();
            if (nextCfgNode == fallThrough) {
               removeNode(n);
             }
           }
       }
     }
 
 
     private Node computeFollowing(Node n) {
       Node next = ControlFlowAnalysis.computeFollowNode(n);
","
                 outEdges.get(0).getValue() == Branch.UNCOND);
             Node fallThrough = computeFollowing(n);
             Node nextCfgNode = outEdges.get(0).getDestination().getValue();
            if (nextCfgNode == fallThrough && !inFinally(n.getParent(), n)) {
               removeNode(n);
             }
           }
       }
     }
 
    private boolean inFinally(Node parent, Node child) {
      if (parent == null || parent.isFunction()) {
        return false;
      } else if (NodeUtil.isTryFinallyNode(parent, child)) {
        return true;
      } else {
        return inFinally(parent.getParent(), parent);
      }
    }
 
     private Node computeFollowing(Node n) {
       Node next = ControlFlowAnalysis.computeFollowNode(n);
"
153,"java.lang.IllegalStateException","/src/com/google/javascript/jscomp/TypeCheck.java","
     JSType type = getJSType(constructor).restrictByNotNullOrUndefined();
     if (type.isConstructor() || type.isEmptyType() || type.isUnknownType()) {
       FunctionType fnType = type.toMaybeFunctionType();
      if (fnType != null) {
         visitParameterList(t, n, fnType);
         ensureTyped(t, n, fnType.getInstanceType());
       } else {
","
     JSType type = getJSType(constructor).restrictByNotNullOrUndefined();
     if (type.isConstructor() || type.isEmptyType() || type.isUnknownType()) {
       FunctionType fnType = type.toMaybeFunctionType();
      if (fnType != null && fnType.hasInstanceType()) {
         visitParameterList(t, n, fnType);
         ensureTyped(t, n, fnType.getInstanceType());
       } else {
"
154,"junit.framework.ComparisonFailure","/src/com/google/javascript/jscomp/CodeGenerator.java","
 
   static boolean isSimpleNumber(String s) {
     int len = s.length();
     for (int index = 0; index < len; index++) {
       char c = s.charAt(index);
       if (c < '0' || c > '9') {
         return false;
       }
     }
    return len > 0 && s.charAt(0) != '0';
   }
 
   static double getSimpleNumber(String s) {
","
 
   static boolean isSimpleNumber(String s) {
     int len = s.length();
    if (len == 0) {
      return false;
    }
     for (int index = 0; index < len; index++) {
       char c = s.charAt(index);
       if (c < '0' || c > '9') {
         return false;
       }
     }
    return len == 1 || s.charAt(0) != '0';
   }
 
   static double getSimpleNumber(String s) {
"
155,"junit.framework.AssertionFailedError","/src/main/java/org/apache/commons/lang3/math/NumberUtils.java","
                  final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
         try {
                 final Float f = createFloat(str);
                 if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
                     return f;
                 }
         } catch (final NumberFormatException nfe) {                       }
         try {
                 final Double d = createDouble(str);
                 if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
                     return d;
                 }
         } catch (final NumberFormatException nfe) {                       }
","
                  final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
         try {
            if(numDecimals <= 7){                 final Float f = createFloat(str);
                 if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
                     return f;
                 }
            }
         } catch (final NumberFormatException nfe) {                       }
         try {
            if(numDecimals <= 16){                 final Double d = createDouble(str);
                 if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
                     return d;
                 }
            }
         } catch (final NumberFormatException nfe) {                       }
"
156,"junit.framework.AssertionFailedError","/src/main/java/org/apache/commons/lang3/LocaleUtils.java","
         if (str == null) {
             return null;
         }
         final int len = str.length();
         if (len < 2) {
             throw new IllegalArgumentException(""Invalid locale format: "" + str);
","
         if (str == null) {
             return null;
         }
        if (str.contains(""#"")) {             throw new IllegalArgumentException(""Invalid locale format: "" + str);
        }
         final int len = str.length();
         if (len < 2) {
             throw new IllegalArgumentException(""Invalid locale format: "" + str);
"
157,"java.lang.IllegalArgumentException","/src/main/java/org/apache/commons/lang3/LocaleUtils.java","
             throw new IllegalArgumentException(""Invalid locale format: "" + str);
         }
         final char ch0 = str.charAt(0);
             final char ch1 = str.charAt(1);
             if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {
                 throw new IllegalArgumentException(""Invalid locale format: "" + str);

                 throw new IllegalArgumentException(""Invalid locale format: "" + str);
             }
             return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));
     }
 
     ","
             throw new IllegalArgumentException(""Invalid locale format: "" + str);
         }
         final char ch0 = str.charAt(0);
        if (ch0 == '_') {
            if (len < 3) {
                throw new IllegalArgumentException(""Invalid locale format: "" + str);
            }
            final char ch1 = str.charAt(1);
            final char ch2 = str.charAt(2);
            if (!Character.isUpperCase(ch1) || !Character.isUpperCase(ch2)) {
                throw new IllegalArgumentException(""Invalid locale format: "" + str);
            }
            if (len == 3) {
                return new Locale("""", str.substring(1, 3));
            }
            if (len < 5) {
                throw new IllegalArgumentException(""Invalid locale format: "" + str);
            }
            if (str.charAt(3) != '_') {
                throw new IllegalArgumentException(""Invalid locale format: "" + str);
            }
            return new Locale("""", str.substring(1, 3), str.substring(4));
        } else {
             final char ch1 = str.charAt(1);
             if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {
                 throw new IllegalArgumentException(""Invalid locale format: "" + str);

                 throw new IllegalArgumentException(""Invalid locale format: "" + str);
             }
             return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));
        }
     }
 
     "
158,"junit.framework.AssertionFailedError","/src/com/google/javascript/jscomp/CollapseProperties.java","
         continue;
       }
 
      if (name.globalSets == 1 && name.localSets == 0 &&
           name.aliasingGets > 0) {
                  ","
         continue;
       }
 
      if (!name.inExterns && name.globalSets == 1 && name.localSets == 0 &&
           name.aliasingGets > 0) {
                  "
159,"junit.framework.AssertionFailedError","/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java","
 public class LookupTranslator extends CharSequenceTranslator {
 
    private final HashMap<CharSequence, CharSequence> lookupMap;
     private final int shortest;
     private final int longest;
 

     public LookupTranslator(final CharSequence[]... lookup) {
        lookupMap = new HashMap<CharSequence, CharSequence>();
         int _shortest = Integer.MAX_VALUE;
         int _longest = 0;
         if (lookup != null) {
             for (final CharSequence[] seq : lookup) {
                this.lookupMap.put(seq[0], seq[1]);
                 final int sz = seq[0].length();
                 if (sz < _shortest) {
                     _shortest = sz;

                  for (int i = max; i >= shortest; i--) {
             final CharSequence subSeq = input.subSequence(index, index + i);
            final CharSequence result = lookupMap.get(subSeq);
             if (result != null) {
                 out.write(result.toString());
                 return i;
","
 public class LookupTranslator extends CharSequenceTranslator {
 
    private final HashMap<String, CharSequence> lookupMap;
     private final int shortest;
     private final int longest;
 

     public LookupTranslator(final CharSequence[]... lookup) {
        lookupMap = new HashMap<String, CharSequence>();
         int _shortest = Integer.MAX_VALUE;
         int _longest = 0;
         if (lookup != null) {
             for (final CharSequence[] seq : lookup) {
                this.lookupMap.put(seq[0].toString(), seq[1]);
                 final int sz = seq[0].length();
                 if (sz < _shortest) {
                     _shortest = sz;

                  for (int i = max; i >= shortest; i--) {
             final CharSequence subSeq = input.subSequence(index, index + i);
            final CharSequence result = lookupMap.get(subSeq.toString());
             if (result != null) {
                 out.write(result.toString());
                 return i;
"
160,"junit.framework.AssertionFailedError","/src/com/google/javascript/jscomp/PrepareAst.java","
       Node first = n.getFirstChild();
 
        
       if (!NodeUtil.isGet(first)) {
         n.putBooleanProp(Node.FREE_CALL, true);
","
       Node first = n.getFirstChild();
 
             while (first.isCast()) {
        first = first.getFirstChild();
      }
 
       if (!NodeUtil.isGet(first)) {
         n.putBooleanProp(Node.FREE_CALL, true);
"
161,"java.lang.NumberFormatException","/src/main/java/org/apache/commons/lang3/math/NumberUtils.java","
             }
         }
         if (pfxLen > 0) {              final int hexDigits = str.length() - pfxLen;
            if (hexDigits > 16) {                  return createBigInteger(str);
             }
            if (hexDigits > 8) {                  return createLong(str);
             }
             return createInteger(str);
","
             }
         }
         if (pfxLen > 0) {             char firstSigDigit = 0;             for(int i = pfxLen; i < str.length(); i++) {
                firstSigDigit = str.charAt(i);
                if (firstSigDigit == '0') {                     pfxLen++;
                } else {
                    break;
                }
            }
             final int hexDigits = str.length() - pfxLen;
            if (hexDigits > 16 || (hexDigits == 16 && firstSigDigit > '7')) {                  return createBigInteger(str);
             }
            if (hexDigits > 8 || (hexDigits == 8 && firstSigDigit > '7')) {                  return createLong(str);
             }
             return createInteger(str);
"
162,"junit.framework.AssertionFailedError","/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java","
                                                           !mayEffectMutableState(lhs)) {
 
             n.removeChild(cond);
             Node assignName = thenOp.removeFirstChild();
","
                                                           !mayEffectMutableState(lhs) &&
              (!mayHaveSideEffects(cond) ||
                  (thenOp.isAssign() && thenOp.getFirstChild().isName()))) {
 
             n.removeChild(cond);
             Node assignName = thenOp.removeFirstChild();
"
163,"java.lang.StringIndexOutOfBoundsException","/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java","
               for (int pt = 0; pt < consumed; pt++) {
                pos += Character.charCount(Character.codePointAt(input, pos));
             }
         }
     }
","
               for (int pt = 0; pt < consumed; pt++) {
                pos += Character.charCount(Character.codePointAt(input, pt));
             }
         }
     }
"
164,"java.lang.IllegalStateException","/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java","
   private String getRemainingJSDocLine() {
     String result = stream.getRemainingJSDocLine();
     return result;
   }
 
","
   private String getRemainingJSDocLine() {
     String result = stream.getRemainingJSDocLine();
    unreadToken = NO_UNREAD_TOKEN;
     return result;
   }
 
"
165,"junit.framework.AssertionFailedError","/src/main/java/org/apache/commons/lang3/math/NumberUtils.java","
         if (StringUtils.isBlank(str)) {
             throw new NumberFormatException(""A blank string is not a valid number"");
         }  
        if (str.startsWith(""--"")) {
            return null;
        }
         if (str.startsWith(""0x"") || str.startsWith(""-0x"") || str.startsWith(""0X"") || str.startsWith(""-0X"")) {
             int hexDigits = str.length() - 2;              if (str.startsWith(""-"")) { 
         if (StringUtils.isBlank(str)) {
             throw new NumberFormatException(""A blank string is not a valid number"");
         }
                                                             return new BigDecimal(str);
     }
 
","
         if (StringUtils.isBlank(str)) {
             throw new NumberFormatException(""A blank string is not a valid number"");
         }  
         if (str.startsWith(""0x"") || str.startsWith(""-0x"") || str.startsWith(""0X"") || str.startsWith(""-0X"")) {
             int hexDigits = str.length() - 2;              if (str.startsWith(""-"")) { 
         if (StringUtils.isBlank(str)) {
             throw new NumberFormatException(""A blank string is not a valid number"");
         }
        if (str.trim().startsWith(""--"")) {
                                                                throw new NumberFormatException(str + "" is not a valid number."");
        }
         return new BigDecimal(str);
     }
 
"
166,"junit.framework.AssertionFailedError","/src/com/google/javascript/rhino/TokenStream.java","
       int length = s.length();
 
       if (length == 0 ||
           !Character.isJavaIdentifierStart(s.charAt(0))) {
         return false;
       }
 
       for (int i = 1; i < length; i++) {
        if (
             !Character.isJavaIdentifierPart(s.charAt(i))) {
           return false;
         }
","
       int length = s.length();
 
       if (length == 0 ||
          Character.isIdentifierIgnorable(s.charAt(0)) ||
           !Character.isJavaIdentifierStart(s.charAt(0))) {
         return false;
       }
 
       for (int i = 1; i < length; i++) {
        if (Character.isIdentifierIgnorable(s.charAt(i)) ||
             !Character.isJavaIdentifierPart(s.charAt(i))) {
           return false;
         }
"
167,"junit.framework.AssertionFailedError","/src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java","
     private static class TimeZoneNameRule implements Rule {
         private final Locale mLocale;
         private final int mStyle;
        private final TimeZone zone;
         private final String mStandard;
         private final String mDaylight;
 

         TimeZoneNameRule(TimeZone timeZone, Locale locale, int style) {
             mLocale = locale;
             mStyle = style;
            zone = timeZone;
             
             mStandard = getTimeZoneDisplay(timeZone, false, style, locale);
             mDaylight = getTimeZoneDisplay(timeZone, true, style, locale);

         @Override
         public void appendTo(StringBuffer buffer, Calendar calendar) {
             if (zone.useDaylightTime()
                     && calendar.get(Calendar.DST_OFFSET) != 0) {
                 buffer.append(getTimeZoneDisplay(zone, true, mStyle, mLocale));
","
     private static class TimeZoneNameRule implements Rule {
         private final Locale mLocale;
         private final int mStyle;
         private final String mStandard;
         private final String mDaylight;
 

         TimeZoneNameRule(TimeZone timeZone, Locale locale, int style) {
             mLocale = locale;
             mStyle = style;
             
             mStandard = getTimeZoneDisplay(timeZone, false, style, locale);
             mDaylight = getTimeZoneDisplay(timeZone, true, style, locale);

         @Override
         public void appendTo(StringBuffer buffer, Calendar calendar) {
            TimeZone zone = calendar.getTimeZone();
             if (zone.useDaylightTime()
                     && calendar.get(Calendar.DST_OFFSET) != 0) {
                 buffer.append(getTimeZoneDisplay(zone, true, mStyle, mLocale));
"
168,"junit.framework.AssertionFailedError","/src/main/java/org/apache/commons/lang3/time/FastDateParser.java","
        boolean wasWhite= false;
         for(int i= 0; i<value.length(); ++i) {
             char c= value.charAt(i);
            if(Character.isWhitespace(c)) {
                if(!wasWhite) {
                    wasWhite= true;
                    regex.append(""\\s*+"");
                }
                continue;
            }
            wasWhite= false;
             switch(c) {
             case '\'':
                 if(unquote) {
","
     private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {
         for(int i= 0; i<value.length(); ++i) {
             char c= value.charAt(i);
             switch(c) {
             case '\'':
                 if(unquote) {
"
169,"junit.framework.AssertionFailedError","/src/main/java/org/apache/commons/lang3/RandomStringUtils.java","
                     start = ' ';                
                 }
             }
         }
 
         char[] buffer = new char[count];
","
                     start = ' ';                
                 }
             }
        } else {
            if (end <= start) {
                throw new IllegalArgumentException(""Parameter end ("" + end + "") must be greater than start ("" + start + "")"");
            }
         }
 
         char[] buffer = new char[count];
"
170,"junit.framework.AssertionFailedError","/src/main/java/org/apache/commons/lang3/time/FastDateParser.java","
             currentFormatField= nextFormatField;
             currentStrategy= nextStrategy;
         }
         if(currentStrategy.addRegex(this, regex)) {
             collector.add(currentStrategy);
         }
","
             currentFormatField= nextFormatField;
             currentStrategy= nextStrategy;
         }
        if (patternMatcher.regionStart() != patternMatcher.regionEnd()) {
            throw new IllegalArgumentException(""Failed to parse \""""+pattern+""\"" ; gave up at index ""+patternMatcher.regionStart());
        }
         if(currentStrategy.addRegex(this, regex)) {
             collector.add(currentStrategy);
         }
"
171,"org.apache.commons.lang3.SerializationException","/src/main/java/org/apache/commons/lang3/SerializationUtils.java","
     public static Object deserialize(byte[] objectData) {
         if (objectData == null) {
             throw new IllegalArgumentException(""The byte[] must not be null"");
         }
         ByteArrayInputStream bais = new ByteArrayInputStream(objectData);
         return deserialize(bais);
     }
       static class ClassLoaderAwareObjectInputStream extends ObjectInputStream {
         private ClassLoader classLoader;         public ClassLoaderAwareObjectInputStream(InputStream in, ClassLoader classLoader) throws IOException {
             super(in);
             this.classLoader = classLoader;
 
         }         @Override
         protected Class<?> resolveClass(ObjectStreamClass desc) throws IOException, ClassNotFoundException {
             String name = desc.getName();
             try {
                 return Class.forName(name, false, classLoader);
             } catch (ClassNotFoundException ex) {
                     return Class.forName(name, false, Thread.currentThread().getContextClassLoader());
             }
         }
 
     }
 
 }
","
     public static Object deserialize(byte[] objectData) {
         if (objectData == null) {
             throw new IllegalArgumentException(""The byte[] must not be null"");
         }
         ByteArrayInputStream bais = new ByteArrayInputStream(objectData);
         return deserialize(bais);
     }      static class ClassLoaderAwareObjectInputStream extends ObjectInputStream {
        private static final Map<String, Class<?>> primitiveTypes = 
                new HashMap<String, Class<?>>();
         private ClassLoader classLoader;
         public ClassLoaderAwareObjectInputStream(InputStream in, ClassLoader classLoader) throws IOException {
             super(in);
             this.classLoader = classLoader;
 
            primitiveTypes.put(""byte"", byte.class);
            primitiveTypes.put(""short"", short.class);
            primitiveTypes.put(""int"", int.class);
            primitiveTypes.put(""long"", long.class);
            primitiveTypes.put(""float"", float.class);
            primitiveTypes.put(""double"", double.class);
            primitiveTypes.put(""boolean"", boolean.class);
            primitiveTypes.put(""char"", char.class);
            primitiveTypes.put(""void"", void.class);
         }
 
         @Override
         protected Class<?> resolveClass(ObjectStreamClass desc) throws IOException, ClassNotFoundException {
             String name = desc.getName();
             try {
                 return Class.forName(name, false, classLoader);
             } catch (ClassNotFoundException ex) {
                try {
                     return Class.forName(name, false, Thread.currentThread().getContextClassLoader());
                } catch (ClassNotFoundException cnfe) {
                    Class<?> cls = primitiveTypes.get(name);
                    if (cls != null)
                        return cls;
                    else
                        throw cnfe;
                }
             }
         }
 
     }
 
 }
"
172,"java.lang.ArrayIndexOutOfBoundsException","/src/main/java/org/apache/commons/lang3/RandomStringUtils.java","
         } else if (count < 0) {
             throw new IllegalArgumentException(""Requested random string length "" + count + "" is less than 0."");
         }
 
         if (start == 0 && end == 0) {
                 if (!letters && !numbers) {
                     end = Integer.MAX_VALUE;
                 } else {
                     end = 'z' + 1;
                     start = ' ';                
                 }
         }
 
         char[] buffer = new char[count];
","
         } else if (count < 0) {
             throw new IllegalArgumentException(""Requested random string length "" + count + "" is less than 0."");
         }
        if (chars != null && chars.length == 0) {
            throw new IllegalArgumentException(""The chars array must not be empty"");
        }
 
         if (start == 0 && end == 0) {
            if (chars != null) {
                end = chars.length;
            } else {
                 if (!letters && !numbers) {
                     end = Integer.MAX_VALUE;
                 } else {
                     end = 'z' + 1;
                     start = ' ';                
                 }
            }
         }
 
         char[] buffer = new char[count];
"
173,"junit.framework.ComparisonFailure","/src/main/java/org/apache/commons/lang3/time/FastDateFormat.java","
                 rule = new TextField(Calendar.ERA, ERAs);
                 break;
             case 'y':                 if (tokenLen >= 4) {
                    rule = selectNumberRule(Calendar.YEAR, tokenLen);
                } else {
                     rule = TwoDigitYearField.INSTANCE;
                 }
                 break;
             case 'M': ","
                 rule = new TextField(Calendar.ERA, ERAs);
                 break;
             case 'y':                 if (tokenLen == 2) {
                     rule = TwoDigitYearField.INSTANCE;
                } else {
                    rule = selectNumberRule(Calendar.YEAR, tokenLen < 4 ? 4 : tokenLen);
                 }
                 break;
             case 'M': "
174,"junit.framework.ComparisonFailure","/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java","
             return;
         }
         int pos = 0;
        int len = Character.codePointCount(input, 0, input.length());
         while (pos < len) {
             int consumed = translate(input, pos, out);
             if (consumed == 0) {
                 char[] c = Character.toChars(Character.codePointAt(input, pos));
                 out.write(c);
             }
            else {
               for (int pt = 0; pt < consumed; pt++) {
                    if (pos < len - 2) {
                 pos += Character.charCount(Character.codePointAt(input, pos));
                    } else {
                        pos++;
                    }
                }
                pos--;
             }
            pos++;
         }
     }
 
","
             return;
         }
         int pos = 0;
        int len = input.length();
         while (pos < len) {
             int consumed = translate(input, pos, out);
             if (consumed == 0) {
                 char[] c = Character.toChars(Character.codePointAt(input, pos));
                 out.write(c);
                pos+= c.length;
                continue;
             }
               for (int pt = 0; pt < consumed; pt++) {
                 pos += Character.charCount(Character.codePointAt(input, pos));
             }
         }
     }
 
"
175,"junit.framework.AssertionFailedError","/src/main/java/org/apache/commons/lang3/StringUtils.java","
         if (cs1 == null || cs2 == null) {
             return false;
         }
             return cs1.equals(cs2);
     }
 
","
         if (cs1 == null || cs2 == null) {
             return false;
         }
        if (cs1 instanceof String && cs2 instanceof String) {
             return cs1.equals(cs2);
        }
        return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));
     }
 
"
176,"java.lang.NumberFormatException","/src/main/java/org/apache/commons/lang3/math/NumberUtils.java","
                          return null;
         }
        if (str.startsWith(""0x"") || str.startsWith(""-0x"")) {
             return createInteger(str);
         }   
         char lastChar = str.charAt(str.length() - 1);
","
                          return null;
         }
        if (str.startsWith(""0x"") || str.startsWith(""-0x"") || str.startsWith(""0X"") || str.startsWith(""-0X"")) {
             return createInteger(str);
         }   
         char lastChar = str.charAt(str.length() - 1);
"
177,"junit.framework.AssertionFailedError","/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java","
                 toClass, typeVarAssigns);
 
                 for (Map.Entry<TypeVariable<?>, Type> entry : toTypeVarAssigns.entrySet()) {
            Type toTypeArg = entry.getValue();
            Type fromTypeArg = fromTypeVarAssigns.get(entry.getKey());
 
                          
                 : new HashMap<TypeVariable<?>, Type>(subtypeVarAssigns);
 
                 if (cls.getTypeParameters().length > 0 || toClass.equals(cls)) {
             return typeVarAssigns;
         }
 
","
                 toClass, typeVarAssigns);
 
                 for (TypeVariable<?> var : toTypeVarAssigns.keySet()) {
            Type toTypeArg = unrollVariableAssignments(var, toTypeVarAssigns);
            Type fromTypeArg = unrollVariableAssignments(var, fromTypeVarAssigns);
 
                          
                 : new HashMap<TypeVariable<?>, Type>(subtypeVarAssigns);
 
                 if (toClass.equals(cls)) {
             return typeVarAssigns;
         }
 
"
178,"junit.framework.AssertionFailedError","/src/main/java/org/apache/commons/lang3/time/DateUtils.java","
         return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) &&
                 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) &&
                 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) &&
                cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) &&
                 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) &&
                 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) &&
                 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) &&
","
         return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) &&
                 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) &&
                 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) &&
                cal1.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR_OF_DAY) &&
                 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) &&
                 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) &&
                 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) &&
"
179,"java.lang.StringIndexOutOfBoundsException","/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java","
     public int translate(CharSequence input, int index, Writer out) throws IOException {
         int seqEnd = input.length();
                 if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {
             int start = index + 2;
             boolean isHex = false;
 

                 isHex = true;
 
                              }
 
             int end = start;
                         while(input.charAt(end) != ';') 
             {
                 end++;
             }

                 out.write(entityValue);
             }
 
 
            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
         }
         return 0;
     }
","
     public int translate(CharSequence input, int index, Writer out) throws IOException {
         int seqEnd = input.length();
                 if(input.charAt(index) == '&' && index < seqEnd - 2 && input.charAt(index + 1) == '#') {
             int start = index + 2;
             boolean isHex = false;
 

                 isHex = true;
 
                                 if(start == seqEnd) {
                    return 0;
                }
             }
 
             int end = start;
                         while(end < seqEnd && ( (input.charAt(end) >= '0' && input.charAt(end) <= '9') ||
                                    (input.charAt(end) >= 'a' && input.charAt(end) <= 'f') ||
                                    (input.charAt(end) >= 'A' && input.charAt(end) <= 'F') ) )
             {
                 end++;
             }

                 out.write(entityValue);
             }
 
            boolean semiNext = (end != seqEnd) && (input.charAt(end) == ';');
 
            return 2 + (end - start) + (isHex ? 1 : 0) + (semiNext ? 1 : 0);
         }
         return 0;
     }
"
180,"junit.framework.AssertionFailedError","/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java","
 public class ExtendedMessageFormat extends MessageFormat {
     private static final long serialVersionUID = -2362048321261811743L;
 
     private static final String DUMMY_PATTERN = """";
     private static final String ESCAPED_QUOTE = ""''"";

","
 public class ExtendedMessageFormat extends MessageFormat {
     private static final long serialVersionUID = -2362048321261811743L;
    private static final int HASH_SEED = 31;
 
     private static final String DUMMY_PATTERN = """";
     private static final String ESCAPED_QUOTE = ""''"";

    @Override
    public boolean equals(Object obj) {
        if (obj == this) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (!super.equals(obj)) {
            return false;
        }
        if (ObjectUtils.notEqual(getClass(), obj.getClass())) {
          return false;
        }
        ExtendedMessageFormat rhs = (ExtendedMessageFormat)obj;
        if (ObjectUtils.notEqual(toPattern, rhs.toPattern)) {
            return false;
        }
        if (ObjectUtils.notEqual(registry, rhs.registry)) {
            return false;
        }
        return true;
    }
 
    @Override
    public int hashCode() {
        int result = super.hashCode();
        result = HASH_SEED * result + ObjectUtils.hashCode(registry);
        result = HASH_SEED * result + ObjectUtils.hashCode(toPattern);
        return result;
    }
 
"
181,"junit.framework.AssertionFailedError","/src/main/java/org/apache/commons/lang3/math/Fraction.java","
     private static int greatestCommonDivisor(int u, int v) {
                          if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {
             return 1;
         }
         ","
     private static int greatestCommonDivisor(int u, int v) {
                 if ((u == 0) || (v == 0)) {
            if ((u == Integer.MIN_VALUE) || (v == Integer.MIN_VALUE)) {
                throw new ArithmeticException(""overflow: gcd is 2^31"");
            }
            return Math.abs(u) + Math.abs(v);
        }
                 if (Math.abs(u) == 1 || Math.abs(v) == 1) {
             return 1;
         }
         "
182,"java.lang.NullPointerException","/src/main/java/org/apache/commons/lang3/StringUtils.java","
             return EMPTY;
         }
         
        StringBuilder buf = new StringBuilder((array[startIndex] == null ? 16 : array[startIndex].toString().length()) + 1);
 
         for (int i = startIndex; i < endIndex; i++) {
             if (i > startIndex) {

             return EMPTY;
         }
 
        StringBuilder buf = new StringBuilder((array[startIndex] == null ? 16 : array[startIndex].toString().length()) + separator.length());
 
         for (int i = startIndex; i < endIndex; i++) {
             if (i > startIndex) {
","
             return EMPTY;
         }
         
        StringBuilder buf = new StringBuilder(noOfItems * 16);
 
         for (int i = startIndex; i < endIndex; i++) {
             if (i > startIndex) {

             return EMPTY;
         }
 
        StringBuilder buf = new StringBuilder(noOfItems * 16);
 
         for (int i = startIndex; i < endIndex; i++) {
             if (i > startIndex) {
"
183,"junit.framework.AssertionFailedError","/src/main/java/org/apache/commons/lang3/math/NumberUtils.java","
             if (chars[i] == 'l'
                 || chars[i] == 'L') {
                                 return foundDigit && !hasExp;
             }
                          return false;
","
             if (chars[i] == 'l'
                 || chars[i] == 'L') {
                                 return foundDigit && !hasExp && !hasDecPoint;
             }
                          return false;
"
184,"junit.framework.ComparisonFailure","/src/main/java/org/apache/commons/lang3/time/FastDateFormat.java","
        Calendar c = new GregorianCalendar(mTimeZone);
         c.setTime(date);
         return applyRules(c, new StringBuffer(mMaxLengthEstimate)).toString();
     }
","
     public String format(Date date) {
        Calendar c = new GregorianCalendar(mTimeZone, mLocale);
         c.setTime(date);
         return applyRules(c, new StringBuffer(mMaxLengthEstimate)).toString();
     }
"
185,"junit.framework.AssertionFailedError","/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java","
         {""\u00C7"", ""&Ccedil;""},          {""\u00C8"", ""&Egrave;""},          {""\u00C9"", ""&Eacute;""},         {""\u00CB"", ""&Ecirc;""},         {""\u00CC"", ""&Euml;""},         {""\u00CD"", ""&Igrave;""},         {""\u00CE"", ""&Iacute;""},         {""\u00CF"", ""&Icirc;""},         {""\u00D0"", ""&Iuml;""},         {""\u00D1"", ""&ETH;""},         {""\u00D2"", ""&Ntilde;""},         {""\u00D3"", ""&Ograve;""},         {""\u00D4"", ""&Oacute;""},         {""\u00D5"", ""&Ocirc;""},         {""\u00D6"", ""&Otilde;""},         {""\u00D7"", ""&Ouml;""},         {""\u00D8"", ""&times;""},         {""\u00D9"", ""&Oslash;""},         {""\u00DA"", ""&Ugrave;""},         {""\u00DB"", ""&Uacute;""},         {""\u00DC"", ""&Ucirc;""},         {""\u00DD"", ""&Uuml;""},         {""\u00DE"", ""&Yacute;""},         {""\u00DF"", ""&THORN;""},         {""\u00E0"", ""&szlig;""},         {""\u00E1"", ""&agrave;""},         {""\u00E2"", ""&aacute;""},         {""\u00E3"", ""&acirc;""},         {""\u00E4"", ""&atilde;""},         {""\u00E5"", ""&auml;""},          {""\u00E5"", ""&aring;""},          {""\u00E6"", ""&aelig;""},          {""\u00E7"", ""&ccedil;""}, ","
         {""\u00C7"", ""&Ccedil;""},          {""\u00C8"", ""&Egrave;""},          {""\u00C9"", ""&Eacute;""},         {""\u00CA"", ""&Ecirc;""},         {""\u00CB"", ""&Euml;""},         {""\u00CC"", ""&Igrave;""},         {""\u00CD"", ""&Iacute;""},         {""\u00CE"", ""&Icirc;""},         {""\u00CF"", ""&Iuml;""},         {""\u00D0"", ""&ETH;""},         {""\u00D1"", ""&Ntilde;""},         {""\u00D2"", ""&Ograve;""},         {""\u00D3"", ""&Oacute;""},         {""\u00D4"", ""&Ocirc;""},         {""\u00D5"", ""&Otilde;""},         {""\u00D6"", ""&Ouml;""},         {""\u00D7"", ""&times;""},         {""\u00D8"", ""&Oslash;""},         {""\u00D9"", ""&Ugrave;""},         {""\u00DA"", ""&Uacute;""},         {""\u00DB"", ""&Ucirc;""},         {""\u00DC"", ""&Uuml;""},         {""\u00DD"", ""&Yacute;""},         {""\u00DE"", ""&THORN;""},         {""\u00DF"", ""&szlig;""},         {""\u00E0"", ""&agrave;""},         {""\u00E1"", ""&aacute;""},         {""\u00E2"", ""&acirc;""},         {""\u00E3"", ""&atilde;""},         {""\u00E4"", ""&auml;""},          {""\u00E5"", ""&aring;""},          {""\u00E6"", ""&aelig;""},          {""\u00E7"", ""&ccedil;""}, "
186,"junit.framework.AssertionFailedError","/src/main/java/org/apache/commons/lang3/SystemUtils.java","
         return toVersionInt(toJavaVersionIntArray(version, JAVA_VERSION_TRIM_SIZE));
     }
 
","
    static int toJavaVersionInt(String version) {
         return toVersionInt(toJavaVersionIntArray(version, JAVA_VERSION_TRIM_SIZE));
     }
 
"
187,"junit.framework.AssertionFailedError","/src/main/java/org/apache/commons/lang3/StringUtils.java","
             return INDEX_NOT_FOUND;
         }
         int csLen = cs.length();
         int searchLen = searchChars.length;
         for (int i = 0; i < csLen; i++) {
             char ch = cs.charAt(i);
             for (int j = 0; j < searchLen; j++) {
                 if (searchChars[j] == ch) {
                                                  return i;
                 }
             }
         }

    public static boolean containsAny(CharSequence cs, char[] searchChars) {
         if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {
             return false;
         }

             char ch = cs.charAt(i);
             for (int j = 0; j < searchLength; j++) {
                 if (searchChars[j] == ch) {
                    if (i < csLast && j < searchLast && ch >= Character.MIN_HIGH_SURROGATE && ch <= Character.MAX_HIGH_SURROGATE) {
                                                     if (searchChars[j + 1] == cs.charAt(i + 1)) {
                             return true;
                         }
                     } else {

    public static boolean containsAny(CharSequence cs, String searchChars) {
         if (searchChars == null) {
             return false;
         }

             return INDEX_NOT_FOUND;
         }
         int csLen = cs.length();
         int searchLen = searchChars.length;
         outer:
         for (int i = 0; i < csLen; i++) {
             char ch = cs.charAt(i);
             for (int j = 0; j < searchLen; j++) {
                 if (searchChars[j] == ch) {
                         continue outer;
                 }
             }
             return i;

         int strLen = str.length();
         for (int i = 0; i < strLen; i++) {
             char ch = str.charAt(i);
            if (searchChars.indexOf(ch) < 0) {
                     return i;
             }
         }
         return INDEX_NOT_FOUND;

             return true;
         }
         int csLen = cs.length();
         int searchLen = searchChars.length;
         for (int i = 0; i < csLen; i++) {
             char ch = cs.charAt(i);
             for (int j = 0; j < searchLen; j++) {
                 if (searchChars[j] == ch) {
                                                                               return false;
                 }
             }
         }
","
             return INDEX_NOT_FOUND;
         }
         int csLen = cs.length();
        int csLast = csLen - 1;
         int searchLen = searchChars.length;
        int searchLast = searchLen - 1;
         for (int i = 0; i < csLen; i++) {
             char ch = cs.charAt(i);
             for (int j = 0; j < searchLen; j++) {
                 if (searchChars[j] == ch) {
                    if (i < csLast && j < searchLast && Character.isHighSurrogate(ch)) {
                                                 if (searchChars[j + 1] == cs.charAt(i + 1)) {
                            return i;
                        }
                    } else {
                         return i;
                    }
                 }
             }
         }

    public static boolean containsAny(String cs, char[] searchChars) {
         if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {
             return false;
         }

             char ch = cs.charAt(i);
             for (int j = 0; j < searchLength; j++) {
                 if (searchChars[j] == ch) {
                    if (Character.isHighSurrogate(ch)) {
                        if (j == searchLast) {
                                                         return true;
                        }
                        if (i < csLast && searchChars[j + 1] == cs.charAt(i + 1)) {
                             return true;
                         }
                     } else {

    public static boolean containsAny(String cs, String searchChars) {
         if (searchChars == null) {
             return false;
         }

             return INDEX_NOT_FOUND;
         }
         int csLen = cs.length();
        int csLast = csLen - 1;
         int searchLen = searchChars.length;
        int searchLast = searchLen - 1;
         outer:
         for (int i = 0; i < csLen; i++) {
             char ch = cs.charAt(i);
             for (int j = 0; j < searchLen; j++) {
                 if (searchChars[j] == ch) {
                    if (i < csLast && j < searchLast && Character.isHighSurrogate(ch)) {
                        if (searchChars[j + 1] == cs.charAt(i + 1)) {
                            continue outer;
                        }
                    } else {
                         continue outer;
                    }
                 }
             }
             return i;

         int strLen = str.length();
         for (int i = 0; i < strLen; i++) {
             char ch = str.charAt(i);
            boolean chFound = searchChars.indexOf(ch) >= 0;
            if (i + 1 < strLen && Character.isHighSurrogate(ch)) {
                char ch2 = str.charAt(i + 1);
                if (chFound && searchChars.indexOf(ch2) < 0) {
                     return i;
                }
            } else {
                if (!chFound) {
                    return i;
                }
             }
         }
         return INDEX_NOT_FOUND;

             return true;
         }
         int csLen = cs.length();
        int csLast = csLen - 1;
         int searchLen = searchChars.length;
        int searchLast = searchLen - 1;
         for (int i = 0; i < csLen; i++) {
             char ch = cs.charAt(i);
             for (int j = 0; j < searchLen; j++) {
                 if (searchChars[j] == ch) {
                    if (Character.isHighSurrogate(ch)) {
                        if (j == searchLast) {
                                                         return false;
                        }
                        if (i < csLast && searchChars[j + 1] == cs.charAt(i + 1)) {
                            return false;
                        }
                    } else {
                                                  return false;
                    }
                 }
             }
         }
"
188,"junit.framework.ComparisonFailure","/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java","
                 return 0;
             }
 
                 out.write(entityValue);
             return 2 + (end - start) + (isHex ? 1 : 0) + 1;
         }
         return 0;
","
                 return 0;
             }
 
            if(entityValue > 0xFFFF) {
                char[] chrs = Character.toChars(entityValue);
                out.write(chrs[0]);
                out.write(chrs[1]);
            } else {
                 out.write(entityValue);
            }
             return 2 + (end - start) + (isHex ? 1 : 0) + 1;
         }
         return 0;
"
189,"java.lang.StringIndexOutOfBoundsException","/src/main/java/org/apache/commons/lang3/math/NumberUtils.java","
         if (decPos > -1) {
 
             if (expPos > -1) {
                if (expPos < decPos) {
                     throw new NumberFormatException(str + "" is not a valid number."");
                 }
                 dec = str.substring(decPos + 1, expPos);

             mant = str.substring(0, decPos);
         } else {
             if (expPos > -1) {
                 mant = str.substring(0, expPos);
             } else {
                 mant = str;
","
         if (decPos > -1) {
 
             if (expPos > -1) {
                if (expPos < decPos || expPos > str.length()) {
                     throw new NumberFormatException(str + "" is not a valid number."");
                 }
                 dec = str.substring(decPos + 1, expPos);

             mant = str.substring(0, decPos);
         } else {
             if (expPos > -1) {
                if (expPos > str.length()) {
                    throw new NumberFormatException(str + "" is not a valid number."");
                }
                 mant = str.substring(0, expPos);
             } else {
                 mant = str;
"
190,"junit.framework.AssertionFailedError","/src/main/java/org/apache/commons/lang3/StringUtils.java","
 		}
 		int csLength = cs.length();
 		int searchLength = searchChars.length;
 		for (int i = 0; i < csLength; i++) {
 			char ch = cs.charAt(i);
 			for (int j = 0; j < searchLength; j++) {
 				if (searchChars[j] == ch) {
 						 						return true;
 				}
 			}
 		}
","
 		}
 		int csLength = cs.length();
 		int searchLength = searchChars.length;
		int csLastIndex = csLength - 1;
		int searchLastIndex = searchLength - 1;
 		for (int i = 0; i < csLength; i++) {
 			char ch = cs.charAt(i);
 			for (int j = 0; j < searchLength; j++) {
 				if (searchChars[j] == ch) {
					if (i < csLastIndex && j < searchLastIndex && ch >= Character.MIN_HIGH_SURROGATE && ch <= Character.MAX_HIGH_SURROGATE) {
												if (searchChars[j + 1] == cs.charAt(i + 1)) {
							return true;
						}
					} else {
 						 						return true;
					}
 				}
 			}
 		}
"
191,"junit.framework.AssertionFailedError","/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java","
    private static final ThreadLocal<Set<IDKey>> REGISTRY = new ThreadLocal<Set<IDKey>>() {
        @Override
        protected Set<IDKey> initialValue() {
            return new HashSet<IDKey>();
        }
    };
 

     static boolean isRegistered(Object value) {
        return getRegistry().contains(new IDKey(value));
     }
 

     static void register(Object value) {
         getRegistry().add(new IDKey(value));
     }
 

     static void unregister(Object value) {
        getRegistry().remove(new IDKey(value));
     }
 
","
    private static final ThreadLocal<Set<IDKey>> REGISTRY = new ThreadLocal<Set<IDKey>>();
 

     static boolean isRegistered(Object value) {
        Set<IDKey> registry = getRegistry();
        return registry != null && registry.contains(new IDKey(value));
     }
 

     static void register(Object value) {
        synchronized (HashCodeBuilder.class) {
            if (getRegistry() == null) {
                REGISTRY.set(new HashSet<IDKey>());
            }
        }
         getRegistry().add(new IDKey(value));
     }
 

     static void unregister(Object value) {
        Set<IDKey> s = getRegistry();
        if (s != null) {
            s.remove(new IDKey(value));
            synchronized (HashCodeBuilder.class) {
                if (s.isEmpty()) {
                    REGISTRY.remove();
                }
            }
        }
     }
 
"
192,"java.lang.NullPointerException","/src/main/java/org/apache/commons/lang3/ClassUtils.java","
         }
         Class<?>[] classes = new Class[array.length];
         for (int i = 0; i < array.length; i++) {
            classes[i] = array[i].getClass();
         }
         return classes;
     }
","
         }
         Class<?>[] classes = new Class[array.length];
         for (int i = 0; i < array.length; i++) {
            classes[i] = array[i] == null ? null : array[i].getClass();
         }
         return classes;
     }
"
193,"junit.framework.AssertionFailedError","/src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java","
    
     static Map<Object, Object> getRegistry() {
        return REGISTRY.get() != null ? REGISTRY.get() : Collections.<Object, Object>emptyMap();
     }
 

     static boolean isRegistered(Object value) {
         Map<Object, Object> m = getRegistry();
        return m.containsKey(value);
     }
 
","
     static Map<Object, Object> getRegistry() {
        return REGISTRY.get();
     }
 

     static boolean isRegistered(Object value) {
         Map<Object, Object> m = getRegistry();
        return m != null && m.containsKey(value);
     }
 
"
194,"java.lang.ArrayStoreException","/src/java/org/apache/commons/lang3/ArrayUtils.java","
         final Class<?> type1 = array1.getClass().getComponentType();
         T[] joinedArray = (T[]) Array.newInstance(type1, array1.length + array2.length);
         System.arraycopy(array1, 0, joinedArray, 0, array1.length);
             System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);
                      return joinedArray;
     }
 
","
         final Class<?> type1 = array1.getClass().getComponentType();
         T[] joinedArray = (T[]) Array.newInstance(type1, array1.length + array2.length);
         System.arraycopy(array1, 0, joinedArray, 0, array1.length);
        try {
             System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);
        } catch (ArrayStoreException ase) {
                         final Class<?> type2 = array2.getClass().getComponentType();
            if (!type1.isAssignableFrom(type2)){
                throw new IllegalArgumentException(""Cannot store ""+type2.getName()+"" in an array of ""+type1.getName());
            }
            throw ase;         }
         return joinedArray;
     }
 
"
195,"java.lang.ClassCastException","/src/main/java/org/apache/commons/lang3/ArrayUtils.java","
         } else if (element != null) {
             type = element.getClass();
         } else {
            type = Object.class;
         }
         @SuppressWarnings(""unchecked"")          T[] newArray = (T[]) copyArrayGrow1(array, type);

         } else if (element != null) {
             clss = element.getClass();
         } else {
            return (T[]) new Object[] { null };
         }
         @SuppressWarnings(""unchecked"")          final T[] newArray = (T[]) add(array, index, element, clss);
","
         } else if (element != null) {
             type = element.getClass();
         } else {
            throw new IllegalArgumentException(""Arguments cannot both be null"");            
         }
         @SuppressWarnings(""unchecked"")          T[] newArray = (T[]) copyArrayGrow1(array, type);

         } else if (element != null) {
             clss = element.getClass();
         } else {
            throw new IllegalArgumentException(""Array and element cannot both be null"");            
         }
         @SuppressWarnings(""unchecked"")          final T[] newArray = (T[]) add(array, index, element, clss);
"
196,"junit.framework.ComparisonFailure","/src/java/org/apache/commons/lang3/time/FastDateFormat.java","
      
     public StringBuffer format(Calendar calendar, StringBuffer buf) {
         if (mTimeZoneForced) {
             calendar = (Calendar) calendar.clone();
             calendar.setTimeZone(mTimeZone);
         }
","
      
     public StringBuffer format(Calendar calendar, StringBuffer buf) {
         if (mTimeZoneForced) {
            calendar.getTime();              calendar = (Calendar) calendar.clone();
             calendar.setTimeZone(mTimeZone);
         }
"
197,"junit.framework.ComparisonFailure","/src/java/org/apache/commons/lang/Entities.java","
     public void escape(Writer writer, String str) throws IOException {
         int len = str.length();
         for (int i = 0; i < len; i++) {
            char c = str.charAt(i);
             String entityName = this.entityName(c);
             if (entityName == null) {
                if (c > 0x7F) {
                     writer.write(""&#"");
                     writer.write(Integer.toString(c, 10));
                     writer.write(';');
","
     public void escape(Writer writer, String str) throws IOException {
         int len = str.length();
         for (int i = 0; i < len; i++) {
            int c = Character.codePointAt(str, i); 
             String entityName = this.entityName(c);
             if (entityName == null) {
                if (c >= 0x010000 && i < len - 1) {
                    writer.write(""&#"");
                    writer.write(Integer.toString(c, 10));
                    writer.write(';');
                    i++;
                } else if (c > 0x7F) { 
                     writer.write(""&#"");
                     writer.write(Integer.toString(c, 10));
                     writer.write(';');
"
198,"java.lang.OutOfMemoryError","/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java","
         int start = pos.getIndex();
         char[] c = pattern.toCharArray();
         if (escapingOn && c[start] == QUOTE) {
             return appendTo == null ? null : appendTo.append(QUOTE);
         }
         int lastHold = start;
","
         int start = pos.getIndex();
         char[] c = pattern.toCharArray();
         if (escapingOn && c[start] == QUOTE) {
            next(pos);
             return appendTo == null ? null : appendTo.append(QUOTE);
         }
         int lastHold = start;
"
199,"java.lang.NumberFormatException","/src/java/org/apache/commons/lang3/math/NumberUtils.java","
             }
             dec = null;
         }
        if (!Character.isDigit(lastChar)) {
             if (expPos > -1 && expPos < str.length() - 1) {
                 exp = str.substring(expPos + 1, str.length() - 1);
             } else {

                                  return false;
             }
             if (!allowSigns
                 && (chars[i] == 'd'
                     || chars[i] == 'D'
","
             }
             dec = null;
         }
        if (!Character.isDigit(lastChar) && lastChar != '.') {
             if (expPos > -1 && expPos < str.length() - 1) {
                 exp = str.substring(expPos + 1, str.length() - 1);
             } else {

                                  return false;
             }
            if (chars[i] == '.') {
                if (hasDecPoint || hasExp) {
                                        return false;
                }
                                return foundDigit;
            }
             if (!allowSigns
                 && (chars[i] == 'd'
                     || chars[i] == 'D'
"
200,"java.lang.NullPointerException","/src/java/org/apache/commons/lang3/StringUtils.java","
 
                  for (int i = 0; i < searchList.length; i++) {
             int greater = replacementList[i].length() - searchList[i].length();
             if (greater > 0) {
                 increase += 3 * greater; ","
 
                  for (int i = 0; i < searchList.length; i++) {
            if (searchList[i] == null || replacementList[i] == null) {
                continue;
            }
             int greater = replacementList[i].length() - searchList[i].length();
             if (greater > 0) {
                 increase += 3 * greater; "
201,"junit.framework.ComparisonFailure","/src/java/org/apache/commons/lang/ClassUtils.java","
             return StringUtils.EMPTY;
         }
 
 
                       
 
         int lastDotIdx = className.lastIndexOf(PACKAGE_SEPARATOR_CHAR);
         int innerIdx = className.indexOf(

         if (innerIdx != -1) {
             out = out.replace(INNER_CLASS_SEPARATOR_CHAR, PACKAGE_SEPARATOR_CHAR);
         }
        return out;
     }
 
     
        if (className == null) {
             return StringUtils.EMPTY;
         }
 
                   
         int i = className.lastIndexOf(PACKAGE_SEPARATOR_CHAR);
         if (i == -1) {
","
             return StringUtils.EMPTY;
         }
 
        StringBuffer arrayPrefix = new StringBuffer();
 
                 if (className.startsWith(""["")) {
            while (className.charAt(0) == '[') {
                className = className.substring(1);
                arrayPrefix.append(""[]"");
            }
                         if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
                className = className.substring(1, className.length() - 1);
            }
        }
 
        if (reverseAbbreviationMap.containsKey(className)) {
            className = reverseAbbreviationMap.get(className);
        }
 
         int lastDotIdx = className.lastIndexOf(PACKAGE_SEPARATOR_CHAR);
         int innerIdx = className.indexOf(

         if (innerIdx != -1) {
             out = out.replace(INNER_CLASS_SEPARATOR_CHAR, PACKAGE_SEPARATOR_CHAR);
         }
        return out + arrayPrefix;
     }
 
     
    
     public static String getPackageName(String className) {
        if (className == null || className.length() == 0) {
             return StringUtils.EMPTY;
         }
 
                 while (className.charAt(0) == '[') {
            className = className.substring(1);
        }
                 if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
            className = className.substring(1);
        }
 
         int i = className.lastIndexOf(PACKAGE_SEPARATOR_CHAR);
         if (i == -1) {
"
202,"junit.framework.AssertionFailedError","/src/java/org/apache/commons/lang/StringUtils.java","
         if (str == null || searchStr == null) {
             return false;
         }
        return contains(str.toUpperCase(), searchStr.toUpperCase());
     }
 
     ","
         if (str == null || searchStr == null) {
             return false;
         }
        int len = searchStr.length();
        int max = str.length() - len;
        for (int i = 0; i <= max; i++) {
            if (str.regionMatches(true, i, searchStr, 0, len)) {
                return true;
            }
        }
        return false;
     }
 
     "
203,"java.lang.StringIndexOutOfBoundsException","/src/java/org/apache/commons/lang/NumberUtils.java","
         if (val.length() == 0) {
             throw new NumberFormatException(""\""\"" is not a valid number."");
         }
         if (val.startsWith(""--"")) {
                          ","
         if (val.length() == 0) {
             throw new NumberFormatException(""\""\"" is not a valid number."");
         }
        if (val.length() == 1 && !Character.isDigit(val.charAt(0))) {
            throw new NumberFormatException(val + "" is not a valid number."");
        }
         if (val.startsWith(""--"")) {
                          "
204,"java.lang.StringIndexOutOfBoundsException","/src/java/org/apache/commons/lang/WordUtils.java","
 
                                             if (upper == -1 || upper > str.length()) {
","
 
                          if (lower > str.length()) {
            lower = str.length();    
        }
                           if (upper == -1 || upper > str.length()) {
"
205,"java.lang.NullPointerException","/src/java/org/apache/commons/lang/text/StrBuilder.java","
         if (width > 0) {
             ensureCapacity(size + width);
             String str = (obj == null ? getNullText() : obj.toString());
             int strLen = str.length();
             if (strLen >= width) {
                 str.getChars(strLen - width, strLen, buffer, size);

         if (width > 0) {
             ensureCapacity(size + width);
             String str = (obj == null ? getNullText() : obj.toString());
             int strLen = str.length();
             if (strLen >= width) {
                 str.getChars(0, width, buffer, size);
","
         if (width > 0) {
             ensureCapacity(size + width);
             String str = (obj == null ? getNullText() : obj.toString());
            if (str == null) {
                str = """";
            }
             int strLen = str.length();
             if (strLen >= width) {
                 str.getChars(strLen - width, strLen, buffer, size);

         if (width > 0) {
             ensureCapacity(size + width);
             String str = (obj == null ? getNullText() : obj.toString());
            if (str == null) {
                str = """";
            }
             int strLen = str.length();
             if (strLen >= width) {
                 str.getChars(0, width, buffer, size);
"
206,"junit.framework.AssertionFailedError","/src/java/org/apache/commons/lang/builder/EqualsBuilder.java","
         }
         Class lhsClass = lhs.getClass();
         if (!lhsClass.isArray()) {
                                  isEquals = lhs.equals(rhs);
         } else if (lhs.getClass() != rhs.getClass()) {
                          this.setEquals(false);
","
         }
         Class lhsClass = lhs.getClass();
         if (!lhsClass.isArray()) {
            if (lhs instanceof java.math.BigDecimal) {
                isEquals = (((java.math.BigDecimal)lhs).compareTo(rhs) == 0);
            } else {
                                  isEquals = lhs.equals(rhs);
            }
         } else if (lhs.getClass() != rhs.getClass()) {
                          this.setEquals(false);
"
207,"junit.framework.ComparisonFailure","/src/java/org/apache/commons/lang/StringEscapeUtils.java","
                         out.write('\\');
                         out.write('\\');
                         break;
                     default :
                         out.write(ch);
                         break;
","
                         out.write('\\');
                         out.write('\\');
                         break;
                    case '/':
                        out.write('\\');
                        out.write('/');
                        break;
                     default :
                         out.write(ch);
                         break;
"
208,"junit.framework.AssertionFailedError","/src/java/org/apache/commons/lang/time/DateUtils.java","
         int millisecs = val.get(Calendar.MILLISECOND);
         if (!round || millisecs < 500) {
             time = time - millisecs;
         if (field == Calendar.SECOND) {
             done = true;
            }
         }
 
                  int seconds = val.get(Calendar.SECOND);
         if (!done && (!round || seconds < 30)) {
             time = time - (seconds * 1000L);
         if (field == Calendar.MINUTE) {
             done = true;
            }
         }
 
         ","
         int millisecs = val.get(Calendar.MILLISECOND);
         if (!round || millisecs < 500) {
             time = time - millisecs;
        }
         if (field == Calendar.SECOND) {
             done = true;
         }
 
                  int seconds = val.get(Calendar.SECOND);
         if (!done && (!round || seconds < 30)) {
             time = time - (seconds * 1000L);
        }
         if (field == Calendar.MINUTE) {
             done = true;
         }
 
         "
209,"junit.framework.ComparisonFailure","/src/java/org/apache/commons/lang/StringEscapeUtils.java","
     public static String escapeJava(String str) {
        return escapeJavaStyleString(str, false);
     }
 

     public static void escapeJava(Writer out, String str) throws IOException {
        escapeJavaStyleString(out, str, false);
     }
 

     public static String escapeJavaScript(String str) {
        return escapeJavaStyleString(str, true);
     }
 

     public static void escapeJavaScript(Writer out, String str) throws IOException {
        escapeJavaStyleString(out, str, true);
     }
 

    private static String escapeJavaStyleString(String str, boolean escapeSingleQuotes) {
         if (str == null) {
             return null;
         }
         try {
             StringWriter writer = new StringWriter(str.length() * 2);
            escapeJavaStyleString(writer, str, escapeSingleQuotes);
             return writer.toString();
         } catch (IOException ioe) {
             
    private static void escapeJavaStyleString(Writer out, String str, boolean escapeSingleQuote) throws IOException {
         if (out == null) {
             throw new IllegalArgumentException(""The Writer must not be null"");
         }

                         out.write('\\');
                         break;
                     case '/' :
                             out.write('\\');
                         out.write('/');
                         break;
                     default :
","
     public static String escapeJava(String str) {
        return escapeJavaStyleString(str, false, false);
     }
 

     public static void escapeJava(Writer out, String str) throws IOException {
        escapeJavaStyleString(out, str, false, false);
     }
 

     public static String escapeJavaScript(String str) {
        return escapeJavaStyleString(str, true, true);
     }
 

     public static void escapeJavaScript(Writer out, String str) throws IOException {
        escapeJavaStyleString(out, str, true, true);
     }
 
    private static String escapeJavaStyleString(String str, boolean escapeSingleQuotes, boolean escapeForwardSlash) {
         if (str == null) {
             return null;
         }
         try {
             StringWriter writer = new StringWriter(str.length() * 2);
            escapeJavaStyleString(writer, str, escapeSingleQuotes, escapeForwardSlash);
             return writer.toString();
         } catch (IOException ioe) {
             
    private static void escapeJavaStyleString(Writer out, String str, boolean escapeSingleQuote,
            boolean escapeForwardSlash) throws IOException {
         if (out == null) {
             throw new IllegalArgumentException(""The Writer must not be null"");
         }

                         out.write('\\');
                         break;
                     case '/' :
                        if (escapeForwardSlash) {
                             out.write('\\');
                        }
                         out.write('/');
                         break;
                     default :
"
210,"junit.framework.AssertionFailedError","/src/java/org/apache/commons/lang/time/FastDateFormat.java","
             key = new Pair(key, timeZone);
         }
 
        if (locale != null) {
            key = new Pair(key, locale);
         }
 
 
         FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);
         if (format == null) {
            if (locale == null) {
                locale = Locale.getDefault();
            }
             try {
                 SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateInstance(style, locale);
                 String pattern = formatter.toPattern();

         if (timeZone != null) {
             key = new Pair(key, timeZone);
         }
        if (locale != null) {
            key = new Pair(key, locale);
         }
 
         FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key);
         if (format == null) {
            if (locale == null) {
                locale = Locale.getDefault();
            }
             try {
                 SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle,
                         locale);
","
             key = new Pair(key, timeZone);
         }
 
        if (locale == null) {
            locale = Locale.getDefault();
         }
 
        key = new Pair(key, locale);
 
         FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);
         if (format == null) {
             try {
                 SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateInstance(style, locale);
                 String pattern = formatter.toPattern();

         if (timeZone != null) {
             key = new Pair(key, timeZone);
         }
        if (locale == null) {
            locale = Locale.getDefault();
         }
        key = new Pair(key, locale);
 
         FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key);
         if (format == null) {
             try {
                 SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle,
                         locale);
"
211,"java.lang.StringIndexOutOfBoundsException","/src/java/org/apache/commons/lang/BooleanUtils.java","
                         (str.charAt(1) == 'E' || str.charAt(1) == 'e') &&
                         (str.charAt(2) == 'S' || str.charAt(2) == 's');
                 }
             }
             case 4: {
                 char ch = str.charAt(0);
","
                         (str.charAt(1) == 'E' || str.charAt(1) == 'e') &&
                         (str.charAt(2) == 'S' || str.charAt(2) == 's');
                 }
                return false;
             }
             case 4: {
                 char ch = str.charAt(0);
"
212,"junit.framework.AssertionFailedError","/src/java/org/apache/commons/lang/math/Fraction.java","
     public Fraction reduce() {
         int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);
         if (gcd == 1) {
             return this;
","
     public Fraction reduce() {
        if (numerator == 0) {
            return equals(ZERO) ? this : ZERO;
        }
         int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);
         if (gcd == 1) {
             return this;
"
213,"java.lang.IllegalArgumentException","/src/java/org/apache/commons/lang/LocaleUtils.java","
                 throw new IllegalArgumentException(""Invalid locale format: "" + str);
             }
             char ch3 = str.charAt(3);
             char ch4 = str.charAt(4);
             if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {
                 throw new IllegalArgumentException(""Invalid locale format: "" + str);
","
                 throw new IllegalArgumentException(""Invalid locale format: "" + str);
             }
             char ch3 = str.charAt(3);
            if (ch3 == '_') {
                return new Locale(str.substring(0, 2), """", str.substring(4));
            }
             char ch4 = str.charAt(4);
             if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {
                 throw new IllegalArgumentException(""Invalid locale format: "" + str);
"
214,"java.lang.NullPointerException","/src/java/org/apache/commons/lang/LocaleUtils.java","
     public static boolean isAvailableLocale(Locale locale) {
        return cAvailableLocaleSet.contains(locale);
     }
 
","
     public static boolean isAvailableLocale(Locale locale) {
        return availableLocaleList().contains(locale);
     }
 
"
215,"java.lang.NumberFormatException","/src/java/org/apache/commons/lang/math/NumberUtils.java","
                 case 'L' :
                     if (dec == null
                         && exp == null
                        && isDigits(numeric.substring(1))
                        && (numeric.charAt(0) == '-' || Character.isDigit(numeric.charAt(0)))) {
                         try {
                             return createLong(numeric);
                         } catch (NumberFormatException nfe) {
","
                 case 'L' :
                     if (dec == null
                         && exp == null
                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
                         try {
                             return createLong(numeric);
                         } catch (NumberFormatException nfe) {
"
216,"org.apache.commons.lang.SerializationException","/src/java/org/apache/commons/lang/time/FastDateFormat.java","
 package org.apache.commons.lang.time;
 
 import java.io.IOException;
 import java.io.ObjectInputStream;
 
 import java.text.DateFormat;
 import java.text.DateFormatSymbols;
 import java.text.FieldPosition;
 import java.text.Format;
 import java.text.ParsePosition;
 import java.text.SimpleDateFormat;
 import java.util.ArrayList;
 import java.util.Calendar;
 import java.util.Date;
 import java.util.GregorianCalendar;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Locale;
 import java.util.Map;
 import java.util.TimeZone;
 
 import org.apache.commons.lang.Validate;
 
 public class FastDateFormat extends Format {
                                                        
     private static final long serialVersionUID = 1L;
 
     public static final int FULL = DateFormat.FULL;
     public static final int LONG = DateFormat.LONG;
     public static final int MEDIUM = DateFormat.MEDIUM;
     public static final int SHORT = DateFormat.SHORT;
     
     private static String cDefaultPattern;
 
     private static Map cInstanceCache = new HashMap(7);
     private static Map cDateInstanceCache = new HashMap(7);
     private static Map cTimeInstanceCache = new HashMap(7);
     private static Map cDateTimeInstanceCache = new HashMap(7);
     private static Map cTimeZoneDisplayCache = new HashMap(7);
 
     private final String mPattern;
     private final TimeZone mTimeZone;
     private final boolean mTimeZoneForced;
     private final Locale mLocale;
     private final boolean mLocaleForced;
    private Rule[] mRules;
    private int mMaxLengthEstimate;

     public String toString() {
         return ""FastDateFormat["" + mPattern + ""]"";
     }
     private interface Rule {
         int estimateLength();
         void appendTo(StringBuffer buffer, Calendar calendar);
     }
 
     private interface NumberRule extends Rule {
","
 package org.apache.commons.lang.time;
 
 import java.io.IOException;
 import java.io.ObjectInputStream;
 
 import java.text.DateFormat;
 import java.text.DateFormatSymbols;
 import java.text.FieldPosition;
 import java.text.Format;
 import java.text.ParsePosition;
 import java.text.SimpleDateFormat;
 import java.util.ArrayList;
 import java.util.Calendar;
 import java.util.Date;
 import java.util.GregorianCalendar;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Locale;
 import java.util.Map;
 import java.util.TimeZone;
 
 import org.apache.commons.lang.Validate;
 public class FastDateFormat extends Format {
                                                            
     private static final long serialVersionUID = 1L;
 
     public static final int FULL = DateFormat.FULL;
     public static final int LONG = DateFormat.LONG;
     public static final int MEDIUM = DateFormat.MEDIUM;
     public static final int SHORT = DateFormat.SHORT;
     
     private static String cDefaultPattern;
 
     private static Map cInstanceCache = new HashMap(7);
     private static Map cDateInstanceCache = new HashMap(7);
     private static Map cTimeInstanceCache = new HashMap(7);
     private static Map cDateTimeInstanceCache = new HashMap(7);
     private static Map cTimeZoneDisplayCache = new HashMap(7);
 
     private final String mPattern;
     private final TimeZone mTimeZone;
     private final boolean mTimeZoneForced;
     private final Locale mLocale;
     private final boolean mLocaleForced;
    private transient Rule[] mRules;
    private transient int mMaxLengthEstimate;

     public String toString() {
         return ""FastDateFormat["" + mPattern + ""]"";
     }
 
              private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        in.defaultReadObject();
        init();
    }
     private interface Rule {
         int estimateLength();
         void appendTo(StringBuffer buffer, Calendar calendar);
     }
"
217,"junit.framework.AssertionFailedError","/src/java/org/apache/commons/lang/enums/ValuedEnum.java","
     
     public int compareTo(Object other) {
         return iValue - ((ValuedEnum) other).iValue;
     }
 

","
     public int compareTo(Object other) {
        if (other == this) {
            return 0;
        }
        if (other.getClass() != this.getClass()) {
            if (other.getClass().getName().equals(this.getClass().getName())) {
                return iValue - getValueInOtherClassLoader(other);
            }
            throw new ClassCastException(
                    ""Different enum class '"" + ClassUtils.getShortClassName(other.getClass()) + ""'"");
        }
         return iValue - ((ValuedEnum) other).iValue;
     }
 

    private int getValueInOtherClassLoader(Object other) {
        try {
            Method mth = other.getClass().getMethod(""getValue"", null);
            Integer value = (Integer) mth.invoke(other, null);
            return value.intValue();
        } catch (NoSuchMethodException e) {
                     } catch (IllegalAccessException e) {
                     } catch (InvocationTargetException e) {
                     }
        throw new IllegalStateException(""This should not happen"");
    }
"
218,"junit.framework.AssertionFailedError","/src/java/org/apache/commons/lang/time/StopWatch.java","
         if(this.runningState != STATE_RUNNING && this.runningState != STATE_SUSPENDED) {
             throw new IllegalStateException(""Stopwatch is not running. "");
         }
             stopTime = System.currentTimeMillis();
         this.runningState = STATE_STOPPED;
     }
 
","
         if(this.runningState != STATE_RUNNING && this.runningState != STATE_SUSPENDED) {
             throw new IllegalStateException(""Stopwatch is not running. "");
         }
        if(this.runningState == STATE_RUNNING) {
             stopTime = System.currentTimeMillis();
        }
         this.runningState = STATE_STOPPED;
     }
 
"
219,"java.lang.ArrayIndexOutOfBoundsException","/src/java/org/apache/commons/lang/text/StrBuilder.java","
             String str = (obj == null ? getNullText() : obj.toString());
             int strLen = str.length();
             if (strLen >= width) {
                str.getChars(0, strLen, buffer, size);
             } else {
                 int padLen = width - strLen;
                 str.getChars(0, strLen, buffer, size);
","
             String str = (obj == null ? getNullText() : obj.toString());
             int strLen = str.length();
             if (strLen >= width) {
                str.getChars(0, width, buffer, size);
             } else {
                 int padLen = width - strLen;
                 str.getChars(0, strLen, buffer, size);
"
220,"junit.framework.ComparisonFailure","/src/java/org/apache/commons/lang/Entities.java","
                             } else {
                                 entityValue = Integer.parseInt(entityName.substring(1));
                             }
                         } catch (NumberFormatException ex) {
                             entityValue = -1;
                         }

                                     case 'X' :
                                     case 'x' : {
                                         entityValue = Integer.parseInt(entityContent.substring(2), 16);
                                     }
                                     default : {
                                         entityValue = Integer.parseInt(entityContent.substring(1), 10);
                                     }
                                 }
                             } catch (NumberFormatException e) {
                             }
                         }
                     } else { ","
                             } else {
                                 entityValue = Integer.parseInt(entityName.substring(1));
                             }
                            if (entityValue > 0xFFFF) {
                                entityValue = -1;
                            }
                         } catch (NumberFormatException ex) {
                             entityValue = -1;
                         }

                                     case 'X' :
                                     case 'x' : {
                                         entityValue = Integer.parseInt(entityContent.substring(2), 16);
                                        break;
                                     }
                                     default : {
                                         entityValue = Integer.parseInt(entityContent.substring(1), 10);
                                     }
                                 }
                                if (entityValue > 0xFFFF) {
                                    entityValue = -1;
                                }
                             } catch (NumberFormatException e) {
                                entityValue = -1;
                             }
                         }
                     } else { "
221,"junit.framework.AssertionFailedError","/src/java/org/apache/commons/lang/text/StrBuilder.java","
      
     public boolean contains(char ch) {
         char[] thisBuf = buffer;
        for (int i = 0; i < thisBuf.length; i++) {
             if (thisBuf[i] == ch) {
                 return true;
             }

             return -1;
         }
         char[] thisBuf = buffer;
        for (int i = startIndex; i < thisBuf.length; i++) {
             if (thisBuf[i] == ch) {
                 return i;
             }
","
      
     public boolean contains(char ch) {
         char[] thisBuf = buffer;
        for (int i = 0; i < this.size; i++) {
             if (thisBuf[i] == ch) {
                 return true;
             }

             return -1;
         }
         char[] thisBuf = buffer;
        for (int i = startIndex; i < size; i++) {
             if (thisBuf[i] == ch) {
                 return i;
             }
"
222,"junit.framework.AssertionFailedError","/src/java/org/apache/commons/lang/text/StrBuilder.java","
             return -1;
         }
         char[] thisBuf = buffer;
        int len = thisBuf.length - strLen;
         outer:
         for (int i = startIndex; i < len; i++) {
             for (int j = 0; j < strLen; j++) {
","
             return -1;
         }
         char[] thisBuf = buffer;
        int len = size - strLen + 1;
         outer:
         for (int i = startIndex; i < len; i++) {
             for (int j = 0; j < strLen; j++) {
"
223,"junit.framework.ComparisonFailure","/src/java/org/apache/commons/lang/time/DurationFormatUtils.java","
             days -= 1;
         }
         while (days < 0) {
            days += 31;
                  months -= 1;
         }
         while (months < 0) {
             months += 12;
             years -= 1;
         }
        milliseconds -= reduceAndCorrect(start, end, Calendar.MILLISECOND, milliseconds);
        seconds -= reduceAndCorrect(start, end, Calendar.SECOND, seconds);
        minutes -= reduceAndCorrect(start, end, Calendar.MINUTE, minutes);
        hours -= reduceAndCorrect(start, end, Calendar.HOUR_OF_DAY, hours);
        days -= reduceAndCorrect(start, end, Calendar.DAY_OF_MONTH, days);
        months -= reduceAndCorrect(start, end, Calendar.MONTH, months);
        years -= reduceAndCorrect(start, end, Calendar.YEAR, years);
 
                  
         }
         return buffer.toString();
     }
    static int reduceAndCorrect(Calendar start, Calendar end, int field, int difference) {
        end.add( field, -1 * difference );
        int endValue = end.get(field);
        int startValue = start.get(field);
        if (endValue < startValue) {
            int newdiff = startValue - endValue;
            end.add( field, newdiff );
            return newdiff;
        } else {
            return 0;
        }
    }
 
     static final Object y = ""y"";
     static final Object M = ""M"";
","
             days -= 1;
         }
         while (days < 0) {
            end.add(Calendar.MONTH, -1);
            days += end.getActualMaximum(Calendar.DAY_OF_MONTH);
                  months -= 1;
            end.add(Calendar.MONTH, 1);
         }
         while (months < 0) {
             months += 12;
             years -= 1;
         }
 
                  
         }
         return buffer.toString();
     }
 
     static final Object y = ""y"";
     static final Object M = ""M"";
"
224,"junit.framework.AssertionFailedError","/src/java/org/apache/commons/lang/time/DateUtils.java","
             throw new ArithmeticException(""Calendar value too large for accurate calculations"");
         }
         
 
                  
                   
 
          
          
          
                   
         boolean roundUp = false;

                 roundUp = offset > ((max - min) / 2);
             }
                              val.set(fields[i][0], val.get(fields[i][0]) - offset);
         }
         throw new IllegalArgumentException(""The field "" + field + "" is not supported"");
 
","
             throw new ArithmeticException(""Calendar value too large for accurate calculations"");
         }
         
        if (field == Calendar.MILLISECOND) {
            return;
        }
 
                  
                   
        Date date = val.getTime();
        long time = date.getTime();
        boolean done = false;
 
                 int millisecs = val.get(Calendar.MILLISECOND);
        if (!round || millisecs < 500) {
            time = time - millisecs;
            if (field == Calendar.SECOND) {
                done = true;
            }
        }
 
                 int seconds = val.get(Calendar.SECOND);
        if (!done && (!round || seconds < 30)) {
            time = time - (seconds * 1000L);
            if (field == Calendar.MINUTE) {
                done = true;
            }
        }
 
                 int minutes = val.get(Calendar.MINUTE);
        if (!done && (!round || minutes < 30)) {
            time = time - (minutes * 60000L);
        }
 
                 if (date.getTime() != time) {
            date.setTime(time);
            val.setTime(date);
        }
          
         boolean roundUp = false;

                 roundUp = offset > ((max - min) / 2);
             }
                         if (offset != 0) {
                 val.set(fields[i][0], val.get(fields[i][0]) - offset);
            }
         }
         throw new IllegalArgumentException(""The field "" + field + "" is not supported"");
 
"
225,"junit.framework.AssertionFailedError","/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java","
   
     public double getNumericalMean() {
        return (double) (getSampleSize() * getNumberOfSuccesses()) / (double) getPopulationSize();
     }
 
","
    
     public double getNumericalMean() {
        return getSampleSize() * (getNumberOfSuccesses() / (double) getPopulationSize());
     }
 
"
226,"org.apache.commons.math3.fraction.FractionConversionException","/src/main/java/org/apache/commons/math3/fraction/BigFraction.java","
             if ((p2 > overflow) || (q2 > overflow)) {
                                                   throw new FractionConversionException(value, p2, q2);
             }
 

             if ((FastMath.abs(p2) > overflow) || (FastMath.abs(q2) > overflow)) {
                                                   throw new FractionConversionException(value, p2, q2);
             }
 
","
             if ((p2 > overflow) || (q2 > overflow)) {
                                                  if (epsilon == 0.0 && FastMath.abs(q1) < maxDenominator) {
                    break;
                }
                 throw new FractionConversionException(value, p2, q2);
             }
 

             if ((FastMath.abs(p2) > overflow) || (FastMath.abs(q2) > overflow)) {
                                                  if (epsilon == 0.0 && FastMath.abs(q1) < maxDenominator) {
                    break;
                }
                 throw new FractionConversionException(value, p2, q2);
             }
 
"
227,"java.lang.ArrayIndexOutOfBoundsException","/src/main/java/org/apache/commons/math3/util/MathArrays.java","
             throw new DimensionMismatchException(len, b.length);
         }
 
              
         final double[] prodHigh = new double[len];
         double prodLowSum = 0;
","
             throw new DimensionMismatchException(len, b.length);
         }
 
        if (len == 1) {
                         return a[0] * b[0];
        }
 
         final double[] prodHigh = new double[len];
         double prodLowSum = 0;
"
228,"junit.framework.AssertionFailedError","/src/main/java/org/apache/commons/math3/complex/Complex.java","
         }
 
         if (real == 0.0 && imaginary == 0.0) {
            return NaN;
         }
 
         if (isInfinite) {
","
         }
 
         if (real == 0.0 && imaginary == 0.0) {
            return INF;
         }
 
         if (isInfinite) {
"
229,"java.lang.ArrayStoreException","/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java","
         if (sampleSize <= 0) {
             throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,
                     sampleSize);
         }
 
        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);
 
         for (int i = 0; i < sampleSize; i++) {
             out[i] = sample();
","
  
    public Object[] sample(int sampleSize) throws NotStrictlyPositiveException {
         if (sampleSize <= 0) {
             throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,
                     sampleSize);
         }
 
        final Object[] out = new Object[sampleSize];
 
         for (int i = 0; i < sampleSize; i++) {
             out[i] = sample();
"
230,"junit.framework.AssertionFailedError","/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java","
             throw new DimensionMismatchException(vals.length, dim);
         }
 
        return FastMath.pow(2 * FastMath.PI, -dim / 2) *
             FastMath.pow(covarianceMatrixDeterminant, -0.5) *
             getExponentTerm(vals);
     }
","
             throw new DimensionMismatchException(vals.length, dim);
         }
 
        return FastMath.pow(2 * FastMath.PI, -0.5 * dim) *
             FastMath.pow(covarianceMatrixDeterminant, -0.5) *
             getExponentTerm(vals);
     }
"
231,"junit.framework.AssertionFailedError","/src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java","
         this.checker = checker;
 
         evaluations = new Incrementor(0, new MaxEvalCallback());
        iterations = new Incrementor(0, new MaxIterCallback());
     }
 

         }
 
         PointValuePair current = null;
        int iter = 0;
         int maxEval = getMaxEvaluations();
         while (true) {
            ++iter;
 
             final double objective = computeObjectiveValue(point);
             PointValuePair previous = current;
             current = new PointValuePair(point, objective);
             if (previous != null) {
                if (checker.converged(iter, previous, current)) {
                                          return current;
                 }

             steepestDescent = newSteepestDescent;
 
                         if (iter % n == 0 ||
                 beta < 0) {
                                  searchDirection = steepestDescent.clone();

 
         generationLoop:
         for (iterations = 1; iterations <= maxIterations; iterations++) {
 
                          final RealMatrix arz = randn1(dimension, lambda);

         double[] x = guess;
         double fVal = computeObjectiveValue(x);
         double[] x1 = x.clone();
        int iter = 0;
         while (true) {
            ++iter;
 
             double fX = fVal;
             double fX2 = 0;

             final PointValuePair current = new PointValuePair(x, fVal);
             if (!stop) {                  if (checker != null) {
                    stop = checker.converged(iter, previous, current);
                 }
             }
             if (stop) {

         int iteration = 0;
         final ConvergenceChecker<PointValuePair> checker = getConvergenceChecker();
         while (true) {
            if (iteration > 0) {
                 boolean converged = true;
                 for (int i = 0; i < simplex.getSize(); i++) {
                     PointValuePair prev = previous[i];

             previous = simplex.getPoints();
             simplex.iterate(evalFunc, comparator);
 
-			++iteration;
         }
     }
 

 
                  PointVectorValuePair current = null;
        int iter = 0;
         for (boolean converged = false; !converged;) {
            ++iter;
 
                          PointVectorValuePair previous = current;

 
                          if (previous != null) {
                converged = checker.converged(iter, previous, current);
                 if (converged) {
                     setCost(computeCost(currentResiduals));
                     return current;

                  lmPar = 0;
         boolean firstIteration = true;
        int iter = 0;
         final ConvergenceChecker<PointVectorValuePair> checker = getConvergenceChecker();
         while (true) {
            ++iter;
+
             final PointVectorValuePair previous = current;
 
             
                                          if (checker != null) {
                                                 if (checker.converged(iter, previous, current)) {
                             setCost(currentCost);
                             return current;
                         }
","
         this.checker = checker;
 
         evaluations = new Incrementor(0, new MaxEvalCallback());
        iterations = new Incrementor(Integer.MAX_VALUE, new MaxIterCallback());
     }
 

         }
 
         PointValuePair current = null;
         int maxEval = getMaxEvaluations();
         while (true) {
            incrementIterationCount();
 
             final double objective = computeObjectiveValue(point);
             PointValuePair previous = current;
             current = new PointValuePair(point, objective);
             if (previous != null) {
                if (checker.converged(getIterations(), previous, current)) {
                                          return current;
                 }

             steepestDescent = newSteepestDescent;
 
                         if (getIterations() % n == 0 ||
                 beta < 0) {
                                  searchDirection = steepestDescent.clone();

 
         generationLoop:
         for (iterations = 1; iterations <= maxIterations; iterations++) {
            incrementIterationCount();
 
                          final RealMatrix arz = randn1(dimension, lambda);

         double[] x = guess;
         double fVal = computeObjectiveValue(x);
         double[] x1 = x.clone();
         while (true) {
            incrementIterationCount();
 
             double fX = fVal;
             double fX2 = 0;

             final PointValuePair current = new PointValuePair(x, fVal);
             if (!stop) {                  if (checker != null) {
                    stop = checker.converged(getIterations(), previous, current);
                 }
             }
             if (stop) {

         int iteration = 0;
         final ConvergenceChecker<PointValuePair> checker = getConvergenceChecker();
         while (true) {
            if (getIterations() > 0) {
                 boolean converged = true;
                 for (int i = 0; i < simplex.getSize(); i++) {
                     PointValuePair prev = previous[i];

             previous = simplex.getPoints();
             simplex.iterate(evalFunc, comparator);
 
-			++iteration;
            incrementIterationCount();
         }
     }
 

 
                  PointVectorValuePair current = null;
         for (boolean converged = false; !converged;) {
            incrementIterationCount();
 
                          PointVectorValuePair previous = current;

 
                          if (previous != null) {
                converged = checker.converged(getIterations(), previous, current);
                 if (converged) {
                     setCost(computeCost(currentResiduals));
                     return current;

                  lmPar = 0;
         boolean firstIteration = true;
         final ConvergenceChecker<PointVectorValuePair> checker = getConvergenceChecker();
         while (true) {
            incrementIterationCount();
+
             final PointVectorValuePair previous = current;
 
             
                                          if (checker != null) {
                                                 if (checker.converged(getIterations(), previous, current)) {
                             setCost(currentCost);
                             return current;
                         }
"
232,"junit.framework.AssertionFailedError","/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java","
         }
 
          
     }
 
","
         }
 
                 result[resultOffset] = FastMath.atan2(y[yOffset], x[xOffset]);
 
     }
 
"
233,"junit.framework.AssertionFailedError","/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java","
                 final double[] eventY = interpolator.getInterpolatedState().clone();
 
                                 currentEvent.stepAccepted(eventT, eventY);
                isLastStep = currentEvent.stop();
 
                                  for (final StepHandler handler : stepHandlers) {

                 if (isLastStep) {
                                          System.arraycopy(eventY, 0, y, 0, y.length);
                    for (final EventState remaining : occuringEvents) {
                        remaining.stepAccepted(eventT, eventY);
                    }
                     return eventT;
                 }
 
                boolean needReset = currentEvent.reset(eventT, eventY);
                 if (needReset) {
                                                               System.arraycopy(eventY, 0, y, 0, y.length);
                     computeDerivatives(eventT, y, yDot);
                     resetOccurred = true;
                    for (final EventState remaining : occuringEvents) {
                        remaining.stepAccepted(eventT, eventY);
                    }
                     return eventT;
                 }
 
","
                 final double[] eventY = interpolator.getInterpolatedState().clone();
 
                                 for (final EventState state : eventsStates) {
                    state.stepAccepted(eventT, eventY);
                    isLastStep = isLastStep || state.stop();
                }
 
                                  for (final StepHandler handler : stepHandlers) {

                 if (isLastStep) {
                                          System.arraycopy(eventY, 0, y, 0, y.length);
                     return eventT;
                 }
 
                boolean needReset = false;
                for (final EventState state : eventsStates) {
                    needReset =  needReset || state.reset(eventT, eventY);
                }
                 if (needReset) {
                                                               System.arraycopy(eventY, 0, y, 0, y.length);
                     computeDerivatives(eventT, y, yDot);
                     resetOccurred = true;
                     return eventT;
                 }
 
"
234,"junit.framework.AssertionFailedError","/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java","
 package org.apache.commons.math3.random;
 
 import java.io.Serializable;
 
 import org.apache.commons.math3.exception.NotStrictlyPositiveException;
 import org.apache.commons.math3.util.FastMath;

    implements RandomGenerator {
     private double nextGaussian;
 
","
  
 package org.apache.commons.math3.random;
 
 import java.io.Serializable;
 
 import org.apache.commons.math3.exception.NotStrictlyPositiveException;
 import org.apache.commons.math3.util.FastMath;

 public abstract class BitsStreamGenerator
    implements RandomGenerator,
               Serializable {
     
    private static final long serialVersionUID = 20130104L;
          private double nextGaussian;
 
"
235,"junit.framework.AssertionFailedError","/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java","
        final Line reverted = new Line(zero, zero.subtract(direction));
         return reverted;
     }
 
","
    
     public Line revert() {
        final Line reverted = new Line(this);
        reverted.direction = reverted.direction.negate();
         return reverted;
     }
 
"
236,"java.lang.NullPointerException","/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java","
 
                  Vector3D v1D = line.intersection(subLine.line);
 
                  Location loc1 = remainingRegion.checkPoint(line.toSubSpace(v1D));

 
                  Vector2D v2D = line1.intersection(line2);
 
                  Location loc1 = getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
","
 
                  Vector3D v1D = line.intersection(subLine.line);
        if (v1D == null) {
            return null;
        }
 
                  Location loc1 = remainingRegion.checkPoint(line.toSubSpace(v1D));

 
                  Vector2D v2D = line1.intersection(line2);
        if (v2D == null) {
            return null;
        }
 
                  Location loc1 = getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
"
237,"java.lang.OutOfMemoryError","/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java","
     
     private RealMatrix squareRoot(RealMatrix m) {
             final EigenDecomposition dec = new EigenDecomposition(m);
             return dec.getSquareRoot();
     }
 }
","
  
     private RealMatrix squareRoot(RealMatrix m) {
        if (m instanceof DiagonalMatrix) {
            final int dim = m.getRowDimension();
            final RealMatrix sqrtM = new DiagonalMatrix(dim);
            for (int i = 0; i < dim; i++) {
               sqrtM.setEntry(i, i, FastMath.sqrt(m.getEntry(i, i)));
            }
            return sqrtM;
        } else {
             final EigenDecomposition dec = new EigenDecomposition(m);
             return dec.getSquareRoot();
        }
     }
 }
"
238,"java.lang.OutOfMemoryError","/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/Weight.java","
      
     public Weight(double[] weight) {
         final int dim = weight.length;
        weightMatrix = org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(dim, dim);
        for (int i = 0; i < dim; i++) {
            weightMatrix.setEntry(i, i, weight[i]);
        }
     }
 

    
     private RealMatrix squareRoot(RealMatrix m) {
             final EigenDecomposition dec = new EigenDecomposition(m);
             return dec.getSquareRoot();
     }
 }
","
      
     public Weight(double[] weight) {
         final int dim = weight.length;
        weightMatrix = new DiagonalMatrix(weight);
     }
 

  
     private RealMatrix squareRoot(RealMatrix m) {
        if (m instanceof DiagonalMatrix) {
            final int dim = m.getRowDimension();
            final RealMatrix sqrtM = new DiagonalMatrix(dim);
            for (int i = 0; i < dim; i++) {
                sqrtM.setEntry(i, i, FastMath.sqrt(m.getEntry(i, i)));
            }
            return sqrtM;
        } else {
             final EigenDecomposition dec = new EigenDecomposition(m);
             return dec.getSquareRoot();
        }
     }
 }
"
239,"junit.framework.AssertionFailedError","/src/main/java/org/apache/commons/math3/util/FastMath.java","
     private static final double TWO_POWER_52 = 4503599627370496.0;
 
     private static final double F_1_3 = 1d / 3d;

         if (x < 0) {
                         if (y >= TWO_POWER_52 || y <= -TWO_POWER_52) {
                 return pow(-x, y);
             }
 
","
     private static final double TWO_POWER_52 = 4503599627370496.0;
    private static final double TWO_POWER_53 = 2 * TWO_POWER_52;
 
     private static final double F_1_3 = 1d / 3d;

         if (x < 0) {
                         if (y >= TWO_POWER_53 || y <= -TWO_POWER_53) {
                 return pow(-x, y);
             }
 
"
240,"junit.framework.AssertionFailedError","/src/main/java/org/apache/commons/math3/dfp/Dfp.java","
             return multiplyFast(x);
     }
 
","
  
     public Dfp multiply(final int x) {
        if (x >= 0 && x < RADIX) {
             return multiplyFast(x);
        } else {
            return multiply(newInstance(x));
        }
     }
 
"
241,"junit.framework.AssertionFailedError","/src/main/java/org/apache/commons/math3/distribution/FDistribution.java","
 
     public boolean isSupportLowerBoundInclusive() {
        return true;
     }
 

 
     public boolean isSupportUpperBoundInclusive() {
        return false;
     }
 
","
 
     public boolean isSupportLowerBoundInclusive() {
        return false;
     }
 

 
     public boolean isSupportUpperBoundInclusive() {
        return true;
     }
 
"
242,"junit.framework.AssertionFailedError","/src/main/java/org/apache/commons/math3/util/FastMath.java","
  
 public class FastMath {
     public static final double PI = 105414357.0 / 33554432.0 + 1.984187159361080883e-9;

        
       if (x > 20) {
                              return 0.5 * exp(x);
           }
      if (x < -20) {
                              return 0.5 * exp(-x);
       }
 
       final double hiPrec[] = new double[2];

        
       if (x > 20) {
                              return 0.5 * exp(x);
           }
      if (x < -20) {
                              return -0.5 * exp(-x);
       }
 
       if (x == 0) {
","
  
 public class FastMath {
    private static final double LOG_MAX_VALUE = StrictMath.log(Double.MAX_VALUE);
 
     public static final double PI = 105414357.0 / 33554432.0 + 1.984187159361080883e-9;

        
       if (x > 20) {
          if (x >= LOG_MAX_VALUE) {
                             final double t = exp(0.5 * x);
              return (0.5 * t) * t;
          } else {
               return 0.5 * exp(x);
           }
      } else if (x < -20) {
          if (x <= -LOG_MAX_VALUE) {
                             final double t = exp(-0.5 * x);
              return (0.5 * t) * t;
          } else {
               return 0.5 * exp(-x);
          }
       }
 
       final double hiPrec[] = new double[2];

        
       if (x > 20) {
          if (x >= LOG_MAX_VALUE) {
                             final double t = exp(0.5 * x);
              return (0.5 * t) * t;
          } else {
               return 0.5 * exp(x);
           }
      } else if (x < -20) {
          if (x <= -LOG_MAX_VALUE) {
                             final double t = exp(-0.5 * x);
              return (-0.5 * t) * t;
          } else {
               return -0.5 * exp(-x);
          }
       }
 
       if (x == 0) {
"
243,"junit.framework.AssertionFailedError","/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java","
             double[] res = new double[x.length];
             for (int i = 0; i < x.length; i++) {
                 double diff = boundaries[1][i] - boundaries[0][i];
                res[i] = (x[i] - boundaries[0][i]) / diff;
             }
             return res;
         }

             double[] res = new double[x.length];
             for (int i = 0; i < x.length; i++) {
                 double diff = boundaries[1][i] - boundaries[0][i];
                res[i] = diff * x[i] + boundaries[0][i];
             }
             return res;
         }

                 return true;
             }
 
 
             for (int i = 0; i < x.length; i++) {
                if (x[i] < 0) {
                     return false;
                 }
                if (x[i] > 1.0) {
                     return false;
                 }
             }
","
             double[] res = new double[x.length];
             for (int i = 0; i < x.length; i++) {
                 double diff = boundaries[1][i] - boundaries[0][i];
                res[i] = x[i] / diff;
             }
             return res;
         }

             double[] res = new double[x.length];
             for (int i = 0; i < x.length; i++) {
                 double diff = boundaries[1][i] - boundaries[0][i];
                res[i] = diff * x[i];
             }
             return res;
         }

                 return true;
             }
 
            final double[] bLoEnc = encode(boundaries[0]);
            final double[] bHiEnc = encode(boundaries[1]);
 
             for (int i = 0; i < x.length; i++) {
                if (x[i] < bLoEnc[i]) {
                     return false;
                 }
                if (x[i] > bHiEnc[i]) {
                     return false;
                 }
             }
"
244,"junit.framework.AssertionFailedError","/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java","
       
         public double[] repairAndDecode(final double[] x) {
            return
                 decode(x);
         }
 
","
      
         public double[] repairAndDecode(final double[] x) {
            return boundaries != null && isRepairMode ?
                decode(repair(x)) :
                 decode(x);
         }
 
"
245,"java.lang.Exception","/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java","
                 boundaries[1] = uB;
 
                 +
             }
         } else {
             ","
                 boundaries[1] = uB;
 
                                 for (int i = 0; i < lB.length; i++) {
                    if (Double.isInfinite(boundaries[1][i] - boundaries[0][i])) {
                        final double max = Double.MAX_VALUE + boundaries[0][i];
                        final NumberIsTooLargeException e
                            = new NumberIsTooLargeException(boundaries[1][i],
                                                            max,
                                                            true);
                        e.getContext().addMessage(LocalizedFormats.OVERFLOW);
                        e.getContext().addMessage(LocalizedFormats.INDEX, i);
+
                        throw e;
                    }
                }
             }
         } else {
             "
246,"junit.framework.AssertionFailedError","/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java","
         UnivariatePointValuePair current
             = new UnivariatePointValuePair(x, isMinim ? fx : -fx);
          
         int iter = 0;
         while (true) {

                                  previous = current;
                 current = new UnivariatePointValuePair(u, isMinim ? fu : -fu);
 
                 if (checker != null) {
                     if (checker.converged(iter, previous, current)) {
                        return best(current, previous, isMinim);
                     }
                 }
 

                     }
                 }
             } else {                 return
                             best(current,
                                  previous,
                             isMinim);
             }
             ++iter;
","
         UnivariatePointValuePair current
             = new UnivariatePointValuePair(x, isMinim ? fx : -fx);
                 UnivariatePointValuePair best = current;
 
         int iter = 0;
         while (true) {

                                  previous = current;
                 current = new UnivariatePointValuePair(u, isMinim ? fu : -fu);
                best = best(best,
                            best(current,
                                 previous,
                                 isMinim),
                            isMinim);
 
                 if (checker != null) {
                     if (checker.converged(iter, previous, current)) {
                        return best;
                     }
                 }
 

                     }
                 }
             } else {                 return best(best,
                             best(current,
                                  previous,
                                 isMinim),
                             isMinim);
             }
             ++iter;
"
247,"junit.framework.AssertionFailedError","/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java","
         final double[][] c = matrix.getData();
         final double[][] b = new double[order][order];
 
        int[] swap  = new int[order];
         int[] index = new int[order];
         for (int i = 0; i < order; ++i) {
             index[i] = i;

         for (boolean loop = true; loop;) {
 
                         swap[r] = r;
             for (int i = r + 1; i < order; ++i) {
                 int ii  = index[i];
                int isi = index[swap[i]];
                if (c[ii][ii] > c[isi][isi]) {
                    swap[r] = i;
                 }
             }
 
 
                         if (swap[r] != r) {
                int tmp = index[r];
                index[r] = index[swap[r]];
                index[swap[r]] = tmp;
             }
 
             
                 final double sqrt = FastMath.sqrt(c[ir][ir]);
                 b[r][r] = sqrt;
                 final double inverse  = 1 / sqrt;
                 for (int i = r + 1; i < order; ++i) {
                     final int ii = index[i];
                     final double e = inverse * c[ii][ir];
                     b[i][r] = e;
                    c[ii][ii] -= e * e;
                     for (int j = r + 1; j < i; ++j) {
                         final int ij = index[j];
                         final double f = c[ii][ij] - e * b[j][r];
","
         final double[][] c = matrix.getData();
         final double[][] b = new double[order][order];
 
         int[] index = new int[order];
         for (int i = 0; i < order; ++i) {
             index[i] = i;

         for (boolean loop = true; loop;) {
 
                         int swapR = r;
             for (int i = r + 1; i < order; ++i) {
                 int ii  = index[i];
                int isr = index[swapR];
                if (c[ii][ii] > c[isr][isr]) {
                    swapR = i;
                 }
             }
 
 
                         if (swapR != r) {
                final int tmpIndex    = index[r];
                index[r]              = index[swapR];
                index[swapR]          = tmpIndex;
                final double[] tmpRow = b[r];
                b[r]                  = b[swapR];
                b[swapR]              = tmpRow;
             }
 
             
                 final double sqrt = FastMath.sqrt(c[ir][ir]);
                 b[r][r] = sqrt;
                 final double inverse  = 1 / sqrt;
                final double inverse2 = 1 / c[ir][ir];
                 for (int i = r + 1; i < order; ++i) {
                     final int ii = index[i];
                     final double e = inverse * c[ii][ir];
                     b[i][r] = e;
                    c[ii][ii] -= c[ii][ir] * c[ii][ir] * inverse2;
                     for (int j = r + 1; j < i; ++j) {
                         final int ij = index[j];
                         final double f = c[ii][ij] - e * b[j][r];
"
248,"junit.framework.AssertionFailedError","/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java","
 
                 if (checker != null) {
                     if (checker.converged(iter, previous, current)) {
                        return current;
                     }
                 }
 

                     }
                 }
             } else {                 return current;
             }
             ++iter;
         }
","
 
                 if (checker != null) {
                     if (checker.converged(iter, previous, current)) {
                        return best(current, previous, isMinim);
                     }
                 }
 

                     }
                 }
             } else {                 return best(current, previous, isMinim);
             }
             ++iter;
         }
"
249,"junit.framework.AssertionFailedError","/src/main/java/org/apache/commons/math3/stat/inference/MannWhitneyUTest.java","
                                              final int n2)
         throws ConvergenceException, MaxCountExceededException {
 
        final int n1n2prod = n1 * n2;
 
                  final double EU = n1n2prod / 2.0;
","
                                              final int n2)
         throws ConvergenceException, MaxCountExceededException {
 
        final double n1n2prod = n1 * n2;
 
                  final double EU = n1n2prod / 2.0;
"
250,"junit.framework.AssertionFailedError","/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java","
                 }
                 a = 0.5 * (yMax - yMin);
             } else {
                                           
                 a = FastMath.sqrt(c1 / c2);
                 omega = FastMath.sqrt(c2 / c3);
","
                 }
                 a = 0.5 * (yMax - yMin);
             } else {
                if (c2 == 0) {
                                                              throw new MathIllegalStateException(LocalizedFormats.ZERO_DENOMINATOR);
                }
 
                 a = FastMath.sqrt(c1 / c2);
                 omega = FastMath.sqrt(c2 / c3);
"
251,"junit.framework.AssertionFailedError","/src/main/java/org/apache/commons/math3/fraction/Fraction.java","
         long overflow = Integer.MAX_VALUE;
         double r0 = value;
         long a0 = (long)FastMath.floor(r0);
        if (a0 > overflow) {
             throw new FractionConversionException(value, a0, 1l);
         }
 

             long a1 = (long)FastMath.floor(r1);
             p2 = (a1 * p1) + p0;
             q2 = (a1 * q1) + q0;
            if ((p2 > overflow) || (q2 > overflow)) {
                 throw new FractionConversionException(value, p2, q2);
             }
 
","
         long overflow = Integer.MAX_VALUE;
         double r0 = value;
         long a0 = (long)FastMath.floor(r0);
        if (FastMath.abs(a0) > overflow) {
             throw new FractionConversionException(value, a0, 1l);
         }
 

             long a1 = (long)FastMath.floor(r1);
             p2 = (a1 * p1) + p0;
             q2 = (a1 * q1) + q0;
            if ((FastMath.abs(p2) > overflow) || (FastMath.abs(q2) > overflow)) {
                 throw new FractionConversionException(value, p2, q2);
             }
 
"
252,"junit.framework.AssertionFailedError","/src/main/java/org/apache/commons/math3/fraction/Fraction.java","
    
     public double percentageValue() {
        return multiply(100).doubleValue();
     }
 
","
     
     public double percentageValue() {
        return 100 * doubleValue();
     }
 
"
253,"junit.framework.AssertionFailedError","/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java","
  
        Iterator iter = entries.iterator();
        while (iter.hasNext()) {
            iter.advance();
            res.setEntry(iter.key(), iter.value() / v.getEntry(iter.key()));
         }
         return res;
     }

      
         return res;
     }
 
","
      
        final int n = getDimension();
        for (int i = 0; i < n; i++) {
            res.setEntry(i, this.getEntry(i) / v.getEntry(i));
         }
         return res;
     }

      
        if (v.isNaN() || v.isInfinite()) {
            final int n = getDimension();
            for (int i = 0; i < n; i++) {
                final double y = v.getEntry(i);
                if (Double.isNaN(y)) {
                    res.setEntry(i, Double.NaN);
                } else if (Double.isInfinite(y)) {
                    final double x = this.getEntry(i);
                    res.setEntry(i, x * y);
                }
            }
        }
         return res;
     }
 
"
254,"org.apache.commons.math3.exception.MaxCountExceededException","/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java","
              
                              for (Integer row : minRatioPositions) {
                     for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {
                         int column = i + tableau.getArtificialVariableOffset();

                         }
                     }
                 }
 
                          
                                                        Integer minRow = null;
                 int minIndex = tableau.getWidth();
                 for (Integer row : minRatioPositions) {

                     }
                 }
                 return minRow;
         }
         return minRatioPositions.get(0);
     }
","
              
                         if (tableau.getNumArtificialVariables() > 0) {
                 for (Integer row : minRatioPositions) {
                     for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {
                         int column = i + tableau.getArtificialVariableOffset();

                         }
                     }
                 }
            }
 
                          
                                                   if (getIterations() < getMaxIterations() / 2) {
                 Integer minRow = null;
                 int minIndex = tableau.getWidth();
                 for (Integer row : minRatioPositions) {

                     }
                 }
                 return minRow;
            }
         }
         return minRatioPositions.get(0);
     }
"
255,"org.apache.commons.math3.exception.ConvergenceException","/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java","
 
         int n = 1;
         double dPrev = 0.0;
        double p0 = 1.0;
        double q1 = 1.0;
         double cPrev = hPrev;
         double hN = hPrev;
 

             final double a = getA(n, x);
             final double b = getB(n, x);
 
            double cN = a * hPrev + b * p0;
            double q2 = a * q1 + b * dPrev;
            if (Double.isInfinite(cN) || Double.isInfinite(q2)) {
                double scaleFactor = 1d;
                double lastScaleFactor = 1d;
                final int maxPower = 5;
                final double scale = FastMath.max(a,b);
                if (scale <= 0) {                      throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);
                }
                for (int i = 0; i < maxPower; i++) {
                    lastScaleFactor = scaleFactor;
                    scaleFactor *= scale;
                    if (a != 0.0 && a > b) {
                        cN = hPrev / lastScaleFactor + (b / scaleFactor * p0);
                        q2 = q1 / lastScaleFactor + (b / scaleFactor * dPrev);
                    } else if (b != 0) {
                        cN = (a / scaleFactor * hPrev) + p0 / lastScaleFactor;
                        q2 = (a / scaleFactor * q1) + dPrev / lastScaleFactor;
                    }
                    if (!(Double.isInfinite(cN) || Double.isInfinite(q2))) {
                        break;
                    }
                }
             }
 
            final double deltaN = cN / q2 / cPrev;
            hN = cPrev * deltaN;
 
             if (Double.isInfinite(hN)) {
                 throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,

                 break;
             }
 
            dPrev = q1;
            cPrev = cN / q2;
            p0 = hPrev;
            hPrev = cN;
            q1 = q2;
             n++;
         }
 
","
 
         int n = 1;
         double dPrev = 0.0;
         double cPrev = hPrev;
         double hN = hPrev;
 

             final double a = getA(n, x);
             final double b = getB(n, x);
 
            double dN = a + b * dPrev;
            if (Precision.equals(dN, 0.0, small)) {
                dN = small;
            }
            double cN = a + b / cPrev;
            if (Precision.equals(cN, 0.0, small)) {
                cN = small;
             }
 
            dN = 1 / dN;
            final double deltaN = cN * dN;
            hN = hPrev * deltaN;
 
             if (Double.isInfinite(hN)) {
                 throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,

                 break;
             }
 
            dPrev = dN;
            cPrev = cN;
            hPrev = hN;
             n++;
         }
 
"
256,"java.lang.ClassCastException","/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java","
 
         if (v.length == 0) {
             final BSPTree<Euclidean2D> tree = getTree(false);
            if ((Boolean) tree.getAttribute()) {
                                  setSize(Double.POSITIVE_INFINITY);
                 setBarycenter(Vector2D.NaN);
","
 
         if (v.length == 0) {
             final BSPTree<Euclidean2D> tree = getTree(false);
            if (tree.getCut() == null && (Boolean) tree.getAttribute()) {
                                  setSize(Double.POSITIVE_INFINITY);
                 setBarycenter(Vector2D.NaN);
"
257,"junit.framework.AssertionFailedError","/src/main/java/org/apache/commons/math3/genetics/ElitisticListPopulation.java","
                                    final int populationLimit,
                                    final double elitismRate) {
         super(chromosomes, populationLimit);
        this.elitismRate = elitismRate;
     }
 

     public ElitisticListPopulation(final int populationLimit, final double elitismRate) {
         super(populationLimit);
        this.elitismRate = elitismRate;
     }
 
","
                                    final int populationLimit,
                                    final double elitismRate) {
         super(chromosomes, populationLimit);
        setElitismRate(elitismRate);
     }
 

     public ElitisticListPopulation(final int populationLimit, final double elitismRate) {
         super(populationLimit);
        setElitismRate(elitismRate);
     }
 
"
258,"junit.framework.AssertionFailedError","/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java","
                  for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {
             final double entry = tableau.getEntry(0, i);
            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
                 columnsToDrop.add(i);
             }
         }
","
                  for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {
             final double entry = tableau.getEntry(0, i);
            if (Precision.compareTo(entry, 0d, epsilon) > 0) {
                 columnsToDrop.add(i);
             }
         }
"
259,"junit.framework.AssertionFailedError","/src/main/java/org/apache/commons/math/complex/Complex.java","
     
     public Complex tan() {
        if (isNaN) {
             return NaN;
         }
 
         double real2 = 2.0 * real;
         double imaginary2 = 2.0 * imaginary;

  
     public Complex tanh() {
        if (isNaN) {
             return NaN;
         }
         double real2 = 2.0 * real;
         double imaginary2 = 2.0 * imaginary;
         double d = FastMath.cosh(real2) + FastMath.cos(imaginary2);
","
  
     public Complex tan() {
        if (isNaN || Double.isInfinite(real)) {
             return NaN;
         }
        if (imaginary > 20.0) {
            return createComplex(0.0, 1.0);
        }
        if (imaginary < -20.0) {
            return createComplex(0.0, -1.0);
        }
 
         double real2 = 2.0 * real;
         double imaginary2 = 2.0 * imaginary;

   
     public Complex tanh() {
        if (isNaN || Double.isInfinite(imaginary)) {
             return NaN;
         }
        if (real > 20.0) {
            return createComplex(1.0, 0.0);
        }
        if (real < -20.0) {
            return createComplex(-1.0, 0.0);
        }
         double real2 = 2.0 * real;
         double imaginary2 = 2.0 * imaginary;
         double d = FastMath.cosh(real2) + FastMath.cos(imaginary2);
"
260,"junit.framework.AssertionFailedError","/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java","
   
     public Iterator<Chromosome> iterator() {
        return chromosomes.iterator();
     }
 }
","
   
     public Iterator<Chromosome> iterator() {
        return getChromosomes().iterator();
     }
 }
"
261,"org.apache.commons.math.exception.TooManyEvaluationsException","/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java","
             double targetY;
             if (agingA >= MAXIMAL_AGING) {
                                 targetY = -REDUCTION_FACTOR * yB;
             } else if (agingB >= MAXIMAL_AGING) {
                                 targetY = -REDUCTION_FACTOR * yA;
             } else {
                                  targetY = 0;
","
             double targetY;
             if (agingA >= MAXIMAL_AGING) {
                                 final int p = agingA - MAXIMAL_AGING;
                final double weightA = (1 << p) - 1;
                final double weightB = p + 1;
                targetY = (weightA * yA - weightB * REDUCTION_FACTOR * yB) / (weightA + weightB);
             } else if (agingB >= MAXIMAL_AGING) {
                                 final int p = agingB - MAXIMAL_AGING;
                final double weightA = p + 1;
                final double weightB = (1 << p) - 1;
                targetY = (weightB * yB - weightA * REDUCTION_FACTOR * yA) / (weightA + weightB);
             } else {
                                  targetY = 0;
"
262,"org.apache.commons.math.optimization.direct.BOBYQAOptimizer$PathIsExploredException","/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java","
                     final int tmp2 = jpt;
                     jpt = ipt - n;
                     ipt = tmp2;
                    throw new PathIsExploredException(); +                 }
                final int iptMinus1 = ipt;
                final int jptMinus1 = jpt;
                 interpolationPoints.setEntry(nfm, iptMinus1, interpolationPoints.getEntry(ipt, iptMinus1));
                 interpolationPoints.setEntry(nfm, jptMinus1, interpolationPoints.getEntry(jpt, jptMinus1));
             }

                 final int ih = ipt * (ipt - 1) / 2 + jpt - 1;
                 final double tmp = interpolationPoints.getEntry(nfm, ipt - 1) * interpolationPoints.getEntry(nfm, jpt - 1);
                 modelSecondDerivativesValues.setEntry(ih, (fbeg - fAtInterpolationPoints.getEntry(ipt) - fAtInterpolationPoints.getEntry(jpt) + f) / tmp);
                throw new PathIsExploredException(); +             }
         } while (getEvaluations() < npt);
     } ","
                     final int tmp2 = jpt;
                     jpt = ipt - n;
                     ipt = tmp2;
+                 }
                final int iptMinus1 = ipt - 1;
                final int jptMinus1 = jpt - 1;
                 interpolationPoints.setEntry(nfm, iptMinus1, interpolationPoints.getEntry(ipt, iptMinus1));
                 interpolationPoints.setEntry(nfm, jptMinus1, interpolationPoints.getEntry(jpt, jptMinus1));
             }

                 final int ih = ipt * (ipt - 1) / 2 + jpt - 1;
                 final double tmp = interpolationPoints.getEntry(nfm, ipt - 1) * interpolationPoints.getEntry(nfm, jpt - 1);
                 modelSecondDerivativesValues.setEntry(ih, (fbeg - fAtInterpolationPoints.getEntry(ipt) - fAtInterpolationPoints.getEntry(jpt) + f) / tmp);
+             }
         } while (getEvaluations() < npt);
     } "
263,"junit.framework.AssertionFailedError","/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java","
         }
 
         stepSize = hNew;
 
                  for (int k = 1; k < stages; ++k) {
","
         }
 
         stepSize = hNew;
        if (forward) {
            if (stepStart + stepSize >= t) {
                stepSize = t - stepStart;
            }
        } else {
            if (stepStart + stepSize <= t) {
                stepSize = t - stepStart;
            }
        }
 
                  for (int k = 1; k < stages; ++k) {
"
264,"junit.framework.AssertionFailedError","/src/main/java/org/apache/commons/math/fraction/BigFraction.java","
     @Override
     public double doubleValue() {
         double result = numerator.doubleValue() / denominator.doubleValue();
                                   return result;
     }
 

     @Override
     public float floatValue() {
         float result = numerator.floatValue() / denominator.floatValue();
                                   return result;
     }
 
","
     @Override
     public double doubleValue() {
         double result = numerator.doubleValue() / denominator.doubleValue();
        if (Double.isNaN(result)) {
                                      int shift = Math.max(numerator.bitLength(),
                                 denominator.bitLength()) - Double.MAX_EXPONENT;
            result = numerator.shiftRight(shift).doubleValue() /
                denominator.shiftRight(shift).doubleValue();
        }
         return result;
     }
 

     @Override
     public float floatValue() {
         float result = numerator.floatValue() / denominator.floatValue();
        if (Double.isNaN(result)) {
                                      int shift = Math.max(numerator.bitLength(),
                                 denominator.bitLength()) - Float.MAX_EXPONENT;
            result = numerator.shiftRight(shift).floatValue() /
                denominator.shiftRight(shift).floatValue();
        }
         return result;
     }
 
"
265,"junit.framework.AssertionFailedError","/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java","
             continue;
           }
           Integer basicRow = getBasicRow(colIndex);
                                                       if (basicRows.contains(basicRow)) {
                                             coefficients[i] = 0 - (restrictToNonNegative ? 0 : mostNegative);
","
             continue;
           }
           Integer basicRow = getBasicRow(colIndex);
          if (basicRow != null && basicRow == 0) {
                                                           coefficients[i] = 0;
          } else if (basicRows.contains(basicRow)) {
                                             coefficients[i] = 0 - (restrictToNonNegative ? 0 : mostNegative);
"
266,"junit.framework.AssertionFailedError","/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java","
                 }
 
                 double sumWts = 0;
                for (int i = 0; i < weights.length; i++) {
                     sumWts += weights[i];
                 }
 
","
                 }
 
                 double sumWts = 0;
                for (int i = begin; i < begin + length; i++) {
                     sumWts += weights[i];
                 }
 
"
267,"junit.framework.AssertionFailedError","/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java","
 
             double previousT = interpolator.getGlobalPreviousTime();
             final double currentT = interpolator.getGlobalCurrentTime();
            resetOccurred = false;
 
                          if (! statesInitialized) {

                 if (isLastStep) {
                                          System.arraycopy(eventY, 0, y, 0, y.length);
                     return eventT;
                 }
 

                     System.arraycopy(eventY, 0, y, 0, y.length);
                     computeDerivatives(eventT, y, yDot);
                     resetOccurred = true;
                     return eventT;
                 }
 
","
 
             double previousT = interpolator.getGlobalPreviousTime();
             final double currentT = interpolator.getGlobalCurrentTime();
 
                          if (! statesInitialized) {

                 if (isLastStep) {
                                          System.arraycopy(eventY, 0, y, 0, y.length);
                    for (final EventState remaining : occuringEvents) {
                        remaining.stepAccepted(eventT, eventY);
                    }
                     return eventT;
                 }
 

                     System.arraycopy(eventY, 0, y, 0, y.length);
                     computeDerivatives(eventT, y, yDot);
                     resetOccurred = true;
                    for (final EventState remaining : occuringEvents) {
                        remaining.stepAccepted(eventT, eventY);
                    }
                     return eventT;
                 }
 
"
268,"junit.framework.AssertionFailedError","/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java","
         secondMoment.increment(value);
                          if (!(meanImpl instanceof Mean)) {
             meanImpl.increment(value);
         }
        if (!(varianceImpl instanceof Variance)) {
             varianceImpl.increment(value);
         }
        if (!(geoMeanImpl instanceof GeometricMean)) {
             geoMeanImpl.increment(value);
         }
         n++;
","
         secondMoment.increment(value);
                          if (meanImpl != mean) {
             meanImpl.increment(value);
         }
        if (varianceImpl != variance) {
             varianceImpl.increment(value);
         }
        if (geoMeanImpl != geoMean) {
             geoMeanImpl.increment(value);
         }
         n++;
"
269,"junit.framework.AssertionFailedError","/src/main/java/org/apache/commons/math/complex/Complex.java","
 package org.apache.commons.math.complex;
 
 import java.io.Serializable;
 import java.util.ArrayList;
 import java.util.List;
 
 import org.apache.commons.math.FieldElement;
 import org.apache.commons.math.exception.NullArgumentException;
 import org.apache.commons.math.exception.NotPositiveException;
 import org.apache.commons.math.exception.util.LocalizedFormats;
 import org.apache.commons.math.util.MathUtils;
 import org.apache.commons.math.util.FastMath;
 
 public class Complex implements FieldElement<Complex>, Serializable  {
     public static final Complex I = new Complex(0.0, 1.0);
     public static final Complex NaN = new Complex(Double.NaN, Double.NaN);
     public static final Complex INF = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
     public static final Complex ONE = new Complex(1.0, 0.0);
     public static final Complex ZERO = new Complex(0.0, 0.0);
     private static final long serialVersionUID = -6195664516687396620L;
     private final double imaginary;
     private final double real;
     private final transient boolean isNaN;
     private final transient boolean isInfinite;
     public Complex(double real, double imaginary) {
         this.real = real;
         this.imaginary = imaginary;
 
         isNaN = Double.isNaN(real) || Double.isNaN(imaginary);
         isInfinite = !isNaN &&
             (Double.isInfinite(real) || Double.isInfinite(imaginary));
     }
     public Complex divide(Complex divisor)
         throws NullArgumentException {
         MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
        if (divisor.getReal() == 0.0 && divisor.getImaginary() == 0.0) {
            return NaN;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
             return ZERO;
         }
 
         final double c = divisor.getReal();
         final double d = divisor.getImaginary();
 
         if (FastMath.abs(c) < FastMath.abs(d)) {
             double q = c / d;
             double denominator = c * q + d;
             return createComplex((real * q + imaginary) / denominator,
                 (imaginary * q - real) / denominator);
         } else {
             double q = d / c;
             double denominator = d * q + c;
             return createComplex((imaginary * q + real) / denominator,
                 (imaginary - real * q) / denominator);
         }
     }
      public Complex divide(double divisor) {
         if (isNaN || Double.isNaN(divisor)) {
             return NaN;
         }
         if (divisor == 0d) {
            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
         }
         return createComplex(real / divisor,
                              imaginary  / divisor);
     }
 ","
 package org.apache.commons.math.complex;
 
 import java.io.Serializable;
 import java.util.ArrayList;
 import java.util.List;
 
 import org.apache.commons.math.FieldElement;
 import org.apache.commons.math.exception.NullArgumentException;
 import org.apache.commons.math.exception.NotPositiveException;
 import org.apache.commons.math.exception.util.LocalizedFormats;
 import org.apache.commons.math.util.MathUtils;
 import org.apache.commons.math.util.FastMath;
  public class Complex implements FieldElement<Complex>, Serializable  {
     public static final Complex I = new Complex(0.0, 1.0);
     public static final Complex NaN = new Complex(Double.NaN, Double.NaN);
     public static final Complex INF = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
     public static final Complex ONE = new Complex(1.0, 0.0);
     public static final Complex ZERO = new Complex(0.0, 0.0);
 
     private static final long serialVersionUID = -6195664516687396620L;
 
     private final double imaginary;
     private final double real;
     private final transient boolean isNaN;
     private final transient boolean isInfinite;
    private final transient boolean isZero;
     public Complex(double real, double imaginary) {
         this.real = real;
         this.imaginary = imaginary;
 
         isNaN = Double.isNaN(real) || Double.isNaN(imaginary);
         isInfinite = !isNaN &&
             (Double.isInfinite(real) || Double.isInfinite(imaginary));
        isZero = real == 0 && imaginary == 0;
     }
 
     public Complex divide(Complex divisor)
         throws NullArgumentException {
         MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
        if (divisor.isZero) {
            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
             return ZERO;
         }
 
         final double c = divisor.getReal();
         final double d = divisor.getImaginary();
 
         if (FastMath.abs(c) < FastMath.abs(d)) {
             double q = c / d;
             double denominator = c * q + d;
             return createComplex((real * q + imaginary) / denominator,
                 (imaginary * q - real) / denominator);
         } else {
             double q = d / c;
             double denominator = d * q + c;
             return createComplex((imaginary * q + real) / denominator,
                 (imaginary - real * q) / denominator);
         }
     }
      public Complex divide(double divisor) {
         if (isNaN || Double.isNaN(divisor)) {
             return NaN;
         }
         if (divisor == 0d) {
            return isZero ? NaN : INF;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
         }
         return createComplex(real / divisor,
                              imaginary  / divisor);
     }
 "
270,"java.lang.Exception","/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java","
                 case REGULA_FALSI:
                                                               break;
                 default:
                     ","
                 case REGULA_FALSI:
                                                              if (x == x1) {
                        throw new ConvergenceException();
                    }
                     break;
                 default:
                     "
271,"junit.framework.AssertionFailedError","/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java","
                     break;
                 case REGULA_FALSI:
                                         if (x == x1) {
                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));
                        f0 = computeObjectiveValue(x0);
                    }
                     break;
                 default:
                     ","
                     break;
                 case REGULA_FALSI:
                                          break;
                 default:
                     "
272,"org.apache.commons.math.MathRuntimeException$6","/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java","
     public OpenMapRealVector ebeDivide(RealVector v) {
         checkVectorDimensions(v.getDimension());
         OpenMapRealVector res = new OpenMapRealVector(this);
        Iterator iter = res.entries.iterator();
         while (iter.hasNext()) {
             iter.advance();
             res.setEntry(iter.key(), iter.value() / v.getEntry(iter.key()));

     public OpenMapRealVector ebeDivide(double[] v) {
         checkVectorDimensions(v.length);
         OpenMapRealVector res = new OpenMapRealVector(this);
        Iterator iter = res.entries.iterator();
         while (iter.hasNext()) {
             iter.advance();
             res.setEntry(iter.key(), iter.value() / v[iter.key()]);

     public OpenMapRealVector ebeMultiply(RealVector v) {
         checkVectorDimensions(v.getDimension());
         OpenMapRealVector res = new OpenMapRealVector(this);
        Iterator iter = res.entries.iterator();
         while (iter.hasNext()) {
             iter.advance();
             res.setEntry(iter.key(), iter.value() * v.getEntry(iter.key()));

     public OpenMapRealVector ebeMultiply(double[] v) {
         checkVectorDimensions(v.length);
         OpenMapRealVector res = new OpenMapRealVector(this);
        Iterator iter = res.entries.iterator();
         while (iter.hasNext()) {
             iter.advance();
             res.setEntry(iter.key(), iter.value() * v[iter.key()]);
","
     public OpenMapRealVector ebeDivide(RealVector v) {
         checkVectorDimensions(v.getDimension());
         OpenMapRealVector res = new OpenMapRealVector(this);
        Iterator iter = entries.iterator();
         while (iter.hasNext()) {
             iter.advance();
             res.setEntry(iter.key(), iter.value() / v.getEntry(iter.key()));

     public OpenMapRealVector ebeDivide(double[] v) {
         checkVectorDimensions(v.length);
         OpenMapRealVector res = new OpenMapRealVector(this);
        Iterator iter = entries.iterator();
         while (iter.hasNext()) {
             iter.advance();
             res.setEntry(iter.key(), iter.value() / v[iter.key()]);

     public OpenMapRealVector ebeMultiply(RealVector v) {
         checkVectorDimensions(v.getDimension());
         OpenMapRealVector res = new OpenMapRealVector(this);
        Iterator iter = entries.iterator();
         while (iter.hasNext()) {
             iter.advance();
             res.setEntry(iter.key(), iter.value() * v.getEntry(iter.key()));

     public OpenMapRealVector ebeMultiply(double[] v) {
         checkVectorDimensions(v.length);
         OpenMapRealVector res = new OpenMapRealVector(this);
        Iterator iter = entries.iterator();
         while (iter.hasNext()) {
             iter.advance();
             res.setEntry(iter.key(), iter.value() * v[iter.key()]);
"
273,"junit.framework.AssertionFailedError","/src/main/java/org/apache/commons/math/complex/Complex.java","
 
         if (divisor.isZero) {
                         return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {

         }
         if (divisor == 0d) {
                         return isZero ? NaN : INF;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
","
 
         if (divisor.isZero) {
                         return NaN;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {

         }
         if (divisor == 0d) {
                         return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
"
274,"junit.framework.AssertionFailedError","/src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java","
      
     public OpenMapRealMatrix(int rowDimension, int columnDimension) {
         super(rowDimension, columnDimension);
         this.rows = rowDimension;
         this.columns = columnDimension;
         this.entries = new OpenIntToDoubleHashMap(0.0);
","
      
     public OpenMapRealMatrix(int rowDimension, int columnDimension) {
         super(rowDimension, columnDimension);
        long lRow = (long) rowDimension;
        long lCol = (long) columnDimension;
        if (lRow * lCol >= (long) Integer.MAX_VALUE) {
            throw new NumberIsTooLargeException(lRow * lCol, Integer.MAX_VALUE, false);
        }
         this.rows = rowDimension;
         this.columns = columnDimension;
         this.entries = new OpenIntToDoubleHashMap(0.0);
"
275,"org.apache.commons.math.exception.TooManyEvaluationsException","/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java","
                 case PEGASUS:
                     f0 *= f1 / (f1 + fx);
                     break;
                                                                   default:
                                      }
             }
             ","
                 case PEGASUS:
                     f0 *= f1 / (f1 + fx);
                     break;
                case REGULA_FALSI:
                    if (x == x1) {
                        final double delta = FastMath.max(rtol * FastMath.abs(x1),
                                                          atol);
                                                                          x0 = 0.5 * (x0 + x1 - delta);
                        f0 = computeObjectiveValue(x0);
                    }
                    break;
                 default:
                                         throw new MathInternalError();
                 }
             }
             "
276,"org.apache.commons.math.exception.NotStrictlyPositiveException","/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java","
      
     public double[] fit() {
         final double[] guess = (new ParameterGuesser(getObservations())).guess();
        return fit(new Gaussian.Parametric(), guess);
     }
 
","
      
     public double[] fit() {
         final double[] guess = (new ParameterGuesser(getObservations())).guess();
        return fit(guess);
     }
 
"
277,"junit.framework.AssertionFailedError","/src/main/java/org/apache/commons/math/util/FastMath.java","
     public static float max(final float a, final float b) {
        return (a <= b) ? b : (Float.isNaN(a + b) ? Float.NaN : b);
     }
 
","
      
     public static float max(final float a, final float b) {
        return (a <= b) ? b : (Float.isNaN(a + b) ? Float.NaN : a);
     }
 
"
278,"junit.framework.AssertionFailedError","/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java","
         while (resultSet.size() < k) {
                                      int sum = 0;
             for (int i = 0; i < pointSet.size(); i++) {
                 final T p = pointSet.get(i);
                 final Cluster<T> nearest = getNearestCluster(resultSet, p);
","
         while (resultSet.size() < k) {
                                      double sum = 0;
             for (int i = 0; i < pointSet.size(); i++) {
                 final T p = pointSet.get(i);
                 final Cluster<T> nearest = getNearestCluster(resultSet, p);
"
279,"junit.framework.AssertionFailedError","/src/main/java/org/apache/commons/math/complex/Complex.java","
     public Complex add(Complex rhs)
         throws NullArgumentException {
         MathUtils.checkNotNull(rhs);
         return createComplex(real + rhs.getReal(),
             imaginary + rhs.getImaginary());
     }
","
     public Complex add(Complex rhs)
         throws NullArgumentException {
         MathUtils.checkNotNull(rhs);
        if (isNaN || rhs.isNaN) {
            return NaN;
        }
         return createComplex(real + rhs.getReal(),
             imaginary + rhs.getImaginary());
     }
"
280,"org.apache.commons.math.MathRuntimeException$4","/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java","
 import java.io.Serializable;
 
 import org.apache.commons.math.MathException;
 import org.apache.commons.math.MathRuntimeException;
 import org.apache.commons.math.exception.NotStrictlyPositiveException;
 import org.apache.commons.math.exception.util.LocalizedFormats;
 import org.apache.commons.math.special.Gamma;
 import org.apache.commons.math.util.MathUtils;

      
     public PoissonDistributionImpl(double p, double epsilon, int maxIterations) {
         if (p <= 0) {
            throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN, p);
         }
         mean = p;
         normal = new NormalDistributionImpl(p, FastMath.sqrt(p));
","
 import java.io.Serializable;
 
 import org.apache.commons.math.MathException;
 import org.apache.commons.math.exception.NotStrictlyPositiveException;
 import org.apache.commons.math.exception.util.LocalizedFormats;
 import org.apache.commons.math.special.Gamma;
 import org.apache.commons.math.util.MathUtils;

      
     public PoissonDistributionImpl(double p, double epsilon, int maxIterations) {
         if (p <= 0) {
            throw new NotStrictlyPositiveException(LocalizedFormats.MEAN, p);
         }
         mean = p;
         normal = new NormalDistributionImpl(p, FastMath.sqrt(p));
"
281,"junit.framework.AssertionFailedError","/src/main/java/org/apache/commons/math/geometry/Vector3D.java","
    
   public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
 
 
               
              
        
        
 
             return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
 
   }
 
","
    
   public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
 
      final double n1 = v1.getNormSq();
      final double n2 = v2.getNormSq();
      if ((n1 * n2) < MathUtils.SAFE_MIN) {
          return ZERO;
      }
 
                    final int deltaExp = (FastMath.getExponent(n1) - FastMath.getExponent(n2)) / 4;
      final double x1    = FastMath.scalb(v1.x, -deltaExp);
      final double y1    = FastMath.scalb(v1.y, -deltaExp);
      final double z1    = FastMath.scalb(v1.z, -deltaExp);
      final double x2    = FastMath.scalb(v2.x,  deltaExp);
      final double y2    = FastMath.scalb(v2.y,  deltaExp);
      final double z2    = FastMath.scalb(v2.z,  deltaExp);
 
              
        
             final double ratio = (x1 * x2 + y1 * y2 + z1 * z2) / FastMath.scalb(n2, 2 * deltaExp);
      final double rho   = FastMath.rint(256 * ratio) / 256;
 
      final double x3 = x1 - rho * x2;
      final double y3 = y1 - rho * y2;
      final double z3 = z1 - rho * z2;
 
             return new Vector3D(y3 * z2 - z3 * y2, z3 * x2 - x3 * z2, x3 * y2 - y3 * x2);
 
   }
 
"
282,"org.apache.commons.math.ConvergenceException","/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java","
      
     public double cumulativeProbability(double x) throws MathException {
         final double dev = x - mean;
        try {
         return 0.5 * (1.0 + Erf.erf((dev) /
                     (standardDeviation * FastMath.sqrt(2.0))));
        } catch (MaxIterationsExceededException ex) {
            if (x < (mean - 20 * standardDeviation)) {                 return 0;
            } else if (x > (mean + 20 * standardDeviation)) {
                return 1;
            } else {
                throw ex;
            }
        }
     }
 
","
      
     public double cumulativeProbability(double x) throws MathException {
         final double dev = x - mean;
        if (FastMath.abs(dev) > 40 * standardDeviation) { 
            return dev < 0 ? 0.0d : 1.0d;
        }
         return 0.5 * (1.0 + Erf.erf((dev) /
                     (standardDeviation * FastMath.sqrt(2.0))));
     }
 
"
283,"junit.framework.AssertionFailedError","/src/main/java/org/apache/commons/math/dfp/Dfp.java","
                          if (x == 0) {
                                  return;
             }
 

 
         Dfp y = this;
         boolean negate = false;
        if (lessThan(getZero())) {
             y = negate();
             negate = true;
         }
","
                          if (x == 0) {
                                 if ((bits & 0x8000000000000000L) != 0) {
                    sign = -1;
                }
                 return;
             }
 

 
         Dfp y = this;
         boolean negate = false;
        int cmp0 = compare(this, getZero());
        if (cmp0 == 0) {
            return sign < 0 ? -0.0 : +0.0;
        } else if (cmp0 < 0) {
             y = negate();
             negate = true;
         }
"
284,"junit.framework.AssertionFailedError","/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java","
             indices[i] = idx;
         }
 
        int idx = 1;
        while (count < index) {
            count += idx;
            ++idx;
        }
        --idx;
        indices[last] = idx;
 
         return indices;
     }
","
             indices[i] = idx;
         }
 
        indices[last] = index - count;
 
         return indices;
     }
"
285,"junit.framework.AssertionFailedError","/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java","
   Vector3D k     = v1Su1.crossProduct(v2Su2);
   Vector3D u3    = u1.crossProduct(u2);
   double c       = k.dotProduct(u3);
  if (c == 0) {
               Vector3D v3 = Vector3D.crossProduct(v1, v2);

     Vector3D u2Prime = u1.crossProduct(u3);
     c = k.dotProduct(u2Prime);
 
    if (c == 0) {
                     k = v2Su2.crossProduct(v3Su3);;
       c = k.dotProduct(u2.crossProduct(u3));;
 
      if (c == 0) {
                           q0 = 1.0;
","
   Vector3D k     = v1Su1.crossProduct(v2Su2);
   Vector3D u3    = u1.crossProduct(u2);
   double c       = k.dotProduct(u3);
  final double inPlaneThreshold = 0.001;
  if (c <= inPlaneThreshold * k.getNorm() * u3.getNorm()) {
               Vector3D v3 = Vector3D.crossProduct(v1, v2);

     Vector3D u2Prime = u1.crossProduct(u3);
     c = k.dotProduct(u2Prime);
 
    if (c <= inPlaneThreshold * k.getNorm() * u2Prime.getNorm()) {
                     k = v2Su2.crossProduct(v3Su3);;
       c = k.dotProduct(u2.crossProduct(u3));;
 
      if (c <= 0) {
                           q0 = 1.0;
"
286,"junit.framework.AssertionFailedError","/src/main/java/org/apache/commons/math/util/MathUtils.java","
     
     public static boolean equals(double x, double y) {
        return (Double.isNaN(x) && Double.isNaN(y)) || x == y;
     }
 
","
     
     public static boolean equals(double x, double y) {
        return equals(x, y, 1);
     }
 
"
287,"junit.framework.AssertionFailedError","/src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java","
                                                  final GoalType goal,
                                                  final double min, final double max)
         throws FunctionEvaluationException {
        return optimize(f, goal, min, max, 0);
     }
 

                  for (int i = 0; i < starts; ++i) {
             try {
                final double bound1 = (i == 0) ? min : min + generator.nextDouble() * (max - min);
                final double bound2 = (i == 0) ? max : min + generator.nextDouble() * (max - min);
                optima[i] = optimizer.optimize(f, goal, FastMath.min(bound1, bound2), FastMath.max(bound1, bound2));
             } catch (FunctionEvaluationException fee) {
                 optima[i] = null;
             } catch (ConvergenceException ce) {
","
                                                  final GoalType goal,
                                                  final double min, final double max)
         throws FunctionEvaluationException {
        return optimize(f, goal, min, max, min + 0.5 * (max - min));
     }
 

                  for (int i = 0; i < starts; ++i) {
             try {
                final double s = (i == 0) ? startValue : min + generator.nextDouble() * (max - min);
                optima[i] = optimizer.optimize(f, goal, min, max, s);
             } catch (FunctionEvaluationException fee) {
                 optima[i] = null;
             } catch (ConvergenceException ce) {
"
288,"junit.framework.AssertionFailedError","/src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java","
   
     public BrentOptimizer() {
        setMaxEvaluations(Integer.MAX_VALUE);
         setMaximalIterationCount(100);
        setAbsoluteAccuracy(1E-10);
        setRelativeAccuracy(1.0e-14);
     }
 

     protected double doOptimize()
         throws MaxIterationsExceededException, FunctionEvaluationException {
        throw new UnsupportedOperationException();
    }
    public double optimize(final UnivariateRealFunction f, final GoalType goalType, final double min, final double max, final double startValue) throws MaxIterationsExceededException, FunctionEvaluationException {
        clearResult();
         return localMin(getGoalType() == GoalType.MINIMIZE,
                        f, goalType, min, startValue, max,
                         getRelativeAccuracy(), getAbsoluteAccuracy());
     }
    public double optimize(final UnivariateRealFunction f, final GoalType goalType, final double min, final double max) throws MaxIterationsExceededException, FunctionEvaluationException {
        return optimize(f, goalType, min, max, min + GOLDEN_SECTION * (max - min));
    }
 
     

                            UnivariateRealFunction f,
                            GoalType goalType,
                             double lo, double mid, double hi,
                             double eps, double t)
         throws MaxIterationsExceededException, FunctionEvaluationException {

         double w = x;
         double d = 0;
         double e = 0;
        double fx = computeObjectiveValue(f, x);
        if (goalType == GoalType.MAXIMIZE) {
             fx = -fx;
         }
         double fv = fx;
         double fw = fx;
 
        int count = 0;
        while (count < maximalIterationCount) {
             double m = 0.5 * (a + b);
             final double tol1 = eps * Math.abs(x) + t;
             final double tol2 = 2 * tol1;

                     u = x + d;
                 }
 
                double fu = computeObjectiveValue(f, u);
                if (goalType == GoalType.MAXIMIZE) {
                     fu = -fu;
                 }
 

                     }
                 }
             } else {                 setResult(x, (goalType == GoalType.MAXIMIZE) ? -fx : fx, count);
                 return x;
             }
            ++count;
         }
        throw new MaxIterationsExceededException(maximalIterationCount);
     }
 }
","
     public BrentOptimizer() {
        setMaxEvaluations(1000);
         setMaximalIterationCount(100);
        setAbsoluteAccuracy(1e-11);
        setRelativeAccuracy(1e-9);
     }
 

     protected double doOptimize()
         throws MaxIterationsExceededException, FunctionEvaluationException {
         return localMin(getGoalType() == GoalType.MINIMIZE,
                        getMin(), getStartValue(), getMax(),
                         getRelativeAccuracy(), getAbsoluteAccuracy());
     }
 

                             double lo, double mid, double hi,
                             double eps, double t)
         throws MaxIterationsExceededException, FunctionEvaluationException {

         double w = x;
         double d = 0;
         double e = 0;
        double fx = computeObjectiveValue(x);
        if (!isMinim) {
             fx = -fx;
         }
         double fv = fx;
         double fw = fx;
 
        while (true) {
             double m = 0.5 * (a + b);
             final double tol1 = eps * Math.abs(x) + t;
             final double tol2 = 2 * tol1;

                     u = x + d;
                 }
 
                double fu = computeObjectiveValue(u);
                if (!isMinim) {
                     fu = -fu;
                 }
 

                     }
                 }
             } else {                 setFunctionValue(isMinim ? fx : -fx);
                 return x;
             }
            incrementIterationsCounter();
         }
     }
 }
"
289,"junit.framework.AssertionFailedError","/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java","
     public double getRMS() {
        double criterion = 0;
        for (int i = 0; i < rows; ++i) {
            final double residual = residuals[i];
            criterion += residual * residual * residualsWeights[i];
        }
        return Math.sqrt(criterion / rows);
     }
     public double getChiSquare() {
         double chiSquare = 0;
         for (int i = 0; i < rows; ++i) {
             final double residual = residuals[i];
            chiSquare += residual * residual / residualsWeights[i];
         }
         return chiSquare;
     }
","
     public double getRMS() {
        return Math.sqrt(getChiSquare() / rows);
     }
     public double getChiSquare() {
         double chiSquare = 0;
         for (int i = 0; i < rows; ++i) {
             final double residual = residuals[i];
            chiSquare += residual * residual * residualsWeights[i];
         }
         return chiSquare;
     }
"
290,"junit.framework.AssertionFailedError","/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java","
         double[] diag    = new double[cols];
         double[] oldX    = new double[cols];
         double[] oldRes  = new double[rows];
         double[] work1   = new double[cols];
         double[] work2   = new double[cols];
         double[] work3   = new double[cols];

         boolean firstIteration = true;
         VectorialPointValuePair current = new VectorialPointValuePair(point, objective);
         while (true) {
             incrementIterationsCounter();
 
             
             qrDecomposition();
 
                         qTy(residuals);
                                       for (int k = 0; k < solvedCols; ++k) {

                     if (s != 0) {
                         double sum = 0;
                         for (int i = 0; i <= j; ++i) {
                            sum += jacobian[i][pj] * residuals[i];
                         }
                         maxCosine = Math.max(maxCosine, Math.abs(sum) / (s * cost));
                     }

             }
             if (maxCosine <= orthoTolerance) {
                                  return current;
             }
 

                 double[] tmpVec = residuals;
                 residuals = oldRes;
                 oldRes    = tmpVec;
 
                                 determineLMParameter(oldRes, delta, diag, work1, work2, work3);
 
                                  double lmNorm = 0;

 
                                  updateResidualsAndCost();
                current = new VectorialPointValuePair(point, objective);
 
                                  double actRed = -1.0;

                         xNorm    += xK * xK;
                     }
                     xNorm = Math.sqrt(xNorm);
 
                                                           } else {
                                          cost = previousCost;

                     tmpVec    = residuals;
                     residuals = oldRes;
                     oldRes    = tmpVec;
                 }
                 if (checker==null) {
                 	if (((Math.abs(actRed) <= costRelativeTolerance) &&

                        (delta <= parRelativeTolerance * xNorm)) {
                        return current;
                    }
                } else {
                    if (checker.converged(getIterations(), previous, current)) {
                        return current;
                    }
                 }
                                  ","
         double[] diag    = new double[cols];
         double[] oldX    = new double[cols];
         double[] oldRes  = new double[rows];
        double[] oldObj  = new double[rows];
        double[] qtf     = new double[rows];
         double[] work1   = new double[cols];
         double[] work2   = new double[cols];
         double[] work3   = new double[cols];

         boolean firstIteration = true;
         VectorialPointValuePair current = new VectorialPointValuePair(point, objective);
         while (true) {
            for (int i=0;i<rows;i++) {
                qtf[i]=residuals[i];
            }
             incrementIterationsCounter();
 
             
             qrDecomposition();
 
                         qTy(qtf);
                                       for (int k = 0; k < solvedCols; ++k) {

                     if (s != 0) {
                         double sum = 0;
                         for (int i = 0; i <= j; ++i) {
                            sum += jacobian[i][pj] * qtf[i];
                         }
                         maxCosine = Math.max(maxCosine, Math.abs(sum) / (s * cost));
                     }

             }
             if (maxCosine <= orthoTolerance) {
                             	updateResidualsAndCost();
            	current = new VectorialPointValuePair(point, objective);
                 return current;
             }
 

                 double[] tmpVec = residuals;
                 residuals = oldRes;
                 oldRes    = tmpVec;
                tmpVec    = objective;
                objective = oldObj;
                oldObj    = tmpVec;
 
                                 determineLMParameter(qtf, delta, diag, work1, work2, work3);
 
                                  double lmNorm = 0;

 
                                  updateResidualsAndCost();
 
                                  double actRed = -1.0;

                         xNorm    += xK * xK;
                     }
                     xNorm = Math.sqrt(xNorm);
                    current = new VectorialPointValuePair(point, objective);
 
                                         if (checker != null) {
                                         	if (checker.converged(getIterations(), previous, current)) {
                    		return current;
                    	}
                    }
                 } else {
                                          cost = previousCost;

                     tmpVec    = residuals;
                     residuals = oldRes;
                     oldRes    = tmpVec;
                    tmpVec    = objective;
                    objective = oldObj;
                    oldObj    = tmpVec;
                 }
                 if (checker==null) {
                 	if (((Math.abs(actRed) <= costRelativeTolerance) &&

                        (delta <= parRelativeTolerance * xNorm)) {
                        return current;
                    }
                 }
                                  "
291,"java.lang.NullPointerException","/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java","
     public double solve(final UnivariateRealFunction f, double min, double max, double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
        return solve(min, max);
     }
 
","
     public double solve(final UnivariateRealFunction f, double min, double max, double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
        return solve(f, min, max);
     }
 
"
292,"junit.framework.AssertionFailedError","/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java","
         setMaxIterations(1000);
 
                  setInitialStepBoundFactor(100.0);
         setCostRelativeTolerance(1.0e-10);
         setParRelativeTolerance(1.0e-10);

                  lmPar = 0;
         boolean firstIteration = true;
         while (true) {
 
             incrementIterationsCounter();
 
                          updateJacobian();
             qrDecomposition();
 

             }
             if (maxCosine <= orthoTolerance) {
                                 return new VectorialPointValuePair(point, objective);
             }
 
             
 
                                  updateResidualsAndCost();
 
                                  double actRed = -1.0;

                 }
 
                                                                                if (((Math.abs(actRed) <= costRelativeTolerance) &&
                          (preRed <= costRelativeTolerance) &&
                          (ratio <= 2.0)) ||
                         (delta <= parRelativeTolerance * xNorm)) {
                        return new VectorialPointValuePair(point, objective);
                     }
 
                                  ","
         setMaxIterations(1000);
 
                 setConvergenceChecker(null);
         setInitialStepBoundFactor(100.0);
         setCostRelativeTolerance(1.0e-10);
         setParRelativeTolerance(1.0e-10);

                  lmPar = 0;
         boolean firstIteration = true;
        VectorialPointValuePair current = new VectorialPointValuePair(point, objective);
         while (true) {
 
             incrementIterationsCounter();
 
                         VectorialPointValuePair previous = current;
             updateJacobian();
             qrDecomposition();
 

             }
             if (maxCosine <= orthoTolerance) {
                                 return current;
             }
 
             
 
                                  updateResidualsAndCost();
                current = new VectorialPointValuePair(point, objective);
 
                                  double actRed = -1.0;

                 }
 
                                 if (checker != null) {
                                         if (checker.converged(getIterations(), previous, current)) {
                        return current;                        
                    }
                } else {
                                          if (((Math.abs(actRed) <= costRelativeTolerance) &&
                          (preRed <= costRelativeTolerance) &&
                          (ratio <= 2.0)) ||
                         (delta <= parRelativeTolerance * xNorm)) {
                        return current;
                     }
                }
 
                                  "
293,"junit.framework.AssertionFailedError","/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java","
                 } else {
                     double r = correlationMatrix.getEntry(i, j);
                     double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r)));
                    out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t));
                 }
             }
         }
","
                 } else {
                     double r = correlationMatrix.getEntry(i, j);
                     double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r)));
                    out[i][j] = 2 * tDistribution.cumulativeProbability(-t);
                 }
             }
         }
"
294,"junit.framework.AssertionFailedError","/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java","
                                                                            loop     = false;
               } else {

                                                                    loop     = false;
             } else {
                 ","
                                                                           interpolator.storeTime(stepStart);
                  System.arraycopy(y, 0, yTmp, 0, y0.length);
                  hNew     = 0;
                  stepSize = 0;
                   loop     = false;
               } else {

                                                                   interpolator.storeTime(stepStart);
                System.arraycopy(y, 0, yTmp, 0, y0.length);
                stepSize = 0;
                 loop     = false;
             } else {
                 "
295,"junit.framework.AssertionFailedError","/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java","
                  double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
            setResult(yMin, 0);
             return result;
         }
 

                  double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
            setResult(yMax, 0);
             return result;
         }
 
","
                  double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
            setResult(min, 0);
             return result;
         }
 

                  double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
            setResult(max, 0);
             return result;
         }
 
"
296,"junit.framework.AssertionFailedError","/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java","
 
     
     public double getFunctionValue() {
        return optimizer.getFunctionValue();
     }
 
     
     public double getResult() {
        return optimizer.getResult();
     }
 
     
","
 
     
     public double getFunctionValue() {
        return optimaValues[0];
     }
 
     
     public double getResult() {
        return optima[0];
     }
 
     
"
297,"junit.framework.AssertionFailedError","/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java","
             return solve(f, initial, yInitial, max, yMax, initial, yInitial);
         }
 
 
                  return solve(f, min, yMin, max, yMax, initial, yInitial);
","
             return solve(f, initial, yInitial, max, yMax, initial, yInitial);
         }
 
        if (yMin * yMax > 0) {
            throw MathRuntimeException.createIllegalArgumentException(
                  NON_BRACKETING_MESSAGE, min, max, yMin, yMax);
        }
 
                  return solve(f, min, yMin, max, yMax, initial, yInitial);
"
298,"junit.framework.AssertionFailedError","/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java","
         }
 
         if (firstTime) {
          final double[] scale;
           if (vecAbsoluteTolerance == null) {
              scale = new double[y0.length];
              java.util.Arrays.fill(scale, scalAbsoluteTolerance);
             } else {
              scale = vecAbsoluteTolerance;
             }
           hNew = initializeStep(equations, forward, getOrder(), scale,
                                 stepStart, y, yDotK[0], yTmp, yDotK[1]);
","
         }
 
         if (firstTime) {
          final double[] scale = new double[y0.length];
           if (vecAbsoluteTolerance == null) {
              for (int i = 0; i < scale.length; ++i) {
                scale[i] = scalAbsoluteTolerance + scalRelativeTolerance * Math.abs(y[i]);
              }
             } else {
              for (int i = 0; i < scale.length; ++i) {
                scale[i] = vecAbsoluteTolerance[i] + vecRelativeTolerance[i] * Math.abs(y[i]);
              }
             }
           hNew = initializeStep(equations, forward, getOrder(), scale,
                                 stepStart, y, yDotK[0], yTmp, yDotK[1]);
"
299,"junit.framework.AssertionFailedError","/src/main/java/org/apache/commons/math/stat/Frequency.java","
      
     @Deprecated
     public double getPct(Object v) {
        return getCumPct((Comparable<?>) v);
     }
 
","
      
     @Deprecated
     public double getPct(Object v) {
        return getPct((Comparable<?>) v);
     }
 
"
300,"junit.framework.AssertionFailedError","/src/main/java/org/apache/commons/math/linear/ArrayRealVector.java","
     public double getLInfNorm() {
         double max = 0;
         for (double a : data) {
            max += Math.max(max, Math.abs(a));
         }
         return max;
     }

         return max;
     }
 
    public double getLInfNorm() {
        double max = 0;
        Iterator iter = entries.iterator();
        while (iter.hasNext()) {
            iter.advance();
            max += iter.value();
        }
        return max;
    }
","
     public double getLInfNorm() {
         double max = 0;
         for (double a : data) {
            max = Math.max(max, Math.abs(a));
         }
         return max;
     }

         return max;
     }
"
301,"junit.framework.AssertionFailedError","/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java","
         for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {
             final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);
             final double entry = tableau.getEntry(i, col);
            if (MathUtils.compareTo(entry, 0, epsilon) >= 0) {
                 final double ratio = rhs / entry;
                 if (ratio < minRatio) {
                     minRatio = ratio;
","
         for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {
             final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);
             final double entry = tableau.getEntry(i, col);
            if (MathUtils.compareTo(entry, 0, epsilon) > 0) {
                 final double ratio = rhs / entry;
                 if (ratio < minRatio) {
                     minRatio = ratio;
"
302,"junit.framework.AssertionFailedError","/src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java","
             if (m >= n) {
                                  final RealMatrix e =
                    eigenDecomposition.getV().getSubMatrix(0, p - 1, 0, p - 1);
                 final double[][] eData = e.getData();
                 final double[][] wData = new double[m][p];
                 double[] ei1 = eData[0];
                for (int i = 0; i < p - 1; ++i) {
                                          final double mi = mainBidiagonal[i];
                     final double[] ei0 = ei1;
                     final double[] wi  = wData[i];
                         ei1 = eData[i + 1];
                         final double si = secondaryBidiagonal[i];
                         for (int j = 0; j < p; ++j) {
                             wi[j] = (mi * ei0[j] + si * ei1[j]) / singularValues[j];
                         }
                }
                         for (int j = 0; j < p; ++j) {
                            wData[p - 1][j] = ei1[j] * mainBidiagonal[p - 1] / singularValues[j];
                         }
 
                 for (int i = p; i < m; ++i) {
                     wData[i] = new double[p];

                                                   final RealMatrix e =
                    eigenDecomposition.getV().getSubMatrix(0, p - 1, 0, p - 1);
                 final double[][] eData = e.getData();
                 final double[][] wData = new double[n][p];
                 double[] ei1 = eData[0];
                for (int i = 0; i < p - 1; ++i) {
                     final double mi = mainBidiagonal[i];
                     final double[] ei0 = ei1;
                     final double[] wi  = wData[i];
                         ei1 = eData[i + 1];
                         final double si = secondaryBidiagonal[i];
                         for (int j = 0; j < p; ++j) {
                             wi[j] = (mi * ei0[j] + si * ei1[j]) / singularValues[j];
                         }
                }
                         for (int j = 0; j < p; ++j) {
                            wData[p - 1][j] = ei1[j] * mainBidiagonal[p - 1] / singularValues[j];
                         }
                 for (int i = p; i < n; ++i) {
                     wData[i] = new double[p];
                 }
","
             if (m >= n) {
                                  final RealMatrix e =
                    eigenDecomposition.getV().getSubMatrix(0, n - 1, 0, p - 1);
                 final double[][] eData = e.getData();
                 final double[][] wData = new double[m][p];
                 double[] ei1 = eData[0];
                for (int i = 0; i < p; ++i) {
                                          final double mi = mainBidiagonal[i];
                     final double[] ei0 = ei1;
                     final double[] wi  = wData[i];
                    if (i < n - 1) {
                         ei1 = eData[i + 1];
                         final double si = secondaryBidiagonal[i];
                         for (int j = 0; j < p; ++j) {
                             wi[j] = (mi * ei0[j] + si * ei1[j]) / singularValues[j];
                         }
                    } else {
                         for (int j = 0; j < p; ++j) {
                            wi[j] = mi * ei0[j] / singularValues[j];
                         }
                    }
                }
 
                 for (int i = p; i < m; ++i) {
                     wData[i] = new double[p];

                                                   final RealMatrix e =
                    eigenDecomposition.getV().getSubMatrix(0, m - 1, 0, p - 1);
                 final double[][] eData = e.getData();
                 final double[][] wData = new double[n][p];
                 double[] ei1 = eData[0];
                for (int i = 0; i < p; ++i) {
                     final double mi = mainBidiagonal[i];
                     final double[] ei0 = ei1;
                     final double[] wi  = wData[i];
                    if (i < m - 1) {
                         ei1 = eData[i + 1];
                         final double si = secondaryBidiagonal[i];
                         for (int j = 0; j < p; ++j) {
                             wi[j] = (mi * ei0[j] + si * ei1[j]) / singularValues[j];
                         }
                    } else {
                         for (int j = 0; j < p; ++j) {
                            wi[j] = mi * ei0[j] / singularValues[j];
                         }
                    }
                }
                 for (int i = p; i < n; ++i) {
                     wData[i] = new double[p];
                 }
"
303,"junit.framework.AssertionFailedError","/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java","
     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
         while (true) {
 
             incrementIterationsCounter();

             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
             if (comparator.compare(contracted, best) < 0) {
                  
                              return;
             }
 
","
     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
        final RealConvergenceChecker checker = getConvergenceChecker();
         while (true) {
 
             incrementIterationsCounter();

             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
             if (comparator.compare(contracted, best) < 0) {
                                 return;
            }
 
                         final int iter = getIterations();
            boolean converged = true;
            for (int i = 0; i < simplex.length; ++i) {
                converged &= checker.converged(iter, original[i], simplex[i]);
            }
            if (converged) {
                 return;
             }
 
"
304,"java.lang.ArrayIndexOutOfBoundsException","/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java","
         lowerSpectra = Math.min(lowerSpectra, lower);
         final double upper = dCurrent + eCurrent;
         work[upperStart + m - 1] = upper;
         minPivot = MathUtils.SAFE_MIN * Math.max(1.0, eMax * eMax);
 
     }

                     diagMax    = work[4 * i0];
                     offDiagMin = work[4 * i0 + 2];
                     double previousEMin = work[4 * i0 + 3];
                    for (int i = 4 * i0; i < 4 * n0 - 11; i += 4) {
                        if ((work[i + 3] <= TOLERANCE_2 * work[i]) &&
                             (work[i + 2] <= TOLERANCE_2 * sigma)) {
                                                          work[i + 2]  = -sigma;

                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);
 
                                 if (end - start > 2) {
                     b2 = work[nn - 13] / work[nn - 15];
                     a2 = a2 + b2;
                     for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {
","
         lowerSpectra = Math.min(lowerSpectra, lower);
         final double upper = dCurrent + eCurrent;
         work[upperStart + m - 1] = upper;
        upperSpectra = Math.max(upperSpectra, upper);
         minPivot = MathUtils.SAFE_MIN * Math.max(1.0, eMax * eMax);
 
     }

                     diagMax    = work[4 * i0];
                     offDiagMin = work[4 * i0 + 2];
                     double previousEMin = work[4 * i0 + 3];
                    for (int i = 4 * i0; i < 4 * n0 - 16; i += 4) {
                        if ((work[i + 3] <= TOLERANCE_2 * work[i]) ||
                             (work[i + 2] <= TOLERANCE_2 * sigma)) {
                                                          work[i + 2]  = -sigma;

                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);
 
                                 if (end - start > 3) {
                     b2 = work[nn - 13] / work[nn - 15];
                     a2 = a2 + b2;
                     for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {
"
305,"junit.framework.AssertionFailedError","/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java","
     private boolean flipIfWarranted(final int n, final int step) {
         if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {
                         int j = 4 * n - 1;
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
","
     private boolean flipIfWarranted(final int n, final int step) {
         if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {
                         int j = 4 * (n - 1);
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
"
306,"org.apache.commons.math.MathRuntimeException$4","/src/main/java/org/apache/commons/math/ode/events/EventState.java","
                 if (g0Positive ^ (gb >= 0)) {
                      
                                                                           
                                                                                                                                  
                                          increasing = gb >= ga;
","
                 if (g0Positive ^ (gb >= 0)) {
                      
                    if (ga * gb > 0) {
                                                                           
                                                                                                   final double epsilon = (forward ? 0.25 : -0.25) * convergence;
                        for (int k = 0; (k < 4) && (ga * gb > 0); ++k) {
                            ta += epsilon;
                            interpolator.setInterpolatedTime(ta);
                            ga = handler.g(ta, interpolator.getInterpolatedState());
                        }
                        if (ga * gb > 0) {
                                                         throw MathRuntimeException.createInternalError(null);
                        }
                    }
                          
                                          increasing = gb >= ga;
"
307,"junit.framework.AssertionFailedError","/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java","
      
     private Integer getBasicRow(final int col, boolean ignoreObjectiveRows) {
         Integer row = null;
        int start = getNumObjectiveFunctions();
         for (int i = start; i < getHeight(); i++) {
             if (MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) {
                 row = i;

      
     protected RealPointValuePair getSolution() {
       double[] coefficients = new double[getOriginalNumDecisionVariables()];
      Integer negativeVarBasicRow = getBasicRow(getNegativeDecisionVariableOffset());
       double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());
       Set<Integer> basicRows = new HashSet<Integer>();
       for (int i = 0; i < coefficients.length; i++) {
          Integer basicRow = getBasicRow(getNumObjectiveFunctions() + i);
           if (basicRows.contains(basicRow)) {
                              ","
      
     private Integer getBasicRow(final int col, boolean ignoreObjectiveRows) {
         Integer row = null;
        int start = ignoreObjectiveRows ? getNumObjectiveFunctions() : 0;
         for (int i = start; i < getHeight(); i++) {
             if (MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) {
                 row = i;

      
     protected RealPointValuePair getSolution() {
       double[] coefficients = new double[getOriginalNumDecisionVariables()];
      Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset());
       double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());
       Set<Integer> basicRows = new HashSet<Integer>();
       for (int i = 0; i < coefficients.length; i++) {
          Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i);
           if (basicRows.contains(basicRow)) {
                              "
308,"java.lang.NullPointerException","/src/main/java/org/apache/commons/math/util/MathUtils.java","
    
     public static double distance(int[] p1, int[] p2) {
      int sum = 0;
       for (int i = 0; i < p1.length; i++) {
          final int dp = p1[i] - p2[i];
           sum += dp * dp;
       }
       return Math.sqrt(sum);
","
   
     public static double distance(int[] p1, int[] p2) {
      double sum = 0;
       for (int i = 0; i < p1.length; i++) {
          final double dp = p1[i] - p2[i];
           sum += dp * dp;
       }
       return Math.sqrt(sum);
"
309,"org.apache.commons.math.MathException","/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java","
         } while ((fa * fb > 0.0) && (numIterations < maximumIterations) && 
                 ((a > lowerBound) || (b < upperBound)));
    
        if (fa * fb >= 0.0 ) {
             throw new ConvergenceException(
                       ""number of iterations={0}, maximum iterations={1}, "" +
                       ""initial={2}, lower bound={3}, upper bound={4}, final a value={5}, "" +
","
         } while ((fa * fb > 0.0) && (numIterations < maximumIterations) && 
                 ((a > lowerBound) || (b < upperBound)));
    
        if (fa * fb > 0.0 ) {
             throw new ConvergenceException(
                       ""number of iterations={0}, maximum iterations={1}, "" +
                       ""initial={2}, lower bound={3}, upper bound={4}, final a value={5}, "" +
"
310,"java.lang.ClassCastException","/src/java/org/apache/commons/math/stat/Frequency.java","
      
     @Deprecated
     public void addValue(Object v) {
             addValue((Comparable<?>) v);            
     }
     
","
      
     @Deprecated
     public void addValue(Object v) {
        if (v instanceof Comparable<?>){
             addValue((Comparable<?>) v);            
        } else {
            throw new IllegalArgumentException(""Object must implement Comparable"");
        }
     }
     
"
311,"junit.framework.AssertionFailedError","/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java","
     private Integer getBasicRow(final int col) {
         Integer row = null;
         for (int i = getNumObjectiveFunctions(); i < getHeight(); i++) {
            if (!MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {
                if (row == null) {
                 row = i;
                } else {
                 return null;
                }
             }
         }
         return row;
","
     private Integer getBasicRow(final int col) {
         Integer row = null;
         for (int i = getNumObjectiveFunctions(); i < getHeight(); i++) {
            if (MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) {
                 row = i;
            } else if (!MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {
                 return null;
             }
         }
         return row;
"
312,"junit.framework.AssertionFailedError","/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java","
 
             final double[] lI = lTData[i];
 
            if (lTData[i][i] < absolutePositivityThreshold) {
                throw new NotPositiveDefiniteMatrixException();
            }
                          for (int j = i + 1; j < order; ++j) {
                 final double[] lJ = lTData[j];

             final double[] ltI = lTData[i];
 
              
             ltI[i] = Math.sqrt(ltI[i]);
             final double inverse = 1.0 / ltI[i];
","
 
             final double[] lI = lTData[i];
 
                          for (int j = i + 1; j < order; ++j) {
                 final double[] lJ = lTData[j];

             final double[] ltI = lTData[i];
 
                         if (ltI[i] < absolutePositivityThreshold) {
                throw new NotPositiveDefiniteMatrixException();
            }
 
             ltI[i] = Math.sqrt(ltI[i]);
             final double inverse = 1.0 / ltI[i];
"
313,"junit.framework.AssertionFailedError","/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java","
         Integer basicRow =
             getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());
         double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());
         for (int i = 0; i < coefficients.length; i++) {
             basicRow = getBasicRow(getNumObjectiveFunctions() + i);
                                                   coefficients[i] =
                     (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
                     (restrictToNonNegative ? 0 : mostNegative);
            if (basicRow != null) {
                for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {
                    if (tableau.getEntry(basicRow, j) == 1) {
                         coefficients[i] = 0;
                    }
                }
             }
         }
         return new RealPointValuePair(coefficients, f.getValue(coefficients));
","
         Integer basicRow =
             getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());
         double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());
        Set<Integer> basicRows = new HashSet<Integer>();
         for (int i = 0; i < coefficients.length; i++) {
             basicRow = getBasicRow(getNumObjectiveFunctions() + i);
            if (basicRows.contains(basicRow)) {
                                                  coefficients[i] = 0;
            } else {
                basicRows.add(basicRow);
                 coefficients[i] =
                     (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
                     (restrictToNonNegative ? 0 : mostNegative);
             }
         }
         return new RealPointValuePair(coefficients, f.getValue(coefficients));
"
314,"junit.framework.AssertionFailedError","/src/java/org/apache/commons/math/fraction/Fraction.java","
        double nOd = doubleValue();
        double dOn = object.doubleValue();
         return (nOd < dOn) ? -1 : ((nOd > dOn) ? +1 : 0);
     }
     
","
        long nOd = ((long) numerator) * object.denominator;
        long dOn = ((long) denominator) * object.numerator;
         return (nOd < dOn) ? -1 : ((nOd > dOn) ? +1 : 0);
     }
     
"
315,"junit.framework.AssertionFailedError","/src/java/org/apache/commons/math/util/MathUtils.java","
   
     public static long factorial(final int n) {
        long result = Math.round(factorialDouble(n));
        if (result == Long.MAX_VALUE) {
             throw new ArithmeticException(
                     ""factorial value is too large to fit in a long"");
         }

         if (n < 0) {
             throw new IllegalArgumentException(""must have n >= 0 for n!"");
         }
         return Math.floor(Math.exp(factorialLog(n)) + 0.5);
     }
 

         if (n < 0) {
             throw new IllegalArgumentException(""must have n > 0 for n!"");
         }
         double logSum = 0;
         for (int i = 2; i <= n; i++) {
             logSum += Math.log((double)i);
","
   
     public static long factorial(final int n) {
        if (n < 0) {
            throw new IllegalArgumentException(""must have n >= 0 for n!"");
        }
        if (n > 20) {
             throw new ArithmeticException(
                     ""factorial value is too large to fit in a long"");
         }

         if (n < 0) {
             throw new IllegalArgumentException(""must have n >= 0 for n!"");
         }
        if (n < 21) {
            return factorial(n);
        }
         return Math.floor(Math.exp(factorialLog(n)) + 0.5);
     }
 

         if (n < 0) {
             throw new IllegalArgumentException(""must have n > 0 for n!"");
         }
        if (n < 21) {
            return Math.log(factorial(n));
        }
         double logSum = 0;
         for (int i = 2; i <= n; i++) {
             logSum += Math.log((double)i);
"
316,"java.lang.IllegalArgumentException","/src/java/org/apache/commons/math/distribution/FDistributionImpl.java","
 
     protected double getInitialDomain(double p) {
        double ret;
         double d = getDenominatorDegreesOfFreedom();
                          ret = d / (d - 2.0);
         return ret;
     }
     
","
        double ret = 1.0;
         double d = getDenominatorDegreesOfFreedom();
        if (d > 2.0) {
                          ret = d / (d - 2.0);
        }
         return ret;
     }
     
"
317,"junit.framework.AssertionFailedError","/src/java/org/apache/commons/math/util/MathUtils.java","
   
     public static int gcd(int u, int v) {
        if (u * v == 0) {
             return (Math.abs(u) + Math.abs(v));
         }
         ","
    
     public static int gcd(int u, int v) {
        if ((u == 0) || (v == 0)) {
             return (Math.abs(u) + Math.abs(v));
         }
         "
318,"java.lang.IllegalArgumentException","/src/java/org/apache/commons/math/stat/Frequency.java","
      
     @Deprecated
     public void addValue(Object v) {
         Object obj = v;
         if (v instanceof Integer) {
            obj = Long.valueOf(((Integer) v).longValue());
","
      
     @Deprecated
     public void addValue(Object v) {
        addValue((Comparable<?>) v);
    }
    public void addValue(Comparable<?>v){
         Object obj = v;
         if (v instanceof Integer) {
            obj = Long.valueOf(((Integer) v).longValue());
"
319,"junit.framework.AssertionFailedError","/src/java/org/apache/commons/math/complex/Complex.java","
                 if (rhs.isNaN()) {
                     ret = this.isNaN();
                 } else {
                    ret = (Double.doubleToRawLongBits(real) == Double.doubleToRawLongBits(rhs.getReal())) && (Double.doubleToRawLongBits(imaginary) == Double.doubleToRawLongBits(rhs.getImaginary())); 
                 }
             } catch (ClassCastException ex) {
                 ","
                 if (rhs.isNaN()) {
                     ret = this.isNaN();
                 } else {
                    ret = (real == rhs.real) && (imaginary == rhs.imaginary); 
                 }
             } catch (ClassCastException ex) {
                 "
320,"junit.framework.AssertionFailedError","/src/java/org/apache/commons/math/util/MathUtils.java","
         if ((k == 1) || (k == n - 1)) {
             return n;
         }
        long result = Math.round(binomialCoefficientDouble(n, k));
        if (result == Long.MAX_VALUE) {
            throw new ArithmeticException(
                ""result too large to represent in a long integer"");
        }
                  
                                                                                                                                                                                                                                          return result;
     }
 

  
     public static double binomialCoefficientDouble(final int n, final int k) {
         
   
        return Math.floor(Math.exp(binomialCoefficientLog(n, k)) + 0.5);
     }
     
","
         if ((k == 1) || (k == n - 1)) {
             return n;
         }
                 if (k > n / 2)
            return binomialCoefficient(n, n - k);
         
                                                     long result = 1;
        if (n <= 61) {
                         for (int j = 1, i = n - k + 1; j <= k; i++, j++) {
                result = result * i / j;
            }
        } else if (n <= 66) {
                                      for (int j = 1, i = n - k + 1; j <= k; i++, j++) {
                                                                                                                      long d = gcd(i, j);
                result = (result / (j / d)) * (i / d);
            }
        } else {
                                                   for (int j = 1, i = n - k + 1; j <= k; i++, j++) {
                long d = gcd(i, j);
                result = mulAndCheck((result / (j / d)), (i / d));
            }
        }
         return result;
     }
 

  
     public static double binomialCoefficientDouble(final int n, final int k) {
        if (n < k) {
            throw new IllegalArgumentException(
                ""must have n >= k for binomial coefficient (n,k)"");
        }
        if (n < 0) {
            throw new IllegalArgumentException(
                ""must have n >= 0 for binomial coefficient (n,k)"");
        }
        if ((n == k) || (k == 0)) {
            return 1d;
        }
        if ((k == 1) || (k == n - 1)) {
            return n;
        }
        if (k > n/2) {
            return binomialCoefficientDouble(n, n - k);
        }
        if (n < 67) {
            return binomialCoefficient(n,k);
        }
         
        double result = 1d;
        for (int i = 1; i <= k; i++) {
             result *= (double)(n - k + i) / (double)i;
        }
   
        return Math.floor(result + 0.5);
     }
     

      
        if (n < 67) {  
            return Math.log(binomialCoefficient(n,k));
        }
        if (n < 1030) { 
            return Math.log(binomialCoefficientDouble(n, k));
        } 
"
321,"java.lang.ArrayIndexOutOfBoundsException","/src/java/org/apache/commons/math/linear/BigMatrixImpl.java","
         }
         final int nRows = this.getRowDimension();
         final int nCols = this.getColumnDimension();
        final BigDecimal[] out = new BigDecimal[v.length];
         for (int row = 0; row < nRows; row++) {
             BigDecimal sum = ZERO;
             for (int i = 0; i < nCols; i++) {

         if (v.length != nCols) {
             throw new IllegalArgumentException(""vector has wrong length"");
         }
        final double[] out = new double[v.length];
         for (int row = 0; row < nRows; row++) {
             final double[] dataRow = data[row];
             double sum = 0;
","
         }
         final int nRows = this.getRowDimension();
         final int nCols = this.getColumnDimension();
        final BigDecimal[] out = new BigDecimal[nRows];
         for (int row = 0; row < nRows; row++) {
             BigDecimal sum = ZERO;
             for (int i = 0; i < nCols; i++) {

         if (v.length != nCols) {
             throw new IllegalArgumentException(""vector has wrong length"");
         }
        final double[] out = new double[nRows];
         for (int row = 0; row < nRows; row++) {
             final double[] dataRow = data[row];
             double sum = 0;
"
322,"java.lang.StringIndexOutOfBoundsException","/src/java/org/apache/commons/math/complex/ComplexFormat.java","
         int n = getImaginaryCharacter().length();
         startIndex = pos.getIndex();
         int endIndex = startIndex + n;
        if (
             source.substring(startIndex, endIndex).compareTo(
             getImaginaryCharacter()) != 0) {
             ","
         int n = getImaginaryCharacter().length();
         startIndex = pos.getIndex();
         int endIndex = startIndex + n;
        if ((startIndex >= source.length()) ||
            (endIndex > source.length()) ||
             source.substring(startIndex, endIndex).compareTo(
             getImaginaryCharacter()) != 0) {
             "
323,"junit.framework.AssertionFailedError","/src/java/org/apache/commons/math/stat/regression/SimpleRegression.java","
      
     public double getSumSquaredErrors() {
        return sumYY - sumXY * sumXY / sumXX;
     }
 
","
     public double getSumSquaredErrors() {
        return Math.max(0d, sumYY - sumXY * sumXY / sumXX);
     }
 
"
324,"junit.framework.AssertionFailedError","/src/java/org/apache/commons/math/special/Gamma.java","
     private static final long serialVersionUID = -6587513359895466954L;
 
    private static final double DEFAULT_EPSILON = 10e-9;
 
     private static double[] lanczos =
","
     private static final long serialVersionUID = -6587513359895466954L;
 
    private static final double DEFAULT_EPSILON = 10e-15;
 
     private static double[] lanczos =
"
325,"java.lang.IllegalArgumentException","/src/java/org/apache/commons/math/analysis/BrentSolver.java","
         
                  double sign = yMin * yMax;
        if (sign >= 0) {
                                               throw new IllegalArgumentException
                 (""Function values at endpoints do not have different signs."" +
                         ""  Endpoints: ["" + min + "","" + max + ""]"" + 
                         ""  Values: ["" + yMin + "","" + yMax + ""]"");
        } else {
                          ret = solve(min, yMin, max, yMax, min, yMin);
                      }
 
         return ret;
","
         
                  double sign = yMin * yMax;
        if (sign > 0) {
                         if (Math.abs(yMin) <= functionValueAccuracy) {
                setResult(min, 0);
                ret = min;
            } else if (Math.abs(yMax) <= functionValueAccuracy) {
                setResult(max, 0);
                ret = max;
            } else {
                                  throw new IllegalArgumentException
                 (""Function values at endpoints do not have different signs."" +
                         ""  Endpoints: ["" + min + "","" + max + ""]"" + 
                         ""  Values: ["" + yMin + "","" + yMax + ""]"");
            }
        } else if (sign < 0){
                          ret = solve(min, yMin, max, yMax, min, yMin);
        } else {
                         if (yMin == 0.0) {
                ret = min;
            } else {
                ret = max;
            }
         }
 
         return ret;
"
326,"java.lang.ArrayIndexOutOfBoundsException","/src/java/org/apache/commons/math/estimation/AbstractEstimator.java","
 
                  final int rows = problem.getMeasurements().length;
        final int cols = problem.getAllParameters().length;
         final int max  = cols * rows;
         double[][] jTj = new double[cols][cols];
         for (int i = 0; i < cols; ++i) {

     public double[] guessParametersErrors(EstimationProblem problem)
       throws EstimationException {
         int m = problem.getMeasurements().length;
        int p = problem.getAllParameters().length;
         if (m <= p) {
             throw new EstimationException(""no degrees of freedom ({0} measurements, {1} parameters)"",
                                           new Object[] { new Integer(m), new Integer(p)});
         }
        double[] errors = new double[problem.getAllParameters().length];
         final double c = Math.sqrt(getChiSquare(problem) / (m - p));
         double[][] covar = getCovariances(problem);
         for (int i = 0; i < errors.length; ++i) {
","
 
                  final int rows = problem.getMeasurements().length;
        final int cols = problem.getUnboundParameters().length;
         final int max  = cols * rows;
         double[][] jTj = new double[cols][cols];
         for (int i = 0; i < cols; ++i) {

     public double[] guessParametersErrors(EstimationProblem problem)
       throws EstimationException {
         int m = problem.getMeasurements().length;
        int p = problem.getUnboundParameters().length;
         if (m <= p) {
             throw new EstimationException(""no degrees of freedom ({0} measurements, {1} parameters)"",
                                           new Object[] { new Integer(m), new Integer(p)});
         }
        double[] errors = new double[problem.getUnboundParameters().length];
         final double c = Math.sqrt(getChiSquare(problem) / (m - p));
         double[][] covar = getCovariances(problem);
         for (int i = 0; i < errors.length; ++i) {
"
327,"org.apache.commons.math.MaxIterationsExceededException","/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java","
    
     public double cumulativeProbability(double x) throws MathException {
             return 0.5 * (1.0 + Erf.erf((x - mean) /
                     (standardDeviation * Math.sqrt(2.0))));
     }
     
","
     public double cumulativeProbability(double x) throws MathException {
        try {
             return 0.5 * (1.0 + Erf.erf((x - mean) /
                     (standardDeviation * Math.sqrt(2.0))));
        } catch (MaxIterationsExceededException ex) {
            if (x < (mean - 20 * standardDeviation)) {                 return 0.0d;
            } else if (x > (mean + 20 * standardDeviation)) {
                return 1.0d;
            } else {
                throw ex;
            }
        }
     }
     
     "
328,"junit.framework.AssertionFailedError","/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java","
             throw new IllegalArgumentException(
                 ""observed counts must be non-negative and expected counts must be postive"");
         }
         double sumSq = 0.0d;
         double dev = 0.0d;
         for (int i = 0; i < observed.length; i++) {
                 dev = ((double) observed[i] - expected[i]);
                 sumSq += dev * dev / expected[i];
         }
         return sumSq;
     }
","
             throw new IllegalArgumentException(
                 ""observed counts must be non-negative and expected counts must be postive"");
         }
        double sumExpected = 0d;
        double sumObserved = 0d;
        for (int i = 0; i < observed.length; i++) {
            sumExpected += expected[i];
            sumObserved += observed[i];
        }
        double ratio = 1.0d;
        boolean rescale = false;
        if (Math.abs(sumExpected - sumObserved) > 10E-6) {
            ratio = sumObserved / sumExpected;
            rescale = true;
        }
         double sumSq = 0.0d;
         double dev = 0.0d;
         for (int i = 0; i < observed.length; i++) {
            if (rescale) {
                dev = ((double) observed[i] - ratio * expected[i]);
                sumSq += dev * dev / (ratio * expected[i]);
            } else {
                 dev = ((double) observed[i] - expected[i]);
                 sumSq += dev * dev / expected[i];
            }
         }
         return sumSq;
     }
"
329,"junit.framework.AssertionFailedError","/src/java/org/apache/commons/math/util/MathUtils.java","
         int u = p;
         int v = q;
         if ((u == 0) || (v == 0)) {
             return (Math.abs(u) + Math.abs(v));
         }
         
             return 0;
         }
         int lcm = Math.abs(mulAndCheck(a / gcd(a, b), b));
         return lcm;
     }
 
","
         int u = p;
         int v = q;
         if ((u == 0) || (v == 0)) {
            if ((u == Integer.MIN_VALUE) || (v == Integer.MIN_VALUE)) {
                throw MathRuntimeException.createArithmeticException(
                        ""overflow: gcd({0}, {1}) is 2^31"",
                        new Object[] { p, q });
            }
             return (Math.abs(u) + Math.abs(v));
         }
         
             return 0;
         }
         int lcm = Math.abs(mulAndCheck(a / gcd(a, b), b));
        if (lcm == Integer.MIN_VALUE){
            throw new ArithmeticException(""overflow: lcm is 2^31"");
        }
         return lcm;
     }
 
"
330,"junit.framework.AssertionFailedError","/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java","
             return null;
         }
         
              
                  int startIndex = pos.getIndex();

             return null;
         }
         
              
         int w = whole.intValue();
         int n = num.intValue();
","
             return null;
         }
         
        if (num.intValue() < 0) {
                         pos.setIndex(initialIndex);
            return null;
        }
 
                  int startIndex = pos.getIndex();

             return null;
         }
         
        if (den.intValue() < 0) {
                         pos.setIndex(initialIndex);
            return null;
        }
 
         int w = whole.intValue();
         int n = num.intValue();
"
331,"junit.framework.AssertionFailedError","/src/org/mockito/internal/invocation/InvocationMatcher.java","
                     ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));
                 }
             }
            for (int position = indexOfVararg; position < matchers.size(); position++) {
                Matcher m = matchers.get(position);
                 if (m instanceof CapturesArguments) {
                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position - indexOfVararg]);
                 }
             }
         } else {

         }
     }
 
 
     public static List<InvocationMatcher> createFrom(List<Invocation> invocations) {
         LinkedList<InvocationMatcher> out = new LinkedList<InvocationMatcher>();
","
                     ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));
                 }
             }
            for (Matcher m : uniqueMatcherSet(indexOfVararg)) {
                 if (m instanceof CapturesArguments) {
                    Object rawArgument = invocation.getRawArguments()[indexOfVararg];
                    for (int i = 0; i < Array.getLength(rawArgument); i++) {
                        ((CapturesArguments) m).captureFrom(Array.get(rawArgument, i));
                    }
                 }
             }
         } else {

         }
     }
 
    private Set<Matcher> uniqueMatcherSet(int indexOfVararg) {
        HashSet<Matcher> set = new HashSet<Matcher>();
        for (int position = indexOfVararg; position < matchers.size(); position++) {
            Matcher matcher = matchers.get(position);
            if(matcher instanceof MatcherDecorator) {
                set.add(((MatcherDecorator) matcher).getActualMatcher());
            } else {
                set.add(matcher);
            }
        }
        return set;
    }
 
     public static List<InvocationMatcher> createFrom(List<Invocation> invocations) {
         LinkedList<InvocationMatcher> out = new LinkedList<InvocationMatcher>();
"
332,"junit.framework.AssertionFailedError","/src/org/mockito/internal/util/Timer.java","
 package org.mockito.internal.util;
 
 import org.mockito.exceptions.Reporter;
 
 public class Timer {
 

     private long startTime = -1;
 
     public Timer(long durationMillis) {
         this.durationMillis = durationMillis;
     }
 

         startTime = System.currentTimeMillis();
     }
 
 }
","
 package org.mockito.internal.util;
 
 import org.mockito.exceptions.Reporter;
 
 public class Timer {
 

     private long startTime = -1;
 
     public Timer(long durationMillis) {
        validateInput(durationMillis);
         this.durationMillis = durationMillis;
     }
 

         startTime = System.currentTimeMillis();
     }
 
    private void validateInput(long durationMillis) {
        if (durationMillis < 0) {
            new Reporter().cannotCreateTimerWithNegativeDurationTime(durationMillis);
        }
    }
 }
"
333,"java.lang.UnsupportedOperationException","/src/org/mockito/internal/invocation/InvocationMatcher.java","
     public void captureArgumentsFrom(Invocation invocation) {
         if (invocation.getMethod().isVarArgs()) {
             int indexOfVararg = invocation.getRawArguments().length - 1;
            throw new UnsupportedOperationException();
 
         } else {
             for (int position = 0; position < matchers.size(); position++) {
","
     public void captureArgumentsFrom(Invocation invocation) {
         if (invocation.getMethod().isVarArgs()) {
             int indexOfVararg = invocation.getRawArguments().length - 1;
            for (int position = 0; position < indexOfVararg; position++) {
                Matcher m = matchers.get(position);
                if (m instanceof CapturesArguments) {
                    ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));
                }
            }
            for (int position = indexOfVararg; position < matchers.size(); position++) {
                Matcher m = matchers.get(position);
                if (m instanceof CapturesArguments) {
                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position - indexOfVararg]);
                }
            }
 
         } else {
             for (int position = 0; position < matchers.size(); position++) {
"
334,"org.mockito.exceptions.base.MockitoException","/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java","
             for (Type type : typeVariable.getBounds()) {
                 registerTypeVariablesOn(type);
             }
             registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));
         }
 
","
             for (Type type : typeVariable.getBounds()) {
                 registerTypeVariablesOn(type);
             }
            registerTypeParametersOn(new TypeVariable[] { typeVariable });
             registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));
         }
 
"
335,"java.lang.Exception","/src/org/mockito/exceptions/Reporter.java","
         throw new NoInteractionsWanted(join(
                 ""No interactions wanted here:"",
                 new LocationImpl(),
                ""But found this interaction on mock '"" + undesired.getMock() + ""':"",
                 undesired.getLocation(),
                 scenario
         ));

         throw new VerificationInOrderFailure(join(
                 ""No interactions wanted here:"",
                 new LocationImpl(),
                ""But found this interaction on mock '"" + undesired.getMock() + ""':"",
                 undesired.getLocation()
         ));
     }

     }
 
     private String exceptionCauseMessageIfAvailable(Exception details) {
         return details.getCause().getMessage();
     }
 
","
         throw new NoInteractionsWanted(join(
                 ""No interactions wanted here:"",
                 new LocationImpl(),
                ""But found this interaction on mock '"" + safelyGetMockName(undesired.getMock()) + ""':"",
                 undesired.getLocation(),
                 scenario
         ));

         throw new VerificationInOrderFailure(join(
                 ""No interactions wanted here:"",
                 new LocationImpl(),
                ""But found this interaction on mock '"" + safelyGetMockName(undesired.getMock()) + ""':"",
                 undesired.getLocation()
         ));
     }

     }
 
     private String exceptionCauseMessageIfAvailable(Exception details) {
        if (details.getCause() == null) {
            return details.getMessage();
        }
         return details.getCause().getMessage();
     }
 
"
336,"junit.framework.AssertionFailedError","/src/org/mockito/internal/creation/DelegatingMethod.java","
      
     @Override
     public boolean equals(Object o) {
             return method.equals(o);
     }
 
     @Override
     public int hashCode() {
        return 1;
     }
 }
\ No newline at end of file
","
      
     @Override
     public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o instanceof DelegatingMethod) {
            DelegatingMethod that = (DelegatingMethod) o;
            return method.equals(that.method);
        } else {
             return method.equals(o);
        }
     }
 
     @Override
     public int hashCode() {
        return method.hashCode();
     }
 }
\ No newline at end of file
"
337,"org.mockito.exceptions.base.MockitoException","/src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java","
 import org.mockito.internal.util.MockUtil;
 import org.mockito.internal.util.reflection.GenericMetadataSupport;
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.mock.MockCreationSettings;
 import org.mockito.stubbing.Answer;
 
 import java.io.IOException;

 
                  return recordDeepStubAnswer(
                newDeepStubMock(returnTypeGenericMetadata),
                 container
         );
     }

  
    private Object newDeepStubMock(GenericMetadataSupport returnTypeGenericMetadata) {
         return mockitoCore().mock(
                 returnTypeGenericMetadata.rawType(),
                withSettingsUsing(returnTypeGenericMetadata)
         );
     }
 
    private MockSettings withSettingsUsing(GenericMetadataSupport returnTypeGenericMetadata) {
         MockSettings mockSettings = returnTypeGenericMetadata.hasRawExtraInterfaces() ?
                 withSettings().extraInterfaces(returnTypeGenericMetadata.rawExtraInterfaces())
                 : withSettings();
 
        return mockSettings.serializable()
                 .defaultAnswer(returnsDeepStubsAnswerUsing(returnTypeGenericMetadata));
     }
 
 
     private ReturnsDeepStubs returnsDeepStubsAnswerUsing(final GenericMetadataSupport returnTypeGenericMetadata) {
         return new ReturnsDeepStubsSerializationFallback(returnTypeGenericMetadata);
","
 import org.mockito.internal.util.MockUtil;
 import org.mockito.internal.util.reflection.GenericMetadataSupport;
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.mock.MockCreationSettings;
 import org.mockito.stubbing.Answer;
 
 import java.io.IOException;

 
                  return recordDeepStubAnswer(
                newDeepStubMock(returnTypeGenericMetadata, invocation.getMock()),
                 container
         );
     }

   
    private Object newDeepStubMock(GenericMetadataSupport returnTypeGenericMetadata, Object parentMock) {
        MockCreationSettings parentMockSettings = new MockUtil().getMockSettings(parentMock);
         return mockitoCore().mock(
                 returnTypeGenericMetadata.rawType(),
                withSettingsUsing(returnTypeGenericMetadata, parentMockSettings)
         );
     }
 
    private MockSettings withSettingsUsing(GenericMetadataSupport returnTypeGenericMetadata, MockCreationSettings parentMockSettings) {
         MockSettings mockSettings = returnTypeGenericMetadata.hasRawExtraInterfaces() ?
                 withSettings().extraInterfaces(returnTypeGenericMetadata.rawExtraInterfaces())
                 : withSettings();
 
        return propagateSerializationSettings(mockSettings, parentMockSettings)
                 .defaultAnswer(returnsDeepStubsAnswerUsing(returnTypeGenericMetadata));
     }
 
    private MockSettings propagateSerializationSettings(MockSettings mockSettings, MockCreationSettings parentMockSettings) {
        return mockSettings.serializable(parentMockSettings.getSerializableMode());
    }
 
     private ReturnsDeepStubs returnsDeepStubsAnswerUsing(final GenericMetadataSupport returnTypeGenericMetadata) {
         return new ReturnsDeepStubsSerializationFallback(returnTypeGenericMetadata);
"
338,"junit.framework.AssertionFailedError","/src/org/mockito/internal/verification/VerificationOverTimeImpl.java","
             } catch (MockitoAssertionError e) {
                 error = handleVerifyException(e);
             }
            catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {
                 error = handleVerifyException(e);
             }
         }
","
             } catch (MockitoAssertionError e) {
                 error = handleVerifyException(e);
             }
            catch (AssertionError e) {
                 error = handleVerifyException(e);
             }
         }
"
339,"junit.framework.ComparisonFailure","/src/org/mockito/Matchers.java","
   
     public static boolean anyBoolean() {
        return reportMatcher(Any.ANY).returnFalse();
     }
 
     
   
     public static byte anyByte() {
        return reportMatcher(Any.ANY).returnZero();
     }
 
     
   
     public static char anyChar() {
        return reportMatcher(Any.ANY).returnChar();
     }
 
     
    
     public static int anyInt() {
        return reportMatcher(Any.ANY).returnZero();
     }
 
     
  
     public static long anyLong() {
        return reportMatcher(Any.ANY).returnZero();
     }
 
     
  
     public static float anyFloat() {
        return reportMatcher(Any.ANY).returnZero();
     }
 
     
   
     public static double anyDouble() {
        return reportMatcher(Any.ANY).returnZero();
     }
 
     
   
     public static short anyShort() {
        return reportMatcher(Any.ANY).returnZero();
     }
 
     
   
     public static <T> T anyObject() {
        return (T) reportMatcher(Any.ANY).returnNull();
     }
 
     
   
     public static <T> T any(Class<T> clazz) {
        return (T) reportMatcher(Any.ANY).returnFor(clazz);
     }
     
     
  
     public static <T> T any() {
        return (T) anyObject();
     }
 
     
  
     public static String anyString() {
        return reportMatcher(Any.ANY).returnString();
     }
     
     
   
     public static List anyList() {
        return reportMatcher(Any.ANY).returnList();
     }    
     
     
   
     public static <T> List<T> anyListOf(Class<T> clazz) {
        return (List) reportMatcher(Any.ANY).returnList();
     }    
     
     
  
     public static Set anySet() {
        return reportMatcher(Any.ANY).returnSet();
     }
     
     
    
     public static <T> Set<T> anySetOf(Class<T> clazz) {
        return (Set) reportMatcher(Any.ANY).returnSet();
     }
 
     
   
     public static Map anyMap() {
        return reportMatcher(Any.ANY).returnMap();
     }
 
     
    
     public static <K, V>  Map<K, V> anyMapOf(Class<K> keyClazz, Class<V> valueClazz) {
        return reportMatcher(Any.ANY).returnMap();
     }
     
     
   
     public static Collection anyCollection() {
        return reportMatcher(Any.ANY).returnList();
     }    
     
     
  
     public static <T> Collection<T> anyCollectionOf(Class<T> clazz) {
        return (Collection) reportMatcher(Any.ANY).returnList();
     }    
 
     ","
  
     public static boolean anyBoolean() {
        return reportMatcher(new InstanceOf(Boolean.class)).returnFalse();
     }
 
     
  
     public static byte anyByte() {
        return reportMatcher(new InstanceOf(Byte.class)).returnZero();
     }
 
     
  
     public static char anyChar() {
        return reportMatcher(new InstanceOf(Character.class)).returnChar();
     }
 
     
  
     public static int anyInt() {
        return reportMatcher(new InstanceOf(Integer.class)).returnZero();
     }
 
     
   
     public static long anyLong() {
        return reportMatcher(new InstanceOf(Long.class)).returnZero();
     }
 
     
  
     public static float anyFloat() {
        return reportMatcher(new InstanceOf(Float.class)).returnZero();
     }
 
     
   
     public static double anyDouble() {
        return reportMatcher(new InstanceOf(Double.class)).returnZero();
     }
 
     
   
     public static short anyShort() {
        return reportMatcher(new InstanceOf(Short.class)).returnZero();
     }
 
     
   
     public static <T> T anyObject() {
        return (T) reportMatcher(new InstanceOf(Object.class)).returnNull();
     }
 
     
   
     public static <T> T any(Class<T> clazz) {
        return (T) reportMatcher(new InstanceOf(clazz)).returnFor(clazz);
     }
     
     
   
     public static <T> T any() {
        return (T) reportMatcher(Any.ANY).returnNull();
     }
 
     
    
     public static String anyString() {
        return reportMatcher(new InstanceOf(String.class)).returnString();
     }
     
     
   
     public static List anyList() {
        return reportMatcher(new InstanceOf(List.class)).returnList();
     }    
     
     
  
     public static <T> List<T> anyListOf(Class<T> clazz) {
        return anyList();
     }    
     
     
     
     public static Set anySet() {
        return reportMatcher(new InstanceOf(Set.class)).returnSet();
     }
     
     
   
     public static <T> Set<T> anySetOf(Class<T> clazz) {
        return anySet();
     }
 
     
   
     public static Map anyMap() {
        return reportMatcher(new InstanceOf(Map.class)).returnMap();
     }
 
     
    
     public static <K, V>  Map<K, V> anyMapOf(Class<K> keyClazz, Class<V> valueClazz) {
        return anyMap();
     }
     
     
   
     public static Collection anyCollection() {
        return reportMatcher(new InstanceOf(Collection.class)).returnList();
     }    
     
     
     
     public static <T> Collection<T> anyCollectionOf(Class<T> clazz) {
        return anyCollection();
     }    
 
     "
340,"org.mockito.exceptions.base.MockitoException","/src/org/mockito/internal/stubbing/answers/CallsRealMethods.java","
 package org.mockito.internal.stubbing.answers;
 
 import java.io.Serializable;
 import java.lang.reflect.Modifier;
 
 import org.mockito.internal.stubbing.defaultanswers.GloballyConfiguredAnswer;
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.stubbing.Answer;
 

     private static final long serialVersionUID = 9057165148930624087L;
 
     public Object answer(InvocationOnMock invocation) throws Throwable {
         return invocation.callRealMethod();
     }
 }
\ No newline at end of file
","
 package org.mockito.internal.stubbing.answers;
 
 import java.io.Serializable;
 import java.lang.reflect.Modifier;
 
 import org.mockito.internal.stubbing.defaultanswers.GloballyConfiguredAnswer;
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.stubbing.Answer;
 

     private static final long serialVersionUID = 9057165148930624087L;
 
     public Object answer(InvocationOnMock invocation) throws Throwable {
    	if (Modifier.isAbstract(invocation.getMethod().getModifiers())) {
    		return new GloballyConfiguredAnswer().answer(invocation);
    	}
         return invocation.callRealMethod();
     }
 }
\ No newline at end of file
"
341,"java.lang.StackOverflowError","/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java","
 
             if (actualTypeArgument instanceof WildcardType) {
                 contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));
            } else {
                 contextualActualTypeParameters.put(typeParameter, actualTypeArgument);
             }
             ","
 
             if (actualTypeArgument instanceof WildcardType) {
                 contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));
            } else if (typeParameter != actualTypeArgument) {
                 contextualActualTypeParameters.put(typeParameter, actualTypeArgument);
             }
             "
342,"org.mockito.exceptions.misusing.MissingMethodInvocationException","/src/org/mockito/Mockito.java","
 package org.mockito;
 
 import org.mockito.internal.MockitoCore;
 import org.mockito.internal.creation.MockSettingsImpl;
 import org.mockito.internal.debugging.MockitoDebuggerImpl;
 import org.mockito.internal.stubbing.answers.*;
 import org.mockito.internal.stubbing.defaultanswers.*;
 import org.mockito.internal.verification.VerificationModeFactory;
 import org.mockito.internal.verification.api.VerificationMode;
 import org.mockito.runners.MockitoJUnitRunner;
 import org.mockito.stubbing.*;
 
 @SuppressWarnings(""unchecked"")
 public class Mockito extends Matchers {
     
     private static final MockitoCore MOCKITO_CORE = new MockitoCore();
     
     public static final Answer<Object> RETURNS_DEFAULTS = new GloballyConfiguredAnswer();
     
     
     public static final Answer<Object> RETURNS_SMART_NULLS = new ReturnsSmartNulls();
   
     public static final Answer<Object> RETURNS_MOCKS = new ReturnsMocks();
 
 
     public static final Answer<Object> CALLS_REAL_METHODS = new CallsRealMethods();     public static <T> T mock(Class<T> classToMock) {
         return mock(classToMock, withSettings().defaultAnswer(RETURNS_DEFAULTS));
     }
  
     public static <T> T mock(Class<T> classToMock, String name) {
         return mock(classToMock, withSettings()
                 .name(name)
                 .defaultAnswer(RETURNS_DEFAULTS));
     }
     
     @Deprecated
     public static <T> T mock(Class<T> classToMock, ReturnValues returnValues) {
         return mock(classToMock, withSettings().defaultAnswer(new AnswerReturnValuesAdapter(returnValues)));
     }
     
     public static <T> T mock(Class<T> classToMock, Answer defaultAnswer) {
         return mock(classToMock, withSettings().defaultAnswer(defaultAnswer));
     }     public static <T> T mock(Class<T> classToMock, MockSettings mockSettings) {
        return MOCKITO_CORE.mock(classToMock, mockSettings);
     }
     
     public static <T> T spy(T object) {
         return MOCKITO_CORE.mock((Class<T>) object.getClass(), withSettings()
                 .spiedInstance(object)
                .defaultAnswer(CALLS_REAL_METHODS)); 
     }
 
     

 package org.mockito.internal;
 
 import org.mockito.InOrder;
 import org.mockito.MockSettings;
 import org.mockito.exceptions.Reporter;
 import org.mockito.exceptions.misusing.NotAMockException;
 import org.mockito.internal.creation.MockSettingsImpl;
 import org.mockito.internal.invocation.Invocation;
 import org.mockito.internal.progress.IOngoingStubbing;
 import org.mockito.internal.progress.MockingProgress;
 import org.mockito.internal.progress.ThreadSafeMockingProgress;
 import org.mockito.internal.stubbing.OngoingStubbingImpl;
 import org.mockito.internal.stubbing.StubberImpl;
 import org.mockito.internal.util.MockUtil;
 import org.mockito.internal.verification.api.VerificationMode;
 import org.mockito.stubbing.*;
 
 import java.util.Arrays;
 import java.util.List;
 
 @SuppressWarnings(""unchecked"")
 public class MockitoCore {
 
     private final Reporter reporter = new Reporter();
     private final MockUtil mockUtil = new MockUtil();
     private final MockingProgress mockingProgress = new ThreadSafeMockingProgress();
     
    public <T> T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) { return mock(classToMock, mockSettings); }
    public <T> T mock(Class<T> classToMock, MockSettings mockSettings) {
         mockingProgress.validateState();
             mockingProgress.resetOngoingStubbing();
         return mockUtil.createMock(classToMock, (MockSettingsImpl) mockSettings);
     }
     
","
 package org.mockito;
 
 import org.mockito.internal.MockitoCore;
 import org.mockito.internal.creation.MockSettingsImpl;
 import org.mockito.internal.debugging.MockitoDebuggerImpl;
 import org.mockito.internal.stubbing.answers.*;
 import org.mockito.internal.stubbing.defaultanswers.*;
 import org.mockito.internal.verification.VerificationModeFactory;
 import org.mockito.internal.verification.api.VerificationMode;
 import org.mockito.runners.MockitoJUnitRunner;
 import org.mockito.stubbing.*;
 
 @SuppressWarnings(""unchecked"")
 public class Mockito extends Matchers {
     
     private static final MockitoCore MOCKITO_CORE = new MockitoCore();
     public static final Answer<Object> RETURNS_DEFAULTS = new GloballyConfiguredAnswer();
     public static final Answer<Object> RETURNS_SMART_NULLS = new ReturnsSmartNulls();
     
     public static final Answer<Object> RETURNS_MOCKS = new ReturnsMocks();     public static final Answer<Object> CALLS_REAL_METHODS = new CallsRealMethods();
     
     public static <T> T mock(Class<T> classToMock) {
         return mock(classToMock, withSettings().defaultAnswer(RETURNS_DEFAULTS));
     }
     public static <T> T mock(Class<T> classToMock, String name) {
         return mock(classToMock, withSettings()
                 .name(name)
                 .defaultAnswer(RETURNS_DEFAULTS));
     }
     
     @Deprecated
     public static <T> T mock(Class<T> classToMock, ReturnValues returnValues) {
         return mock(classToMock, withSettings().defaultAnswer(new AnswerReturnValuesAdapter(returnValues)));
     }
     public static <T> T mock(Class<T> classToMock, Answer defaultAnswer) {
         return mock(classToMock, withSettings().defaultAnswer(defaultAnswer));
     }
     public static <T> T mock(Class<T> classToMock, MockSettings mockSettings) {
        return MOCKITO_CORE.mock(classToMock, mockSettings, true);
     }
     
     public static <T> T spy(T object) {
         return MOCKITO_CORE.mock((Class<T>) object.getClass(), withSettings()
                 .spiedInstance(object)
                .defaultAnswer(CALLS_REAL_METHODS), true); 
     }
 

 package org.mockito.internal;
 
 import org.mockito.InOrder;
 import org.mockito.MockSettings;
 import org.mockito.exceptions.Reporter;
 import org.mockito.exceptions.misusing.NotAMockException;
 import org.mockito.internal.creation.MockSettingsImpl;
 import org.mockito.internal.invocation.Invocation;
 import org.mockito.internal.progress.IOngoingStubbing;
 import org.mockito.internal.progress.MockingProgress;
 import org.mockito.internal.progress.ThreadSafeMockingProgress;
 import org.mockito.internal.stubbing.OngoingStubbingImpl;
 import org.mockito.internal.stubbing.StubberImpl;
 import org.mockito.internal.util.MockUtil;
 import org.mockito.internal.verification.api.VerificationMode;
 import org.mockito.stubbing.*;
 
 import java.util.Arrays;
 import java.util.List;
 
 @SuppressWarnings(""unchecked"")
 public class MockitoCore {
 
     private final Reporter reporter = new Reporter();
     private final MockUtil mockUtil = new MockUtil();
     private final MockingProgress mockingProgress = new ThreadSafeMockingProgress();
     
    public <T> T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) {
         mockingProgress.validateState();
        if (shouldResetOngoingStubbing) {
             mockingProgress.resetOngoingStubbing();
        }
         return mockUtil.createMock(classToMock, (MockSettingsImpl) mockSettings);
     }
     
"
343,"junit.framework.AssertionFailedError","/src/org/mockito/internal/configuration/injection/FinalMockCandidateFilter.java","
 package org.mockito.internal.configuration.injection;
 
 import org.mockito.exceptions.base.MockitoException;
 import org.mockito.internal.util.reflection.FieldSetter;
 
 import java.lang.reflect.Field;

             return new OngoingInjecter() {
                 public boolean thenInject() {
                     try {
                             new FieldSetter(fieldInstance, field).set(matchingMock);
                     } catch (Exception e) {
                         throw new MockitoException(""Problems injecting dependency in "" + field.getName(), e);
                     }
","
 package org.mockito.internal.configuration.injection;
 
 import org.mockito.exceptions.base.MockitoException;
 import org.mockito.internal.util.reflection.BeanPropertySetter;
 import org.mockito.internal.util.reflection.FieldSetter;
 
 import java.lang.reflect.Field;

             return new OngoingInjecter() {
                 public boolean thenInject() {
                     try {
                        if (!new BeanPropertySetter(fieldInstance, field).set(matchingMock)) {
                             new FieldSetter(fieldInstance, field).set(matchingMock);
                        }
                     } catch (Exception e) {
                         throw new MockitoException(""Problems injecting dependency in "" + field.getName(), e);
                     }
"
344,"junit.framework.AssertionFailedError","/src/org/mockito/internal/MockHandler.java","
 import org.mockito.internal.stubbing.OngoingStubbingImpl;
 import org.mockito.internal.stubbing.StubbedInvocationMatcher;
 import org.mockito.internal.stubbing.VoidMethodStubbableImpl;
 import org.mockito.internal.verification.VerificationDataImpl;
 import org.mockito.stubbing.Answer;
 import org.mockito.stubbing.VoidMethodStubbable;

         if (verificationMode != null) {
                                           VerificationDataImpl data = new VerificationDataImpl(invocationContainerImpl.getInvocations(), invocationMatcher);            
                 verificationMode.verify(data);
                 return null;
         }
         
         invocationContainerImpl.setInvocationForPotentialStubbing(invocationMatcher);

 import org.mockito.internal.stubbing.OngoingStubbingImpl;
 import org.mockito.internal.stubbing.StubberImpl;
 import org.mockito.internal.util.MockUtil;
 import org.mockito.internal.verification.VerificationDataImpl;
 import org.mockito.internal.verification.VerificationModeFactory;
 import org.mockito.internal.verification.api.InOrderContext;

         } else if (!mockUtil.isMock(mock)) {
             reporter.notAMockPassedToVerify();
         }
        mockingProgress.verificationStarted(mode);
         return mock;
     }
     
","
 import org.mockito.internal.stubbing.OngoingStubbingImpl;
 import org.mockito.internal.stubbing.StubbedInvocationMatcher;
 import org.mockito.internal.stubbing.VoidMethodStubbableImpl;
 import org.mockito.internal.verification.MockAwareVerificationMode;
 import org.mockito.internal.verification.VerificationDataImpl;
 import org.mockito.stubbing.Answer;
 import org.mockito.stubbing.VoidMethodStubbable;

         if (verificationMode != null) {
                                      if (verificationMode instanceof MockAwareVerificationMode && ((MockAwareVerificationMode) verificationMode).getMock() == invocation.getMock()) {
                 VerificationDataImpl data = new VerificationDataImpl(invocationContainerImpl.getInvocations(), invocationMatcher);            
                 verificationMode.verify(data);
                 return null;
            }
         }
         
         invocationContainerImpl.setInvocationForPotentialStubbing(invocationMatcher);

 import org.mockito.internal.stubbing.OngoingStubbingImpl;
 import org.mockito.internal.stubbing.StubberImpl;
 import org.mockito.internal.util.MockUtil;
 import org.mockito.internal.verification.MockAwareVerificationMode;
 import org.mockito.internal.verification.VerificationDataImpl;
 import org.mockito.internal.verification.VerificationModeFactory;
 import org.mockito.internal.verification.api.InOrderContext;

         } else if (!mockUtil.isMock(mock)) {
             reporter.notAMockPassedToVerify();
         }
        mockingProgress.verificationStarted(new MockAwareVerificationMode(mock, mode));
         return mock;
     }
     
"
345,"java.lang.ClassCastException","/src/org/mockito/internal/util/reflection/GenericMaster.java","
         Type generic = field.getGenericType();
         if (generic != null && generic instanceof ParameterizedType) {
             Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0];
                 return (Class) actual;
                          }
         
         return Object.class;
","
         Type generic = field.getGenericType();
         if (generic != null && generic instanceof ParameterizedType) {
             Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0];
            if (actual instanceof Class) {
                 return (Class) actual;
            } else if (actual instanceof ParameterizedType) {
                                 return (Class) ((ParameterizedType) actual).getRawType();
            }
         }
         
         return Object.class;
"
346,"junit.framework.AssertionFailedError","/src/org/mockito/internal/MockHandler.java","
         if (verificationMode != null) {
                                      if (verificationMode instanceof MockAwareVerificationMode && ((MockAwareVerificationMode) verificationMode).getMock() == invocation.getMock()) {                
                 VerificationDataImpl data = new VerificationDataImpl(invocationContainerImpl, invocationMatcher);            
                 verificationMode.verify(data);
                 return null;
                                               }
         }
         
","
         if (verificationMode != null) {
                                      if (((MockAwareVerificationMode) verificationMode).getMock() == invocation.getMock()) {                
                 VerificationDataImpl data = new VerificationDataImpl(invocationContainerImpl, invocationMatcher);            
                 verificationMode.verify(data);
                 return null;
            } else {
                                                  mockingProgress.verificationStarted(verificationMode);
             }
         }
         
"
347,"java.io.NotSerializableException","/src/org/mockito/internal/creation/MockSettingsImpl.java","
     private Object spiedInstance;
     private Answer<Object> defaultAnswer;
     private MockName mockName;
 
     public MockSettings serializable() {
        return this.extraInterfaces(java.io.Serializable.class);
     }
 
     public MockSettings extraInterfaces(Class<?>... extraInterfaces) {

     }
 
     public boolean isSerializable() {
        return extraInterfaces != null && java.util.Arrays.asList(extraInterfaces).contains(java.io.Serializable.class);
     }
 
     public void initiateMockName(Class classToMock) {

 import org.mockito.internal.creation.jmock.ClassImposterizer;
 import org.mockito.internal.util.reflection.LenientCopyTool;
 
 
 @SuppressWarnings(""unchecked"")
 public class MockUtil {

         Class<?>[] interfaces = settings.getExtraInterfaces();
 
         Class<?>[] ancillaryTypes;
             ancillaryTypes = interfaces == null ? new Class<?>[0] : interfaces;
 
         Object spiedInstance = settings.getSpiedInstance();
         
","
     private Object spiedInstance;
     private Answer<Object> defaultAnswer;
     private MockName mockName;
    private boolean serializable;
 
     public MockSettings serializable() {
        this.serializable = true;
        return this;
     }
 
     public MockSettings extraInterfaces(Class<?>... extraInterfaces) {

     }
 
     public boolean isSerializable() {
        return serializable;
     }
 
     public void initiateMockName(Class classToMock) {

 import org.mockito.internal.creation.jmock.ClassImposterizer;
 import org.mockito.internal.util.reflection.LenientCopyTool;
 
 import java.io.Serializable;
 
 @SuppressWarnings(""unchecked"")
 public class MockUtil {

         Class<?>[] interfaces = settings.getExtraInterfaces();
 
         Class<?>[] ancillaryTypes;
        if (settings.isSerializable()) {
            ancillaryTypes = interfaces == null ? new Class<?>[] {Serializable.class} : new ArrayUtils().concat(interfaces, Serializable.class);
        } else {
             ancillaryTypes = interfaces == null ? new Class<?>[0] : interfaces;
        }
 
         Object spiedInstance = settings.getSpiedInstance();
         
"
348,"java.lang.NullPointerException","/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java","
             return Primitives.defaultValueForPrimitiveOrWrapper(type);
                                   } else if (type == Collection.class) {
             return new LinkedList<Object>();
         } else if (type == Set.class) {
","
             return Primitives.defaultValueForPrimitiveOrWrapper(type);
                                  } else if (type == Iterable.class) {
            return new ArrayList<Object>(0);
         } else if (type == Collection.class) {
             return new LinkedList<Object>();
         } else if (type == Set.class) {
"
349,"java.lang.RuntimeException","/src/org/mockito/internal/matchers/Equality.java","
 public class Equality {
 
     public static boolean areEqual(Object o1, Object o2) {
        if (o1 == null || o2 == null) {
             return o1 == null && o2 == null;
         } else if (isArray(o1)) {
             return isArray(o2) && areArraysEqual(o1, o2);
","
 public class Equality {
 
     public static boolean areEqual(Object o1, Object o2) {
        if (o1 == o2 ) {
            return true;
        } else if (o1 == null || o2 == null) {
             return o1 == null && o2 == null;
         } else if (isArray(o1)) {
             return isArray(o2) && areArraysEqual(o1, o2);
"
350,"junit.framework.ComparisonFailure","/src/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java","
                 settings.getTypeToMock(),
                 settings.getExtraInterfaces()
         );
         T mockInstance = null;
         try {
            mockInstance = classInstantiator.instantiate(mockedProxyType);
             MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;
             mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));
 

                     ""  class to mock : "" + describeClass(mockedProxyType),
                     ""  created class : "" + describeClass(settings.getTypeToMock()),
                     ""  proxy instance class : "" + describeClass(mockInstance),
                    ""  instance creation by : "" + classInstantiator.getClass().getSimpleName(),
                     """",
                     ""You might experience classloading issues, please ask the mockito mailing-list."",
                     """"
","
                 settings.getTypeToMock(),
                 settings.getExtraInterfaces()
         );
        Instantiator instantiator = new InstantiatorProvider().getInstantiator(settings);
         T mockInstance = null;
         try {
            mockInstance = instantiator.newInstance(mockedProxyType);
             MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;
             mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));
 

                     ""  class to mock : "" + describeClass(mockedProxyType),
                     ""  created class : "" + describeClass(settings.getTypeToMock()),
                     ""  proxy instance class : "" + describeClass(mockInstance),
                    ""  instance creation by : "" + instantiator.getClass().getSimpleName(),
                     """",
                     ""You might experience classloading issues, please ask the mockito mailing-list."",
                     """"
"
351,"junit.framework.AssertionFailedError","/src/org/mockito/internal/configuration/injection/PropertyAndSetterInjection.java","
     private boolean injectMockCandidatesOnFields(Set<Object> mocks, Object instance, boolean injectionOccurred, List<Field> orderedInstanceFields) {
         for (Iterator<Field> it = orderedInstanceFields.iterator(); it.hasNext(); ) {
             Field field = it.next();
            Object injected = mockCandidateFilter.filterCandidate(mocks, field, instance).thenInject();
             if (injected != null) {
                 injectionOccurred |= true;
                 mocks.remove(injected);

 
 import java.lang.reflect.Field;
 import java.util.Collection;
 
 public class FinalMockCandidateFilter implements MockCandidateFilter {
    public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, final Object fieldInstance) {
         if(mocks.size() == 1) {
             final Object matchingMock = mocks.iterator().next();
 

 
 import java.lang.reflect.Field;
 import java.util.Collection;
 
 public interface MockCandidateFilter {
 
     OngoingInjecter filterCandidate(
             Collection<Object> mocks,
             Field fieldToBeInjected,
            Object fieldInstance
     );
 
 }

 	}
 
 	public OngoingInjecter filterCandidate(Collection<Object> mocks,
			Field field, Object fieldInstance) {
 		List<Object> mockNameMatches = new ArrayList<Object>();
 		if (mocks.size() > 1) {
 			for (Object mock : mocks) {

 					mockNameMatches.add(mock);
 				}
 			}
			return next.filterCandidate(mockNameMatches, field,
 					fieldInstance);
 			
 		}
-		return next.filterCandidate(mocks, field, fieldInstance);
 	}
 }

         this.next = next;
     }
 
    public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, Object fieldInstance) {
         List<Object> mockTypeMatches = new ArrayList<Object>();
         for (Object mock : mocks) {
             if (field.getType().isAssignableFrom(mock.getClass())) {

             }
         }
 
        return next.filterCandidate(mockTypeMatches, field, fieldInstance);
     }
 }
","
     private boolean injectMockCandidatesOnFields(Set<Object> mocks, Object instance, boolean injectionOccurred, List<Field> orderedInstanceFields) {
         for (Iterator<Field> it = orderedInstanceFields.iterator(); it.hasNext(); ) {
             Field field = it.next();
            Object injected = mockCandidateFilter.filterCandidate(mocks, field, orderedInstanceFields, instance).thenInject();
             if (injected != null) {
                 injectionOccurred |= true;
                 mocks.remove(injected);

 
 import java.lang.reflect.Field;
 import java.util.Collection;
 import java.util.List;
 public class FinalMockCandidateFilter implements MockCandidateFilter {
    public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, List<Field> fields, final Object fieldInstance) {
         if(mocks.size() == 1) {
             final Object matchingMock = mocks.iterator().next();
 

 
 import java.lang.reflect.Field;
 import java.util.Collection;
 import java.util.List;
 
 public interface MockCandidateFilter {
 
     OngoingInjecter filterCandidate(
             Collection<Object> mocks,
             Field fieldToBeInjected,
            List<Field> fields, Object instance
     );
 
 }

 	}
 
 	public OngoingInjecter filterCandidate(Collection<Object> mocks,
			Field field, List<Field> fields, Object fieldInstance) {
 		List<Object> mockNameMatches = new ArrayList<Object>();
 		if (mocks.size() > 1) {
 			for (Object mock : mocks) {

 					mockNameMatches.add(mock);
 				}
 			}
			return next.filterCandidate(mockNameMatches, field, fields,
 					fieldInstance);
		} else if (mocks.size() == 1) {
			String mockName = mockUtil.getMockName(mocks.iterator().next())
					.toString();			for (Field otherField : fields) {
				if (!otherField.equals(field)
						&& otherField.getType().equals(field.getType())
						&& otherField.getName().equals(mockName)) {					return new OngoingInjecter() {
						public Object thenInject() {
							return null;
						}
					};
				}
			}
 		}
		return next.filterCandidate(mocks, field, fields, fieldInstance);
 	}
 }

         this.next = next;
     }
 
    public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, List<Field> fields, Object fieldInstance) {
         List<Object> mockTypeMatches = new ArrayList<Object>();
         for (Object mock : mocks) {
             if (field.getType().isAssignableFrom(mock.getClass())) {

             }
         }
 
        return next.filterCandidate(mockTypeMatches, field, fields, fieldInstance);
     }
 }
"
352,"org.mockito.internal.creation.instance.InstantationException","/src/org/mockito/internal/creation/instance/ConstructorInstantiator.java","
         if (outerClassInstance == null) {
             return noArgConstructor(cls);
         }
        return withOuterClass(cls);
     }
 
    private <T> T withOuterClass(Class<T> cls) {
         try {
                                      Constructor<T> c = cls.getDeclaredConstructor(outerClassInstance.getClass());
            return c.newInstance(outerClassInstance);
         } catch (Exception e) {
             throw paramsException(cls, e);
         }
     }
 
     private static <T> InstantationException paramsException(Class<T> cls, Exception e) {

                 + cls.getSimpleName() + ""'.\nPlease ensure that the outer instance has correct type and that the target class has parameter-less constructor."", e);
     }
 
 
     private static <T> T noArgConstructor(Class<T> cls) {
         try {
","
         if (outerClassInstance == null) {
             return noArgConstructor(cls);
         }
        return withParams(cls, outerClassInstance);
     }
 
    private static <T> T withParams(Class<T> cls, Object... params) {
         try {
                                      for (Constructor<?> constructor : cls.getDeclaredConstructors()) {
                Class<?>[] types = constructor.getParameterTypes();
                if (paramsMatch(types, params)) {
                    return (T) constructor.newInstance(params);
                }
            }
         } catch (Exception e) {
             throw paramsException(cls, e);
         }
        throw paramsException(cls, null);
     }
 
     private static <T> InstantationException paramsException(Class<T> cls, Exception e) {

                 + cls.getSimpleName() + ""'.\nPlease ensure that the outer instance has correct type and that the target class has parameter-less constructor."", e);
     }
 
    private static boolean paramsMatch(Class<?>[] types, Object[] params) {
        if (params.length != types.length) {
            return false;
        }
        for (int i = 0; i < params.length; i++) {
            if (!types[i].isInstance(params[i])) {
                return false;
            }
        }
        return true;
    }
 
     private static <T> T noArgConstructor(Class<T> cls) {
         try {
"
353,"java.io.NotSerializableException","/src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java","
     
     private static final long serialVersionUID = -7105341425736035847L;
 
    private MockitoCore mockitoCore = new MockitoCore();
    private ReturnsEmptyValues delegate = new ReturnsEmptyValues();
 
     public Object answer(InvocationOnMock invocation) throws Throwable {
         GenericMetadataSupport returnTypeGenericMetadata =
                 actualParameterizedType(invocation.getMock()).resolveGenericReturnType(invocation.getMethod());
 
         Class<?> rawType = returnTypeGenericMetadata.rawType();
         if (!mockitoCore.isTypeMockable(rawType)) {
             return delegate.returnValueFor(rawType);
         }

         return getMock(invocation, returnTypeGenericMetadata);
     }
 
 
 
     private Object getMock(InvocationOnMock invocation, GenericMetadataSupport returnTypeGenericMetadata) throws Throwable {
     	InternalMockHandler<Object> handler = new MockUtil().getMockHandler(invocation.getMock());

                 : withSettings();
 
         return mockSettings
+		        .serializable()
                 .defaultAnswer(returnsDeepStubsAnswerUsing(returnTypeGenericMetadata));
     }
 

 
     private Object recordDeepStubMock(final Object mock, InvocationContainerImpl container) throws Throwable {
 
        container.addAnswer(new Answer<Object>() {
             public Object answer(InvocationOnMock invocation) throws Throwable {
                 return mock;
             }

         return mock;
     }
 	
+	abstract class SerializableAnswer implements Answer<Object>, Serializable {
 		
+	}
 	
 
     protected GenericMetadataSupport actualParameterizedType(Object mock) {
","
     
     private static final long serialVersionUID = -7105341425736035847L;
 
    private transient MockitoCore mockitoCore;
    private transient ReturnsEmptyValues delegate;
 
     public Object answer(InvocationOnMock invocation) throws Throwable {
         GenericMetadataSupport returnTypeGenericMetadata =
                 actualParameterizedType(invocation.getMock()).resolveGenericReturnType(invocation.getMethod());
 
         Class<?> rawType = returnTypeGenericMetadata.rawType();
        instantiateMockitoCoreIfNeeded();
        instantiateDelegateIfNeeded();
         if (!mockitoCore.isTypeMockable(rawType)) {
             return delegate.returnValueFor(rawType);
         }

         return getMock(invocation, returnTypeGenericMetadata);
     }
 
    private synchronized void instantiateMockitoCoreIfNeeded() {
        if (mockitoCore == null) {
            mockitoCore = new MockitoCore();
        }
    }
 
    private synchronized void instantiateDelegateIfNeeded() {
        if (delegate == null) {
            delegate = new ReturnsEmptyValues();
        }
    }
 
     private Object getMock(InvocationOnMock invocation, GenericMetadataSupport returnTypeGenericMetadata) throws Throwable {
     	InternalMockHandler<Object> handler = new MockUtil().getMockHandler(invocation.getMock());

                 : withSettings();
 
         return mockSettings
		        .serializable()
                 .defaultAnswer(returnsDeepStubsAnswerUsing(returnTypeGenericMetadata));
     }
 

 
     private Object recordDeepStubMock(final Object mock, InvocationContainerImpl container) throws Throwable {
 
        container.addAnswer(new SerializableAnswer() {
             public Object answer(InvocationOnMock invocation) throws Throwable {
                 return mock;
             }

         return mock;
     }
 	
	abstract class SerializableAnswer implements Answer<Object>, Serializable {
 		
	}
 	
 
     protected GenericMetadataSupport actualParameterizedType(Object mock) {
"
354,"junit.framework.AssertionFailedError","/src/org/mockito/internal/configuration/DefaultInjectionEngine.java","
 
     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {
         for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {
            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();
         }
     }
 
","
 
     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {
         for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {
            Object injected = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();
            mocks.remove(injected);
         }
     }
 
"
355,"junit.framework.AssertionFailedError","/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java","
                                                   return 1;
         }
         
         Class<?> returnType = invocation.getMethod().getReturnType();
","
                                                   return invocation.getMock() == invocation.getArguments()[0] ? 0 : 1;
         }
         
         Class<?> returnType = invocation.getMethod().getReturnType();
"
356,"java.lang.Exception","/src/org/mockito/internal/matchers/Same.java","
     public void describeTo(Description description) {
         description.appendText(""same("");
         appendQuoting(description);
        description.appendText(wanted.toString());
         appendQuoting(description);
         description.appendText("")"");
     }
","
     public void describeTo(Description description) {
         description.appendText(""same("");
         appendQuoting(description);
        description.appendText(wanted == null ? ""null"" : wanted.toString());
         appendQuoting(description);
         description.appendText("")"");
     }
"
357,"java.lang.ClassCastException","/src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java","
 package org.mockito.internal.stubbing.defaultanswers;
 
 import org.mockito.internal.InternalMockHandler;
 import org.mockito.internal.creation.settings.CreationSettings;
 import org.mockito.internal.stubbing.InvocationContainerImpl;
 import org.mockito.internal.stubbing.StubbedInvocationMatcher;
 import org.mockito.internal.util.MockCreationValidator;
 import org.mockito.internal.util.MockUtil;
 import org.mockito.internal.util.reflection.GenericMetadataSupport;
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.stubbing.Answer;
 
 import java.io.Serializable;
 public class ReturnsDeepStubs implements Answer<Object>, Serializable {
     
     private static final long serialVersionUID = -7105341425736035847L;
 
     private ReturnsEmptyValues delegate = new ReturnsEmptyValues();
 
     public Object answer(InvocationOnMock invocation) throws Throwable {
         GenericMetadataSupport returnTypeGenericMetadata =
                 actualParameterizedType(invocation.getMock()).resolveGenericReturnType(invocation.getMethod());
 
         Class<?> rawType = returnTypeGenericMetadata.rawType();
         if (!new MockCreationValidator().isTypeMockable(rawType)) {
             return delegate.returnValueFor(rawType);
         }
 
        return getMock(invocation);
     }
 
    private Object getMock(InvocationOnMock invocation) throws Throwable {
     	InternalMockHandler<Object> handler = new MockUtil().getMockHandler(invocation.getMock());
     	InvocationContainerImpl container = (InvocationContainerImpl) handler.getInvocationContainer();
 
                  for (StubbedInvocationMatcher stubbedInvocationMatcher : container.getStubbedInvocations()) {
     		if(container.getInvocationForStubbing().matches(stubbedInvocationMatcher.getInvocation())) {
     			return stubbedInvocationMatcher.answer(invocation);
     		}
 		}
 
                 return recordDeepStubMock(invocation, container);
     }
 
 
 
 
 
    private Object recordDeepStubMock(InvocationOnMock invocation, InvocationContainerImpl container) {
        Class<?> clz = invocation.getMethod().getReturnType();
        final Object mock = org.mockito.Mockito.mock(clz, this);
 
         container.addAnswer(new Answer<Object>() {
","
 package org.mockito.internal.stubbing.defaultanswers;
 
 import org.mockito.MockSettings;
 import org.mockito.internal.InternalMockHandler;
 import org.mockito.internal.creation.settings.CreationSettings;
 import org.mockito.internal.stubbing.InvocationContainerImpl;
 import org.mockito.internal.stubbing.StubbedInvocationMatcher;
 import org.mockito.internal.util.MockCreationValidator;
 import org.mockito.internal.util.MockUtil;
 import org.mockito.internal.util.reflection.GenericMetadataSupport;
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.stubbing.Answer;
 
 import java.io.Serializable;
 
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.withSettings;
 
 public class ReturnsDeepStubs implements Answer<Object>, Serializable {
     
     private static final long serialVersionUID = -7105341425736035847L;
 
     private ReturnsEmptyValues delegate = new ReturnsEmptyValues();
 
     public Object answer(InvocationOnMock invocation) throws Throwable {
         GenericMetadataSupport returnTypeGenericMetadata =
                 actualParameterizedType(invocation.getMock()).resolveGenericReturnType(invocation.getMethod());
 
         Class<?> rawType = returnTypeGenericMetadata.rawType();
         if (!new MockCreationValidator().isTypeMockable(rawType)) {
             return delegate.returnValueFor(rawType);
         }
 
        return getMock(invocation, returnTypeGenericMetadata);
     }
 
    private Object getMock(InvocationOnMock invocation, GenericMetadataSupport returnTypeGenericMetadata) throws Throwable {
     	InternalMockHandler<Object> handler = new MockUtil().getMockHandler(invocation.getMock());
     	InvocationContainerImpl container = (InvocationContainerImpl) handler.getInvocationContainer();
 
                  for (StubbedInvocationMatcher stubbedInvocationMatcher : container.getStubbedInvocations()) {
     		if(container.getInvocationForStubbing().matches(stubbedInvocationMatcher.getInvocation())) {
     			return stubbedInvocationMatcher.answer(invocation);
     		}
 		}
 
                 return recordDeepStubMock(createNewDeepStubMock(returnTypeGenericMetadata), container);
     }
    private Object createNewDeepStubMock(GenericMetadataSupport returnTypeGenericMetadata) {
        return mock(
                returnTypeGenericMetadata.rawType(),
                withSettingsUsing(returnTypeGenericMetadata)
        );
    }
 
    private MockSettings withSettingsUsing(GenericMetadataSupport returnTypeGenericMetadata) {
        MockSettings mockSettings =
                returnTypeGenericMetadata.rawExtraInterfaces().length > 0 ?
                withSettings().extraInterfaces(returnTypeGenericMetadata.rawExtraInterfaces())
                : withSettings();
 
        return mockSettings
                .defaultAnswer(returnsDeepStubsAnswerUsing(returnTypeGenericMetadata));
    }
 
    private ReturnsDeepStubs returnsDeepStubsAnswerUsing(final GenericMetadataSupport returnTypeGenericMetadata) {
        return new ReturnsDeepStubs() {
            @Override
            protected GenericMetadataSupport actualParameterizedType(Object mock) {
                return returnTypeGenericMetadata;
            }
        };
    }
 
    private Object recordDeepStubMock(final Object mock, InvocationContainerImpl container) throws Throwable {
 
         container.addAnswer(new Answer<Object>() {
"
358,"junit.framework.AssertionFailedError","/src/org/mockito/internal/util/MockUtil.java","
 
     public <T> void resetMock(T mock) {
         MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);
        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);
        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));
         ((Factory) mock).setCallback(0, newFilter);
     }
 
","
 
     public <T> void resetMock(T mock) {
         MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);
        MethodInterceptorFilter newFilter = newMethodInterceptorFilter(oldMockHandler.getMockSettings());
         ((Factory) mock).setCallback(0, newFilter);
     }
 
"
359,"java.lang.ClassCastException","/src/org/mockito/internal/util/Primitives.java","
         primitiveValues.put(int.class, 0);
         primitiveValues.put(long.class, 0L);
         primitiveValues.put(float.class, 0F);
        primitiveValues.put(double.class, 0);
     }
 }
\ No newline at end of file
","
         primitiveValues.put(int.class, 0);
         primitiveValues.put(long.class, 0L);
         primitiveValues.put(float.class, 0F);
        primitiveValues.put(double.class, 0D);
     }
 }
\ No newline at end of file
"
360,"junit.framework.AssertionFailedError","/src/org/mockito/internal/configuration/SpyAnnotationEngine.java","
 import org.mockito.exceptions.base.MockitoException;
 import org.mockito.internal.util.MockUtil;
 
 
 @SuppressWarnings({""unchecked""})
 public class SpyAnnotationEngine implements AnnotationEngine {

                                                  Mockito.reset(instance);
                     } else {
                        field.set(testClass, Mockito.spy(instance));
                     }
                 } catch (IllegalAccessException e) {
                     throw new MockitoException(""Problems initiating spied field "" + field.getName(), e);
","
 import org.mockito.exceptions.base.MockitoException;
 import org.mockito.internal.util.MockUtil;
 
 import static org.mockito.Mockito.withSettings;
 
 @SuppressWarnings({""unchecked""})
 public class SpyAnnotationEngine implements AnnotationEngine {

                                                  Mockito.reset(instance);
                     } else {
                        field.set(testClass, Mockito.mock(instance.getClass(), withSettings()
                                .spiedInstance(instance)
                                .defaultAnswer(Mockito.CALLS_REAL_METHODS)
                                .name(field.getName())));
                     }
                 } catch (IllegalAccessException e) {
                     throw new MockitoException(""Problems initiating spied field "" + field.getName(), e);
"
361,"junit.framework.ComparisonFailure","/src/org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNulls.java","
 
 import java.io.Serializable;
 import java.lang.reflect.Method;
 
 import org.mockito.Mockito;
 import org.mockito.cglib.proxy.MethodInterceptor;

         }
 
 		private String formatMethodCall() {
-			return invocation.getMethod().getName() + ""()"";
 		}
     }
 
","
 
 import java.io.Serializable;
 import java.lang.reflect.Method;
 import java.util.Arrays;
 
 import org.mockito.Mockito;
 import org.mockito.cglib.proxy.MethodInterceptor;

         }
 
 		private String formatMethodCall() {
			String args = Arrays.toString(invocation.getArguments());
			return invocation.getMethod().getName() + ""("" + args.substring(1, args.length() - 1) +	"")"";
 		}
     }
 
"
362,"java.lang.ArrayIndexOutOfBoundsException","/src/org/mockito/internal/invocation/InvocationMatcher.java","
     public void captureArgumentsFrom(Invocation i) {
         int k = 0;
         for (Matcher m : matchers) {
            if (m instanceof CapturesArguments) {
                 ((CapturesArguments) m).captureFrom(i.getArguments()[k]);
             }
             k++;
","
     public void captureArgumentsFrom(Invocation i) {
         int k = 0;
         for (Matcher m : matchers) {
            if (m instanceof CapturesArguments && i.getArguments().length > k) {
                 ((CapturesArguments) m).captureFrom(i.getArguments()[k]);
             }
             k++;
"
363,"java.lang.NullPointerException","/src/org/mockito/internal/invocation/Invocation.java","
 
 import org.hamcrest.Matcher;
 import org.mockito.exceptions.PrintableInvocation;
 import org.mockito.internal.debugging.Location;
 import org.mockito.internal.invocation.realmethod.RealMethod;
 import org.mockito.internal.matchers.*;

     }
 
     public Object callRealMethod() throws Throwable {
         return realMethod.invoke(mock, rawArguments);
     }
 
","
 
 import org.hamcrest.Matcher;
 import org.mockito.exceptions.PrintableInvocation;
 import org.mockito.exceptions.Reporter;
 import org.mockito.internal.debugging.Location;
 import org.mockito.internal.invocation.realmethod.RealMethod;
 import org.mockito.internal.matchers.*;

     }
 
     public Object callRealMethod() throws Throwable {
        if (this.getMethod().getDeclaringClass().isInterface()) {
            new Reporter().cannotCallRealMethodOnInterface();
        }
         return realMethod.invoke(mock, rawArguments);
     }
 
"
364,"junit.framework.AssertionFailedError","/src/org/mockito/internal/invocation/InvocationMatcher.java","
         Method m1 = invocation.getMethod();
         Method m2 = candidate.getMethod();
         
        return m1.equals(m2);
     }
     
     public Location getLocation() {
","
         Method m1 = invocation.getMethod();
         Method m2 = candidate.getMethod();
         
        if (m1.getName() != null && m1.getName().equals(m2.getName())) {
        	Class[] params1 = m1.getParameterTypes();
        	Class[] params2 = m2.getParameterTypes();
        	if (params1.length == params2.length) {
        	    for (int i = 0; i < params1.length; i++) {
        		if (params1[i] != params2[i])
        		    return false;
        	    }
        	    return true;
        	}
        }
        return false;
     }
     
     public Location getLocation() {
"
365,"java.lang.NullPointerException","/src/org/mockito/Matchers.java","
     public static <T> T isA(Class<T> clazz) {
        return reportMatcher(new InstanceOf(clazz)).<T>returnNull();
     }
 

     public static <T> T eq(T value) {
        return reportMatcher(new Equals(value)).<T>returnNull();
     }  
 

     public static <T> T same(T value) {
        return reportMatcher(new Same(value)).<T>returnNull();
     }
 
","
     public static <T> T isA(Class<T> clazz) {
        return reportMatcher(new InstanceOf(clazz)).<T>returnFor(clazz);
     }
 

     public static <T> T eq(T value) {
        return (T) reportMatcher(new Equals(value)).<T>returnFor((Class) value.getClass());
     }  
 

     public static <T> T same(T value) {
        return (T) reportMatcher(new Same(value)).<T>returnFor((Class) value.getClass());
     }
 
"
366,"junit.framework.AssertionFailedError","/src/org/mockito/exceptions/Reporter.java","
                 ));
     }
 
    public void smartNullPointerException(Location location) {
         throw new SmartNullPointerException(join(
                 ""You have a NullPointerException here:"",
                 new Location(),
                 ""Because this method was *not* stubbed correctly:"",
                 location,
                 """"

                 return ""SmartNull returned by unstubbed "" + formatMethodCall()  + "" method on mock"";
             }
 
            new Reporter().smartNullPointerException(location);
             return null;
         }
 
","
                 ));
     }
 
    public void smartNullPointerException(Object obj, Location location) {
         throw new SmartNullPointerException(join(
                 ""You have a NullPointerException here:"",
                 new Location(),
                obj,
                 ""Because this method was *not* stubbed correctly:"",
                 location,
                 """"

                 return ""SmartNull returned by unstubbed "" + formatMethodCall()  + "" method on mock"";
             }
 
            new Reporter().smartNullPointerException(obj, location);
             return null;
         }
 
"
367,"java.lang.NullPointerException","/src/org/mockito/internal/verification/argumentmatching/ArgumentMatchingTool.java","
     }
 
     private boolean toStringEquals(Matcher m, Object arg) {
        return StringDescription.toString(m).equals(arg.toString());
     }
 }
","
     }
 
     private boolean toStringEquals(Matcher m, Object arg) {
        return StringDescription.toString(m).equals(arg == null? ""null"" : arg.toString());
     }
 }
"
368,"java.lang.UnsupportedOperationException","/src/main/java/org/joda/time/Period.java","
         int years = getYears();
         int months = getMonths();
         if (years != 0 || months != 0) {
            years = FieldUtils.safeAdd(years, months / 12);
            months = months % 12;
            if (years != 0) {
                result = result.withYears(years);
             }
            if (months != 0) {
                result = result.withMonths(months);
             }
         }
         return result;
","
         int years = getYears();
         int months = getMonths();
         if (years != 0 || months != 0) {
            long totalMonths = years * 12L + months;
            if (type.isSupported(DurationFieldType.YEARS_TYPE)) {
                int normalizedYears = FieldUtils.safeToInt(totalMonths / 12);
                result = result.withYears(normalizedYears);
                totalMonths = totalMonths - (normalizedYears * 12);
             }
            if (type.isSupported(DurationFieldType.MONTHS_TYPE)) {
                int normalizedMonths = FieldUtils.safeToInt(totalMonths);
                result = result.withMonths(normalizedMonths);
                totalMonths = totalMonths - normalizedMonths;
            }
            if (totalMonths != 0) {
                throw new UnsupportedOperationException(""Unable to normalize as PeriodType is missing either years or months but period has a month/year amount: "" + toString());
             }
         }
         return result;
"
369,"junit.framework.ComparisonFailure","/src/main/java/org/joda/time/MutableDateTime.java","
         if (type == null) {
             throw new IllegalArgumentException(""Field must not be null"");
         }
             setMillis(type.getField(getChronology()).add(getMillis(), amount));
     }
 
     
   
     public void addYears(final int years) {
             setMillis(getChronology().years().add(getMillis(), years));
     }
 
     
     
     public void addWeekyears(final int weekyears) {
             setMillis(getChronology().weekyears().add(getMillis(), weekyears));
     }
 
     
   
     public void addMonths(final int months) {
             setMillis(getChronology().months().add(getMillis(), months));
     }
 
     
    
     public void addWeeks(final int weeks) {
             setMillis(getChronology().weeks().add(getMillis(), weeks));
     }
 
     
    
     public void addDays(final int days) {
             setMillis(getChronology().days().add(getMillis(), days));
     }
 
     
      
     public void addHours(final int hours) {
             setMillis(getChronology().hours().add(getMillis(), hours));
     }
     
     
      
     public void addMinutes(final int minutes) {
             setMillis(getChronology().minutes().add(getMillis(), minutes));
     }
 
     
     
     public void addSeconds(final int seconds) {
             setMillis(getChronology().seconds().add(getMillis(), seconds));
     }
 
     
    
     public void addMillis(final int millis) {
             setMillis(getChronology().millis().add(getMillis(), millis));
     }
 
     ","
         if (type == null) {
             throw new IllegalArgumentException(""Field must not be null"");
         }
        if (amount != 0) {
             setMillis(type.getField(getChronology()).add(getMillis(), amount));
        }
     }
 
     
      
     public void addYears(final int years) {
        if (years != 0) {
             setMillis(getChronology().years().add(getMillis(), years));
        }
     }
 
     
      
     public void addWeekyears(final int weekyears) {
        if (weekyears != 0) {
             setMillis(getChronology().weekyears().add(getMillis(), weekyears));
        }
     }
 
     
     
     public void addMonths(final int months) {
        if (months != 0) {
             setMillis(getChronology().months().add(getMillis(), months));
        }
     }
 
     
    
     public void addWeeks(final int weeks) {
        if (weeks != 0) {
             setMillis(getChronology().weeks().add(getMillis(), weeks));
        }
     }
 
     
     
     public void addDays(final int days) {
        if (days != 0) {
             setMillis(getChronology().days().add(getMillis(), days));
        }
     }
 
     
    
     public void addHours(final int hours) {
        if (hours != 0) {
             setMillis(getChronology().hours().add(getMillis(), hours));
        }
     }
     
     
    
     public void addMinutes(final int minutes) {
        if (minutes != 0) {
             setMillis(getChronology().minutes().add(getMillis(), minutes));
        }
     }
 
     
  
     public void addSeconds(final int seconds) {
        if (seconds != 0) {
             setMillis(getChronology().seconds().add(getMillis(), seconds));
        }
     }
 
     
     
     public void addMillis(final int millis) {
        if (millis != 0) {
             setMillis(getChronology().millis().add(getMillis(), millis));
        }
     }
 
     "
370,"junit.framework.AssertionFailedError","/src/main/java/org/joda/time/Partial.java","
             DateTimeFieldType loopType = types[i];
             DurationField loopUnitField = loopType.getDurationType().getField(iChronology);
             if (i > 0) {
                 int compare = lastUnitField.compareTo(loopUnitField);
                 if (compare < 0) {
                     throw new IllegalArgumentException(""Types array must be in order largest-smallest: "" +
                             types[i - 1].getName() + "" < "" + loopType.getName());
                } else if (compare == 0) {
                     if (types[i - 1].getRangeDurationType() == null) {
                         if (loopType.getRangeDurationType() == null) {
                             throw new IllegalArgumentException(""Types array must not contain duplicate: "" +

    
     public int compareTo(DurationField durationField) {
        if (durationField.isSupported()) {
            return 1;
        }
         return 0;
     }
 
","
             DateTimeFieldType loopType = types[i];
             DurationField loopUnitField = loopType.getDurationType().getField(iChronology);
             if (i > 0) {
                if (loopUnitField.isSupported() == false) {
                    if (lastUnitField.isSupported()) {
                        throw new IllegalArgumentException(""Types array must be in order largest-smallest: "" +
                                        types[i - 1].getName() + "" < "" + loopType.getName());
                    } else {
                        throw new IllegalArgumentException(""Types array must not contain duplicate unsupported: "" +
                                        types[i - 1].getName() + "" and "" + loopType.getName());
                    }
                }
                 int compare = lastUnitField.compareTo(loopUnitField);
                 if (compare < 0) {
                     throw new IllegalArgumentException(""Types array must be in order largest-smallest: "" +
                             types[i - 1].getName() + "" < "" + loopType.getName());
                } else if (compare == 0 && lastUnitField.equals(loopUnitField)) {
                     if (types[i - 1].getRangeDurationType() == null) {
                         if (loopType.getRangeDurationType() == null) {
                             throw new IllegalArgumentException(""Types array must not contain duplicate: "" +

   
     public int compareTo(DurationField durationField) {
         return 0;
     }
 
"
371,"junit.framework.AssertionFailedError","/src/main/java/org/joda/time/Partial.java","
             System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);
                                      Partial newPartial = new Partial(iChronology, newTypes, newValues);
             iChronology.validate(newPartial, newValues);
             return newPartial;
         }
","
             System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);
                                      Partial newPartial = new Partial(newTypes, newValues, iChronology);
             iChronology.validate(newPartial, newValues);
             return newPartial;
         }
"
372,"junit.framework.AssertionFailedError","/src/org/mockito/internal/stubbing/answers/AnswersValidator.java","
             validateDoNothing((DoesNothing) answer, invocation);
         }
         
     }
 
 
     private void validateDoNothing(DoesNothing answer, Invocation invocation) {
         if (!invocation.isVoid()) {
","
             validateDoNothing((DoesNothing) answer, invocation);
         }
         
        if (answer instanceof CallsRealMethods) {
            validateMockingConcreteClass((CallsRealMethods) answer, invocation);
        }
     }
 
    private void validateMockingConcreteClass(CallsRealMethods answer, Invocation invocation) {
        if (invocation.getMethod().getDeclaringClass().isInterface()) {
            reporter.cannotCallRealMethodOnInterface();
        }
    }
 
     private void validateDoNothing(DoesNothing answer, Invocation invocation) {
         if (!invocation.isVoid()) {
"
373,"java.lang.IllegalArgumentException","/src/main/java/org/joda/time/Partial.java","
             DurationField loopUnitField = loopType.getDurationType().getField(iChronology);
             if (i > 0) {
                 int compare = lastUnitField.compareTo(loopUnitField);
                if (compare < 0 || (compare != 0 && loopUnitField.isSupported() == false)) {
                     throw new IllegalArgumentException(""Types array must be in order largest-smallest: "" +
                             types[i - 1].getName() + "" < "" + loopType.getName());
                 } else if (compare == 0) {

                         if (compare > 0) {
                             break;
                         } else if (compare == 0) {
                             DurationField rangeField = fieldType.getRangeDurationType().getField(iChronology);
                             DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology);
                             if (rangeField.compareTo(loopRangeField) > 0) {

     
     public int compareTo(DurationField durationField) {
         return 0;
     }
 
","
             DurationField loopUnitField = loopType.getDurationType().getField(iChronology);
             if (i > 0) {
                 int compare = lastUnitField.compareTo(loopUnitField);
                if (compare < 0) {
                     throw new IllegalArgumentException(""Types array must be in order largest-smallest: "" +
                             types[i - 1].getName() + "" < "" + loopType.getName());
                 } else if (compare == 0) {

                         if (compare > 0) {
                             break;
                         } else if (compare == 0) {
                            if (fieldType.getRangeDurationType() == null) {
                                break;
                            }
                             DurationField rangeField = fieldType.getRangeDurationType().getField(iChronology);
                             DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology);
                             if (rangeField.compareTo(loopRangeField) > 0) {

     
     public int compareTo(DurationField durationField) {
        if (durationField.isSupported()) {
            return 1;
        }
         return 0;
     }
 
"
374,"java.lang.IllegalArgumentException","/src/main/java/org/joda/time/DateTimeZone.java","
         if (hoursOffset < -23 || hoursOffset > 23) {
             throw new IllegalArgumentException(""Hours out of range: "" + hoursOffset);
         }
        if (minutesOffset < 0 || minutesOffset > 59) {
             throw new IllegalArgumentException(""Minutes out of range: "" + minutesOffset);
         }
         int offset = 0;
         try {
             int hoursInMinutes = hoursOffset * 60;
             if (hoursInMinutes < 0) {
                minutesOffset = hoursInMinutes - minutesOffset;
             } else {
                 minutesOffset = hoursInMinutes + minutesOffset;
             }
","
         if (hoursOffset < -23 || hoursOffset > 23) {
             throw new IllegalArgumentException(""Hours out of range: "" + hoursOffset);
         }
        if (minutesOffset < -59 || minutesOffset > 59) {
             throw new IllegalArgumentException(""Minutes out of range: "" + minutesOffset);
         }
        if (hoursOffset > 0 && minutesOffset < 0) {
            throw new IllegalArgumentException(""Positive hours must not have negative minutes: "" + minutesOffset);
        }
         int offset = 0;
         try {
             int hoursInMinutes = hoursOffset * 60;
             if (hoursInMinutes < 0) {
                minutesOffset = hoursInMinutes - Math.abs(minutesOffset);
             } else {
                 minutesOffset = hoursInMinutes + minutesOffset;
             }
"
375,"junit.framework.AssertionFailedError","/src/main/java/org/joda/time/chrono/GJChronology.java","
             cutoverInstant = DEFAULT_CUTOVER;
         } else {
             cutoverInstant = gregorianCutover.toInstant();
         }
 
         GJChronology chrono;

                 if (instant < iCutover) {
                                          if (instant + iGapDuration < iCutover) {
                         instant = gregorianToJulian(instant);
                     }
                 }

                 if (instant < iCutover) {
                                          if (instant + iGapDuration < iCutover) {
                         instant = gregorianToJulian(instant);
                     }
                 }
","
             cutoverInstant = DEFAULT_CUTOVER;
         } else {
             cutoverInstant = gregorianCutover.toInstant();
            LocalDate cutoverDate = new LocalDate(cutoverInstant.getMillis(), GregorianChronology.getInstance(zone));
            if (cutoverDate.getYear() <= 0) {
                throw new IllegalArgumentException(""Cutover too early. Must be on or after 0001-01-01."");
            }
         }
 
         GJChronology chrono;

                 if (instant < iCutover) {
                                          if (instant + iGapDuration < iCutover) {
                        if (iConvertByWeekyear) {
                            int wyear = iGregorianChronology.weekyear().get(instant);
                            if (wyear <= 0) {
                                instant = iGregorianChronology.weekyear().add(instant, -1);
                            }
                        } else {
                            int year = iGregorianChronology.year().get(instant);
                            if (year <= 0) {
                                instant = iGregorianChronology.year().add(instant, -1);
                            }
                        }
                         instant = gregorianToJulian(instant);
                     }
                 }

                 if (instant < iCutover) {
                                          if (instant + iGapDuration < iCutover) {
                        if (iConvertByWeekyear) {
                            int wyear = iGregorianChronology.weekyear().get(instant);
                            if (wyear <= 0) {
                                instant = iGregorianChronology.weekyear().add(instant, -1);
                            }
                        } else {
                            int year = iGregorianChronology.year().get(instant);
                            if (year <= 0) {
                                instant = iGregorianChronology.year().add(instant, -1);
                            }
                        }
                         instant = gregorianToJulian(instant);
                     }
                 }
"
376,"org.joda.time.IllegalFieldValueException","/src/main/java/org/joda/time/format/DateTimeFormatter.java","
         
         long instantMillis = instant.getMillis();
         Chronology chrono = instant.getChronology();
         long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);
         chrono = selectChronology(chrono);
        int defaultYear = chrono.year().get(instantLocal);
         
         DateTimeParserBucket bucket = new DateTimeParserBucket(
             instantLocal, chrono, iLocale, iPivotYear, defaultYear);
","
         
         long instantMillis = instant.getMillis();
         Chronology chrono = instant.getChronology();
        int defaultYear = DateTimeUtils.getChronology(chrono).year().get(instantMillis);
         long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);
         chrono = selectChronology(chrono);
         
         DateTimeParserBucket bucket = new DateTimeParserBucket(
             instantLocal, chrono, iLocale, iPivotYear, defaultYear);
"
377,"junit.framework.AssertionFailedError","/src/main/java/org/joda/time/DateTimeZone.java","
         if (hoursOffset == 0 && minutesOffset == 0) {
             return DateTimeZone.UTC;
         }
         if (minutesOffset < 0 || minutesOffset > 59) {
             throw new IllegalArgumentException(""Minutes out of range: "" + minutesOffset);
         }
         int offset = 0;
         try {
            int hoursInMinutes = FieldUtils.safeMultiply(hoursOffset, 60);
             if (hoursInMinutes < 0) {
                minutesOffset = FieldUtils.safeAdd(hoursInMinutes, -minutesOffset);
             } else {
                minutesOffset = FieldUtils.safeAdd(hoursInMinutes, minutesOffset);
             }
             offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);
         } catch (ArithmeticException ex) {

    
     public static DateTimeZone forOffsetMillis(int millisOffset) {
         String id = printOffset(millisOffset);
         return fixedOffsetZone(id, millisOffset);
     }
","
         if (hoursOffset == 0 && minutesOffset == 0) {
             return DateTimeZone.UTC;
         }
        if (hoursOffset < -23 || hoursOffset > 23) {
            throw new IllegalArgumentException(""Hours out of range: "" + hoursOffset);
        }
         if (minutesOffset < 0 || minutesOffset > 59) {
             throw new IllegalArgumentException(""Minutes out of range: "" + minutesOffset);
         }
         int offset = 0;
         try {
            int hoursInMinutes = hoursOffset * 60;
             if (hoursInMinutes < 0) {
                minutesOffset = hoursInMinutes - minutesOffset;
             } else {
                minutesOffset = hoursInMinutes + minutesOffset;
             }
             offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);
         } catch (ArithmeticException ex) {

    
     public static DateTimeZone forOffsetMillis(int millisOffset) {
        if (millisOffset < -MAX_MILLIS || millisOffset > MAX_MILLIS) {
            throw new IllegalArgumentException(""Millis out of range: "" + millisOffset);
        }
         String id = printOffset(millisOffset);
         return fixedOffsetZone(id, millisOffset);
     }
"
378,"org.joda.time.IllegalFieldValueException","/src/main/java/org/joda/time/base/BaseSingleFieldPeriod.java","
          private static final long serialVersionUID = 9386874258972L;
      
          private volatile int iPeriod;

             throw new IllegalArgumentException(""ReadablePartial objects must be contiguous"");
         }
         Chronology chrono = DateTimeUtils.getChronology(start.getChronology()).withUTC();
        int[] values = chrono.get(zeroInstance, chrono.set(start, 0L), chrono.set(end, 0L));
         return values[0];
     }
 
","
          private static final long serialVersionUID = 9386874258972L;
         private static final long START_1972 = 2L * 365L * 86400L * 1000L;
 
          private volatile int iPeriod;

             throw new IllegalArgumentException(""ReadablePartial objects must be contiguous"");
         }
         Chronology chrono = DateTimeUtils.getChronology(start.getChronology()).withUTC();
        int[] values = chrono.get(zeroInstance, chrono.set(start, START_1972), chrono.set(end, START_1972));
         return values[0];
     }
 
"
379,"junit.framework.AssertionFailedError","/src/main/java/org/joda/time/LocalDate.java","
         if (calendar == null) {
             throw new IllegalArgumentException(""The calendar must not be null"");
         }
         int yearOfEra = calendar.get(Calendar.YEAR);
         return new LocalDate(
            yearOfEra,
             calendar.get(Calendar.MONTH) + 1,
             calendar.get(Calendar.DAY_OF_MONTH)
         );

         if (date == null) {
             throw new IllegalArgumentException(""The date must not be null"");
         }
                      return new LocalDate(
             date.getYear() + 1900,
             date.getMonth() + 1,

         if (calendar == null) {
             throw new IllegalArgumentException(""The calendar must not be null"");
         }
         int yearOfEra = calendar.get(Calendar.YEAR);
         return new LocalDateTime(
            yearOfEra,
             calendar.get(Calendar.MONTH) + 1,
             calendar.get(Calendar.DAY_OF_MONTH),
             calendar.get(Calendar.HOUR_OF_DAY),

         if (date == null) {
             throw new IllegalArgumentException(""The date must not be null"");
         }
                      return new LocalDateTime(
             date.getYear() + 1900,
             date.getMonth() + 1,
","
         if (calendar == null) {
             throw new IllegalArgumentException(""The calendar must not be null"");
         }
        int era = calendar.get(Calendar.ERA);
         int yearOfEra = calendar.get(Calendar.YEAR);
         return new LocalDate(
            (era == GregorianCalendar.AD ? yearOfEra : 1 - yearOfEra),
             calendar.get(Calendar.MONTH) + 1,
             calendar.get(Calendar.DAY_OF_MONTH)
         );

         if (date == null) {
             throw new IllegalArgumentException(""The date must not be null"");
         }
        if (date.getTime() < 0) {
                         GregorianCalendar cal = new GregorianCalendar();
            cal.setTime(date);
            return fromCalendarFields(cal);
        }
         return new LocalDate(
             date.getYear() + 1900,
             date.getMonth() + 1,

         if (calendar == null) {
             throw new IllegalArgumentException(""The calendar must not be null"");
         }
        int era = calendar.get(Calendar.ERA);
         int yearOfEra = calendar.get(Calendar.YEAR);
         return new LocalDateTime(
            (era == GregorianCalendar.AD ? yearOfEra : 1 - yearOfEra),
             calendar.get(Calendar.MONTH) + 1,
             calendar.get(Calendar.DAY_OF_MONTH),
             calendar.get(Calendar.HOUR_OF_DAY),

         if (date == null) {
             throw new IllegalArgumentException(""The date must not be null"");
         }
        if (date.getTime() < 0) {
                         GregorianCalendar cal = new GregorianCalendar();
            cal.setTime(date);
            return fromCalendarFields(cal);
        }
         return new LocalDateTime(
             date.getYear() + 1900,
             date.getMonth() + 1,
"
380,"junit.framework.AssertionFailedError","/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java","
 
     static Chronology cLenientISO;
 
    static ThreadLocal<Boolean> cVerbose = new ThreadLocal<Boolean>();
    static {
        cVerbose.set(Boolean.FALSE);
    }
 
","
 
     static Chronology cLenientISO;
 
    static ThreadLocal<Boolean> cVerbose = new ThreadLocal<Boolean>() {
        protected Boolean initialValue() {
            return Boolean.FALSE;
        }
    };
"
381,"org.joda.time.IllegalFieldValueException","/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java","
         if (valueToAdd == 0) {
             return values;
         }
                      if (DateTimeUtils.isContiguous(partial)) {
             long instant = 0L;
             for (int i = 0, isize = partial.size(); i < isize; i++) {
","
         if (valueToAdd == 0) {
             return values;
         }
        if (partial.size() > 0 && partial.getFieldType(0).equals(DateTimeFieldType.monthOfYear()) && fieldIndex == 0) {
                         int curMonth0 = partial.getValue(0) - 1;
            int newMonth = ((curMonth0 + (valueToAdd % 12) + 12) % 12) + 1;
            return set(partial, 0, values, newMonth);
        }
         if (DateTimeUtils.isContiguous(partial)) {
             long instant = 0L;
             for (int i = 0, isize = partial.size(); i < isize; i++) {
"
382,"junit.framework.ComparisonFailure","/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java","
             if (iFieldType >= SECONDS_MILLIS) {
                                                  sum = Math.max(sum, 4);
                                  sum++;
                 if (iFieldType == SECONDS_OPTIONAL_MILLIS &&

             if (iPrefix != null) {
                 iPrefix.printTo(buf, value);
             }
             int minDigits = iMinPrintedDigits;
             if (minDigits <= 1) {
                 FormatUtils.appendUnpaddedInteger(buf, value);

             if (iFieldType >= SECONDS_MILLIS) {
                 int dp = (int) (Math.abs(valueLong) % DateTimeConstants.MILLIS_PER_SECOND);
                 if (iFieldType == SECONDS_MILLIS || dp > 0) {
                     buf.append('.');
                     FormatUtils.appendPaddedInteger(buf, dp, 3);
                 }
","
             if (iFieldType >= SECONDS_MILLIS) {
                                                  sum = (valueLong < 0 ? Math.max(sum, 5) : Math.max(sum, 4));
                                  sum++;
                 if (iFieldType == SECONDS_OPTIONAL_MILLIS &&

             if (iPrefix != null) {
                 iPrefix.printTo(buf, value);
             }
            int bufLen = buf.length();
             int minDigits = iMinPrintedDigits;
             if (minDigits <= 1) {
                 FormatUtils.appendUnpaddedInteger(buf, value);

             if (iFieldType >= SECONDS_MILLIS) {
                 int dp = (int) (Math.abs(valueLong) % DateTimeConstants.MILLIS_PER_SECOND);
                 if (iFieldType == SECONDS_MILLIS || dp > 0) {
                    if (valueLong < 0 && valueLong > -DateTimeConstants.MILLIS_PER_SECOND) {
                        buf.insert(bufLen, '-');
                    }
                     buf.append('.');
                     FormatUtils.appendPaddedInteger(buf, dp, 3);
                 }
"
383,"junit.framework.AssertionFailedError","/src/main/java/org/joda/time/field/FieldUtils.java","
     public static long safeMultiply(long val1, int val2) {
         switch (val2) {
             case -1:
                 return -val1;
             case 0:
                 return 0L;
","
     public static long safeMultiply(long val1, int val2) {
         switch (val2) {
             case -1:
                if (val1 == Long.MIN_VALUE) {
                    throw new ArithmeticException(""Multiplication overflows a long: "" + val1 + "" * "" + val2);
                }
                 return -val1;
             case 0:
                 return 0L;
"
384,"junit.framework.AssertionFailedError","/src/main/java/org/joda/time/DateTimeZone.java","
                  
                 long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);
        long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);
        if (instantBefore == instantAfter) {
             return instant;           }
         
                 long local = convertUTCToLocal(instant);
        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);
         
                                    }
  
","
                  
                 long instantBefore = instant - 3 * DateTimeConstants.MILLIS_PER_HOUR;
        long instantAfter = instant + 3 * DateTimeConstants.MILLIS_PER_HOUR;
        long offsetBefore = getOffset(instantBefore);
        long offsetAfter = getOffset(instantAfter);
        if (offsetBefore <= offsetAfter) {
             return instant;           }
         
                 long diff = offsetBefore - offsetAfter;
        long transition = nextTransition(instantBefore);
        long overlapStart = transition - diff;
        long overlapEnd = transition + diff;
        if (instant < overlapStart || instant >= overlapEnd) {
          return instant;          }
         
                 long afterStart = instant - overlapStart;
        if (afterStart >= diff) {
                     return earlierOrLater ? instant : instant - diff;
        } else {
                     return earlierOrLater ? instant + diff : instant;
        }
     }
  
"
385,"junit.framework.AssertionFailedError","/src/main/java/org/joda/time/format/DateTimeFormatter.java","
         chrono = selectChronology(chrono);
         
         DateTimeParserBucket bucket = new DateTimeParserBucket(
            instantLocal, chrono, iLocale, iPivotYear, iDefaultYear);
         int newPos = parser.parseInto(bucket, text, position);
         instant.setMillis(bucket.computeMillis(false, text));
         if (iOffsetParsed && bucket.getOffsetInteger() != null) {
","
         chrono = selectChronology(chrono);
         
         DateTimeParserBucket bucket = new DateTimeParserBucket(
            instantLocal, chrono, iLocale, iPivotYear, chrono.year().get(instantLocal));
         int newPos = parser.parseInto(bucket, text, position);
         instant.setMillis(bucket.computeMillis(false, text));
         if (iOffsetParsed && bucket.getOffsetInteger() != null) {
"
386,"java.lang.IllegalArgumentException","/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java","
 
         public int parseInto(DateTimeParserBucket bucket, String text, int position) {
             String str = text.substring(position);
             for (String id : ALL_IDS) {
                 if (str.startsWith(id)) {
                    bucket.setZone(DateTimeZone.forID(id));
                    return position + id.length();
                 }
             }
             return ~position;
         }
     }
","
 
         public int parseInto(DateTimeParserBucket bucket, String text, int position) {
             String str = text.substring(position);
            String best = null;
             for (String id : ALL_IDS) {
                 if (str.startsWith(id)) {
                	if (best == null || id.length() > best.length()) {
                		best = id;
                	}
                 }
             }
            if (best != null) {
                bucket.setZone(DateTimeZone.forID(best));
                return position + best.length();
            }
             return ~position;
         }
     }
"
387,"org.joda.time.IllegalFieldValueException","/src/main/java/org/joda/time/chrono/GJChronology.java","
 
                  long instant;
             instant = iGregorianChronology.getDateTimeMillis
                 (year, monthOfYear, dayOfMonth,
                  hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
         if (instant < iCutoverMillis) {
                          instant = iJulianChronology.getDateTimeMillis
","
 
                  long instant;
        try {
             instant = iGregorianChronology.getDateTimeMillis
                 (year, monthOfYear, dayOfMonth,
                  hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
        } catch (IllegalFieldValueException ex) {
            if (monthOfYear != 2 || dayOfMonth != 29) {
                throw ex;
            }
            instant = iGregorianChronology.getDateTimeMillis
                (year, monthOfYear, 28,
                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
            if (instant >= iCutoverMillis) {
                throw ex;
            }
        }
         if (instant < iCutoverMillis) {
                          instant = iJulianChronology.getDateTimeMillis
"
388,"junit.framework.ComparisonFailure","/src/main/java/org/joda/time/DateTimeZone.java","
                     return offsetLocal;
                 }
             }
        } else if (offsetLocal > 0) {
             long prev = previousTransition(instantAdjusted);
             if (prev < instantAdjusted) {
                 int offsetPrev = getOffset(prev);
","
                     return offsetLocal;
                 }
             }
        } else if (offsetLocal >= 0) {
             long prev = previousTransition(instantAdjusted);
             if (prev < instantAdjusted) {
                 int offsetPrev = getOffset(prev);
"
389,"junit.framework.ComparisonFailure","/src/main/java/org/joda/time/tz/DefaultNameProvider.java","
         if (byNameKeyCache == null) {
             byIdCache.put(id, byNameKeyCache = createCache());
             
             String[][] zoneStringsLoc = DateTimeUtils.getDateFormatSymbols(locale).getZoneStrings();
             String[] setLoc = null;
             for (String[] strings : zoneStringsLoc) {
               if (strings != null && strings.length == 5 && id.equals(strings[0])) {
                 setLoc = strings;
             
              byNameKeyCache.put(setLoc[2], new String[] {setLoc[2], setLoc[1]});
                                                           if (setLoc[2].equals(setLoc[4])) {
                  byNameKeyCache.put(setLoc[4] + ""-Summer"", new String[] {setLoc[4], setLoc[3]});
               } else {
                  byNameKeyCache.put(setLoc[4], new String[] {setLoc[4], setLoc[3]});
              }
                break;
               }
             }
         }
","
         if (byNameKeyCache == null) {
             byIdCache.put(id, byNameKeyCache = createCache());
             
            String[][] zoneStringsEn = DateTimeUtils.getDateFormatSymbols(Locale.ENGLISH).getZoneStrings();
            String[] setEn = null;
            for (String[] strings : zoneStringsEn) {
              if (strings != null && strings.length == 5 && id.equals(strings[0])) {
                setEn = strings;
                break;
              }
            }
             String[][] zoneStringsLoc = DateTimeUtils.getDateFormatSymbols(locale).getZoneStrings();
             String[] setLoc = null;
             for (String[] strings : zoneStringsLoc) {
               if (strings != null && strings.length == 5 && id.equals(strings[0])) {
                 setLoc = strings;
                break;
              }
            }
             
            if (setEn != null && setLoc != null) {
              byNameKeyCache.put(setEn[2], new String[] {setLoc[2], setLoc[1]});
                                                           if (setEn[2].equals(setEn[4])) {
                  byNameKeyCache.put(setEn[4] + ""-Summer"", new String[] {setLoc[4], setLoc[3]});
               } else {
                  byNameKeyCache.put(setEn[4], new String[] {setLoc[4], setLoc[3]});
               }
             }
         }
"
390,"junit.framework.AssertionFailedError","/src/main/java/org/joda/time/base/BasePeriod.java","
     
     protected BasePeriod(long duration) {
        this(duration, null, null);
              }
","
    
     protected BasePeriod(long duration) {
        super();
                 iType = PeriodType.time();
        int[] values = ISOChronology.getInstanceUTC().get(this, duration);
        iType = PeriodType.standard();
        iValues = new int[8];
        System.arraycopy(values, 0, iValues, 4, 4);
     }
 
"
391,"junit.framework.ComparisonFailure","/src/main/java/org/joda/time/DateTimeZone.java","
                          map = new HashMap<String, String>();
             map.put(""GMT"", ""UTC"");
             map.put(""MIT"", ""Pacific/Apia"");
             map.put(""HST"", ""Pacific/Honolulu"");               map.put(""AST"", ""America/Anchorage"");

             map.put(""PNT"", ""America/Phoenix"");
             map.put(""CST"", ""America/Chicago"");
             map.put(""EST"", ""America/New_York"");              map.put(""IET"", ""America/Indianapolis"");
             map.put(""PRT"", ""America/Puerto_Rico"");
             map.put(""CNT"", ""America/St_Johns"");
            map.put(""AGT"", ""America/Buenos_Aires"");
             map.put(""BET"", ""America/Sao_Paulo"");
            map.put(""WET"", ""Europe/London"");
            map.put(""ECT"", ""Europe/Paris"");
             map.put(""ART"", ""Africa/Cairo"");
             map.put(""CAT"", ""Africa/Harare"");
            map.put(""EET"", ""Europe/Bucharest"");
             map.put(""EAT"", ""Africa/Addis_Ababa"");
            map.put(""MET"", ""Asia/Tehran"");
             map.put(""NET"", ""Asia/Yerevan"");
             map.put(""PLT"", ""Asia/Karachi"");
            map.put(""IST"", ""Asia/Calcutta"");
             map.put(""BST"", ""Asia/Dhaka"");
            map.put(""VST"", ""Asia/Saigon"");
             map.put(""CTT"", ""Asia/Shanghai"");
             map.put(""JST"", ""Asia/Tokyo"");
             map.put(""ACT"", ""Australia/Darwin"");
","
                          map = new HashMap<String, String>();
             map.put(""GMT"", ""UTC"");
            map.put(""WET"", ""WET"");
            map.put(""CET"", ""CET"");
            map.put(""MET"", ""CET"");
            map.put(""ECT"", ""CET"");
            map.put(""EET"", ""EET"");
             map.put(""MIT"", ""Pacific/Apia"");
             map.put(""HST"", ""Pacific/Honolulu"");               map.put(""AST"", ""America/Anchorage"");

             map.put(""PNT"", ""America/Phoenix"");
             map.put(""CST"", ""America/Chicago"");
             map.put(""EST"", ""America/New_York"");              map.put(""IET"", ""America/Indiana/Indianapolis"");
             map.put(""PRT"", ""America/Puerto_Rico"");
             map.put(""CNT"", ""America/St_Johns"");
            map.put(""AGT"", ""America/Argentina/Buenos_Aires"");
             map.put(""BET"", ""America/Sao_Paulo"");
             map.put(""ART"", ""Africa/Cairo"");
             map.put(""CAT"", ""Africa/Harare"");
             map.put(""EAT"", ""Africa/Addis_Ababa"");
             map.put(""NET"", ""Asia/Yerevan"");
             map.put(""PLT"", ""Asia/Karachi"");
            map.put(""IST"", ""Asia/Kolkata"");
             map.put(""BST"", ""Asia/Dhaka"");
            map.put(""VST"", ""Asia/Ho_Chi_Minh"");
             map.put(""CTT"", ""Asia/Shanghai"");
             map.put(""JST"", ""Asia/Tokyo"");
             map.put(""ACT"", ""Australia/Darwin"");
"
392,"junit.framework.ComparisonFailure","/src/main/java/org/joda/time/DateTimeZone.java","
                     return offsetLocal;
                 }
             }
         }
         return offsetAdjusted;
     }
","
                     return offsetLocal;
                 }
             }
        } else if (offsetLocal > 0) {
            long prev = previousTransition(instantAdjusted);
            if (prev < instantAdjusted) {
                int offsetPrev = getOffset(prev);
                int diff = offsetPrev - offsetLocal;
                if (instantAdjusted - prev <= diff) {
                    return offsetPrev;
                }
            }
         }
         return offsetAdjusted;
     }
"
393,"junit.framework.ComparisonFailure","/src/main/java/org/joda/time/chrono/ZonedChronology.java","
             } else {
                long localInstant = iZone.convertUTCToLocal(instant);
                localInstant = iField.add(localInstant, value);
               return iZone.convertLocalToUTC(localInstant, false);
             }
         }
 

             } else {
                long localInstant = iZone.convertUTCToLocal(instant);
                localInstant = iField.add(localInstant, value);
               return iZone.convertLocalToUTC(localInstant, false);
             }
         }
 

             } else {
                 long localInstant = iZone.convertUTCToLocal(instant);
                 localInstant = iField.addWrapField(localInstant, value);
                return iZone.convertLocalToUTC(localInstant, false);
             }
         }
 
         public long set(long instant, int value) {
             long localInstant = iZone.convertUTCToLocal(instant);
             localInstant = iField.set(localInstant, value);
            long result = iZone.convertLocalToUTC(localInstant, false);
             if (get(result) != value) {
                 throw new IllegalFieldValueException(iField.getType(), new Integer(value),
                     ""Illegal instant due to time zone offset transition: "" +

                          long localInstant = iZone.convertUTCToLocal(instant);
             localInstant = iField.set(localInstant, text, locale);
            return iZone.convertLocalToUTC(localInstant, false);
         }
 
         public int getDifference(long minuendInstant, long subtrahendInstant) {

             } else {
                 long localInstant = iZone.convertUTCToLocal(instant);
                 localInstant = iField.roundFloor(localInstant);
                return iZone.convertLocalToUTC(localInstant, false);
             }
         }
 

             } else {
                 long localInstant = iZone.convertUTCToLocal(instant);
                 localInstant = iField.roundCeiling(localInstant);
                return iZone.convertLocalToUTC(localInstant, false);
             }
         }
 
","
             } else {
                long localInstant = iZone.convertUTCToLocal(instant);
                localInstant = iField.add(localInstant, value);
               return iZone.convertLocalToUTC(localInstant, false, instant);
             }
         }
 

             } else {
                long localInstant = iZone.convertUTCToLocal(instant);
                localInstant = iField.add(localInstant, value);
               return iZone.convertLocalToUTC(localInstant, false, instant);
             }
         }
 

             } else {
                 long localInstant = iZone.convertUTCToLocal(instant);
                 localInstant = iField.addWrapField(localInstant, value);
                return iZone.convertLocalToUTC(localInstant, false, instant);
             }
         }
 
         public long set(long instant, int value) {
             long localInstant = iZone.convertUTCToLocal(instant);
             localInstant = iField.set(localInstant, value);
            long result = iZone.convertLocalToUTC(localInstant, false, instant);
             if (get(result) != value) {
                 throw new IllegalFieldValueException(iField.getType(), new Integer(value),
                     ""Illegal instant due to time zone offset transition: "" +

                          long localInstant = iZone.convertUTCToLocal(instant);
             localInstant = iField.set(localInstant, text, locale);
            return iZone.convertLocalToUTC(localInstant, false, instant);
         }
 
         public int getDifference(long minuendInstant, long subtrahendInstant) {

             } else {
                 long localInstant = iZone.convertUTCToLocal(instant);
                 localInstant = iField.roundFloor(localInstant);
                return iZone.convertLocalToUTC(localInstant, false, instant);
             }
         }
 

             } else {
                 long localInstant = iZone.convertUTCToLocal(instant);
                 localInstant = iField.roundCeiling(localInstant);
                return iZone.convertLocalToUTC(localInstant, false, instant);
             }
         }
 
"
394,"junit.framework.AssertionFailedError","/src/main/java/org/joda/time/format/DateTimeParserBucket.java","
             for (int i = 0; i < count; i++) {
                 millis = savedFields[i].set(millis, resetFields);
             }
         } catch (IllegalFieldValueException e) {
             if (text != null) {
                 e.prependMessage(""Cannot parse \"""" + text + '""');
","
             for (int i = 0; i < count; i++) {
                 millis = savedFields[i].set(millis, resetFields);
             }
            if (resetFields) {
                for (int i = 0; i < count; i++) {
                    millis = savedFields[i].set(millis, i == (count - 1));
                }
            }
         } catch (IllegalFieldValueException e) {
             if (text != null) {
                 e.prependMessage(""Cannot parse \"""" + text + '""');
"
395,"java.lang.IllegalArgumentException","/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java","
         int size = elementPairs.size();
         if (size >= 2 && elementPairs.get(0) instanceof Separator) {
             Separator sep = (Separator) elementPairs.get(0);
                 PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);
                 sep = sep.finish(f.getPrinter(), f.getParser());
                 return new PeriodFormatter(sep, sep);
         }
         Object[] comp = createComposite(elementPairs);
         if (notPrinter) {
","
         int size = elementPairs.size();
         if (size >= 2 && elementPairs.get(0) instanceof Separator) {
             Separator sep = (Separator) elementPairs.get(0);
            if (sep.iAfterParser == null && sep.iAfterPrinter == null) {
                 PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);
                 sep = sep.finish(f.getPrinter(), f.getParser());
                 return new PeriodFormatter(sep, sep);
            }
         }
         Object[] comp = createComposite(elementPairs);
         if (notPrinter) {
"
