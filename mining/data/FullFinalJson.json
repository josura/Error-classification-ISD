[{"ids":1,"error":"junit.framework.AssertionFailedError","source":"/source/org/jfree/chart/util/ShapeList.java","code":"@@ -108,7 +108,14 @@ public boolean equals(Object obj) {\n         if (!(obj instanceof ShapeList)) {\n             return false;\n         }\n         return super.equals(obj);\n \n     }\n \n","solution":"@@ -108,7 +108,14 @@ public boolean equals(Object obj) {\n         if (!(obj instanceof ShapeList)) {\n             return false;\n         }\n         ShapeList that = (ShapeList) obj;\n         int listSize = size();\n         for (int i = 0; i < listSize; i +) {\n            if (!ShapeUtilities.equal((Shape) get(i), (Shape) that.get(i))) {\n                return false;\n            }\n         }\n         return true;\n \n     }\n \n","CodeWithNoComments":"\n         if (!(obj instanceof ShapeList)) {\n             return false;\n         }\n         return super.equals(obj);\n \n     }\n \n","SolutionWithNoComments":"\n         if (!(obj instanceof ShapeList)) {\n             return false;\n         }\n         ShapeList that = (ShapeList) obj;\n         int listSize = size();\n         for (int i = 0; i < listSize; i +) {\n            if (!ShapeUtilities.equal((Shape) get(i), (Shape) that.get(i))) {\n                return false;\n            }\n         }\n         return true;\n \n     }\n \n"},{"ids":2,"error":"junit.framework.ComparisonFailure","source":"/source/org/jfree/chart/imagemap/StandardToolTipTagFragmentGenerator.java","code":"@@ -62,7 +62,7 @@ public StandardToolTipTagFragmentGenerator() {\n      * @return The formatted HTML area tag attribute(s).\n      */\n     public String generateToolTipFragment(String toolTipText) {\n        return \" title=\\\"\" + toolTipText\n             + \"\\\" alt=\\\"\\\"\";\n     }\n \n","solution":"@@ -62,7 +62,7 @@ public StandardToolTipTagFragmentGenerator() {\n      * @return The formatted HTML area tag attribute(s).\n      */\n     public String generateToolTipFragment(String toolTipText) {\n        return \" title=\\\"\" + ImageMapUtilities.htmlEscape(toolTipText) \n             + \"\\\" alt=\\\"\\\"\";\n     }\n \n","CodeWithNoComments":"\n        return \" title=\\\"\" + toolTipText\n             + \"\\\" alt=\\\"\\\"\";\n     }\n \n","SolutionWithNoComments":"\n        return \" title=\\\"\" + ImageMapUtilities.htmlEscape(toolTipText) \n             + \"\\\" alt=\\\"\\\"\";\n     }\n \n"},{"ids":3,"error":"java.lang.IllegalArgumentException","source":"/source/org/jfree/data/time/TimeSeries.java","code":"@@ -941,7 +941,7 @@ public TimeSeries createCopy(RegularTimePeriod start, RegularTimePeriod end)\n             endIndex = -(endIndex + 1); // this is first item AFTER end period\n             endIndex = endIndex - 1;    // so this is last item BEFORE end\n         }\n        if (endIndex < 0) {\n             emptyRange = true;\n         }\n         if (emptyRange) {\n","solution":"@@ -941,7 +941,7 @@ public TimeSeries createCopy(RegularTimePeriod start, RegularTimePeriod end)\n             endIndex = -(endIndex + 1); // this is first item AFTER end period\n             endIndex = endIndex - 1;    // so this is last item BEFORE end\n         }\n        if ((endIndex < 0)  || (endIndex < startIndex)) {\n             emptyRange = true;\n         }\n         if (emptyRange) {\n","CodeWithNoComments":"\n             endIndex = -(endIndex + 1);              endIndex = endIndex - 1;             }\n        if (endIndex < 0) {\n             emptyRange = true;\n         }\n         if (emptyRange) {\n","SolutionWithNoComments":"\n             endIndex = -(endIndex + 1);              endIndex = endIndex - 1;             }\n        if ((endIndex < 0)  || (endIndex < startIndex)) {\n             emptyRange = true;\n         }\n         if (emptyRange) {\n"},{"ids":4,"error":"junit.framework.AssertionFailedError","source":"/source/org/jfree/data/time/Week.java","code":"@@ -172,7 +172,7 @@ public Week(Date time) {\n      */\n     public Week(Date time, TimeZone zone) {\n         // defer argument checking...\n        this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());\n     }\n \n     /**\n","solution":"@@ -172,7 +172,7 @@ public Week(Date time) {\n      */\n     public Week(Date time, TimeZone zone) {\n         // defer argument checking...\n        this(time, zone, Locale.getDefault());\n     }\n \n     /**\n","CodeWithNoComments":"\n  \n     public Week(Date time, TimeZone zone) {\n                 this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());\n     }\n \n","SolutionWithNoComments":"\n    \n     public Week(Date time, TimeZone zone) {\n                 this(time, zone, Locale.getDefault());\n     }\n \n"},{"ids":5,"error":"junit.framework.AssertionFailedError","source":"/source/org/jfree/data/time/TimePeriodValues.java","code":"@@ -297,9 +297,9 @@ private void updateBounds(TimePeriod period, int index) {\n         }\n         \n         if (this.maxMiddleIndex >= 0) {\n          long s = getDataItem(this.minMiddleIndex).getPeriod().getStart()\n                 .getTime();\n          long e = getDataItem(this.minMiddleIndex).getPeriod().getEnd()\n                 .getTime();\n             long maxMiddle = s + (e - s) / 2;\n             if (middle > maxMiddle) {\n","solution":"@@ -297,9 +297,9 @@ private void updateBounds(TimePeriod period, int index) {\n         }\n         \n         if (this.maxMiddleIndex >= 0) {\n          long s = getDataItem(this.maxMiddleIndex).getPeriod().getStart()\n                 .getTime();\n          long e = getDataItem(this.maxMiddleIndex).getPeriod().getEnd()\n                 .getTime();\n             long maxMiddle = s + (e - s) / 2;\n             if (middle > maxMiddle) {\n","CodeWithNoComments":"\n         }\n         \n         if (this.maxMiddleIndex >= 0) {\n            long s = getDataItem(this.minMiddleIndex).getPeriod().getStart()\n                 .getTime();\n            long e = getDataItem(this.minMiddleIndex).getPeriod().getEnd()\n                 .getTime();\n             long maxMiddle = s + (e - s) / 2;\n             if (middle > maxMiddle) {\n","SolutionWithNoComments":"\n         }\n         \n         if (this.maxMiddleIndex >= 0) {\n            long s = getDataItem(this.maxMiddleIndex).getPeriod().getStart()\n                 .getTime();\n            long e = getDataItem(this.maxMiddleIndex).getPeriod().getEnd()\n                 .getTime();\n             long maxMiddle = s + (e - s) / 2;\n             if (middle > maxMiddle) {\n"},{"ids":6,"error":"java.lang.IndexOutOfBoundsException","source":"/source/org/jfree/data/xy/XYSeries.java","code":"@@ -541,11 +541,15 @@ public XYDataItem addOrUpdate(Number x, Number y) {\n         if (x == null) {\n             throw new IllegalArgumentException(\"Null 'x' argument.\");\n         }\n \n         // if we get to here, we know that duplicate X values are not permitted\n         XYDataItem overwritten = null;\n         int index = indexOf(x);\n      if (index >= 0 && !this.allowDuplicateXValues) {\n             XYDataItem existing = (XYDataItem) this.data.get(index);\n             try {\n                 overwritten = (XYDataItem) existing.clone();\n","solution":"@@ -541,11 +541,15 @@ public XYDataItem addOrUpdate(Number x, Number y) {\n         if (x == null) {\n             throw new IllegalArgumentException(\"Null 'x' argument.\");\n         }\n      if (this.allowDuplicateXValues) {\n          add(x, y);\n          return null;\n      }\n \n         // if we get to here, we know that duplicate X values are not permitted\n         XYDataItem overwritten = null;\n         int index = indexOf(x);\n      if (index >= 0) {\n             XYDataItem existing = (XYDataItem) this.data.get(index);\n             try {\n                 overwritten = (XYDataItem) existing.clone();\n","CodeWithNoComments":"\n         if (x == null) {\n             throw new IllegalArgumentException(\"Null 'x' argument.\");\n         }\n \n                  XYDataItem overwritten = null;\n         int index = indexOf(x);\n        if (index >= 0 && !this.allowDuplicateXValues) {\n             XYDataItem existing = (XYDataItem) this.data.get(index);\n             try {\n                 overwritten = (XYDataItem) existing.clone();\n","SolutionWithNoComments":"\n         if (x == null) {\n             throw new IllegalArgumentException(\"Null 'x' argument.\");\n         }\n        if (this.allowDuplicateXValues) {\n            add(x, y);\n            return null;\n        }\n \n                  XYDataItem overwritten = null;\n         int index = indexOf(x);\n        if (index >= 0) {\n             XYDataItem existing = (XYDataItem) this.data.get(index);\n             try {\n                 overwritten = (XYDataItem) existing.clone();\n"},{"ids":7,"error":"junit.framework.AssertionFailedError","source":"/source/org/jfree/data/time/TimeSeries.java","code":"@@ -1054,6 +1054,8 @@ public TimeSeries createCopy(int start, int end)\n             throw new IllegalArgumentException(\"Requires start <= end.\");\n         }\n         TimeSeries copy = (TimeSeries) super.clone();\n         copy.data = new java.util.ArrayList();\n         if (this.data.size() > 0) {\n             for (int index = start; index <= end; index++) {\n","solution":"@@ -1054,6 +1054,8 @@ public TimeSeries createCopy(int start, int end)\n             throw new IllegalArgumentException(\"Requires start <= end.\");\n         }\n         TimeSeries copy = (TimeSeries) super.clone();\n      copy.minY = Double.NaN;\n      copy.maxY = Double.NaN;\n         copy.data = new java.util.ArrayList();\n         if (this.data.size() > 0) {\n             for (int index = start; index <= end; index++) {\n","CodeWithNoComments":"\n             throw new IllegalArgumentException(\"Requires start <= end.\");\n         }\n         TimeSeries copy = (TimeSeries) super.clone();\n         copy.data = new java.util.ArrayList();\n         if (this.data.size() > 0) {\n             for (int index = start; index <= end; index++) {\n","SolutionWithNoComments":"\n             throw new IllegalArgumentException(\"Requires start <= end.\");\n         }\n         TimeSeries copy = (TimeSeries) super.clone();\n        copy.minY = Double.NaN;\n        copy.maxY = Double.NaN;\n         copy.data = new java.util.ArrayList();\n         if (this.data.size() > 0) {\n             for (int index = start; index <= end; index++) {\n"},{"ids":8,"error":"java.lang.NullPointerException","source":"/source/org/jfree/chart/plot/XYPlot.java","code":"@@ -4490,6 +4490,7 @@ public Range getDataRange(ValueAxis axis) {\n                     }\n                 }\n                 \n                     Collection c = r.getAnnotations();\n                     Iterator i = c.iterator();\n                     while (i.hasNext()) {\n@@ -4498,6 +4499,7 @@ public Range getDataRange(ValueAxis axis) {\n                             includedAnnotations.add(a);\n                         }\n                     }\n             }\n         }\n \n","solution":"@@ -4490,6 +4490,7 @@ public Range getDataRange(ValueAxis axis) {\n                     }\n                 }\n                 \n              if (r != null) {\n                     Collection c = r.getAnnotations();\n                     Iterator i = c.iterator();\n                     while (i.hasNext()) {\n@@ -4498,6 +4499,7 @@ public Range getDataRange(ValueAxis axis) {\n                             includedAnnotations.add(a);\n                         }\n                     }\n              }\n             }\n         }\n \n","CodeWithNoComments":"\n                     }\n                 }\n                 \n                     Collection c = r.getAnnotations();\n                     Iterator i = c.iterator();\n                     while (i.hasNext()) {\n\n                             includedAnnotations.add(a);\n                         }\n                     }\n             }\n         }\n \n","SolutionWithNoComments":"\n                     }\n                 }\n                 \n                if (r != null) {\n                     Collection c = r.getAnnotations();\n                     Iterator i = c.iterator();\n                     while (i.hasNext()) {\n\n                             includedAnnotations.add(a);\n                         }\n                     }\n                }\n             }\n         }\n \n"},{"ids":9,"error":"java.lang.NullPointerException","source":"/source/org/jfree/data/general/DatasetUtilities.java","code":"@@ -752,12 +752,19 @@ public static Range iterateDomainBounds(XYDataset dataset,\n             for (int series = 0; series < seriesCount; series++) {\n                 int itemCount = dataset.getItemCount(series);\n                 for (int item = 0; item < itemCount; item++) {\n                     lvalue = intervalXYData.getStartXValue(series, item);\n                     uvalue = intervalXYData.getEndXValue(series, item);\n                     if (!Double.isNaN(lvalue)) {\n                         minimum = Math.min(minimum, lvalue);\n                     }\n                     if (!Double.isNaN(uvalue)) {\n                         maximum = Math.max(maximum, uvalue);\n                     }\n                 }\n@@ -1239,12 +1246,19 @@ public static Range iterateRangeBounds(XYDataset dataset,\n             for (int series = 0; series < seriesCount; series++) {\n                 int itemCount = dataset.getItemCount(series);\n                 for (int item = 0; item < itemCount; item++) {\n                     double lvalue = ixyd.getStartYValue(series, item);\n                     double uvalue = ixyd.getEndYValue(series, item);\n                     if (!Double.isNaN(lvalue)) {\n                         minimum = Math.min(minimum, lvalue);\n                     }\n                     if (!Double.isNaN(uvalue)) {\n                         maximum = Math.max(maximum, uvalue);\n                     }\n                 }\n","solution":"@@ -752,12 +752,19 @@ public static Range iterateDomainBounds(XYDataset dataset,\n             for (int series = 0; series < seriesCount; series++) {\n                 int itemCount = dataset.getItemCount(series);\n                 for (int item = 0; item < itemCount; item++) {\n                  double value = intervalXYData.getXValue(series, item);\n                     lvalue = intervalXYData.getStartXValue(series, item);\n                     uvalue = intervalXYData.getEndXValue(series, item);\n                  if (!Double.isNaN(value)) {\n                      minimum = Math.min(minimum, value);\n                      maximum = Math.max(maximum, value);\n                  }\n                     if (!Double.isNaN(lvalue)) {\n                         minimum = Math.min(minimum, lvalue);\n                      maximum = Math.max(maximum, lvalue);\n                     }\n                     if (!Double.isNaN(uvalue)) {\n                      minimum = Math.min(minimum, uvalue);\n                         maximum = Math.max(maximum, uvalue);\n                     }\n                 }\n@@ -1239,12 +1246,19 @@ public static Range iterateRangeBounds(XYDataset dataset,\n             for (int series = 0; series < seriesCount; series++) {\n                 int itemCount = dataset.getItemCount(series);\n                 for (int item = 0; item < itemCount; item++) {\n                  double value = ixyd.getYValue(series, item);\n                     double lvalue = ixyd.getStartYValue(series, item);\n                     double uvalue = ixyd.getEndYValue(series, item);\n                  if (!Double.isNaN(value)) {\n                      minimum = Math.min(minimum, value);\n                      maximum = Math.max(maximum, value);\n                  }\n                     if (!Double.isNaN(lvalue)) {\n                         minimum = Math.min(minimum, lvalue);\n                      maximum = Math.max(maximum, lvalue);\n                     }\n                     if (!Double.isNaN(uvalue)) {\n                      minimum = Math.min(minimum, uvalue);\n                         maximum = Math.max(maximum, uvalue);\n                     }\n                 }\n","CodeWithNoComments":"\n             for (int series = 0; series < seriesCount; series++) {\n                 int itemCount = dataset.getItemCount(series);\n                 for (int item = 0; item < itemCount; item++) {\n                     lvalue = intervalXYData.getStartXValue(series, item);\n                     uvalue = intervalXYData.getEndXValue(series, item);\n                     if (!Double.isNaN(lvalue)) {\n                         minimum = Math.min(minimum, lvalue);\n                     }\n                     if (!Double.isNaN(uvalue)) {\n                         maximum = Math.max(maximum, uvalue);\n                     }\n                 }\n\n             for (int series = 0; series < seriesCount; series++) {\n                 int itemCount = dataset.getItemCount(series);\n                 for (int item = 0; item < itemCount; item++) {\n                     double lvalue = ixyd.getStartYValue(series, item);\n                     double uvalue = ixyd.getEndYValue(series, item);\n                     if (!Double.isNaN(lvalue)) {\n                         minimum = Math.min(minimum, lvalue);\n                     }\n                     if (!Double.isNaN(uvalue)) {\n                         maximum = Math.max(maximum, uvalue);\n                     }\n                 }\n","SolutionWithNoComments":"\n             for (int series = 0; series < seriesCount; series++) {\n                 int itemCount = dataset.getItemCount(series);\n                 for (int item = 0; item < itemCount; item++) {\n                    double value = intervalXYData.getXValue(series, item);\n                     lvalue = intervalXYData.getStartXValue(series, item);\n                     uvalue = intervalXYData.getEndXValue(series, item);\n                    if (!Double.isNaN(value)) {\n                        minimum = Math.min(minimum, value);\n                        maximum = Math.max(maximum, value);\n                    }\n                     if (!Double.isNaN(lvalue)) {\n                         minimum = Math.min(minimum, lvalue);\n                        maximum = Math.max(maximum, lvalue);\n                     }\n                     if (!Double.isNaN(uvalue)) {\n                        minimum = Math.min(minimum, uvalue);\n                         maximum = Math.max(maximum, uvalue);\n                     }\n                 }\n\n             for (int series = 0; series < seriesCount; series++) {\n                 int itemCount = dataset.getItemCount(series);\n                 for (int item = 0; item < itemCount; item++) {\n                    double value = ixyd.getYValue(series, item);\n                     double lvalue = ixyd.getStartYValue(series, item);\n                     double uvalue = ixyd.getEndYValue(series, item);\n                    if (!Double.isNaN(value)) {\n                        minimum = Math.min(minimum, value);\n                        maximum = Math.max(maximum, value);\n                    }\n                     if (!Double.isNaN(lvalue)) {\n                         minimum = Math.min(minimum, lvalue);\n                        maximum = Math.max(maximum, lvalue);\n                     }\n                     if (!Double.isNaN(uvalue)) {\n                        minimum = Math.min(minimum, uvalue);\n                         maximum = Math.max(maximum, uvalue);\n                     }\n                 }\n"},{"ids":10,"error":"junit.framework.AssertionFailedError","source":"/source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java","code":"@@ -1794,7 +1794,7 @@ public LegendItemCollection getLegendItems() {\n         }\n         int index = this.plot.getIndexOf(this);\n         CategoryDataset dataset = this.plot.getDataset(index);\n      if (dataset != null) {\n             return result;\n         }\n         int seriesCount = dataset.getRowCount();\n","solution":"@@ -1794,7 +1794,7 @@ public LegendItemCollection getLegendItems() {\n         }\n         int index = this.plot.getIndexOf(this);\n         CategoryDataset dataset = this.plot.getDataset(index);\n      if (dataset == null) {\n             return result;\n         }\n         int seriesCount = dataset.getRowCount();\n","CodeWithNoComments":"\n         }\n         int index = this.plot.getIndexOf(this);\n         CategoryDataset dataset = this.plot.getDataset(index);\n        if (dataset != null) {\n             return result;\n         }\n         int seriesCount = dataset.getRowCount();\n","SolutionWithNoComments":"\n         }\n         int index = this.plot.getIndexOf(this);\n         CategoryDataset dataset = this.plot.getDataset(index);\n        if (dataset == null) {\n             return result;\n         }\n         int seriesCount = dataset.getRowCount();\n"},{"ids":11,"error":"junit.framework.AssertionFailedError","source":"/source/org/jfree/chart/plot/MultiplePiePlot.java","code":"@@ -142,7 +142,7 @@ public MultiplePiePlot() {\n      */\n     public MultiplePiePlot(CategoryDataset dataset) {\n         super();\n      this.dataset = dataset;\n         PiePlot piePlot = new PiePlot(null);\n         this.pieChart = new JFreeChart(piePlot);\n         this.pieChart.removeLegend();\n","solution":"@@ -142,7 +142,7 @@ public MultiplePiePlot() {\n      */\n     public MultiplePiePlot(CategoryDataset dataset) {\n         super();\n      setDataset(dataset);\n         PiePlot piePlot = new PiePlot(null);\n         this.pieChart = new JFreeChart(piePlot);\n         this.pieChart.removeLegend();\n","CodeWithNoComments":"\n      \n     public MultiplePiePlot(CategoryDataset dataset) {\n         super();\n        this.dataset = dataset;\n         PiePlot piePlot = new PiePlot(null);\n         this.pieChart = new JFreeChart(piePlot);\n         this.pieChart.removeLegend();\n","SolutionWithNoComments":"\n      \n     public MultiplePiePlot(CategoryDataset dataset) {\n         super();\n        setDataset(dataset);\n         PiePlot piePlot = new PiePlot(null);\n         this.pieChart = new JFreeChart(piePlot);\n         this.pieChart.removeLegend();\n"},{"ids":12,"error":"junit.framework.AssertionFailedError","source":"/source/org/jfree/chart/util/ShapeUtilities.java","code":"@@ -272,7 +272,7 @@ public static boolean equal(GeneralPath p1, GeneralPath p2) {\n             return false;\n         }\n         PathIterator iterator1 = p1.getPathIterator(null);\n      PathIterator iterator2 = p1.getPathIterator(null);\n         double[] d1 = new double[6];\n         double[] d2 = new double[6];\n         boolean done = iterator1.isDone() && iterator2.isDone();\n","solution":"@@ -272,7 +272,7 @@ public static boolean equal(GeneralPath p1, GeneralPath p2) {\n             return false;\n         }\n         PathIterator iterator1 = p1.getPathIterator(null);\n      PathIterator iterator2 = p2.getPathIterator(null);\n         double[] d1 = new double[6];\n         double[] d2 = new double[6];\n         boolean done = iterator1.isDone() && iterator2.isDone();\n","CodeWithNoComments":"\n             return false;\n         }\n         PathIterator iterator1 = p1.getPathIterator(null);\n        PathIterator iterator2 = p1.getPathIterator(null);\n         double[] d1 = new double[6];\n         double[] d2 = new double[6];\n         boolean done = iterator1.isDone() && iterator2.isDone();\n","SolutionWithNoComments":"\n             return false;\n         }\n         PathIterator iterator1 = p1.getPathIterator(null);\n        PathIterator iterator2 = p2.getPathIterator(null);\n         double[] d1 = new double[6];\n         double[] d2 = new double[6];\n         boolean done = iterator1.isDone() && iterator2.isDone();\n"},{"ids":13,"error":"java.lang.IllegalArgumentException","source":"/source/org/jfree/chart/block/BorderArrangement.java","code":"@@ -452,7 +452,7 @@ protected Size2D arrangeFF(BlockContainer container, Graphics2D g2,\n         h[3] = h[2];\n         if (this.rightBlock != null) {\n             RectangleConstraint c4 = new RectangleConstraint(0.0,\n                  new Range(0.0, constraint.getWidth() - w[2]),\n                     LengthConstraintType.RANGE, h[2], null,\n                     LengthConstraintType.FIXED);\n             Size2D size = this.rightBlock.arrange(g2, c4);\n","solution":"@@ -452,7 +452,7 @@ protected Size2D arrangeFF(BlockContainer container, Graphics2D g2,\n         h[3] = h[2];\n         if (this.rightBlock != null) {\n             RectangleConstraint c4 = new RectangleConstraint(0.0,\n                  new Range(0.0, Math.max(constraint.getWidth() - w[2], 0.0)),\n                     LengthConstraintType.RANGE, h[2], null,\n                     LengthConstraintType.FIXED);\n             Size2D size = this.rightBlock.arrange(g2, c4);\n","CodeWithNoComments":"\n         h[3] = h[2];\n         if (this.rightBlock != null) {\n             RectangleConstraint c4 = new RectangleConstraint(0.0,\n                    new Range(0.0, constraint.getWidth() - w[2]),\n                     LengthConstraintType.RANGE, h[2], null,\n                     LengthConstraintType.FIXED);\n             Size2D size = this.rightBlock.arrange(g2, c4);\n","SolutionWithNoComments":"\n         h[3] = h[2];\n         if (this.rightBlock != null) {\n             RectangleConstraint c4 = new RectangleConstraint(0.0,\n                    new Range(0.0, Math.max(constraint.getWidth() - w[2], 0.0)),\n                     LengthConstraintType.RANGE, h[2], null,\n                     LengthConstraintType.FIXED);\n             Size2D size = this.rightBlock.arrange(g2, c4);\n"},{"ids":14,"error":"java.lang.IndexOutOfBoundsException","source":"/source/org/jfree/data/DefaultKeyedValues.java","code":"@@ -315,30 +315,29 @@ private void rebuildIndex () {\n     public void removeValue(int index) {\n         this.keys.remove(index);\n         this.values.remove(index);\n      if (index < this.keys.size()) {\n         rebuildIndex();\n      }\n     }\n \n     /**\n      * Removes a value from the collection.\n      *\n      * @param key  the item key (<code>null<\/code> not permitted).\n      * \n      * @throws IllegalArgumentException if <code>key<\/code> is \n      *     <code>null<\/code>.\n      * @throws UnknownKeyException if <code>key<\/code> is not recognised.\n      */\n     public void removeValue(Comparable key) {\n         int index = getIndex(key);\n         if (index < 0) {\n\t\treturn;\n         }\n         removeValue(index);\n     }\n     \n     /**\n      * Clears all values from the collection.\n      * \n      * @since 1.0.2\n      */\n/source/org/jfree/data/DefaultKeyedValues2D.java @@ -454,12 +454,21 @@ public void removeColumn(int columnIndex) {\n     public void removeColumn(Comparable columnKey) {\n         Iterator iterator = this.rows.iterator();\n         while (iterator.hasNext()) {\n             DefaultKeyedValues rowData = (DefaultKeyedValues) iterator.next();\n                 rowData.removeValue(columnKey);\n         }\n         this.columnKeys.remove(columnKey);\n     }\n \n     /**\n      * Clears all the data and associated keys.\n      */\n","solution":"@@ -315,30 +315,29 @@ private void rebuildIndex () {\n     public void removeValue(int index) {\n         this.keys.remove(index);\n         this.values.remove(index);\n         rebuildIndex();\n     }\n \n     /**\n      * Removes a value from the collection.\n      *\n      * @param key  the item key (<code>null<\/code> not permitted).\n      * \n      * @throws IllegalArgumentException if <code>key<\/code> is \n      *     <code>null<\/code>.\n      * @throws UnknownKeyException if <code>key<\/code> is not recognised.\n      */\n     public void removeValue(Comparable key) {\n         int index = getIndex(key);\n         if (index < 0) {\n          throw new UnknownKeyException(\"The key (\" + key \n                  + \") is not recognised.\");\n         }\n         removeValue(index);\n     }\n     \n     /**\n      * Clears all values from the collection.\n      * \n      * @since 1.0.2\n      */\n/source/org/jfree/data/DefaultKeyedValues2D.java @@ -454,12 +454,21 @@ public void removeColumn(int columnIndex) {\n     public void removeColumn(Comparable columnKey) {\n  \tif (columnKey == null) {\n  \t\tthrow new IllegalArgumentException(\"Null 'columnKey' argument.\");\n  \t}\n  \tif (!this.columnKeys.contains(columnKey)) {\n  \t\tthrow new UnknownKeyException(\"Unknown key: \" + columnKey);\n  \t}\n         Iterator iterator = this.rows.iterator();\n         while (iterator.hasNext()) {\n             DefaultKeyedValues rowData = (DefaultKeyedValues) iterator.next();\n          int index = rowData.getIndex(columnKey);\n          if (index >= 0) {\n                 rowData.removeValue(columnKey);\n          }\n         }\n         this.columnKeys.remove(columnKey);\n     }\n \n     /**\n      * Clears all the data and associated keys.\n      */\n","CodeWithNoComments":"\n     public void removeValue(int index) {\n         this.keys.remove(index);\n         this.values.remove(index);\n        if (index < this.keys.size()) {\n         rebuildIndex();\n        }\n     }\n \n     public void removeValue(Comparable key) {\n         int index = getIndex(key);\n         if (index < 0) {\n\t\t\treturn;\n         }\n         removeValue(index);\n     }\n  \n\n     public void removeColumn(Comparable columnKey) {\n         Iterator iterator = this.rows.iterator();\n         while (iterator.hasNext()) {\n             DefaultKeyedValues rowData = (DefaultKeyedValues) iterator.next();\n                 rowData.removeValue(columnKey);\n         }\n         this.columnKeys.remove(columnKey);\n     }\n \n     \n","SolutionWithNoComments":"\n     public void removeValue(int index) {\n         this.keys.remove(index);\n         this.values.remove(index);\n         rebuildIndex();\n     }\n \n     \n     public void removeValue(Comparable key) {\n         int index = getIndex(key);\n         if (index < 0) {\n            throw new UnknownKeyException(\"The key (\" + key \n                    + \") is not recognised.\");\n         }\n         removeValue(index);\n     }\n     \n     \n\n     public void removeColumn(Comparable columnKey) {\n    \tif (columnKey == null) {\n    \t\tthrow new IllegalArgumentException(\"Null 'columnKey' argument.\");\n    \t}\n    \tif (!this.columnKeys.contains(columnKey)) {\n    \t\tthrow new UnknownKeyException(\"Unknown key: \" + columnKey);\n    \t}\n         Iterator iterator = this.rows.iterator();\n         while (iterator.hasNext()) {\n             DefaultKeyedValues rowData = (DefaultKeyedValues) iterator.next();\n            int index = rowData.getIndex(columnKey);\n            if (index >= 0) {\n                 rowData.removeValue(columnKey);\n            }\n         }\n         this.columnKeys.remove(columnKey);\n     }\n \n     \n"},{"ids":15,"error":"java.lang.NullPointerException","source":"/source/org/jfree/chart/plot/CategoryPlot.java","code":"@@ -2163,6 +2163,9 @@ public boolean removeDomainMarker(int index, Marker marker, Layer layer,\n             markers = (ArrayList) this.backgroundDomainMarkers.get(new Integer(\n                     index));\n         }\n         boolean removed = markers.remove(marker);\n         if (removed && notify) {\n             fireChangeEvent();\n@@ -2445,6 +2448,9 @@ public boolean removeRangeMarker(int index, Marker marker, Layer layer,\n             markers = (ArrayList) this.backgroundRangeMarkers.get(new Integer(\n                     index));\n         }\n         boolean removed = markers.remove(marker);\n         if (removed && notify) {\n             fireChangeEvent();\n/source/org/jfree/chart/plot/XYPlot.java @@ -2290,6 +2290,9 @@ public boolean removeDomainMarker(int index, Marker marker, Layer layer,\n             markers = (ArrayList) this.backgroundDomainMarkers.get(new Integer(\n                     index));\n         }\n         boolean removed = markers.remove(marker);\n         if (removed && notify) {\n             fireChangeEvent();\n@@ -2526,6 +2529,9 @@ public boolean removeRangeMarker(int index, Marker marker, Layer layer,\n             markers = (ArrayList) this.backgroundRangeMarkers.get(new Integer(\n                     index));\n         }\n         boolean removed = markers.remove(marker);\n         if (removed && notify) {\n             fireChangeEvent();\n","solution":"@@ -2163,6 +2163,9 @@ public boolean removeDomainMarker(int index, Marker marker, Layer layer,\n             markers = (ArrayList) this.backgroundDomainMarkers.get(new Integer(\n                     index));\n         }\n      if (markers == null) {\n          return false;\n      }\n         boolean removed = markers.remove(marker);\n         if (removed && notify) {\n             fireChangeEvent();\n@@ -2445,6 +2448,9 @@ public boolean removeRangeMarker(int index, Marker marker, Layer layer,\n             markers = (ArrayList) this.backgroundRangeMarkers.get(new Integer(\n                     index));\n         }\n      if (markers == null) {\n          return false;\n      }\n         boolean removed = markers.remove(marker);\n         if (removed && notify) {\n             fireChangeEvent();\n/source/org/jfree/chart/plot/XYPlot.java @@ -2290,6 +2290,9 @@ public boolean removeDomainMarker(int index, Marker marker, Layer layer,\n             markers = (ArrayList) this.backgroundDomainMarkers.get(new Integer(\n                     index));\n         }\n      if (markers == null) {\n          return false;\n      }\n         boolean removed = markers.remove(marker);\n         if (removed && notify) {\n             fireChangeEvent();\n@@ -2526,6 +2529,9 @@ public boolean removeRangeMarker(int index, Marker marker, Layer layer,\n             markers = (ArrayList) this.backgroundRangeMarkers.get(new Integer(\n                     index));\n         }\n      if (markers == null) {\n          return false;\n      }\n         boolean removed = markers.remove(marker);\n         if (removed && notify) {\n             fireChangeEvent();\n","CodeWithNoComments":"\n             markers = (ArrayList) this.backgroundDomainMarkers.get(new Integer(\n                     index));\n         }\n         boolean removed = markers.remove(marker);\n         if (removed && notify) {\n             fireChangeEvent();\n\n             markers = (ArrayList) this.backgroundRangeMarkers.get(new Integer(\n                     index));\n         }\n         boolean removed = markers.remove(marker);\n         if (removed && notify) {\n             fireChangeEvent();\n\n             markers = (ArrayList) this.backgroundDomainMarkers.get(new Integer(\n                     index));\n         }\n         boolean removed = markers.remove(marker);\n         if (removed && notify) {\n             fireChangeEvent();\n\n             markers = (ArrayList) this.backgroundRangeMarkers.get(new Integer(\n                     index));\n         }\n         boolean removed = markers.remove(marker);\n         if (removed && notify) {\n             fireChangeEvent();\n","SolutionWithNoComments":"\n             markers = (ArrayList) this.backgroundDomainMarkers.get(new Integer(\n                     index));\n         }\n        if (markers == null) {\n            return false;\n        }\n         boolean removed = markers.remove(marker);\n         if (removed && notify) {\n             fireChangeEvent();\n\n             markers = (ArrayList) this.backgroundRangeMarkers.get(new Integer(\n                     index));\n         }\n        if (markers == null) {\n            return false;\n        }\n         boolean removed = markers.remove(marker);\n         if (removed && notify) {\n             fireChangeEvent();\n\n             markers = (ArrayList) this.backgroundDomainMarkers.get(new Integer(\n                     index));\n         }\n        if (markers == null) {\n            return false;\n        }\n         boolean removed = markers.remove(marker);\n         if (removed && notify) {\n             fireChangeEvent();\n\n             markers = (ArrayList) this.backgroundRangeMarkers.get(new Integer(\n                     index));\n         }\n        if (markers == null) {\n            return false;\n        }\n         boolean removed = markers.remove(marker);\n         if (removed && notify) {\n             fireChangeEvent();\n"},{"ids":16,"error":"junit.framework.AssertionFailedError","source":"/source/org/jfree/data/statistics/DefaultBoxAndWhiskerCategoryDataset.java","code":"@@ -154,6 +154,7 @@ public void add(BoxAndWhiskerItem item, Comparable rowKey,\n                 && this.minimumRangeValueColumn == c))  {\n             updateBounds();\n         }\n             double minval = Double.NaN;\n             if (item.getMinOutlier() != null) {\n@@ -185,6 +186,7 @@ else if (minval < this.minimumRangeValue) {\n                 this.minimumRangeValueRow = r;\n                 this.minimumRangeValueColumn = c;\n             }\n         this.rangeBounds = new Range(this.minimumRangeValue,\n               this.maximumRangeValue);\n@@ -738,7 +740,44 @@ public List getOutliers(Comparable rowKey, Comparable columnKey) {\n      */\n     private void updateBounds() {\n         this.minimumRangeValue = Double.NaN;\n         this.maximumRangeValue = Double.NaN;\n     }\n     \n     /**\n","solution":"@@ -154,6 +154,7 @@ public void add(BoxAndWhiskerItem item, Comparable rowKey,\n                 && this.minimumRangeValueColumn == c))  {\n             updateBounds();\n         }\n      else {\n         \n             double minval = Double.NaN;\n             if (item.getMinOutlier() != null) {\n@@ -185,6 +186,7 @@ else if (minval < this.minimumRangeValue) {\n                 this.minimumRangeValueRow = r;\n                 this.minimumRangeValueColumn = c;\n             }\n      }\n         \n         this.rangeBounds = new Range(this.minimumRangeValue,\n               this.maximumRangeValue);\n@@ -738,7 +740,44 @@ public List getOutliers(Comparable rowKey, Comparable columnKey) {\n      */\n     private void updateBounds() {\n         this.minimumRangeValue = Double.NaN;\n      this.minimumRangeValueRow = -1;\n      this.minimumRangeValueColumn = -1;\n         this.maximumRangeValue = Double.NaN;\n      this.maximumRangeValueRow = -1;\n      this.maximumRangeValueColumn = -1;\n      int rowCount = getRowCount();\n      int columnCount = getColumnCount();\n      for (int r = 0; r < rowCount; r++) {\n          for (int c = 0; c < columnCount; c++) {\n              BoxAndWhiskerItem item = getItem(r, c);\n              if (item != null) {\n                  Number min = item.getMinOutlier();\n                  if (min != null) {\n                      double minv = min.doubleValue();\n                      if (!Double.isNaN(minv)) {\n                          if (minv < this.minimumRangeValue || Double.isNaN(\n                                  this.minimumRangeValue)) {\n                              this.minimumRangeValue = minv;\n                              this.minimumRangeValueRow = r;\n                              this.minimumRangeValueColumn = c;\n                          }\n                      }\n                  }\n                  Number max = item.getMaxOutlier();\n                  if (max != null) {\n                      double maxv = max.doubleValue();\n                      if (!Double.isNaN(maxv)) {\n                          if (maxv > this.maximumRangeValue || Double.isNaN(\n                                  this.maximumRangeValue)) {\n                              this.maximumRangeValue = maxv;\n                              this.maximumRangeValueRow = r;\n                              this.maximumRangeValueColumn = c;\n                          }\n                      }\n                  }\n              }\n          }\n      }\n     }\n     \n     /**\n","CodeWithNoComments":"\n                 && this.minimumRangeValueColumn == c))  {\n             updateBounds();\n         }\n             double minval = Double.NaN;\n             if (item.getMinOutlier() != null) {\n\n                 this.minimumRangeValueRow = r;\n                 this.minimumRangeValueColumn = c;\n             }\n         this.rangeBounds = new Range(this.minimumRangeValue,\n               this.maximumRangeValue);\n\n      \n     private void updateBounds() {\n         this.minimumRangeValue = Double.NaN;\n         this.maximumRangeValue = Double.NaN;\n     }\n","SolutionWithNoComments":"\n                 && this.minimumRangeValueColumn == c))  {\n             updateBounds();\n         }\n        else {\n         \n             double minval = Double.NaN;\n             if (item.getMinOutlier() != null) {\n\n                 this.minimumRangeValueRow = r;\n                 this.minimumRangeValueColumn = c;\n             }\n        }\n         \n         this.rangeBounds = new Range(this.minimumRangeValue,\n               this.maximumRangeValue);\n\n      \n     private void updateBounds() {\n         this.minimumRangeValue = Double.NaN;\n        this.minimumRangeValueRow = -1;\n        this.minimumRangeValueColumn = -1;\n         this.maximumRangeValue = Double.NaN;\n        this.maximumRangeValueRow = -1;\n        this.maximumRangeValueColumn = -1;\n        int rowCount = getRowCount();\n        int columnCount = getColumnCount();\n        for (int r = 0; r < rowCount; r++) {\n            for (int c = 0; c < columnCount; c++) {\n                BoxAndWhiskerItem item = getItem(r, c);\n                if (item != null) {\n                    Number min = item.getMinOutlier();\n                    if (min != null) {\n                        double minv = min.doubleValue();\n                        if (!Double.isNaN(minv)) {\n                            if (minv < this.minimumRangeValue || Double.isNaN(\n                                    this.minimumRangeValue)) {\n                                this.minimumRangeValue = minv;\n                                this.minimumRangeValueRow = r;\n                                this.minimumRangeValueColumn = c;\n                            }\n                        }\n                    }\n                    Number max = item.getMaxOutlier();\n                    if (max != null) {\n                        double maxv = max.doubleValue();\n                        if (!Double.isNaN(maxv)) {\n                            if (maxv > this.maximumRangeValue || Double.isNaN(\n                                    this.maximumRangeValue)) {\n                                this.maximumRangeValue = maxv;\n                                this.maximumRangeValueRow = r;\n                                this.maximumRangeValueColumn = c;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n     }\n     \n"},{"ids":17,"error":"junit.framework.AssertionFailedError","source":"/source/org/jfree/chart/plot/PiePlot.java","code":"@@ -1375,6 +1375,9 @@ public void setExplodePercent(Comparable key, double percent) {\n      * @return The percent.\n      */\n     public double getMaximumExplodePercent() {\n         double result = 0.0;\n         Iterator iterator = this.dataset.getKeys().iterator();\n         while (iterator.hasNext()) {\n@@ -2048,8 +2051,10 @@ public PiePlotState initialise(Graphics2D g2, Rectangle2D plotArea,\n      \n         PiePlotState state = new PiePlotState(info);\n         state.setPassesRequired(2);\n             state.setTotal(DatasetUtilities.calculatePieDatasetTotal(\n                     plot.getDataset()));\n         state.setLatestAngle(plot.getStartAngle());\n         return state;\n         \n","solution":"@@ -1375,6 +1375,9 @@ public void setExplodePercent(Comparable key, double percent) {\n      * @return The percent.\n      */\n     public double getMaximumExplodePercent() {\n      if (this.dataset == null) {\n          return 0.0;\n      }\n         double result = 0.0;\n         Iterator iterator = this.dataset.getKeys().iterator();\n         while (iterator.hasNext()) {\n@@ -2048,8 +2051,10 @@ public PiePlotState initialise(Graphics2D g2, Rectangle2D plotArea,\n      \n         PiePlotState state = new PiePlotState(info);\n         state.setPassesRequired(2);\n      if (this.dataset != null) {\n             state.setTotal(DatasetUtilities.calculatePieDatasetTotal(\n                     plot.getDataset()));\n      }\n         state.setLatestAngle(plot.getStartAngle());\n         return state;\n         \n","CodeWithNoComments":"\n         double result = 0.0;\n         Iterator iterator = this.dataset.getKeys().iterator();\n         while (iterator.hasNext()) {\n\n      \n         PiePlotState state = new PiePlotState(info);\n         state.setPassesRequired(2);\n             state.setTotal(DatasetUtilities.calculatePieDatasetTotal(\n                     plot.getDataset()));\n         state.setLatestAngle(plot.getStartAngle());\n         return state;\n         \n","SolutionWithNoComments":"\n     public double getMaximumExplodePercent() {\n        if (this.dataset == null) {\n            return 0.0;\n        }\n         double result = 0.0;\n         Iterator iterator = this.dataset.getKeys().iterator();\n         while (iterator.hasNext()) {\n\n      \n         PiePlotState state = new PiePlotState(info);\n         state.setPassesRequired(2);\n        if (this.dataset != null) {\n             state.setTotal(DatasetUtilities.calculatePieDatasetTotal(\n                     plot.getDataset()));\n        }\n         state.setLatestAngle(plot.getStartAngle());\n         return state;\n         \n"},{"ids":18,"error":"java.lang.NullPointerException","source":"/source/org/jfree/data/category/DefaultIntervalCategoryDataset.java","code":"@@ -204,8 +204,8 @@ public DefaultIntervalCategoryDataset(Comparable[] seriesKeys,\n \n             }\n             else {\n              this.seriesKeys = null;\n              this.categoryKeys = null;\n             }\n         }\n \n@@ -335,7 +335,7 @@ public void setCategoryKeys(Comparable[] categoryKeys) {\n         if (categoryKeys == null) {\n             throw new IllegalArgumentException(\"Null 'categoryKeys' argument.\");\n         }\n      if (categoryKeys.length != this.startData[0].length) {\n             throw new IllegalArgumentException(\n                     \"The number of categories does not match the data.\");\n         }\n","solution":"@@ -204,8 +204,8 @@ public DefaultIntervalCategoryDataset(Comparable[] seriesKeys,\n \n             }\n             else {\n              this.seriesKeys = new Comparable[0];\n              this.categoryKeys = new Comparable[0];\n             }\n         }\n \n@@ -335,7 +335,7 @@ public void setCategoryKeys(Comparable[] categoryKeys) {\n         if (categoryKeys == null) {\n             throw new IllegalArgumentException(\"Null 'categoryKeys' argument.\");\n         }\n      if (categoryKeys.length != getCategoryCount()) {\n             throw new IllegalArgumentException(\n                     \"The number of categories does not match the data.\");\n         }\n","CodeWithNoComments":"\n \n             }\n             else {\n                this.seriesKeys = null;\n                this.categoryKeys = null;\n             }\n         }\n \n\n         if (categoryKeys == null) {\n             throw new IllegalArgumentException(\"Null 'categoryKeys' argument.\");\n         }\n        if (categoryKeys.length != this.startData[0].length) {\n             throw new IllegalArgumentException(\n                     \"The number of categories does not match the data.\");\n         }\n","SolutionWithNoComments":"\n \n             }\n             else {\n                this.seriesKeys = new Comparable[0];\n                this.categoryKeys = new Comparable[0];\n             }\n         }\n \n\n         if (categoryKeys == null) {\n             throw new IllegalArgumentException(\"Null 'categoryKeys' argument.\");\n         }\n        if (categoryKeys.length != getCategoryCount()) {\n             throw new IllegalArgumentException(\n                     \"The number of categories does not match the data.\");\n         }\n"},{"ids":19,"error":"java.lang.IllegalArgumentException","source":"/source/org/jfree/data/time/TimeSeries.java","code":"@@ -854,7 +854,8 @@ public void delete(int start, int end) {\n      *         subclasses may differ.\n      */\n     public Object clone() throws CloneNotSupportedException {\n      Object clone = createCopy(0, getItemCount() - 1);\n         return clone;\n     }\n \n","solution":"@@ -854,7 +854,8 @@ public void delete(int start, int end) {\n      *         subclasses may differ.\n      */\n     public Object clone() throws CloneNotSupportedException {\n      TimeSeries clone = (TimeSeries) super.clone();\n      clone.data = (List) ObjectUtilities.deepClone(this.data);\n         return clone;\n     }\n \n","CodeWithNoComments":"\n        Object clone = createCopy(0, getItemCount() - 1);\n         return clone;\n     }\n \n","SolutionWithNoComments":"\n        TimeSeries clone = (TimeSeries) super.clone();\n        clone.data = (List) ObjectUtilities.deepClone(this.data);\n         return clone;\n     }\n \n"},{"ids":20,"error":"junit.framework.AssertionFailedError","source":"/source/org/jfree/chart/plot/ValueMarker.java","code":"@@ -92,7 +92,7 @@ public ValueMarker(double value, Paint paint, Stroke stroke) {\n      */\n     public ValueMarker(double value, Paint paint, Stroke stroke, \n                        Paint outlinePaint, Stroke outlineStroke, float alpha) {\n      super(paint, stroke, paint, stroke, alpha);\n         this.value = value;\n     }\n     \n","solution":"@@ -92,7 +92,7 @@ public ValueMarker(double value, Paint paint, Stroke stroke) {\n      */\n     public ValueMarker(double value, Paint paint, Stroke stroke, \n                        Paint outlinePaint, Stroke outlineStroke, float alpha) {\n      super(paint, stroke, outlinePaint, outlineStroke, alpha);\n         this.value = value;\n     }\n     \n","CodeWithNoComments":"\n      \n     public ValueMarker(double value, Paint paint, Stroke stroke, \n                        Paint outlinePaint, Stroke outlineStroke, float alpha) {\n        super(paint, stroke, paint, stroke, alpha);\n         this.value = value;\n     }\n     \n","SolutionWithNoComments":"\n      \n     public ValueMarker(double value, Paint paint, Stroke stroke, \n                        Paint outlinePaint, Stroke outlineStroke, float alpha) {\n        super(paint, stroke, outlinePaint, outlineStroke, alpha);\n         this.value = value;\n     }\n     \n"},{"ids":21,"error":"junit.framework.AssertionFailedError","source":"/source/org/jfree/chart/plot/CategoryPlot.java","code":"@@ -695,6 +695,9 @@ public void setDomainAxes(CategoryAxis[] axes) {\n      * @since 1.0.3\n      */\n     public int getDomainAxisIndex(CategoryAxis axis) {\n         return this.domainAxes.indexOf(axis);\n     }\n     \n@@ -970,6 +973,9 @@ public void setRangeAxes(ValueAxis[] axes) {\n      * @since 1.0.7\n      */\n     public int getRangeAxisIndex(ValueAxis axis) {\n         int result = this.rangeAxes.indexOf(axis);\n         if (result < 0) { // try the parent plot\n             Plot parent = getParent();\n","solution":"@@ -695,6 +695,9 @@ public void setDomainAxes(CategoryAxis[] axes) {\n      * @since 1.0.3\n      */\n     public int getDomainAxisIndex(CategoryAxis axis) {\n      if (axis == null) {\n          throw new IllegalArgumentException(\"Null 'axis' argument.\");\n      }\n         return this.domainAxes.indexOf(axis);\n     }\n     \n@@ -970,6 +973,9 @@ public void setRangeAxes(ValueAxis[] axes) {\n      * @since 1.0.7\n      */\n     public int getRangeAxisIndex(ValueAxis axis) {\n      if (axis == null) {\n          throw new IllegalArgumentException(\"Null 'axis' argument.\");\n      }\n         int result = this.rangeAxes.indexOf(axis);\n         if (result < 0) { // try the parent plot\n             Plot parent = getParent();\n","CodeWithNoComments":"\n  \n     public int getDomainAxisIndex(CategoryAxis axis) {\n         return this.domainAxes.indexOf(axis);\n     }\n     \n\n         int result = this.rangeAxes.indexOf(axis);\n         if (result < 0) {              Plot parent = getParent();\n","SolutionWithNoComments":"\n  \n     public int getDomainAxisIndex(CategoryAxis axis) {\n        if (axis == null) {\n            throw new IllegalArgumentException(\"Null 'axis' argument.\");\n        }\n         return this.domainAxes.indexOf(axis);\n     }\n     \n\n \n     public int getRangeAxisIndex(ValueAxis axis) {\n        if (axis == null) {\n            throw new IllegalArgumentException(\"Null 'axis' argument.\");\n        }\n         int result = this.rangeAxes.indexOf(axis);\n         if (result < 0) {              Plot parent = getParent();\n"},{"ids":22,"error":"org.jfree.data.UnknownKeyException","source":"/source/org/jfree/data/KeyedObjects2D.java","code":"@@ -228,9 +228,10 @@ public Object getObject(Comparable rowKey, Comparable columnKey) {\n             throw new UnknownKeyException(\"Column key (\" + columnKey \n                     + \") not recognised.\");\n         }\n      if (row >= 0) {\n         KeyedObjects rowData = (KeyedObjects) this.rows.get(row);\n          return rowData.getObject(columnKey);\n         }\n         else {\n             return null;\n@@ -315,8 +316,29 @@ public void removeObject(Comparable rowKey, Comparable columnKey) {\n         }\n         \n         // 2. check whether the column is now empty.\n     }\n \n     /**\n@@ -342,6 +364,10 @@ public void removeRow(int rowIndex) {\n      */\n     public void removeRow(Comparable rowKey) {\n         int index = getRowIndex(rowKey);\n         removeRow(index);\n     }\n \n@@ -375,7 +401,10 @@ public void removeColumn(Comparable columnKey) {\n         Iterator iterator = this.rows.iterator();\n         while (iterator.hasNext()) {\n             KeyedObjects rowData = (KeyedObjects) iterator.next();\n              rowData.removeValue(columnKey);\n         }\n         this.columnKeys.remove(columnKey);\n     }\n","solution":"@@ -228,9 +228,10 @@ public Object getObject(Comparable rowKey, Comparable columnKey) {\n             throw new UnknownKeyException(\"Column key (\" + columnKey \n                     + \") not recognised.\");\n         }\n         KeyedObjects rowData = (KeyedObjects) this.rows.get(row);\n      int index = rowData.getIndex(columnKey);\n      if (index >= 0) {\n          return rowData.getObject(index);\n         }\n         else {\n             return null;\n@@ -315,8 +316,29 @@ public void removeObject(Comparable rowKey, Comparable columnKey) {\n         }\n         \n         // 2. check whether the column is now empty.\n      allNull = true;\n         \n      for (int item = 0, itemCount = this.rows.size(); item < itemCount; \n           item++) {\n          row = (KeyedObjects) this.rows.get(item);\n          int columnIndex = row.getIndex(columnKey);\n          if (columnIndex >= 0 && row.getObject(columnIndex) != null) {\n              allNull = false;\n              break;\n          }\n      }\n         \n      if (allNull) {\n          for (int item = 0, itemCount = this.rows.size(); item < itemCount; \n               item++) {\n              row = (KeyedObjects) this.rows.get(item);\n              int columnIndex = row.getIndex(columnKey);\n              if (columnIndex >= 0) {\n                  row.removeValue(columnIndex);\n              }\n          }\n          this.columnKeys.remove(columnKey);\n      }\n     }\n \n     /**\n@@ -342,6 +364,10 @@ public void removeRow(int rowIndex) {\n      */\n     public void removeRow(Comparable rowKey) {\n         int index = getRowIndex(rowKey);\n      if (index < 0) {\n          throw new UnknownKeyException(\"Row key (\" + rowKey \n                  + \") not recognised.\");\n      }\n         removeRow(index);\n     }\n \n@@ -375,7 +401,10 @@ public void removeColumn(Comparable columnKey) {\n         Iterator iterator = this.rows.iterator();\n         while (iterator.hasNext()) {\n             KeyedObjects rowData = (KeyedObjects) iterator.next();\n          int i = rowData.getIndex(columnKey);\n          if (i >= 0) {\n              rowData.removeValue(i);\n          }\n         }\n         this.columnKeys.remove(columnKey);\n     }\n","CodeWithNoComments":"\n             throw new UnknownKeyException(\"Column key (\" + columnKey \n                     + \") not recognised.\");\n         }\n        if (row >= 0) {\n         KeyedObjects rowData = (KeyedObjects) this.rows.get(row);\n            return rowData.getObject(columnKey);\n         }\n         else {\n             return null;\n\n         }\n         \n              }\n\n     public void removeRow(Comparable rowKey) {\n         int index = getRowIndex(rowKey);\n         removeRow(index);\n     }\n \n\n         Iterator iterator = this.rows.iterator();\n         while (iterator.hasNext()) {\n             KeyedObjects rowData = (KeyedObjects) iterator.next();\n                rowData.removeValue(columnKey);\n         }\n         this.columnKeys.remove(columnKey);\n     }\n","SolutionWithNoComments":"\n             throw new UnknownKeyException(\"Column key (\" + columnKey \n                     + \") not recognised.\");\n         }\n         KeyedObjects rowData = (KeyedObjects) this.rows.get(row);\n        int index = rowData.getIndex(columnKey);\n        if (index >= 0) {\n            return rowData.getObject(index);\n         }\n         else {\n             return null;\n\n         }\n         \n                 allNull = true;\n         \n        for (int item = 0, itemCount = this.rows.size(); item < itemCount; \n             item++) {\n            row = (KeyedObjects) this.rows.get(item);\n            int columnIndex = row.getIndex(columnKey);\n            if (columnIndex >= 0 && row.getObject(columnIndex) != null) {\n                allNull = false;\n                break;\n            }\n        }\n         \n        if (allNull) {\n            for (int item = 0, itemCount = this.rows.size(); item < itemCount; \n                 item++) {\n                row = (KeyedObjects) this.rows.get(item);\n                int columnIndex = row.getIndex(columnKey);\n                if (columnIndex >= 0) {\n                    row.removeValue(columnIndex);\n                }\n            }\n            this.columnKeys.remove(columnKey);\n        }\n     }\n \n\n     public void removeRow(Comparable rowKey) {\n         int index = getRowIndex(rowKey);\n        if (index < 0) {\n            throw new UnknownKeyException(\"Row key (\" + rowKey \n                    + \") not recognised.\");\n        }\n         removeRow(index);\n     }\n \n\n         Iterator iterator = this.rows.iterator();\n         while (iterator.hasNext()) {\n             KeyedObjects rowData = (KeyedObjects) iterator.next();\n            int i = rowData.getIndex(columnKey);\n            if (i >= 0) {\n                rowData.removeValue(i);\n            }\n         }\n         this.columnKeys.remove(columnKey);\n     }\n"},{"ids":23,"error":"junit.framework.AssertionFailedError","source":"/source/org/jfree/chart/axis/Axis.java","code":"@@ -1189,11 +1189,13 @@ else if (edge == RectangleEdge.RIGHT) {\n         }\n         if (plotState != null && hotspot != null) {\n             ChartRenderingInfo owner = plotState.getOwner();\n                 EntityCollection entities = owner.getEntityCollection();\n                 if (entities != null) {\n                     entities.add(new AxisLabelEntity(this, hotspot, \n                             this.labelToolTip, this.labelURL));\n                 }\n         }\n         return state;\n \n","solution":"@@ -1189,11 +1189,13 @@ else if (edge == RectangleEdge.RIGHT) {\n         }\n         if (plotState != null && hotspot != null) {\n             ChartRenderingInfo owner = plotState.getOwner();\n          if (owner != null) {\n                 EntityCollection entities = owner.getEntityCollection();\n                 if (entities != null) {\n                     entities.add(new AxisLabelEntity(this, hotspot, \n                             this.labelToolTip, this.labelURL));\n                 }\n          }\n         }\n         return state;\n \n","CodeWithNoComments":"\n         }\n         if (plotState != null && hotspot != null) {\n             ChartRenderingInfo owner = plotState.getOwner();\n                 EntityCollection entities = owner.getEntityCollection();\n                 if (entities != null) {\n                     entities.add(new AxisLabelEntity(this, hotspot, \n                             this.labelToolTip, this.labelURL));\n                 }\n         }\n         return state;\n \n","SolutionWithNoComments":"\n         }\n         if (plotState != null && hotspot != null) {\n             ChartRenderingInfo owner = plotState.getOwner();\n            if (owner != null) {\n                 EntityCollection entities = owner.getEntityCollection();\n                 if (entities != null) {\n                     entities.add(new AxisLabelEntity(this, hotspot, \n                             this.labelToolTip, this.labelURL));\n                 }\n            }\n         }\n         return state;\n \n"},{"ids":24,"error":"junit.framework.AssertionFailedError","source":"/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java","code":"@@ -256,6 +256,9 @@ protected void drawHorizontalItem(Graphics2D g2,\n \n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n \n         double value = meanValue.doubleValue();\n         double base = 0.0;\n@@ -312,7 +315,9 @@ else if (lclip <= 0.0) { // cases 5, 6, 7 and 8\n         }\n \n         // standard deviation lines\n          double valueDelta = dataset.getStdDevValue(row, column).doubleValue();\n             double highVal = rangeAxis.valueToJava2D(meanValue.doubleValue() \n                     + valueDelta, dataArea, yAxisLocation);\n             double lowVal = rangeAxis.valueToJava2D(meanValue.doubleValue() \n@@ -341,6 +346,7 @@ else if (lclip <= 0.0) { // cases 5, 6, 7 and 8\n             line = new Line2D.Double(lowVal, rectY + rectHeight * 0.25, \n                                      lowVal, rectY + rectHeight * 0.75);\n             g2.draw(line);\n         \n         CategoryItemLabelGenerator generator = getItemLabelGenerator(row, \n                 column);\n@@ -400,6 +406,9 @@ protected void drawVerticalItem(Graphics2D g2,\n \n         // BAR Y\n         Number meanValue = dataset.getMeanValue(row, column);\n \n         double value = meanValue.doubleValue();\n         double base = 0.0;\n@@ -456,7 +465,9 @@ else if (lclip <= 0.0) { // cases 5, 6, 7 and 8\n         }\n \n         // standard deviation lines\n          double valueDelta = dataset.getStdDevValue(row, column).doubleValue();\n             double highVal = rangeAxis.valueToJava2D(meanValue.doubleValue() \n                     + valueDelta, dataArea, yAxisLocation);\n             double lowVal = rangeAxis.valueToJava2D(meanValue.doubleValue() \n@@ -484,6 +495,7 @@ else if (lclip <= 0.0) { // cases 5, 6, 7 and 8\n             line = new Line2D.Double(rectX + rectWidth / 2.0d - 5.0d, lowVal,\n                                      rectX + rectWidth / 2.0d + 5.0d, lowVal);\n             g2.draw(line);\n         \n         CategoryItemLabelGenerator generator = getItemLabelGenerator(row, \n                 column);\n","solution":"@@ -256,6 +256,9 @@ protected void drawHorizontalItem(Graphics2D g2,\n \n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n      if (meanValue == null) {\n          return;\n      }\n \n         double value = meanValue.doubleValue();\n         double base = 0.0;\n@@ -312,7 +315,9 @@ else if (lclip <= 0.0) { // cases 5, 6, 7 and 8\n         }\n \n         // standard deviation lines\n      Number n = dataset.getStdDevValue(row, column);\n      if (n != null) {\n          double valueDelta = n.doubleValue();\n             double highVal = rangeAxis.valueToJava2D(meanValue.doubleValue() \n                     + valueDelta, dataArea, yAxisLocation);\n             double lowVal = rangeAxis.valueToJava2D(meanValue.doubleValue() \n@@ -341,6 +346,7 @@ else if (lclip <= 0.0) { // cases 5, 6, 7 and 8\n             line = new Line2D.Double(lowVal, rectY + rectHeight * 0.25, \n                                      lowVal, rectY + rectHeight * 0.75);\n             g2.draw(line);\n      }\n         \n         CategoryItemLabelGenerator generator = getItemLabelGenerator(row, \n                 column);\n@@ -400,6 +406,9 @@ protected void drawVerticalItem(Graphics2D g2,\n \n         // BAR Y\n         Number meanValue = dataset.getMeanValue(row, column);\n      if (meanValue == null) {\n          return;\n      }\n \n         double value = meanValue.doubleValue();\n         double base = 0.0;\n@@ -456,7 +465,9 @@ else if (lclip <= 0.0) { // cases 5, 6, 7 and 8\n         }\n \n         // standard deviation lines\n      Number n = dataset.getStdDevValue(row, column);\n      if (n != null) {\n          double valueDelta = n.doubleValue();\n             double highVal = rangeAxis.valueToJava2D(meanValue.doubleValue() \n                     + valueDelta, dataArea, yAxisLocation);\n             double lowVal = rangeAxis.valueToJava2D(meanValue.doubleValue() \n@@ -484,6 +495,7 @@ else if (lclip <= 0.0) { // cases 5, 6, 7 and 8\n             line = new Line2D.Double(rectX + rectWidth / 2.0d - 5.0d, lowVal,\n                                      rectX + rectWidth / 2.0d + 5.0d, lowVal);\n             g2.draw(line);\n      }\n         \n         CategoryItemLabelGenerator generator = getItemLabelGenerator(row, \n                 column);\n","CodeWithNoComments":"\n \n                  Number meanValue = dataset.getMeanValue(row, column);\n \n         double value = meanValue.doubleValue();\n         double base = 0.0;\n\n \n                     double valueDelta = dataset.getStdDevValue(row, column).doubleValue();\n             double highVal = rangeAxis.valueToJava2D(meanValue.doubleValue() \n                     + valueDelta, dataArea, yAxisLocation);\n             double lowVal = rangeAxis.valueToJava2D(meanValue.doubleValue() \n\n                                      lowVal, rectY + rectHeight * 0.75);\n             g2.draw(line);\n         \n         CategoryItemLabelGenerator generator = getItemLabelGenerator(row, \n                 column);\n\n \n                  Number meanValue = dataset.getMeanValue(row, column);\n \n         double value = meanValue.doubleValue();\n         double base = 0.0;\n\n \n                     double valueDelta = dataset.getStdDevValue(row, column).doubleValue();\n             double highVal = rangeAxis.valueToJava2D(meanValue.doubleValue() \n                     + valueDelta, dataArea, yAxisLocation);\n             double lowVal = rangeAxis.valueToJava2D(meanValue.doubleValue() \n\n                                      rectX + rectWidth / 2.0d + 5.0d, lowVal);\n             g2.draw(line);\n         \n         CategoryItemLabelGenerator generator = getItemLabelGenerator(row, \n                 column);\n","SolutionWithNoComments":"\n \n                  Number meanValue = dataset.getMeanValue(row, column);\n        if (meanValue == null) {\n            return;\n        }\n \n         double value = meanValue.doubleValue();\n         double base = 0.0;\n\n \n                 Number n = dataset.getStdDevValue(row, column);\n        if (n != null) {\n            double valueDelta = n.doubleValue();\n             double highVal = rangeAxis.valueToJava2D(meanValue.doubleValue() \n                     + valueDelta, dataArea, yAxisLocation);\n             double lowVal = rangeAxis.valueToJava2D(meanValue.doubleValue() \n\n                                      lowVal, rectY + rectHeight * 0.75);\n             g2.draw(line);\n        }\n         \n         CategoryItemLabelGenerator generator = getItemLabelGenerator(row, \n                 column);\n\n \n                  Number meanValue = dataset.getMeanValue(row, column);\n        if (meanValue == null) {\n            return;\n        }\n \n         double value = meanValue.doubleValue();\n         double base = 0.0;\n\n \n                 Number n = dataset.getStdDevValue(row, column);\n        if (n != null) {\n            double valueDelta = n.doubleValue();\n             double highVal = rangeAxis.valueToJava2D(meanValue.doubleValue() \n                     + valueDelta, dataArea, yAxisLocation);\n             double lowVal = rangeAxis.valueToJava2D(meanValue.doubleValue() \n\n                                      rectX + rectWidth / 2.0d + 5.0d, lowVal);\n             g2.draw(line);\n        }\n         \n         CategoryItemLabelGenerator generator = getItemLabelGenerator(row, \n                 column);\n"},{"ids":25,"error":"junit.framework.AssertionFailedError","source":"/source/org/jfree/chart/renderer/category/MinMaxCategoryRenderer.java","code":"@@ -432,6 +432,25 @@ public void drawItem(Graphics2D g2, CategoryItemRendererState state,\n      *\n      * @since 1.0.7\n      */\n \n     /**\n      * Returns an icon.\n","solution":"@@ -432,6 +432,25 @@ public void drawItem(Graphics2D g2, CategoryItemRendererState state,\n      *\n      * @since 1.0.7\n      */\n  public boolean equals(Object obj) {\n      if (obj == this) {\n          return true;\n      }\n      if (!(obj instanceof MinMaxCategoryRenderer)) {\n          return false;\n      }\n      MinMaxCategoryRenderer that = (MinMaxCategoryRenderer) obj;\n      if (this.plotLines != that.plotLines) {\n          return false;\n      }\n      if (!PaintUtilities.equal(this.groupPaint, that.groupPaint)) {\n          return false;\n      }\n      if (!this.groupStroke.equals(that.groupStroke)) {\n          return false;\n      }\n      return super.equals(obj);\n  }\n \n     /**\n      * Returns an icon.\n","CodeWithNoComments":"\n    \n","SolutionWithNoComments":"\n    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof MinMaxCategoryRenderer)) {\n            return false;\n        }\n        MinMaxCategoryRenderer that = (MinMaxCategoryRenderer) obj;\n        if (this.plotLines != that.plotLines) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.groupPaint, that.groupPaint)) {\n            return false;\n        }\n        if (!this.groupStroke.equals(that.groupStroke)) {\n            return false;\n        }\n        return super.equals(obj);\n    }\n \n"},{"ids":26,"error":"java.lang.IllegalArgumentException","source":"/source/org/jfree/chart/renderer/GrayPaintScale.java","code":"@@ -123,7 +123,7 @@ public double getUpperBound() {\n     public Paint getPaint(double value) {\n         double v = Math.max(value, this.lowerBound);\n         v = Math.min(v, this.upperBound);\n      int g = (int) ((value - this.lowerBound) / (this.upperBound \n                 - this.lowerBound) * 255.0);\n         return new Color(g, g, g);\n     }\n","solution":"@@ -123,7 +123,7 @@ public double getUpperBound() {\n     public Paint getPaint(double value) {\n         double v = Math.max(value, this.lowerBound);\n         v = Math.min(v, this.upperBound);\n      int g = (int) ((v - this.lowerBound) / (this.upperBound \n                 - this.lowerBound) * 255.0);\n         return new Color(g, g, g);\n     }\n","CodeWithNoComments":"\n     public Paint getPaint(double value) {\n         double v = Math.max(value, this.lowerBound);\n         v = Math.min(v, this.upperBound);\n        int g = (int) ((value - this.lowerBound) / (this.upperBound \n                 - this.lowerBound) * 255.0);\n         return new Color(g, g, g);\n     }\n","SolutionWithNoComments":"\n     public Paint getPaint(double value) {\n         double v = Math.max(value, this.lowerBound);\n         v = Math.min(v, this.upperBound);\n        int g = (int) ((v - this.lowerBound) / (this.upperBound \n                 - this.lowerBound) * 255.0);\n         return new Color(g, g, g);\n     }\n"},{"ids":27,"error":"junit.framework.AssertionFailedError","source":"/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java","code":"@@ -152,7 +152,7 @@ public void enterScope(NodeTraversal t) {\n     reachingUses = new MaybeReachingVariableUse(cfg, t.getScope(), compiler);\n     reachingUses.analyze();\n     for (Candidate c : candidates) {\n    if (c.canInline()) {\n         c.inlineVariable();\n \n         // If definition c has dependencies, then inlining it may have\n@@ -277,7 +277,7 @@ private Node getDefCfgNode() {\n       return defMetadata.node;\n     }\n \n  private boolean canInline() {\n       // Cannot inline a parameter.\n       if (getDefCfgNode().isFunction()) {\n         return false;\n@@ -372,6 +372,12 @@ public boolean apply(Node input) {\n                   case Token.REGEXP:\n                   case Token.NEW:\n                     return true;\n                 }\n                 return false;\n               }\n","solution":"@@ -152,7 +152,7 @@ public void enterScope(NodeTraversal t) {\n     reachingUses = new MaybeReachingVariableUse(cfg, t.getScope(), compiler);\n     reachingUses.analyze();\n     for (Candidate c : candidates) {\n    if (c.canInline(t.getScope())) {\n         c.inlineVariable();\n \n         // If definition c has dependencies, then inlining it may have\n@@ -277,7 +277,7 @@ private Node getDefCfgNode() {\n       return defMetadata.node;\n     }\n \n  private boolean canInline(final Scope scope) {\n       // Cannot inline a parameter.\n       if (getDefCfgNode().isFunction()) {\n         return false;\n@@ -372,6 +372,12 @@ public boolean apply(Node input) {\n                   case Token.REGEXP:\n                   case Token.NEW:\n                     return true;\n                case Token.NAME:\n                  Var var = scope.getOwnSlot(input.getString());\n                  if (var != null\n                      && var.getParentNode().isCatch()) {\n                    return true;\n                  }\n                 }\n                 return false;\n               }\n","CodeWithNoComments":"\n     reachingUses = new MaybeReachingVariableUse(cfg, t.getScope(), compiler);\n     reachingUses.analyze();\n     for (Candidate c : candidates) {\n      if (c.canInline()) {\n         c.inlineVariable();\n \n         \n       return defMetadata.node;\n     }\n \n    private boolean canInline() {\n              if (getDefCfgNode().isFunction()) {\n         return false;\n\n                   case Token.REGEXP:\n                   case Token.NEW:\n                     return true;\n                 }\n                 return false;\n               }\n","SolutionWithNoComments":"\n     reachingUses = new MaybeReachingVariableUse(cfg, t.getScope(), compiler);\n     reachingUses.analyze();\n     for (Candidate c : candidates) {\n      if (c.canInline(t.getScope())) {\n         c.inlineVariable();\n \n         \n       return defMetadata.node;\n     }\n \n    private boolean canInline(final Scope scope) {\n              if (getDefCfgNode().isFunction()) {\n         return false;\n\n                   case Token.REGEXP:\n                   case Token.NEW:\n                     return true;\n                  case Token.NAME:\n                    Var var = scope.getOwnSlot(input.getString());\n                    if (var != null\n                        && var.getParentNode().isCatch()) {\n                      return true;\n                    }\n                 }\n                 return false;\n               }\n"},{"ids":28,"error":"junit.framework.AssertionFailedError","source":"/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java","code":"@@ -610,9 +610,13 @@ public JSType caseNumberType() {\n     public JSType caseObjectType(ObjectType type) {\n       if (value.equals(\"function\")) {\n         JSType ctorType = getNativeType(U2U_CONSTRUCTOR_TYPE);\n      return resultEqualsValue && ctorType.isSubtype(type) ? ctorType : null;\n           // Objects are restricted to \"Function\", subtypes are left\n           // Only filter out subtypes of \"function\"\n       }\n       return matchesExpectation(\"object\") ? type : null;\n     }\n","solution":"@@ -610,9 +610,13 @@ public JSType caseNumberType() {\n     public JSType caseObjectType(ObjectType type) {\n       if (value.equals(\"function\")) {\n         JSType ctorType = getNativeType(U2U_CONSTRUCTOR_TYPE);\n      if (resultEqualsValue) {\n           // Objects are restricted to \"Function\", subtypes are left\n        return ctorType.getGreatestSubtype(type);\n      } else {\n           // Only filter out subtypes of \"function\"\n        return type.isSubtype(ctorType) ? null : type;\n      }\n       }\n       return matchesExpectation(\"object\") ? type : null;\n     }\n","CodeWithNoComments":"\n     public JSType caseObjectType(ObjectType type) {\n       if (value.equals(\"function\")) {\n         JSType ctorType = getNativeType(U2U_CONSTRUCTOR_TYPE);\n        return resultEqualsValue && ctorType.isSubtype(type) ? ctorType : null;\n                             }\n       return matchesExpectation(\"object\") ? type : null;\n     }\n","SolutionWithNoComments":"\n     public JSType caseObjectType(ObjectType type) {\n       if (value.equals(\"function\")) {\n         JSType ctorType = getNativeType(U2U_CONSTRUCTOR_TYPE);\n        if (resultEqualsValue) {\n                     return ctorType.getGreatestSubtype(type);\n        } else {\n                     return type.isSubtype(ctorType) ? null : type;\n        }\n       }\n       return matchesExpectation(\"object\") ? type : null;\n     }\n"},{"ids":29,"error":"junit.framework.AssertionFailedError","source":"/src/com/google/javascript/jscomp/InlineObjectLiterals.java","code":"@@ -173,6 +173,9 @@ private boolean isInlinableObject(List<Reference> refs) {\n \n           // Deleting a property has different semantics from deleting\n           // a variable, so deleted properties should not be inlined.\n \n           // NOTE(nicksantos): This pass's object-splitting algorithm has\n           // a blind spot. It assumes that if a property isn't defined on an\n","solution":"@@ -173,6 +173,9 @@ private boolean isInlinableObject(List<Reference> refs) {\n \n           // Deleting a property has different semantics from deleting\n           // a variable, so deleted properties should not be inlined.\n        if (gramps.isDelProp()) {\n          return false;\n        }\n \n           // NOTE(nicksantos): This pass's object-splitting algorithm has\n           // a blind spot. It assumes that if a property isn't defined on an\n","CodeWithNoComments":"\n \n                       \n                      ","SolutionWithNoComments":"\n \n                                if (gramps.isDelProp()) {\n            return false;\n          }\n \n                      "},{"ids":30,"error":"junit.framework.AssertionFailedError","source":"/src/com/google/javascript/jscomp/TypeValidator.java","code":"@@ -363,9 +363,6 @@ boolean expectCanAssignToPropertyOf(NodeTraversal t, Node n, JSType rightType,\n       JSType leftType, Node owner, String propName) {\n     // The NoType check is a hack to make typedefs work OK.\n     if (!leftType.isNoType() && !rightType.canAssignTo(leftType)) {\n    if ((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) {\n      registerMismatch(rightType, leftType, null);\n    } else {\n       // Do not type-check interface methods, because we expect that\n       // they will have dummy implementations that do not match the type\n       // annotations.\n@@ -382,7 +379,6 @@ boolean expectCanAssignToPropertyOf(NodeTraversal t, Node n, JSType rightType,\n           \"assignment to property \" + propName + \" of \" +\n           getReadableJSTypeName(owner, true),\n           rightType, leftType);\n    }\n       return false;\n     }\n     return true;\n@@ -402,11 +398,7 @@ boolean expectCanAssignToPropertyOf(NodeTraversal t, Node n, JSType rightType,\n   boolean expectCanAssignTo(NodeTraversal t, Node n, JSType rightType,\n       JSType leftType, String msg) {\n     if (!rightType.canAssignTo(leftType)) {\n    if ((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) {\n      registerMismatch(rightType, leftType, null);\n    } else {\n       mismatch(t, n, msg, rightType, leftType);\n    }\n       return false;\n     }\n     return true;\n","solution":"@@ -363,9 +363,6 @@ boolean expectCanAssignToPropertyOf(NodeTraversal t, Node n, JSType rightType,\n       JSType leftType, Node owner, String propName) {\n     // The NoType check is a hack to make typedefs work OK.\n     if (!leftType.isNoType() && !rightType.canAssignTo(leftType)) {\n       // Do not type-check interface methods, because we expect that\n       // they will have dummy implementations that do not match the type\n       // annotations.\n@@ -382,7 +379,6 @@ boolean expectCanAssignToPropertyOf(NodeTraversal t, Node n, JSType rightType,\n           \"assignment to property \" + propName + \" of \" +\n           getReadableJSTypeName(owner, true),\n           rightType, leftType);\n       return false;\n     }\n     return true;\n@@ -402,11 +398,7 @@ boolean expectCanAssignToPropertyOf(NodeTraversal t, Node n, JSType rightType,\n   boolean expectCanAssignTo(NodeTraversal t, Node n, JSType rightType,\n       JSType leftType, String msg) {\n     if (!rightType.canAssignTo(leftType)) {\n       mismatch(t, n, msg, rightType, leftType);\n       return false;\n     }\n     return true;\n","CodeWithNoComments":"\n       JSType leftType, Node owner, String propName) {\n          if (!leftType.isNoType() && !rightType.canAssignTo(leftType)) {\n      if ((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) {\n        registerMismatch(rightType, leftType, null);\n      } else {\n                     \n           \"assignment to property \" + propName + \" of \" +\n           getReadableJSTypeName(owner, true),\n           rightType, leftType);\n      }\n       return false;\n     }\n     return true;\n\n   boolean expectCanAssignTo(NodeTraversal t, Node n, JSType rightType,\n       JSType leftType, String msg) {\n     if (!rightType.canAssignTo(leftType)) {\n      if ((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) {\n        registerMismatch(rightType, leftType, null);\n      } else {\n       mismatch(t, n, msg, rightType, leftType);\n      }\n       return false;\n     }\n     return true;\n","SolutionWithNoComments":"\n       JSType leftType, Node owner, String propName) {\n          if (!leftType.isNoType() && !rightType.canAssignTo(leftType)) {\n                     \n           \"assignment to property \" + propName + \" of \" +\n           getReadableJSTypeName(owner, true),\n           rightType, leftType);\n       return false;\n     }\n     return true;\n\n   boolean expectCanAssignTo(NodeTraversal t, Node n, JSType rightType,\n       JSType leftType, String msg) {\n     if (!rightType.canAssignTo(leftType)) {\n       mismatch(t, n, msg, rightType, leftType);\n       return false;\n     }\n     return true;\n"},{"ids":31,"error":"java.lang.NullPointerException","source":"/src/com/google/javascript/jscomp/TypeCheck.java","code":"@@ -1569,9 +1569,13 @@ private void checkInterfaceConflictProperties(NodeTraversal t, Node n,\n       ObjectType interfaceType) {\n     ObjectType implicitProto = interfaceType.getImplicitPrototype();\n     Set<String> currentPropertyNames;\n       // This can be the case if interfaceType is proxy to a non-existent\n       // object (which is a bad type annotation, but shouldn't crash).\n       currentPropertyNames = implicitProto.getOwnPropertyNames();\n     for (String name : currentPropertyNames) {\n       ObjectType oType = properties.get(name);\n       if (oType != null) {\n","solution":"@@ -1569,9 +1569,13 @@ private void checkInterfaceConflictProperties(NodeTraversal t, Node n,\n       ObjectType interfaceType) {\n     ObjectType implicitProto = interfaceType.getImplicitPrototype();\n     Set<String> currentPropertyNames;\n  if (implicitProto == null) {\n       // This can be the case if interfaceType is proxy to a non-existent\n       // object (which is a bad type annotation, but shouldn't crash).\n    currentPropertyNames = ImmutableSet.of();\n  } else {\n       currentPropertyNames = implicitProto.getOwnPropertyNames();\n  }\n     for (String name : currentPropertyNames) {\n       ObjectType oType = properties.get(name);\n       if (oType != null) {\n","CodeWithNoComments":"\n       ObjectType interfaceType) {\n     ObjectType implicitProto = interfaceType.getImplicitPrototype();\n     Set<String> currentPropertyNames;\n                     currentPropertyNames = implicitProto.getOwnPropertyNames();\n     for (String name : currentPropertyNames) {\n       ObjectType oType = properties.get(name);\n       if (oType != null) {\n","SolutionWithNoComments":"\n       ObjectType interfaceType) {\n     ObjectType implicitProto = interfaceType.getImplicitPrototype();\n     Set<String> currentPropertyNames;\n    if (implicitProto == null) {\n                    currentPropertyNames = ImmutableSet.of();\n    } else {\n       currentPropertyNames = implicitProto.getOwnPropertyNames();\n    }\n     for (String name : currentPropertyNames) {\n       ObjectType oType = properties.get(name);\n       if (oType != null) {\n"},{"ids":32,"error":"junit.framework.AssertionFailedError","source":"/src/com/google/javascript/jscomp/RemoveUnusedVars.java","code":"@@ -376,6 +376,9 @@ private void removeUnreferencedFunctionArgs(Scope fnScope) {\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n \n     Node function = fnScope.getRootNode();\n \n","solution":"@@ -376,6 +376,9 @@ private void removeUnreferencedFunctionArgs(Scope fnScope) {\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n  if (!removeGlobals) {\n    return;\n  }\n \n     Node function = fnScope.getRootNode();\n \n","CodeWithNoComments":"\n                \n     Node function = fnScope.getRootNode();\n \n","SolutionWithNoComments":"\n                   if (!removeGlobals) {\n      return;\n    }\n \n     Node function = fnScope.getRootNode();\n \n"},{"ids":33,"error":"junit.framework.AssertionFailedError","source":"/src/com/google/javascript/rhino/jstype/NamedType.java","code":"@@ -187,7 +187,7 @@ JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n     // makes more sense. Now, resolution via registry is first in order to\n     // avoid triggering the warnings built into the resolution via properties.\n     boolean resolved = resolveViaRegistry(t, enclosing);\n  if (detectImplicitPrototypeCycle()) {\n       handleTypeCycle(t);\n     }\n \n@@ -199,7 +199,7 @@ JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n     }\n \n     resolveViaProperties(t, enclosing);\n  if (detectImplicitPrototypeCycle()) {\n       handleTypeCycle(t);\n     }\n \n","solution":"@@ -187,7 +187,7 @@ JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n     // makes more sense. Now, resolution via registry is first in order to\n     // avoid triggering the warnings built into the resolution via properties.\n     boolean resolved = resolveViaRegistry(t, enclosing);\n  if (detectInheritanceCycle()) {\n       handleTypeCycle(t);\n     }\n \n@@ -199,7 +199,7 @@ JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n     }\n \n     resolveViaProperties(t, enclosing);\n  if (detectInheritanceCycle()) {\n       handleTypeCycle(t);\n     }\n \n","CodeWithNoComments":"\n               boolean resolved = resolveViaRegistry(t, enclosing);\n    if (detectImplicitPrototypeCycle()) {\n       handleTypeCycle(t);\n     }\n \n\n     }\n \n     resolveViaProperties(t, enclosing);\n    if (detectImplicitPrototypeCycle()) {\n       handleTypeCycle(t);\n     }\n \n","SolutionWithNoComments":"\n               boolean resolved = resolveViaRegistry(t, enclosing);\n    if (detectInheritanceCycle()) {\n       handleTypeCycle(t);\n     }\n \n\n     }\n \n     resolveViaProperties(t, enclosing);\n    if (detectInheritanceCycle()) {\n       handleTypeCycle(t);\n     }\n \n"},{"ids":34,"error":"junit.framework.AssertionFailedError","source":"/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java","code":"@@ -201,10 +201,14 @@ private boolean canBeRedeclared(Node n, Scope s) {\n       Var var = s.getVar(lhs.getString());\n       return var != null\n           && var.getScope() == s\n           && !blacklistedVars.contains(var);\n     }\n   }\n \n \n   private void applyCollapses() {\n     for (Collapse collapse : collapses) {\n","solution":"@@ -201,10 +201,14 @@ private boolean canBeRedeclared(Node n, Scope s) {\n       Var var = s.getVar(lhs.getString());\n       return var != null\n           && var.getScope() == s\n        && !isNamedParameter(var)\n           && !blacklistedVars.contains(var);\n     }\n   }\n \nprivate boolean isNamedParameter(Var v) {\n  return v.getParentNode().isParamList();\n}\n \n   private void applyCollapses() {\n     for (Collapse collapse : collapses) {\n","CodeWithNoComments":"\n       Var var = s.getVar(lhs.getString());\n       return var != null\n           && var.getScope() == s\n           && !blacklistedVars.contains(var);\n     }\n   }\n \n \n   private void applyCollapses() {\n     for (Collapse collapse : collapses) {\n","SolutionWithNoComments":"\n       Var var = s.getVar(lhs.getString());\n       return var != null\n           && var.getScope() == s\n          && !isNamedParameter(var)\n           && !blacklistedVars.contains(var);\n     }\n   }\n \n  private boolean isNamedParameter(Var v) {\n    return v.getParentNode().isParamList();\n  }\n \n   private void applyCollapses() {\n     for (Collapse collapse : collapses) {\n"},{"ids":35,"error":"junit.framework.ComparisonFailure","source":"/src/com/google/javascript/jscomp/ProcessCommonJSModules.java","code":"@@ -116,6 +116,7 @@ public static String toModuleName(String requiredFilename,\n   private String normalizeSourceName(String filename) {\n     // The DOS command shell will normalize \"/\" to \"\\\", so we have to\n     // wrestle it back.\n \n     if (filename.indexOf(filenamePrefix) == 0) {\n       filename = filename.substring(filenamePrefix.length());\n@@ -180,7 +181,7 @@ private void visitScript(NodeTraversal t, Node script) {\n       Preconditions.checkArgument(scriptNodeCount == 1,\n           \"ProcessCommonJSModules supports only one invocation per \" +\n           \"CompilerInput / script node\");\n    String moduleName = guessCJSModuleName(normalizeSourceName(script.getSourceFileName()));\n       script.addChildToFront(IR.var(IR.name(moduleName), IR.objectlit())\n           .copyInformationFromForTree(script));\n       if (reportDependencies) {\n","solution":"@@ -116,6 +116,7 @@ public static String toModuleName(String requiredFilename,\n   private String normalizeSourceName(String filename) {\n     // The DOS command shell will normalize \"/\" to \"\\\", so we have to\n     // wrestle it back.\n  filename = filename.replace(\"\\\\\", \"/\");\n \n     if (filename.indexOf(filenamePrefix) == 0) {\n       filename = filename.substring(filenamePrefix.length());\n@@ -180,7 +181,7 @@ private void visitScript(NodeTraversal t, Node script) {\n       Preconditions.checkArgument(scriptNodeCount == 1,\n           \"ProcessCommonJSModules supports only one invocation per \" +\n           \"CompilerInput / script node\");\n    String moduleName = guessCJSModuleName(script.getSourceFileName());\n       script.addChildToFront(IR.var(IR.name(moduleName), IR.objectlit())\n           .copyInformationFromForTree(script));\n       if (reportDependencies) {\n","CodeWithNoComments":"\n   private String normalizeSourceName(String filename) {\n           \n     if (filename.indexOf(filenamePrefix) == 0) {\n       filename = filename.substring(filenamePrefix.length());\n\n       Preconditions.checkArgument(scriptNodeCount == 1,\n           \"ProcessCommonJSModules supports only one invocation per \" +\n           \"CompilerInput / script node\");\n      String moduleName = guessCJSModuleName(normalizeSourceName(script.getSourceFileName()));\n       script.addChildToFront(IR.var(IR.name(moduleName), IR.objectlit())\n           .copyInformationFromForTree(script));\n       if (reportDependencies) {\n","SolutionWithNoComments":"\n   private String normalizeSourceName(String filename) {\n              filename = filename.replace(\"\\\\\", \"/\");\n \n     if (filename.indexOf(filenamePrefix) == 0) {\n       filename = filename.substring(filenamePrefix.length());\n\n       Preconditions.checkArgument(scriptNodeCount == 1,\n           \"ProcessCommonJSModules supports only one invocation per \" +\n           \"CompilerInput / script node\");\n      String moduleName = guessCJSModuleName(script.getSourceFileName());\n       script.addChildToFront(IR.var(IR.name(moduleName), IR.objectlit())\n           .copyInformationFromForTree(script));\n       if (reportDependencies) {\n"},{"ids":36,"error":"junit.framework.AssertionFailedError","source":"/src/com/google/javascript/jscomp/TypeCheck.java","code":"@@ -1311,8 +1311,6 @@ private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n \n     if (childType.isDict()) {\n       report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, \"'.'\", \"dict\");\n  } else if (n.getJSType() != null && parent.isAssign()) {\n    return;\n     } else if (validator.expectNotNullOrUndefined(t, n, childType,\n         \"No properties on this expression\", getNativeType(OBJECT_TYPE))) {\n       checkPropertyAccess(childType, property.getString(), t, n);\n","solution":"@@ -1311,8 +1311,6 @@ private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n \n     if (childType.isDict()) {\n       report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, \"'.'\", \"dict\");\n     } else if (validator.expectNotNullOrUndefined(t, n, childType,\n         \"No properties on this expression\", getNativeType(OBJECT_TYPE))) {\n       checkPropertyAccess(childType, property.getString(), t, n);\n","CodeWithNoComments":"\n \n     if (childType.isDict()) {\n       report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, \"'.'\", \"dict\");\n    } else if (n.getJSType() != null && parent.isAssign()) {\n      return;\n     } else if (validator.expectNotNullOrUndefined(t, n, childType,\n         \"No properties on this expression\", getNativeType(OBJECT_TYPE))) {\n       checkPropertyAccess(childType, property.getString(), t, n);\n","SolutionWithNoComments":"\n \n     if (childType.isDict()) {\n       report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, \"'.'\", \"dict\");\n     } else if (validator.expectNotNullOrUndefined(t, n, childType,\n         \"No properties on this expression\", getNativeType(OBJECT_TYPE))) {\n       checkPropertyAccess(childType, property.getString(), t, n);\n"},{"ids":37,"error":"junit.framework.AssertionFailedError","source":"/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java","code":"@@ -157,6 +157,12 @@ ReachingUses flowThrough(Node n, ReachingUses input) {\n   }\n \n   private boolean hasExceptionHandler(Node cfgNode) {\n    return false;\n   }\n \n","solution":"@@ -157,6 +157,12 @@ ReachingUses flowThrough(Node n, ReachingUses input) {\n   }\n \n   private boolean hasExceptionHandler(Node cfgNode) {\n  List<DiGraphEdge<Node, Branch>> branchEdges = getCfg().getOutEdges(cfgNode);\n  for (DiGraphEdge<Node, Branch> edge : branchEdges) {\n    if (edge.getValue() == Branch.ON_EX) {\n      return true;\n    }\n  }\n     return false;\n   }\n \n","CodeWithNoComments":"\n   }\n \n   private boolean hasExceptionHandler(Node cfgNode) {\n    return false;\n   }\n \n","SolutionWithNoComments":"\n   }\n \n   private boolean hasExceptionHandler(Node cfgNode) {\n    List<DiGraphEdge<Node, Branch>> branchEdges = getCfg().getOutEdges(cfgNode);\n    for (DiGraphEdge<Node, Branch> edge : branchEdges) {\n      if (edge.getValue() == Branch.ON_EX) {\n        return true;\n      }\n    }\n     return false;\n   }\n \n"},{"ids":38,"error":"junit.framework.AssertionFailedError","source":"/src/com/google/javascript/jscomp/NodeUtil.java","code":"@@ -1414,7 +1414,7 @@ static boolean mayBeString(Node n) {\n \n   static boolean mayBeString(Node n, boolean recurse) {\n     if (recurse) {\n    return allResultsMatch(n, MAY_BE_STRING_PREDICATE);\n     } else {\n       return mayBeStringHelper(n);\n     }\n","solution":"@@ -1414,7 +1414,7 @@ static boolean mayBeString(Node n) {\n \n   static boolean mayBeString(Node n, boolean recurse) {\n     if (recurse) {\n    return anyResultsMatch(n, MAY_BE_STRING_PREDICATE);\n     } else {\n       return mayBeStringHelper(n);\n     }\n","CodeWithNoComments":"\n \n   static boolean mayBeString(Node n, boolean recurse) {\n     if (recurse) {\n      return allResultsMatch(n, MAY_BE_STRING_PREDICATE);\n     } else {\n       return mayBeStringHelper(n);\n     }\n","SolutionWithNoComments":"\n \n   static boolean mayBeString(Node n, boolean recurse) {\n     if (recurse) {\n      return anyResultsMatch(n, MAY_BE_STRING_PREDICATE);\n     } else {\n       return mayBeStringHelper(n);\n     }\n"},{"ids":39,"error":"junit.framework.AssertionFailedError","source":"/src/com/google/javascript/jscomp/ControlFlowAnalysis.java","code":"@@ -764,7 +764,7 @@ private static Node computeFollowNode(\n         } else if (parent.getLastChild() == node){\n           if (cfa != null) {\n             for (Node finallyNode : cfa.finallyMap.get(parent)) {\n            cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n             }\n           }\n           return computeFollowNode(fromNode, parent, cfa);\n","solution":"@@ -764,7 +764,7 @@ private static Node computeFollowNode(\n         } else if (parent.getLastChild() == node){\n           if (cfa != null) {\n             for (Node finallyNode : cfa.finallyMap.get(parent)) {\n            cfa.createEdge(fromNode, Branch.ON_EX, finallyNode);\n             }\n           }\n           return computeFollowNode(fromNode, parent, cfa);\n","CodeWithNoComments":"\n         } else if (parent.getLastChild() == node){\n           if (cfa != null) {\n             for (Node finallyNode : cfa.finallyMap.get(parent)) {\n              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n             }\n           }\n           return computeFollowNode(fromNode, parent, cfa);\n","SolutionWithNoComments":"\n         } else if (parent.getLastChild() == node){\n           if (cfa != null) {\n             for (Node finallyNode : cfa.finallyMap.get(parent)) {\n              cfa.createEdge(fromNode, Branch.ON_EX, finallyNode);\n             }\n           }\n           return computeFollowNode(fromNode, parent, cfa);\n"},{"ids":40,"error":"junit.framework.ComparisonFailure","source":"/src/com/google/javascript/jscomp/TypedScopeCreator.java","code":"@@ -1288,8 +1288,12 @@ private JSType getDeclaredType(String sourceName, JSDocInfo info,\n           if (info.isConstant()) {\n             JSType knownType = null;\n             if (rValue != null) {\n            if (rValue.getJSType() != null && !rValue.getJSType().isUnknownType()) {\n                 // If rValue has a type-cast, we use the type in the type-cast.\n                 // If rValue's type was already computed during scope creation,\n                 // then we can safely use that.\n                 return rValue.getJSType();\n","solution":"@@ -1288,8 +1288,12 @@ private JSType getDeclaredType(String sourceName, JSDocInfo info,\n           if (info.isConstant()) {\n             JSType knownType = null;\n             if (rValue != null) {\n            JSDocInfo rValueInfo = rValue.getJSDocInfo();\n            if (rValueInfo != null && rValueInfo.hasType()) {\n                 // If rValue has a type-cast, we use the type in the type-cast.\n              return rValueInfo.getType().evaluate(scope, typeRegistry);\n            } else if (rValue.getJSType() != null\n                && !rValue.getJSType().isUnknownType()) {\n                 // If rValue's type was already computed during scope creation,\n                 // then we can safely use that.\n                 return rValue.getJSType();\n","CodeWithNoComments":"\n           if (info.isConstant()) {\n             JSType knownType = null;\n             if (rValue != null) {\n              if (rValue.getJSType() != null && !rValue.getJSType().isUnknownType()) {\n                                                                    return rValue.getJSType();\n","SolutionWithNoComments":"\n           if (info.isConstant()) {\n             JSType knownType = null;\n             if (rValue != null) {\n              JSDocInfo rValueInfo = rValue.getJSDocInfo();\n              if (rValueInfo != null && rValueInfo.hasType()) {\n                                 return rValueInfo.getType().evaluate(scope, typeRegistry);\n              } else if (rValue.getJSType() != null\n                  && !rValue.getJSType().isUnknownType()) {\n                                                   return rValue.getJSType();\n"},{"ids":41,"error":"junit.framework.AssertionFailedError","source":"/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java","code":"@@ -123,8 +123,8 @@ private void traverse(Node node) {\n     do {\n       Node c = node.getFirstChild();\n       while(c != null) {\n      traverse(c);\n         Node next = c.getNext();\n         c = next;\n       }\n \n","solution":"@@ -123,8 +123,8 @@ private void traverse(Node node) {\n     do {\n       Node c = node.getFirstChild();\n       while(c != null) {\n         Node next = c.getNext();\n      traverse(c);\n         c = next;\n       }\n \n","CodeWithNoComments":"\n     do {\n       Node c = node.getFirstChild();\n       while(c != null) {\n        traverse(c);\n         Node next = c.getNext();\n         c = next;\n       }\n \n","SolutionWithNoComments":"\n     do {\n       Node c = node.getFirstChild();\n       while(c != null) {\n         Node next = c.getNext();\n        traverse(c);\n         c = next;\n       }\n \n"},{"ids":42,"error":"junit.framework.AssertionFailedError","source":"/src/com/google/javascript/jscomp/CheckSideEffects.java","code":"@@ -98,7 +98,7 @@ public void visit(NodeTraversal t, Node n, Node parent) {\n     // Do not try to remove a block or an expr result. We already handle\n     // these cases when we visit the child, and the peephole passes will\n     // fix up the tree in more clever ways when these are removed.\n  if (n.isExprResult()) {\n       return;\n     }\n \n@@ -110,24 +110,7 @@ public void visit(NodeTraversal t, Node n, Node parent) {\n \n     boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n     boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n  if (parent.getType() == Token.COMMA) {\n    if (isResultUsed) {\n      return;\n    }\n    if (n == parent.getLastChild()) {\n      for (Node an : parent.getAncestors()) {\n        int ancestorType = an.getType();\n        if (ancestorType == Token.COMMA) continue;\n        if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;\n        else break;\n      }\n    }\n  } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n    if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {\n      return;\n    }\n  }\n  if (\n  if (!isResultUsed &&\n         (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n       String msg = \"This code lacks side-effects. Is there a bug?\";\n       if (n.isString()) {\n","solution":"@@ -98,7 +98,7 @@ public void visit(NodeTraversal t, Node n, Node parent) {\n     // Do not try to remove a block or an expr result. We already handle\n     // these cases when we visit the child, and the peephole passes will\n     // fix up the tree in more clever ways when these are removed.\n  if (n.isExprResult() || n.isBlock()) {\n       return;\n     }\n \n@@ -110,24 +110,7 @@ public void visit(NodeTraversal t, Node n, Node parent) {\n \n     boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n     boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n  if (!isResultUsed &&\n         (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n       String msg = \"This code lacks side-effects. Is there a bug?\";\n       if (n.isString()) {\n","CodeWithNoComments":"\n                   if (n.isExprResult()) {\n       return;\n     }\n \n\n \n     boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n     boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n    if (parent.getType() == Token.COMMA) {\n      if (isResultUsed) {\n        return;\n      }\n      if (n == parent.getLastChild()) {\n        for (Node an : parent.getAncestors()) {\n          int ancestorType = an.getType();\n          if (ancestorType == Token.COMMA) continue;\n          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;\n          else break;\n        }\n      }\n    } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n      if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {\n        return;\n      }\n    }\n    if (\n    if (!isResultUsed &&\n         (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n       String msg = \"This code lacks side-effects. Is there a bug?\";\n       if (n.isString()) {\n","SolutionWithNoComments":"\n                   if (n.isExprResult() || n.isBlock()) {\n       return;\n     }\n \n\n \n     boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n     boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n    if (!isResultUsed &&\n         (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n       String msg = \"This code lacks side-effects. Is there a bug?\";\n       if (n.isString()) {\n"},{"ids":43,"error":"junit.framework.AssertionFailedError","source":"/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java","code":"@@ -99,6 +99,9 @@ public boolean apply(Node n) {\n           return true;\n         }\n \n         for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n           if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {\n","solution":"@@ -99,6 +99,9 @@ public boolean apply(Node n) {\n           return true;\n         }\n \n      if (n.isDelProp()) {\n        return true;\n      }\n \n         for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n           if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {\n","CodeWithNoComments":"\n           return true;\n         }\n \n         for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n           if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {\n","SolutionWithNoComments":"\n           return true;\n         }\n \n        if (n.isDelProp()) {\n          return true;\n        }\n \n         for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n           if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {\n"},{"ids":44,"error":"junit.framework.AssertionFailedError","source":"/src/com/google/javascript/jscomp/ScopedAliases.java","code":"@@ -167,17 +167,23 @@ public void applyAlias() {\n \n   private class AliasedTypeNode implements AliasUsage {\n     private final Node typeReference;\n     private final String aliasName;\n \n  AliasedTypeNode(Node typeReference,\n         String aliasName) {\n       this.typeReference = typeReference;\n       this.aliasName = aliasName;\n     }\n \n     @Override\n     public void applyAlias() {\n    typeReference.setString(aliasName);\n     }\n   }\n \n@@ -465,7 +471,7 @@ private void fixTypeNode(Node typeNode) {\n         Var aliasVar = aliases.get(baseName);\n         if (aliasVar != null) {\n           Node aliasedNode = aliasVar.getInitialValue();\n        aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));\n         }\n       }\n \n","solution":"@@ -167,17 +167,23 @@ public void applyAlias() {\n \n   private class AliasedTypeNode implements AliasUsage {\n     private final Node typeReference;\n  private final Node aliasDefinition;\n     private final String aliasName;\n \n  AliasedTypeNode(Node typeReference, Node aliasDefinition,\n         String aliasName) {\n       this.typeReference = typeReference;\n    this.aliasDefinition = aliasDefinition;\n       this.aliasName = aliasName;\n     }\n \n     @Override\n     public void applyAlias() {\n    String typeName = typeReference.getString();\n    String aliasExpanded =\n        Preconditions.checkNotNull(aliasDefinition.getQualifiedName());\n    Preconditions.checkState(typeName.startsWith(aliasName));\n    typeReference.setString(typeName.replaceFirst(aliasName, aliasExpanded));\n     }\n   }\n \n@@ -465,7 +471,7 @@ private void fixTypeNode(Node typeNode) {\n         Var aliasVar = aliases.get(baseName);\n         if (aliasVar != null) {\n           Node aliasedNode = aliasVar.getInitialValue();\n        aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode, baseName));\n         }\n       }\n \n","CodeWithNoComments":"\n \n   private class AliasedTypeNode implements AliasUsage {\n     private final Node typeReference;\n     private final String aliasName;\n \n    AliasedTypeNode(Node typeReference,\n         String aliasName) {\n       this.typeReference = typeReference;\n       this.aliasName = aliasName;\n     }\n \n     @Override\n     public void applyAlias() {\n      typeReference.setString(aliasName);\n     }\n   }\n \n\n         Var aliasVar = aliases.get(baseName);\n         if (aliasVar != null) {\n           Node aliasedNode = aliasVar.getInitialValue();\n          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));\n         }\n       }\n \n","SolutionWithNoComments":"\n \n   private class AliasedTypeNode implements AliasUsage {\n     private final Node typeReference;\n    private final Node aliasDefinition;\n     private final String aliasName;\n \n    AliasedTypeNode(Node typeReference, Node aliasDefinition,\n         String aliasName) {\n       this.typeReference = typeReference;\n      this.aliasDefinition = aliasDefinition;\n       this.aliasName = aliasName;\n     }\n \n     @Override\n     public void applyAlias() {\n      String typeName = typeReference.getString();\n      String aliasExpanded =\n          Preconditions.checkNotNull(aliasDefinition.getQualifiedName());\n      Preconditions.checkState(typeName.startsWith(aliasName));\n      typeReference.setString(typeName.replaceFirst(aliasName, aliasExpanded));\n     }\n   }\n \n\n         Var aliasVar = aliases.get(baseName);\n         if (aliasVar != null) {\n           Node aliasedNode = aliasVar.getInitialValue();\n          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode, baseName));\n         }\n       }\n \n"},{"ids":45,"error":"junit.framework.AssertionFailedError","source":"/src/com/google/javascript/jscomp/Compiler.java","code":"@@ -1285,7 +1285,7 @@ Node parseInputs() {\n \n       // Check if the sources need to be re-ordered.\n       boolean staleInputs = false;\n    if (options.dependencyOptions.needsManagement() && options.closurePass) {\n         for (CompilerInput input : inputs) {\n           // Forward-declare all the provided types, so that they\n           // are not flagged even if they are dropped from the process.\n","solution":"@@ -1285,7 +1285,7 @@ Node parseInputs() {\n \n       // Check if the sources need to be re-ordered.\n       boolean staleInputs = false;\n    if (options.dependencyOptions.needsManagement()) {\n         for (CompilerInput input : inputs) {\n           // Forward-declare all the provided types, so that they\n           // are not flagged even if they are dropped from the process.\n","CodeWithNoComments":"\n \n              boolean staleInputs = false;\n      if (options.dependencyOptions.needsManagement() && options.closurePass) {\n         for (CompilerInput input : inputs) {\n                      ","SolutionWithNoComments":"\n \n              boolean staleInputs = false;\n      if (options.dependencyOptions.needsManagement()) {\n         for (CompilerInput input : inputs) {\n                      "},{"ids":46,"error":"junit.framework.AssertionFailedError","source":"/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java","code":"@@ -217,7 +217,8 @@ private Node tryFoldSimpleFunctionCall(Node n) {\n       // slightly different semantics than '' + (a). See\n       // http://code.google.com/p/closure-compiler/issues/detail?id=759\n       Node value = callTarget.getNext();\n    if (value != null) {\n         Node addition = IR.add(\n             IR.string(\"\").srcref(callTarget),\n             value.detachFromParent());\n","solution":"@@ -217,7 +217,8 @@ private Node tryFoldSimpleFunctionCall(Node n) {\n       // slightly different semantics than '' + (a). See\n       // http://code.google.com/p/closure-compiler/issues/detail?id=759\n       Node value = callTarget.getNext();\n    if (value != null && value.getNext() == null &&\n        NodeUtil.isImmutableValue(value)) {\n         Node addition = IR.add(\n             IR.string(\"\").srcref(callTarget),\n             value.detachFromParent());\n","CodeWithNoComments":"\n                     Node value = callTarget.getNext();\n      if (value != null) {\n         Node addition = IR.add(\n             IR.string(\"\").srcref(callTarget),\n             value.detachFromParent());\n","SolutionWithNoComments":"\n                     Node value = callTarget.getNext();\n      if (value != null && value.getNext() == null &&\n          NodeUtil.isImmutableValue(value)) {\n         Node addition = IR.add(\n             IR.string(\"\").srcref(callTarget),\n             value.detachFromParent());\n"},{"ids":47,"error":"java.lang.IllegalArgumentException","source":"/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java","code":"@@ -169,7 +169,9 @@ protected void declareNameInScope(FlowScope scope, Node node, JSType type) {\n         scope.inferQualifiedSlot(node, qualifiedName, origType, type);\n         break;\n \n         // \"this\" references aren't currently modeled in the CFG.\n \n       default:\n         throw new IllegalArgumentException(\"Node cannot be refined. \\n\" +\n","solution":"@@ -169,7 +169,9 @@ protected void declareNameInScope(FlowScope scope, Node node, JSType type) {\n         scope.inferQualifiedSlot(node, qualifiedName, origType, type);\n         break;\n \n    case Token.THIS:\n         // \"this\" references aren't currently modeled in the CFG.\n      break;\n \n       default:\n         throw new IllegalArgumentException(\"Node cannot be refined. \\n\" +\n","CodeWithNoComments":"\n         scope.inferQualifiedSlot(node, qualifiedName, origType, type);\n         break;\n \n          \n       default:\n         throw new IllegalArgumentException(\"Node cannot be refined. \\n\" +\n","SolutionWithNoComments":"\n         scope.inferQualifiedSlot(node, qualifiedName, origType, type);\n         break;\n \n      case Token.THIS:\n                 break;\n \n       default:\n         throw new IllegalArgumentException(\"Node cannot be refined. \\n\" +\n"},{"ids":48,"error":"junit.framework.AssertionFailedError","source":"/src/com/google/javascript/jscomp/PeepholeFoldConstants.java","code":"@@ -1448,8 +1448,14 @@ private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n \n     Node current = left.getFirstChild();\n     Node elem = null;\n  for (int i = 0; current != null && i < intIndex; i++) {\n         elem = current;\n \n       current = current.getNext();\n     }\n","solution":"@@ -1448,8 +1448,14 @@ private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n \n     Node current = left.getFirstChild();\n     Node elem = null;\n  for (int i = 0; current != null; i++) {\n    if (i != intIndex) {\n      if (mayHaveSideEffects(current)) {\n        return n;\n      }\n    } else {\n         elem = current;\n    }\n \n       current = current.getNext();\n     }\n","CodeWithNoComments":"\n \n     Node current = left.getFirstChild();\n     Node elem = null;\n    for (int i = 0; current != null && i < intIndex; i++) {\n         elem = current;\n \n       current = current.getNext();\n     }\n","SolutionWithNoComments":"\n \n     Node current = left.getFirstChild();\n     Node elem = null;\n    for (int i = 0; current != null; i++) {\n      if (i != intIndex) {\n        if (mayHaveSideEffects(current)) {\n          return n;\n        }\n      } else {\n         elem = current;\n      }\n \n       current = current.getNext();\n     }\n"},{"ids":49,"error":"junit.framework.AssertionFailedError","source":"/src/com/google/javascript/jscomp/ScopedAliases.java","code":"@@ -275,8 +275,8 @@ private void findAliases(NodeTraversal t) {\n         Node n = v.getNode();\n         int type = n.getType();\n         Node parent = n.getParent();\n      if (parent.isVar()) {\n        if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n           String name = n.getString();\n           Var aliasVar = scope.getVar(name);\n           aliases.put(name, aliasVar);\n@@ -284,15 +284,16 @@ private void findAliases(NodeTraversal t) {\n           String qualifiedName =\n               aliasVar.getInitialValue().getQualifiedName();\n           transformation.addAlias(name, qualifiedName);\n           // Bleeding functions already get a BAD_PARAMETERS error, so just\n           // do nothing.\n           // Parameters of the scope function also get a BAD_PARAMETERS\n           // error.\n         } else {\n           // TODO(robbyw): Support using locals for private variables.\n           report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n         }\n      }\n       }\n     }\n \n","solution":"@@ -275,8 +275,8 @@ private void findAliases(NodeTraversal t) {\n         Node n = v.getNode();\n         int type = n.getType();\n         Node parent = n.getParent();\n      if (parent.isVar() &&\n          n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n           String name = n.getString();\n           Var aliasVar = scope.getVar(name);\n           aliases.put(name, aliasVar);\n@@ -284,15 +284,16 @@ private void findAliases(NodeTraversal t) {\n           String qualifiedName =\n               aliasVar.getInitialValue().getQualifiedName();\n           transformation.addAlias(name, qualifiedName);\n      } else if (v.isBleedingFunction()) {\n           // Bleeding functions already get a BAD_PARAMETERS error, so just\n           // do nothing.\n      } else if (parent.getType() == Token.LP) {\n           // Parameters of the scope function also get a BAD_PARAMETERS\n           // error.\n         } else {\n           // TODO(robbyw): Support using locals for private variables.\n           report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n         }\n       }\n     }\n \n","CodeWithNoComments":"\n         Node n = v.getNode();\n         int type = n.getType();\n         Node parent = n.getParent();\n        if (parent.isVar()) {\n          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n           String name = n.getString();\n           Var aliasVar = scope.getVar(name);\n           aliases.put(name, aliasVar);\n\n           String qualifiedName =\n               aliasVar.getInitialValue().getQualifiedName();\n           transformation.addAlias(name, qualifiedName);\n                                                     } else {\n                      report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n         }\n        }\n       }\n     }\n \n","SolutionWithNoComments":"\n         Node n = v.getNode();\n         int type = n.getType();\n         Node parent = n.getParent();\n        if (parent.isVar() &&\n            n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n           String name = n.getString();\n           Var aliasVar = scope.getVar(name);\n           aliases.put(name, aliasVar);\n\n           String qualifiedName =\n               aliasVar.getInitialValue().getQualifiedName();\n           transformation.addAlias(name, qualifiedName);\n        } else if (v.isBleedingFunction()) {\n                              } else if (parent.getType() == Token.LP) {\n                               } else {\n                      report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n         }\n       }\n     }\n \n"},{"ids":50,"error":"junit.framework.AssertionFailedError","source":"/src/com/google/javascript/jscomp/CheckSideEffects.java","code":"@@ -98,44 +98,20 @@ public void visit(NodeTraversal t, Node n, Node parent) {\n     // Do not try to remove a block or an expr result. We already handle\n     // these cases when we visit the child, and the peephole passes will\n     // fix up the tree in more clever ways when these are removed.\n  if (parent.getType() == Token.COMMA) {\n    Node gramps = parent.getParent();\n    if (gramps.isCall() && parent == gramps.getFirstChild()) {\n      if (n == parent.getFirstChild() && parent.getChildCount() == 2 && n.getNext().isName() && \"eval\".equals(n.getNext().getString())) {\n       return;\n      }\n     }\n \n     // This no-op statement was there so that JSDoc information could\n     // be attached to the name. This check should not complain about it.\n    if (n == parent.getLastChild()) {\n      for (Node an : parent.getAncestors()) {\n        int ancestorType = an.getType();\n        if (ancestorType == Token.COMMA)\n          continue;\n        if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK)\n          return;\n        else\n          break;\n      }\n    }\n  } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n    if (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() ||\n         n == parent.getFirstChild().getNext().getNext())) {\n    } else {\n       return;\n    }\n     }\n \n     boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n     boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n     if (!isResultUsed &&\n         (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n    if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n      return;\n    } else if (n.isExprResult()) {\n      return;\n    }\n       String msg = \"This code lacks side-effects. Is there a bug?\";\n       if (n.isString()) {\n         msg = \"Is there a missing '+' on the previous line?\";\n","solution":"@@ -98,44 +98,20 @@ public void visit(NodeTraversal t, Node n, Node parent) {\n     // Do not try to remove a block or an expr result. We already handle\n     // these cases when we visit the child, and the peephole passes will\n     // fix up the tree in more clever ways when these are removed.\n  if (n.isExprResult() || n.isBlock()) {\n       return;\n     }\n \n     // This no-op statement was there so that JSDoc information could\n     // be attached to the name. This check should not complain about it.\n  if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n       return;\n     }\n \n     boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n     boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n     if (!isResultUsed &&\n         (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n       String msg = \"This code lacks side-effects. Is there a bug?\";\n       if (n.isString()) {\n         msg = \"Is there a missing '+' on the previous line?\";\n","CodeWithNoComments":"\n                   if (parent.getType() == Token.COMMA) {\n      Node gramps = parent.getParent();\n      if (gramps.isCall() && parent == gramps.getFirstChild()) {\n        if (n == parent.getFirstChild() && parent.getChildCount() == 2 && n.getNext().isName() && \"eval\".equals(n.getNext().getString())) {\n       return;\n        }\n     }\n \n                if (n == parent.getLastChild()) {\n        for (Node an : parent.getAncestors()) {\n          int ancestorType = an.getType();\n          if (ancestorType == Token.COMMA)\n            continue;\n          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK)\n            return;\n          else\n            break;\n        }\n      }\n    } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n      if (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() ||\n           n == parent.getFirstChild().getNext().getNext())) {\n      } else {\n       return;\n      }\n     }\n \n     boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n     boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n     if (!isResultUsed &&\n         (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n      if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n        return;\n      } else if (n.isExprResult()) {\n        return;\n      }\n       String msg = \"This code lacks side-effects. Is there a bug?\";\n       if (n.isString()) {\n         msg = \"Is there a missing '+' on the previous line?\";\n","SolutionWithNoComments":"\n                   if (n.isExprResult() || n.isBlock()) {\n       return;\n     }\n \n              if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n       return;\n     }\n \n     boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n     boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n     if (!isResultUsed &&\n         (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n       String msg = \"This code lacks side-effects. Is there a bug?\";\n       if (n.isString()) {\n         msg = \"Is there a missing '+' on the previous line?\";\n"},{"ids":51,"error":"junit.framework.AssertionFailedError","source":"/src/com/google/javascript/jscomp/ProcessCommonJSModules.java","code":"@@ -125,6 +125,7 @@ private String normalizeSourceName(String filename) {\n       AbstractPostOrderCallback {\n \n     private int scriptNodeCount = 0;\n \n     @Override\n     public void visit(NodeTraversal t, Node n, Node parent) {\n@@ -204,6 +205,9 @@ private void visitScript(NodeTraversal t, Node script) {\n      */\n     private void emitOptionalModuleExportsOverride(Node script,\n         String moduleName) {\n \n       Node moduleExportsProp = IR.getprop(IR.name(moduleName),\n           IR.string(\"module$exports\"));\n@@ -225,6 +229,7 @@ private void visitModuleExports(Node prop) {\n       Node exports = prop.getChildAtIndex(1);\n       exports.putProp(Node.ORIGINALNAME_PROP, \"exports\");\n       exports.setString(\"module$exports\");\n     }\n \n     /**\n","solution":"@@ -125,6 +125,7 @@ private String normalizeSourceName(String filename) {\n       AbstractPostOrderCallback {\n \n     private int scriptNodeCount = 0;\n  private Set<String> modulesWithExports = Sets.newHashSet();\n \n     @Override\n     public void visit(NodeTraversal t, Node n, Node parent) {\n@@ -204,6 +205,9 @@ private void visitScript(NodeTraversal t, Node script) {\n      */\n     private void emitOptionalModuleExportsOverride(Node script,\n         String moduleName) {\n    if (!modulesWithExports.contains(moduleName)) {\n      return;\n    }\n \n       Node moduleExportsProp = IR.getprop(IR.name(moduleName),\n           IR.string(\"module$exports\"));\n@@ -225,6 +229,7 @@ private void visitModuleExports(Node prop) {\n       Node exports = prop.getChildAtIndex(1);\n       exports.putProp(Node.ORIGINALNAME_PROP, \"exports\");\n       exports.setString(\"module$exports\");\n    modulesWithExports.add(moduleName);\n     }\n \n     /**\n","CodeWithNoComments":"\n       AbstractPostOrderCallback {\n \n     private int scriptNodeCount = 0;\n \n     @Override\n     public void visit(NodeTraversal t, Node n, Node parent) {\n\n      \n     private void emitOptionalModuleExportsOverride(Node script,\n         String moduleName) {\n \n       Node moduleExportsProp = IR.getprop(IR.name(moduleName),\n           IR.string(\"module$exports\"));\n\n       Node exports = prop.getChildAtIndex(1);\n       exports.putProp(Node.ORIGINALNAME_PROP, \"exports\");\n       exports.setString(\"module$exports\");\n     }\n","SolutionWithNoComments":"\n       AbstractPostOrderCallback {\n \n     private int scriptNodeCount = 0;\n    private Set<String> modulesWithExports = Sets.newHashSet();\n \n     @Override\n     public void visit(NodeTraversal t, Node n, Node parent) {\n\n      \n     private void emitOptionalModuleExportsOverride(Node script,\n         String moduleName) {\n      if (!modulesWithExports.contains(moduleName)) {\n        return;\n      }\n \n       Node moduleExportsProp = IR.getprop(IR.name(moduleName),\n           IR.string(\"module$exports\"));\n\n       Node exports = prop.getChildAtIndex(1);\n       exports.putProp(Node.ORIGINALNAME_PROP, \"exports\");\n       exports.setString(\"module$exports\");\n      modulesWithExports.add(moduleName);\n     }\n \n"},{"ids":52,"error":"junit.framework.ComparisonFailure","source":"/src/com/google/javascript/jscomp/TypeInference.java","code":"@@ -1033,9 +1033,9 @@ private void updateTypeOfThisOnClosure(Node n, FunctionType fnType) {\n   }\n \n   private FlowScope traverseNew(Node n, FlowScope scope) {\n \n     Node constructor = n.getFirstChild();\n  scope = traverse(constructor, scope);\n     JSType constructorType = constructor.getJSType();\n     JSType type = null;\n     if (constructorType != null) {\n@@ -1052,13 +1052,11 @@ private FlowScope traverseNew(Node n, FlowScope scope) {\n         }\n         if (ct != null && ct.isConstructor()) {\n           type = ct.getInstanceType();\n         }\n       }\n     }\n     n.setJSType(type);\n  for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n    scope = traverse(arg, scope);\n  }\n     return scope;\n   }\n \n","solution":"@@ -1033,9 +1033,9 @@ private void updateTypeOfThisOnClosure(Node n, FunctionType fnType) {\n   }\n \n   private FlowScope traverseNew(Node n, FlowScope scope) {\n  scope = traverseChildren(n, scope);\n \n     Node constructor = n.getFirstChild();\n     JSType constructorType = constructor.getJSType();\n     JSType type = null;\n     if (constructorType != null) {\n@@ -1052,13 +1052,11 @@ private FlowScope traverseNew(Node n, FlowScope scope) {\n         }\n         if (ct != null && ct.isConstructor()) {\n           type = ct.getInstanceType();\n        backwardsInferenceFromCallSite(n, ct);\n         }\n       }\n     }\n     n.setJSType(type);\n     return scope;\n   }\n \n","CodeWithNoComments":"\n   }\n \n   private FlowScope traverseNew(Node n, FlowScope scope) {\n \n     Node constructor = n.getFirstChild();\n    scope = traverse(constructor, scope);\n     JSType constructorType = constructor.getJSType();\n     JSType type = null;\n     if (constructorType != null) {\n\n         }\n         if (ct != null && ct.isConstructor()) {\n           type = ct.getInstanceType();\n         }\n       }\n     }\n     n.setJSType(type);\n    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n      scope = traverse(arg, scope);\n    }\n     return scope;\n   }\n \n","SolutionWithNoComments":"\n   }\n \n   private FlowScope traverseNew(Node n, FlowScope scope) {\n    scope = traverseChildren(n, scope);\n \n     Node constructor = n.getFirstChild();\n     JSType constructorType = constructor.getJSType();\n     JSType type = null;\n     if (constructorType != null) {\n\n         }\n         if (ct != null && ct.isConstructor()) {\n           type = ct.getInstanceType();\n          backwardsInferenceFromCallSite(n, ct);\n         }\n       }\n     }\n     n.setJSType(type);\n     return scope;\n   }\n \n"},{"ids":53,"error":"java.lang.IllegalStateException","source":"/src/com/google/javascript/rhino/IR.java","code":"@@ -108,6 +108,9 @@ public static Node block(Node ... stmts) {\n     return block;\n   }\n \n \n   public static Node script(Node ... stmts) {\n     // TODO(johnlenz): finish setting up the SCRIPT node\n@@ -221,8 +224,8 @@ public static Node labelName(String name) {\n   }\n \n   public static Node tryFinally(Node tryBody, Node finallyBody) {\n  Preconditions.checkState(tryBody.isLabelName());\n  Preconditions.checkState(finallyBody.isLabelName());\n     Node catchBody = block().copyInformationFrom(tryBody);\n     return new Node(Token.TRY, tryBody, catchBody, finallyBody);\n   }\n@@ -230,7 +233,7 @@ public static Node tryFinally(Node tryBody, Node finallyBody) {\n   public static Node tryCatch(Node tryBody, Node catchNode) {\n     Preconditions.checkState(tryBody.isBlock());\n     Preconditions.checkState(catchNode.isCatch());\n  Node catchBody = block(catchNode).copyInformationFrom(catchNode);\n     return new Node(Token.TRY, tryBody, catchBody);\n   }\n \n","solution":"@@ -108,6 +108,9 @@ public static Node block(Node ... stmts) {\n     return block;\n   }\n \nprivate static Node blockUnchecked(Node stmt) {\n  return new Node(Token.BLOCK, stmt);\n}\n \n   public static Node script(Node ... stmts) {\n     // TODO(johnlenz): finish setting up the SCRIPT node\n@@ -221,8 +224,8 @@ public static Node labelName(String name) {\n   }\n \n   public static Node tryFinally(Node tryBody, Node finallyBody) {\n  Preconditions.checkState(tryBody.isBlock());\n  Preconditions.checkState(finallyBody.isBlock());\n     Node catchBody = block().copyInformationFrom(tryBody);\n     return new Node(Token.TRY, tryBody, catchBody, finallyBody);\n   }\n@@ -230,7 +233,7 @@ public static Node tryFinally(Node tryBody, Node finallyBody) {\n   public static Node tryCatch(Node tryBody, Node catchNode) {\n     Preconditions.checkState(tryBody.isBlock());\n     Preconditions.checkState(catchNode.isCatch());\n  Node catchBody = blockUnchecked(catchNode).copyInformationFrom(catchNode);\n     return new Node(Token.TRY, tryBody, catchBody);\n   }\n \n","CodeWithNoComments":"\n     return block;\n   }\n \n \n   public static Node script(Node ... stmts) {\n     \n   }\n \n   public static Node tryFinally(Node tryBody, Node finallyBody) {\n    Preconditions.checkState(tryBody.isLabelName());\n    Preconditions.checkState(finallyBody.isLabelName());\n     Node catchBody = block().copyInformationFrom(tryBody);\n     return new Node(Token.TRY, tryBody, catchBody, finallyBody);\n   }\n\n   public static Node tryCatch(Node tryBody, Node catchNode) {\n     Preconditions.checkState(tryBody.isBlock());\n     Preconditions.checkState(catchNode.isCatch());\n    Node catchBody = block(catchNode).copyInformationFrom(catchNode);\n     return new Node(Token.TRY, tryBody, catchBody);\n   }\n \n","SolutionWithNoComments":"\n     return block;\n   }\n \n  private static Node blockUnchecked(Node stmt) {\n    return new Node(Token.BLOCK, stmt);\n  }\n \n   public static Node script(Node ... stmts) {\n     \n   }\n \n   public static Node tryFinally(Node tryBody, Node finallyBody) {\n    Preconditions.checkState(tryBody.isBlock());\n    Preconditions.checkState(finallyBody.isBlock());\n     Node catchBody = block().copyInformationFrom(tryBody);\n     return new Node(Token.TRY, tryBody, catchBody, finallyBody);\n   }\n\n   public static Node tryCatch(Node tryBody, Node catchNode) {\n     Preconditions.checkState(tryBody.isBlock());\n     Preconditions.checkState(catchNode.isCatch());\n    Node catchBody = blockUnchecked(catchNode).copyInformationFrom(catchNode);\n     return new Node(Token.TRY, tryBody, catchBody);\n   }\n \n"},{"ids":54,"error":"junit.framework.AssertionFailedError","source":"/src/com/google/javascript/jscomp/InlineObjectLiterals.java","code":"@@ -154,6 +154,7 @@ private boolean isVarInlineForbidden(Var var) {\n      */\n     private boolean isInlinableObject(List<Reference> refs) {\n       boolean ret = false;\n       for (Reference ref : refs) {\n         Node name = ref.getNode();\n         Node parent = ref.getParent();\n@@ -178,6 +179,14 @@ private boolean isInlinableObject(List<Reference> refs) {\n           // We short-circuit this problem by bailing out if we see a reference\n           // to a property that isn't defined on the object literal. This\n           // isn't a perfect algorithm, but it should catch most cases.\n           continue;\n         }\n \n@@ -213,6 +222,7 @@ private boolean isInlinableObject(List<Reference> refs) {\n             return false;\n           }\n \n \n           Node childVal = child.getFirstChild();\n           // Check if childVal is the parent of any of the passed in\n","solution":"@@ -154,6 +154,7 @@ private boolean isVarInlineForbidden(Var var) {\n      */\n     private boolean isInlinableObject(List<Reference> refs) {\n       boolean ret = false;\n    Set<String> validProperties = Sets.newHashSet();\n       for (Reference ref : refs) {\n         Node name = ref.getNode();\n         Node parent = ref.getParent();\n@@ -178,6 +179,14 @@ private boolean isInlinableObject(List<Reference> refs) {\n           // We short-circuit this problem by bailing out if we see a reference\n           // to a property that isn't defined on the object literal. This\n           // isn't a perfect algorithm, but it should catch most cases.\n        String propName = parent.getLastChild().getString();\n        if (!validProperties.contains(propName)) {\n          if (NodeUtil.isVarOrSimpleAssignLhs(parent, gramps)) {\n            validProperties.add(propName);\n          } else {\n            return false;\n          }\n        }\n           continue;\n         }\n \n@@ -213,6 +222,7 @@ private boolean isInlinableObject(List<Reference> refs) {\n             return false;\n           }\n \n        validProperties.add(child.getString());\n \n           Node childVal = child.getFirstChild();\n           // Check if childVal is the parent of any of the passed in\n","CodeWithNoComments":"\n      \n     private boolean isInlinableObject(List<Reference> refs) {\n       boolean ret = false;\n       for (Reference ref : refs) {\n         Node name = ref.getNode();\n         Node parent = ref.getParent();\n\n                                            continue;\n         }\n \n\n             return false;\n           }\n \n \n           Node childVal = child.getFirstChild();\n           ","SolutionWithNoComments":"\n      \n     private boolean isInlinableObject(List<Reference> refs) {\n       boolean ret = false;\n      Set<String> validProperties = Sets.newHashSet();\n       for (Reference ref : refs) {\n         Node name = ref.getNode();\n         Node parent = ref.getParent();\n\n                                           String propName = parent.getLastChild().getString();\n          if (!validProperties.contains(propName)) {\n            if (NodeUtil.isVarOrSimpleAssignLhs(parent, gramps)) {\n              validProperties.add(propName);\n            } else {\n              return false;\n            }\n          }\n           continue;\n         }\n \n\n             return false;\n           }\n \n          validProperties.add(child.getString());\n \n           Node childVal = child.getFirstChild();\n           "},{"ids":55,"error":"junit.framework.AssertionFailedError","source":"/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java","code":"@@ -154,7 +154,7 @@ public void exitScope(NodeTraversal t) {}\n \n   @Override\n   public void process(Node externs, Node root) {\n  (new NodeTraversal(compiler, this)).traverse(root);\n   }\n \n   @Override\n/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java @@ -68,6 +68,7 @@\n   private static class Definition {\n     final Node node;\n     final Set<Var> depends = Sets.newHashSet();\n \n     Definition(Node node) {\n       this.node = node;\n@@ -393,9 +394,13 @@ private void computeDependence(final Definition def, Node rValue) {\n         new AbstractCfgNodeTraversalCallback() {\n       @Override\n       public void visit(NodeTraversal t, Node n, Node parent) {\n      if (n.isName() && jsScope.isDeclared(n.getString(), true)) {\n           Var dep = jsScope.getVar(n.getString());\n             def.depends.add(dep);\n         }\n       }\n     });\n@@ -427,6 +432,9 @@ boolean dependsOnOuterScopeVars(String name, Node useNode) {\n     GraphNode<Node, Branch> n = getCfg().getNode(useNode);\n     FlowState<MustDef> state = n.getAnnotation();\n     Definition def = state.getIn().reachingDef.get(jsScope.getVar(name));\n \n     for (Var s : def.depends) {\n       if (s.scope != jsScope) {\n","solution":"@@ -154,7 +154,7 @@ public void exitScope(NodeTraversal t) {}\n \n   @Override\n   public void process(Node externs, Node root) {\n  (new NodeTraversal(compiler, this)).traverseRoots(externs, root);\n   }\n \n   @Override\n/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java @@ -68,6 +68,7 @@\n   private static class Definition {\n     final Node node;\n     final Set<Var> depends = Sets.newHashSet();\n  private boolean unknownDependencies = false;\n \n     Definition(Node node) {\n       this.node = node;\n@@ -393,9 +394,13 @@ private void computeDependence(final Definition def, Node rValue) {\n         new AbstractCfgNodeTraversalCallback() {\n       @Override\n       public void visit(NodeTraversal t, Node n, Node parent) {\n      if (n.isName()) {\n           Var dep = jsScope.getVar(n.getString());\n        if (dep == null) {\n          def.unknownDependencies = true;\n        } else {\n             def.depends.add(dep);\n        }\n         }\n       }\n     });\n@@ -427,6 +432,9 @@ boolean dependsOnOuterScopeVars(String name, Node useNode) {\n     GraphNode<Node, Branch> n = getCfg().getNode(useNode);\n     FlowState<MustDef> state = n.getAnnotation();\n     Definition def = state.getIn().reachingDef.get(jsScope.getVar(name));\n  if (def.unknownDependencies) {\n    return true;\n  }\n \n     for (Var s : def.depends) {\n       if (s.scope != jsScope) {\n","CodeWithNoComments":"\n \n   @Override\n   public void process(Node externs, Node root) {\n    (new NodeTraversal(compiler, this)).traverse(root);\n   }\n \n   @Override\n\n   private static class Definition {\n     final Node node;\n     final Set<Var> depends = Sets.newHashSet();\n \n     Definition(Node node) {\n       this.node = node;\n\n         new AbstractCfgNodeTraversalCallback() {\n       @Override\n       public void visit(NodeTraversal t, Node n, Node parent) {\n        if (n.isName() && jsScope.isDeclared(n.getString(), true)) {\n           Var dep = jsScope.getVar(n.getString());\n             def.depends.add(dep);\n         }\n       }\n     });\n\n     GraphNode<Node, Branch> n = getCfg().getNode(useNode);\n     FlowState<MustDef> state = n.getAnnotation();\n     Definition def = state.getIn().reachingDef.get(jsScope.getVar(name));\n \n     for (Var s : def.depends) {\n       if (s.scope != jsScope) {\n","SolutionWithNoComments":"\n \n   @Override\n   public void process(Node externs, Node root) {\n    (new NodeTraversal(compiler, this)).traverseRoots(externs, root);\n   }\n \n   @Override\n\n   private static class Definition {\n     final Node node;\n     final Set<Var> depends = Sets.newHashSet();\n    private boolean unknownDependencies = false;\n \n     Definition(Node node) {\n       this.node = node;\n\n         new AbstractCfgNodeTraversalCallback() {\n       @Override\n       public void visit(NodeTraversal t, Node n, Node parent) {\n        if (n.isName()) {\n           Var dep = jsScope.getVar(n.getString());\n          if (dep == null) {\n            def.unknownDependencies = true;\n          } else {\n             def.depends.add(dep);\n          }\n         }\n       }\n     });\n\n     GraphNode<Node, Branch> n = getCfg().getNode(useNode);\n     FlowState<MustDef> state = n.getAnnotation();\n     Definition def = state.getIn().reachingDef.get(jsScope.getVar(name));\n    if (def.unknownDependencies) {\n      return true;\n    }\n \n     for (Var s : def.depends) {\n       if (s.scope != jsScope) {\n"},{"ids":56,"error":"junit.framework.AssertionFailedError","source":"/src/com/google/javascript/jscomp/Compiler.java","code":"@@ -1282,7 +1282,6 @@ Node parseInputs() {\n \n       // Check if the sources need to be re-ordered.\n       if (options.dependencyOptions.needsManagement() &&\n        !options.skipAllPasses &&\n           options.closurePass) {\n         for (CompilerInput input : inputs) {\n           // Forward-declare all the provided types, so that they\n","solution":"@@ -1282,7 +1282,6 @@ Node parseInputs() {\n \n       // Check if the sources need to be re-ordered.\n       if (options.dependencyOptions.needsManagement() &&\n           options.closurePass) {\n         for (CompilerInput input : inputs) {\n           // Forward-declare all the provided types, so that they\n","CodeWithNoComments":"\n \n              if (options.dependencyOptions.needsManagement() &&\n          !options.skipAllPasses &&\n           options.closurePass) {\n         for (CompilerInput input : inputs) {\n           ","SolutionWithNoComments":"\n \n              if (options.dependencyOptions.needsManagement() &&\n           options.closurePass) {\n         for (CompilerInput input : inputs) {\n           "},{"ids":57,"error":"junit.framework.ComparisonFailure","source":"/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java","code":"@@ -1355,12 +1355,14 @@ private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,\n     // Track the start of the line to count whitespace that\n     // the tokenizer skipped. Because this case is rare, it's easier\n     // to do this here than in the tokenizer.\n \n     do {\n       switch (token) {\n         case STAR:\n           if (ignoreStar) {\n             // Mark the position after the star as the new start of the line.\n           } else {\n             // The star is part of the comment.\n             if (builder.length() > 0) {\n@@ -1379,6 +1381,7 @@ private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,\n           }\n \n           ignoreStar = true;\n           token = next();\n           continue;\n \n@@ -1386,7 +1389,19 @@ private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,\n           ignoreStar = false;\n           state = State.SEARCHING_ANNOTATION;\n \n               // All tokens must be separated by a space.\n \n           if (token == JsDocToken.EOC ||\n               token == JsDocToken.EOF ||\n@@ -1411,9 +1426,6 @@ private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,\n             return new ExtractionInfo(multilineText, token);\n           }\n \n        if (builder.length() > 0) {\n          builder.append(' ');\n        }\n           builder.append(toString(token));\n \n           line = stream.getRemainingJSDocLine();\n","solution":"@@ -1355,12 +1355,14 @@ private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,\n     // Track the start of the line to count whitespace that\n     // the tokenizer skipped. Because this case is rare, it's easier\n     // to do this here than in the tokenizer.\n  int lineStartChar = -1;\n \n     do {\n       switch (token) {\n         case STAR:\n           if (ignoreStar) {\n             // Mark the position after the star as the new start of the line.\n          lineStartChar = stream.getCharno() + 1;\n           } else {\n             // The star is part of the comment.\n             if (builder.length() > 0) {\n@@ -1379,6 +1381,7 @@ private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,\n           }\n \n           ignoreStar = true;\n        lineStartChar = 0;\n           token = next();\n           continue;\n \n@@ -1386,7 +1389,19 @@ private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,\n           ignoreStar = false;\n           state = State.SEARCHING_ANNOTATION;\n \n        boolean isEOC = token == JsDocToken.EOC;\n        if (!isEOC) {\n          if (lineStartChar != -1 && option == WhitespaceOption.PRESERVE) {\n            int numSpaces = stream.getCharno() - lineStartChar;\n            for (int i = 0; i < numSpaces; i++) {\n              builder.append(' ');\n            }\n            lineStartChar = -1;\n          } else if (builder.length() > 0) {\n               // All tokens must be separated by a space.\n            builder.append(' ');\n          }\n        }\n \n           if (token == JsDocToken.EOC ||\n               token == JsDocToken.EOF ||\n@@ -1411,9 +1426,6 @@ private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,\n             return new ExtractionInfo(multilineText, token);\n           }\n \n           builder.append(toString(token));\n \n           line = stream.getRemainingJSDocLine();\n","CodeWithNoComments":"\n                \n     do {\n       switch (token) {\n         case STAR:\n           if (ignoreStar) {\n                        } else {\n                          if (builder.length() > 0) {\n\n           }\n \n           ignoreStar = true;\n           token = next();\n           continue;\n \n\n           ignoreStar = false;\n           state = State.SEARCHING_ANNOTATION;\n \n                \n           if (token == JsDocToken.EOC ||\n               token == JsDocToken.EOF ||\n\n             return new ExtractionInfo(multilineText, token);\n           }\n \n          if (builder.length() > 0) {\n            builder.append(' ');\n          }\n           builder.append(toString(token));\n \n           line = stream.getRemainingJSDocLine();\n","SolutionWithNoComments":"\n                   int lineStartChar = -1;\n \n     do {\n       switch (token) {\n         case STAR:\n           if (ignoreStar) {\n                         lineStartChar = stream.getCharno() + 1;\n           } else {\n                          if (builder.length() > 0) {\n\n           }\n \n           ignoreStar = true;\n          lineStartChar = 0;\n           token = next();\n           continue;\n \n\n           ignoreStar = false;\n           state = State.SEARCHING_ANNOTATION;\n \n          boolean isEOC = token == JsDocToken.EOC;\n          if (!isEOC) {\n            if (lineStartChar != -1 && option == WhitespaceOption.PRESERVE) {\n              int numSpaces = stream.getCharno() - lineStartChar;\n              for (int i = 0; i < numSpaces; i++) {\n                builder.append(' ');\n              }\n              lineStartChar = -1;\n            } else if (builder.length() > 0) {\n                             builder.append(' ');\n            }\n          }\n \n           if (token == JsDocToken.EOC ||\n               token == JsDocToken.EOF ||\n\n             return new ExtractionInfo(multilineText, token);\n           }\n \n           builder.append(toString(token));\n \n           line = stream.getRemainingJSDocLine();\n"},{"ids":58,"error":"junit.framework.AssertionFailedError","source":"/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java","code":"@@ -554,6 +554,9 @@ JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {\n   @Override\n   public void matchConstraint(ObjectType constraintObj) {\n     // We only want to match contraints on anonymous types.\n \n     // Handle the case where the constraint object is a record type.\n     //\n","solution":"@@ -554,6 +554,9 @@ JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {\n   @Override\n   public void matchConstraint(ObjectType constraintObj) {\n     // We only want to match contraints on anonymous types.\n  if (hasReferenceName()) {\n    return;\n  }\n \n     // Handle the case where the constraint object is a record type.\n     //\n","CodeWithNoComments":"\n   @Override\n   public void matchConstraint(ObjectType constraintObj) {\n      \n          ","SolutionWithNoComments":"\n   @Override\n   public void matchConstraint(ObjectType constraintObj) {\n         if (hasReferenceName()) {\n      return;\n    }\n \n          "},{"ids":59,"error":"junit.framework.AssertionFailedError","source":"/src/com/google/javascript/jscomp/InlineCostEstimator.java","code":"@@ -99,5 +99,9 @@ void addIdentifier(String identifier) {\n      * Constants (true, false, null) are considered basically free,\n      * because it's likely that they will get folded when we're done.\n      */\n   }\n }\n","solution":"@@ -99,5 +99,9 @@ void addIdentifier(String identifier) {\n      * Constants (true, false, null) are considered basically free,\n      * because it's likely that they will get folded when we're done.\n      */\n  @Override\n  void addConstant(String newcode) {\n    add(\"0\");\n  }\n   }\n }\n","CodeWithNoComments":"\n }\n","SolutionWithNoComments":"\n    void addConstant(String newcode) {\n      add(\"0\");\n    }\n   }\n }\n"},{"ids":60,"error":"java.lang.StackOverflowError","source":"/src/com/google/javascript/jscomp/CodeGenerator.java","code":"@@ -119,9 +119,7 @@ void add(Node n, Context context) {\n         cc.addOp(opstr, true);\n         addExpr(last, p, rhsContext);\n       } else {\n      addExpr(first, p, context);\n      cc.addOp(opstr, true);\n      addExpr(last, p + 1, rhsContext);\n       }\n       return;\n     }\n@@ -751,7 +749,7 @@ private void unrollBinaryOperator(\n     Node current = firstNonOperator;\n     do {\n       current = current.getParent();\n    cc.listSeparator();\n       addExpr(current.getFirstChild().getNext(), rightPrecedence, rhsContext);\n     } while (current != n);\n   }\n/src/com/google/javascript/jscomp/CodePrinter.java @@ -331,7 +331,7 @@ void endCaseBody() {\n     @Override\n     void appendOp(String op, boolean binOp) {\n       if (binOp) {\n      if (getLastChar() != ' ') {\n           append(\" \");\n         }\n         append(op);\n","solution":"@@ -119,9 +119,7 @@ void add(Node n, Context context) {\n         cc.addOp(opstr, true);\n         addExpr(last, p, rhsContext);\n       } else {\n      unrollBinaryOperator(n, type, opstr, context, rhsContext, p, p + 1);\n       }\n       return;\n     }\n@@ -751,7 +749,7 @@ private void unrollBinaryOperator(\n     Node current = firstNonOperator;\n     do {\n       current = current.getParent();\n    cc.addOp(opStr, true);\n       addExpr(current.getFirstChild().getNext(), rightPrecedence, rhsContext);\n     } while (current != n);\n   }\n/src/com/google/javascript/jscomp/CodePrinter.java @@ -331,7 +331,7 @@ void endCaseBody() {\n     @Override\n     void appendOp(String op, boolean binOp) {\n       if (binOp) {\n      if (getLastChar() != ' ' && op.charAt(0) != ',') {\n           append(\" \");\n         }\n         append(op);\n","CodeWithNoComments":"\n         cc.addOp(opstr, true);\n         addExpr(last, p, rhsContext);\n       } else {\n        addExpr(first, p, context);\n        cc.addOp(opstr, true);\n        addExpr(last, p + 1, rhsContext);\n       }\n       return;\n     }\n\n     Node current = firstNonOperator;\n     do {\n       current = current.getParent();\n      cc.listSeparator();\n       addExpr(current.getFirstChild().getNext(), rightPrecedence, rhsContext);\n     } while (current != n);\n   }\n\n     @Override\n     void appendOp(String op, boolean binOp) {\n       if (binOp) {\n        if (getLastChar() != ' ') {\n           append(\" \");\n         }\n         append(op);\n","SolutionWithNoComments":"\n         cc.addOp(opstr, true);\n         addExpr(last, p, rhsContext);\n       } else {\n        unrollBinaryOperator(n, type, opstr, context, rhsContext, p, p + 1);\n       }\n       return;\n     }\n\n     Node current = firstNonOperator;\n     do {\n       current = current.getParent();\n      cc.addOp(opStr, true);\n       addExpr(current.getFirstChild().getNext(), rightPrecedence, rhsContext);\n     } while (current != n);\n   }\n\n     @Override\n     void appendOp(String op, boolean binOp) {\n       if (binOp) {\n        if (getLastChar() != ' ' && op.charAt(0) != ',') {\n           append(\" \");\n         }\n         append(op);\n"},{"ids":61,"error":"junit.framework.AssertionFailedError","source":"/src/com/google/javascript/jscomp/TypeInference.java","code":"@@ -1118,21 +1118,8 @@ private void inferPropertyTypesToMatchConstraint(\n \n     ObjectType constraintObj =\n         ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n  if (constraintObj != null && constraintObj.isRecordType()) {\n    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n    if (objType != null) {\n      for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!objType.isPropertyTypeDeclared(prop)) {\n          JSType typeToInfer = propType;\n          if (!objType.hasProperty(prop)) {\n            typeToInfer =\n                getNativeType(VOID_TYPE).getLeastSupertype(propType);\n          }\n          objType.defineInferredProperty(prop, typeToInfer, null);\n        }\n      }\n    }\n     }\n   }\n \n","solution":"@@ -1118,21 +1118,8 @@ private void inferPropertyTypesToMatchConstraint(\n \n     ObjectType constraintObj =\n         ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n  if (constraintObj != null) {\n    type.matchConstraint(constraintObj);\n     }\n   }\n \n","CodeWithNoComments":"\n \n     ObjectType constraintObj =\n         ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n    if (constraintObj != null && constraintObj.isRecordType()) {\n      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n      if (objType != null) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n          JSType propType = constraintObj.getPropertyType(prop);\n          if (!objType.isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!objType.hasProperty(prop)) {\n              typeToInfer =\n                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n            }\n            objType.defineInferredProperty(prop, typeToInfer, null);\n          }\n        }\n      }\n     }\n   }\n \n","SolutionWithNoComments":"\n \n     ObjectType constraintObj =\n         ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n    if (constraintObj != null) {\n      type.matchConstraint(constraintObj);\n     }\n   }\n \n"},{"ids":62,"error":"java.lang.RuntimeException","source":"/src/com/google/javascript/jscomp/NodeTraversal.java","code":"@@ -538,7 +538,7 @@ private void traverseFunction(Node n, Node parent) {\n \n     // Body\n     Preconditions.checkState(body.getNext() == null &&\n          body.isBlock());\n     traverseBranch(body, n);\n \n     popScope();\n/src/com/google/javascript/jscomp/parsing/IRFactory.java @@ -664,9 +664,13 @@ Node processFunctionNode(FunctionNode functionNode) {\n       node.addChildToBack(lp);\n \n       Node bodyNode = transform(functionNode.getBody());\n         // When in ideMode Rhino tries to parse some constructs the compiler\n         // doesn't support, repair it here. see Rhino's\n         // Parser#parseFunctionBodyExpr.\n       parseDirectives(bodyNode);\n       node.addChildToBack(bodyNode);\n      return node;\n","solution":"@@ -538,7 +538,7 @@ private void traverseFunction(Node n, Node parent) {\n \n     // Body\n     Preconditions.checkState(body.getNext() == null &&\n          body.isBlock(), body);\n     traverseBranch(body, n);\n \n     popScope();\n/src/com/google/javascript/jscomp/parsing/IRFactory.java @@ -664,9 +664,13 @@ Node processFunctionNode(FunctionNode functionNode) {\n       node.addChildToBack(lp);\n \n       Node bodyNode = transform(functionNode.getBody());\n    if (!bodyNode.isBlock()) {\n         // When in ideMode Rhino tries to parse some constructs the compiler\n         // doesn't support, repair it here. see Rhino's\n         // Parser#parseFunctionBodyExpr.\n      Preconditions.checkState(config.isIdeMode);\n      bodyNode = IR.block();\n    }\n       parseDirectives(bodyNode);\n       node.addChildToBack(bodyNode);\n      return node;\n","CodeWithNoComments":"\n \n          Preconditions.checkState(body.getNext() == null &&\n            body.isBlock());\n     traverseBranch(body, n);\n \n     popScope();\n\n       node.addChildToBack(lp);\n \n       Node bodyNode = transform(functionNode.getBody());\n                                  parseDirectives(bodyNode);\n       node.addChildToBack(bodyNode);\n      return node;\n","SolutionWithNoComments":"\n \n          Preconditions.checkState(body.getNext() == null &&\n            body.isBlock(), body);\n     traverseBranch(body, n);\n \n     popScope();\n\n       node.addChildToBack(lp);\n \n       Node bodyNode = transform(functionNode.getBody());\n      if (!bodyNode.isBlock()) {\n                                   Preconditions.checkState(config.isIdeMode);\n        bodyNode = IR.block();\n      }\n       parseDirectives(bodyNode);\n       node.addChildToBack(bodyNode);\n      return node;\n"},{"ids":63,"error":"junit.framework.AssertionFailedError","source":"/src/com/google/javascript/jscomp/InlineVariables.java","code":"@@ -572,6 +572,9 @@ private boolean canInline(\n \n           // issue 668: Don't inline singleton getter methods\n           // calls as this confused class removing logic.\n         }\n       }\n \n","solution":"@@ -572,6 +572,9 @@ private boolean canInline(\n \n           // issue 668: Don't inline singleton getter methods\n           // calls as this confused class removing logic.\n        if (convention.getSingletonGetterClassName(callNode) != null) {\n          return false;\n        }\n         }\n       }\n \n","CodeWithNoComments":"\n \n                               }\n       }\n \n","SolutionWithNoComments":"\n \n                                if (convention.getSingletonGetterClassName(callNode) != null) {\n            return false;\n          }\n         }\n       }\n \n"},{"ids":64,"error":"junit.framework.ComparisonFailure","source":"/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java","code":"@@ -377,10 +377,10 @@ String toStringHelper(boolean forAnnotations) {\n \n         sb.append(property);\n         sb.append(\": \");\n      sb.append(getPropertyType(property).toString());\n \n         ++i;\n      if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n           sb.append(\", ...\");\n           break;\n         }\n@@ -391,7 +391,7 @@ String toStringHelper(boolean forAnnotations) {\n       prettyPrint = true;\n       return sb.toString();\n     } else {\n    return \"{...}\";\n     }\n   }\n \n","solution":"@@ -377,10 +377,10 @@ String toStringHelper(boolean forAnnotations) {\n \n         sb.append(property);\n         sb.append(\": \");\n      sb.append(getPropertyType(property).toStringHelper(forAnnotations));\n \n         ++i;\n      if (!forAnnotations && i == MAX_PRETTY_PRINTED_PROPERTIES) {\n           sb.append(\", ...\");\n           break;\n         }\n@@ -391,7 +391,7 @@ String toStringHelper(boolean forAnnotations) {\n       prettyPrint = true;\n       return sb.toString();\n     } else {\n    return forAnnotations ? \"?\" : \"{...}\";\n     }\n   }\n \n","CodeWithNoComments":"\n \n         sb.append(property);\n         sb.append(\": \");\n        sb.append(getPropertyType(property).toString());\n \n         ++i;\n        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n           sb.append(\", ...\");\n           break;\n         }\n\n       prettyPrint = true;\n       return sb.toString();\n     } else {\n      return \"{...}\";\n     }\n   }\n \n","SolutionWithNoComments":"\n \n         sb.append(property);\n         sb.append(\": \");\n        sb.append(getPropertyType(property).toStringHelper(forAnnotations));\n \n         ++i;\n        if (!forAnnotations && i == MAX_PRETTY_PRINTED_PROPERTIES) {\n           sb.append(\", ...\");\n           break;\n         }\n\n       prettyPrint = true;\n       return sb.toString();\n     } else {\n      return forAnnotations ? \"?\" : \"{...}\";\n     }\n   }\n \n"},{"ids":65,"error":"junit.framework.AssertionFailedError","source":"/src/com/google/javascript/jscomp/RemoveUnusedVars.java","code":"@@ -729,6 +729,7 @@ private void interpretAssigns() {\n             assignedToUnknownValue = true;\n           }\n \n           for (Assign assign : assignsByVar.get(var)) {\n             if (assign.isPropertyAssign) {\n               hasPropertyAssign = true;\n@@ -736,9 +737,12 @@ private void interpretAssigns() {\n                 assign.assignNode.getLastChild(), true)) {\n               assignedToUnknownValue = true;\n             }\n           }\n \n        if (assignedToUnknownValue && hasPropertyAssign) {\n             changes = markReferencedVar(var) || changes;\n             maybeUnreferenced.remove(current);\n             current--;\n@@ -901,7 +905,7 @@ void apply() {\n       this.nameNode = nameNode;\n       this.isPropertyAssign = isPropertyAssign;\n \n    this.maybeAliased = !assignNode.getParent().isExprResult();\n       this.mayHaveSecondarySideEffects =\n           maybeAliased ||\n           NodeUtil.mayHaveSideEffects(assignNode.getFirstChild()) ||\n","solution":"@@ -729,6 +729,7 @@ private void interpretAssigns() {\n             assignedToUnknownValue = true;\n           }\n \n        boolean maybeEscaped = false;\n           for (Assign assign : assignsByVar.get(var)) {\n             if (assign.isPropertyAssign) {\n               hasPropertyAssign = true;\n@@ -736,9 +737,12 @@ private void interpretAssigns() {\n                 assign.assignNode.getLastChild(), true)) {\n               assignedToUnknownValue = true;\n             }\n          if (assign.maybeAliased) {\n            maybeEscaped = true;\n          }\n           }\n \n        if ((assignedToUnknownValue || maybeEscaped) && hasPropertyAssign) {\n             changes = markReferencedVar(var) || changes;\n             maybeUnreferenced.remove(current);\n             current--;\n@@ -901,7 +905,7 @@ void apply() {\n       this.nameNode = nameNode;\n       this.isPropertyAssign = isPropertyAssign;\n \n    this.maybeAliased = NodeUtil.isExpressionResultUsed(assignNode);\n       this.mayHaveSecondarySideEffects =\n           maybeAliased ||\n           NodeUtil.mayHaveSideEffects(assignNode.getFirstChild()) ||\n","CodeWithNoComments":"\n             assignedToUnknownValue = true;\n           }\n \n           for (Assign assign : assignsByVar.get(var)) {\n             if (assign.isPropertyAssign) {\n               hasPropertyAssign = true;\n\n                 assign.assignNode.getLastChild(), true)) {\n               assignedToUnknownValue = true;\n             }\n           }\n \n          if (assignedToUnknownValue && hasPropertyAssign) {\n             changes = markReferencedVar(var) || changes;\n             maybeUnreferenced.remove(current);\n             current--;\n\n       this.nameNode = nameNode;\n       this.isPropertyAssign = isPropertyAssign;\n \n      this.maybeAliased = !assignNode.getParent().isExprResult();\n       this.mayHaveSecondarySideEffects =\n           maybeAliased ||\n           NodeUtil.mayHaveSideEffects(assignNode.getFirstChild()) ||\n","SolutionWithNoComments":"\n             assignedToUnknownValue = true;\n           }\n \n          boolean maybeEscaped = false;\n           for (Assign assign : assignsByVar.get(var)) {\n             if (assign.isPropertyAssign) {\n               hasPropertyAssign = true;\n\n                 assign.assignNode.getLastChild(), true)) {\n               assignedToUnknownValue = true;\n             }\n            if (assign.maybeAliased) {\n              maybeEscaped = true;\n            }\n           }\n \n          if ((assignedToUnknownValue || maybeEscaped) && hasPropertyAssign) {\n             changes = markReferencedVar(var) || changes;\n             maybeUnreferenced.remove(current);\n             current--;\n\n       this.nameNode = nameNode;\n       this.isPropertyAssign = isPropertyAssign;\n \n      this.maybeAliased = NodeUtil.isExpressionResultUsed(assignNode);\n       this.mayHaveSecondarySideEffects =\n           maybeAliased ||\n           NodeUtil.mayHaveSideEffects(assignNode.getFirstChild()) ||\n"},{"ids":66,"error":"junit.framework.ComparisonFailure","source":"/src/com/google/javascript/jscomp/CodeConsumer.java","code":"@@ -242,7 +242,7 @@ void addNumber(double x) {\n     // x--4 (which is a syntax error).\n     char prev = getLastChar();\n     boolean negativeZero = isNegativeZero(x);\n  if (x < 0 && prev == '-') {\n       add(\" \");\n     }\n \n","solution":"@@ -242,7 +242,7 @@ void addNumber(double x) {\n     // x--4 (which is a syntax error).\n     char prev = getLastChar();\n     boolean negativeZero = isNegativeZero(x);\n  if ((x < 0 || negativeZero) && prev == '-') {\n       add(\" \");\n     }\n \n","CodeWithNoComments":"\n          char prev = getLastChar();\n     boolean negativeZero = isNegativeZero(x);\n    if (x < 0 && prev == '-') {\n       add(\" \");\n     }\n \n","SolutionWithNoComments":"\n          char prev = getLastChar();\n     boolean negativeZero = isNegativeZero(x);\n    if ((x < 0 || negativeZero) && prev == '-') {\n       add(\" \");\n     }\n \n"},{"ids":67,"error":"java.lang.RuntimeException","source":"/src/com/google/javascript/jscomp/NameAnalyzer.java","code":"@@ -632,11 +632,9 @@ public void visit(NodeTraversal t, Node n, Node parent) {\n         Node nameNode = n.getFirstChild();\n         NameInformation ns = createNameInformation(t, nameNode, n);\n         if (ns != null && ns.onlyAffectsClassDef) {\n        JsName name = getName(ns.name, false);\n        if (name != null) {\n           refNodes.add(new ClassDefiningFunctionNode(\n               name, n, parent, parent.getParent()));\n        }\n         }\n       }\n     }\n","solution":"@@ -632,11 +632,9 @@ public void visit(NodeTraversal t, Node n, Node parent) {\n         Node nameNode = n.getFirstChild();\n         NameInformation ns = createNameInformation(t, nameNode, n);\n         if (ns != null && ns.onlyAffectsClassDef) {\n        JsName name = getName(ns.name, true);\n           refNodes.add(new ClassDefiningFunctionNode(\n               name, n, parent, parent.getParent()));\n         }\n       }\n     }\n","CodeWithNoComments":"\n         Node nameNode = n.getFirstChild();\n         NameInformation ns = createNameInformation(t, nameNode, n);\n         if (ns != null && ns.onlyAffectsClassDef) {\n          JsName name = getName(ns.name, false);\n          if (name != null) {\n           refNodes.add(new ClassDefiningFunctionNode(\n               name, n, parent, parent.getParent()));\n          }\n         }\n       }\n     }\n","SolutionWithNoComments":"\n         Node nameNode = n.getFirstChild();\n         NameInformation ns = createNameInformation(t, nameNode, n);\n         if (ns != null && ns.onlyAffectsClassDef) {\n          JsName name = getName(ns.name, true);\n           refNodes.add(new ClassDefiningFunctionNode(\n               name, n, parent, parent.getParent()));\n         }\n       }\n     }\n"},{"ids":68,"error":"junit.framework.AssertionFailedError","source":"/src/com/google/javascript/jscomp/parsing/IRFactory.java","code":"@@ -565,8 +565,15 @@ Node processExpressionStatement(ExpressionStatement statementNode) {\n \n     @Override\n     Node processForInLoop(ForInLoop loopNode) {\n \n         // Return the bare minimum to put the AST in a valid state.\n       return newNode(\n           Token.FOR,\n           transform(loopNode.getIterator()),\n","solution":"@@ -565,8 +565,15 @@ Node processExpressionStatement(ExpressionStatement statementNode) {\n \n     @Override\n     Node processForInLoop(ForInLoop loopNode) {\n    if (loopNode.isForEach()) {\n      errorReporter.error(\n          \"unsupported language extension: for each\",\n          sourceName,\n          loopNode.getLineno(), \"\", 0);\n \n         // Return the bare minimum to put the AST in a valid state.\n      return newNode(Token.EXPR_RESULT, Node.newNumber(0));\n    }\n       return newNode(\n           Token.FOR,\n           transform(loopNode.getIterator()),\n","CodeWithNoComments":"\n \n     @Override\n     Node processForInLoop(ForInLoop loopNode) {\n \n                return newNode(\n           Token.FOR,\n           transform(loopNode.getIterator()),\n","SolutionWithNoComments":"\n \n     @Override\n     Node processForInLoop(ForInLoop loopNode) {\n      if (loopNode.isForEach()) {\n        errorReporter.error(\n            \"unsupported language extension: for each\",\n            sourceName,\n            loopNode.getLineno(), \"\", 0);\n \n                 return newNode(Token.EXPR_RESULT, Node.newNumber(0));\n      }\n       return newNode(\n           Token.FOR,\n           transform(loopNode.getIterator()),\n"},{"ids":69,"error":"junit.framework.AssertionFailedError","source":"/src/com/google/javascript/jscomp/FunctionTypeBuilder.java","code":"@@ -289,6 +289,9 @@ FunctionTypeBuilder inferFromOverriddenFunction(\n       }\n \n       // Clone any remaining params that aren't in the function literal.\n \n       parametersNode = paramBuilder.build();\n     }\n@@ -480,6 +483,12 @@ FunctionTypeBuilder inferParameterTypes(@Nullable Node argsParent,\n     }\n \n     // Copy over any old parameters that aren't in the param list.\n \n     if (templateTypeName != null && !foundTemplateType) {\n       reportError(TEMPLATE_TYPE_EXPECTED, fnName);\n","solution":"@@ -289,6 +289,9 @@ FunctionTypeBuilder inferFromOverriddenFunction(\n       }\n \n       // Clone any remaining params that aren't in the function literal.\n    while (oldParams.hasNext()) {\n      paramBuilder.newParameterFromNode(oldParams.next());\n    }\n \n       parametersNode = paramBuilder.build();\n     }\n@@ -480,6 +483,12 @@ FunctionTypeBuilder inferParameterTypes(@Nullable Node argsParent,\n     }\n \n     // Copy over any old parameters that aren't in the param list.\n  if (!isVarArgs) {\n    while (oldParameterType != null && !isVarArgs) {\n      builder.newParameterFromNode(oldParameterType);\n      oldParameterType = oldParameterType.getNext();\n    }\n  }\n \n     if (templateTypeName != null && !foundTemplateType) {\n       reportError(TEMPLATE_TYPE_EXPECTED, fnName);\n","CodeWithNoComments":"\n       }\n \n        \n       parametersNode = paramBuilder.build();\n     }\n\n     }\n \n      \n     if (templateTypeName != null && !foundTemplateType) {\n       reportError(TEMPLATE_TYPE_EXPECTED, fnName);\n","SolutionWithNoComments":"\n       }\n \n             while (oldParams.hasNext()) {\n        paramBuilder.newParameterFromNode(oldParams.next());\n      }\n \n       parametersNode = paramBuilder.build();\n     }\n\n     }\n \n         if (!isVarArgs) {\n      while (oldParameterType != null && !isVarArgs) {\n        builder.newParameterFromNode(oldParameterType);\n        oldParameterType = oldParameterType.getNext();\n      }\n    }\n \n     if (templateTypeName != null && !foundTemplateType) {\n       reportError(TEMPLATE_TYPE_EXPECTED, fnName);\n"},{"ids":70,"error":"junit.framework.ComparisonFailure","source":"/src/com/google/javascript/jscomp/CodeConsumer.java","code":"@@ -191,11 +191,13 @@ void add(String newcode) {\n       // need space to separate. This is not pretty printing.\n       // For example: \"return foo;\"\n       append(\" \");\n       // Do not allow a forward slash to appear after a DIV.\n       // For example,\n       // REGEXP DIV REGEXP\n       // is valid and should print like\n       // / // / /\n     }\n \n     append(newcode);\n","solution":"@@ -191,11 +191,13 @@ void add(String newcode) {\n       // need space to separate. This is not pretty printing.\n       // For example: \"return foo;\"\n       append(\" \");\n  } else if (c == '/' && getLastChar() == '/') {\n       // Do not allow a forward slash to appear after a DIV.\n       // For example,\n       // REGEXP DIV REGEXP\n       // is valid and should print like\n       // / // / /\n    append(\" \");\n     }\n \n     append(newcode);\n","CodeWithNoComments":"\n                     append(\" \");\n                                        }\n \n     append(newcode);\n","SolutionWithNoComments":"\n                     append(\" \");\n    } else if (c == '/' && getLastChar() == '/') {\n                                         append(\" \");\n     }\n \n     append(newcode);\n"},{"ids":71,"error":"junit.framework.ComparisonFailure","source":"/src/com/google/javascript/jscomp/TypedScopeCreator.java","code":"@@ -390,50 +390,51 @@ private void identifyNameNode(\n   private JSType getNativeType(JSTypeNative nativeType) {\n     return typeRegistry.getNativeType(nativeType);\n   }\n \n   private abstract class AbstractScopeBuilder\n       implements NodeTraversal.Callback {\n \n     /**\n      * The scope that we're builidng.\n      */\n     final Scope scope;\n \n     private final List<DeferredSetType> deferredSetTypes =\n         Lists.newArrayList();\n \n     /**\n      * Functions that we found in the global scope and not in externs.\n      */\n     private final List<Node> nonExternFunctions = Lists.newArrayList();\n \n     /**\n      * Object literals with a @lends annotation aren't analyzed until we\n      * reach the root of the statement they're defined in.\n      *\n      * This ensures that if there are any @lends annotations on the object\n      * literals, the type on the @lends annotation resolves correctly.\n      *\n      * For more information, see\n      * http://code.google.com/p/closure-compiler/issues/detail?id=314\n      */\n \n     /**\n      * Type-less stubs.\n      *\n      * If at the end of traversal, we still don't have types for these\n      * stubs, then we should declare UNKNOWN types.\n      */\n     private final List<StubDeclaration> stubDeclarations =\n         Lists.newArrayList();\n \n     /**\n      * The current source file that we're in.\n      */\n     private String sourceName = null;\n \n     /**\n      * The InputId of the current node.\n      */\n     private InputId inputId;\n \n@@ -498,90 +499,106 @@ public final boolean shouldTraverse(NodeTraversal t, Node n,\n     public void visit(NodeTraversal t, Node n, Node parent) {\n       inputId = t.getInputId();\n       attachLiteralTypes(t, n);\n \n       switch (n.getType()) {\n         case Token.CALL:\n           checkForClassDefiningCalls(t, n, parent);\n           checkForCallingConventionDefiningCalls(n, delegateCallingConventions);\n           break;\n \n         case Token.FUNCTION:\n           if (t.getInput() == null || !t.getInput().isExtern()) {\n             nonExternFunctions.add(n);\n           }\n \n           // Hoisted functions are handled during pre-traversal.\n           if (!NodeUtil.isHoistedFunctionDeclaration(n)) {\n             defineFunctionLiteral(n, parent);\n           }\n           break;\n \n         case Token.ASSIGN:\n           // Handle initialization of properties.\n           Node firstChild = n.getFirstChild();\n           if (firstChild.isGetProp() &&\n               firstChild.isQualifiedName()) {\n             maybeDeclareQualifiedName(t, n.getJSDocInfo(),\n                 firstChild, n, firstChild.getNext());\n           }\n           break;\n \n         case Token.CATCH:\n           defineCatch(n, parent);\n           break;\n \n         case Token.VAR:\n           defineVar(n, parent);\n           break;\n \n         case Token.GETPROP:\n           // Handle stubbed properties.\n           if (parent.isExprResult() &&\n               n.isQualifiedName()) {\n             maybeDeclareQualifiedName(t, n.getJSDocInfo(), n, parent, null);\n           }\n           break;\n       }\n \n       // Analyze any @lends object literals in this statement.\n     }\n \n     private void attachLiteralTypes(NodeTraversal t, Node n) {\n       switch (n.getType()) {\n         case Token.NULL:\n           n.setJSType(getNativeType(NULL_TYPE));\n           break;\n \n         case Token.VOID:\n           n.setJSType(getNativeType(VOID_TYPE));\n           break;\n \n         case Token.STRING:\n           // Defer keys to the Token.OBJECTLIT case\n           if (!NodeUtil.isObjectLitKey(n, n.getParent())) {\n             n.setJSType(getNativeType(STRING_TYPE));\n           }\n           break;\n \n         case Token.NUMBER:\n           n.setJSType(getNativeType(NUMBER_TYPE));\n           break;\n \n         case Token.TRUE:\n         case Token.FALSE:\n           n.setJSType(getNativeType(BOOLEAN_TYPE));\n           break;\n \n         case Token.REGEXP:\n           n.setJSType(getNativeType(REGEXP_TYPE));\n           break;\n \n         case Token.OBJECTLIT:\n             defineObjectLiteral(n);\n           break;\n \n           // NOTE(nicksantos): If we ever support Array tuples,\n           // we will need to put ARRAYLIT here as well.\n       }\n     }\n \n","solution":"@@ -390,50 +390,51 @@ private void identifyNameNode(\n   private JSType getNativeType(JSTypeNative nativeType) {\n     return typeRegistry.getNativeType(nativeType);\n   }\n \n   private abstract class AbstractScopeBuilder\n       implements NodeTraversal.Callback {\n \n     /**\n      * The scope that we're builidng.\n      */\n     final Scope scope;\n \n     private final List<DeferredSetType> deferredSetTypes =\n         Lists.newArrayList();\n \n     /**\n      * Functions that we found in the global scope and not in externs.\n      */\n     private final List<Node> nonExternFunctions = Lists.newArrayList();\n \n     /**\n      * Object literals with a @lends annotation aren't analyzed until we\n      * reach the root of the statement they're defined in.\n      *\n      * This ensures that if there are any @lends annotations on the object\n      * literals, the type on the @lends annotation resolves correctly.\n      *\n      * For more information, see\n      * http://code.google.com/p/closure-compiler/issues/detail?id=314\n      */\n  private List<Node> lentObjectLiterals = null;\n \n     /**\n      * Type-less stubs.\n      *\n      * If at the end of traversal, we still don't have types for these\n      * stubs, then we should declare UNKNOWN types.\n      */\n     private final List<StubDeclaration> stubDeclarations =\n         Lists.newArrayList();\n \n     /**\n      * The current source file that we're in.\n      */\n     private String sourceName = null;\n \n     /**\n      * The InputId of the current node.\n      */\n     private InputId inputId;\n \n@@ -498,90 +499,106 @@ public final boolean shouldTraverse(NodeTraversal t, Node n,\n     public void visit(NodeTraversal t, Node n, Node parent) {\n       inputId = t.getInputId();\n       attachLiteralTypes(t, n);\n \n       switch (n.getType()) {\n         case Token.CALL:\n           checkForClassDefiningCalls(t, n, parent);\n           checkForCallingConventionDefiningCalls(n, delegateCallingConventions);\n           break;\n \n         case Token.FUNCTION:\n           if (t.getInput() == null || !t.getInput().isExtern()) {\n             nonExternFunctions.add(n);\n           }\n \n           // Hoisted functions are handled during pre-traversal.\n           if (!NodeUtil.isHoistedFunctionDeclaration(n)) {\n             defineFunctionLiteral(n, parent);\n           }\n           break;\n \n         case Token.ASSIGN:\n           // Handle initialization of properties.\n           Node firstChild = n.getFirstChild();\n           if (firstChild.isGetProp() &&\n               firstChild.isQualifiedName()) {\n             maybeDeclareQualifiedName(t, n.getJSDocInfo(),\n                 firstChild, n, firstChild.getNext());\n           }\n           break;\n \n         case Token.CATCH:\n           defineCatch(n, parent);\n           break;\n \n         case Token.VAR:\n           defineVar(n, parent);\n           break;\n \n         case Token.GETPROP:\n           // Handle stubbed properties.\n           if (parent.isExprResult() &&\n               n.isQualifiedName()) {\n             maybeDeclareQualifiedName(t, n.getJSDocInfo(), n, parent, null);\n           }\n           break;\n       }\n \n       // Analyze any @lends object literals in this statement.\n    if (n.getParent() != null && NodeUtil.isStatement(n) &&\n        lentObjectLiterals != null) {\n      for (Node objLit : lentObjectLiterals) {\n        defineObjectLiteral(objLit);\n      }\n      lentObjectLiterals.clear();\n    }\n     }\n \n     private void attachLiteralTypes(NodeTraversal t, Node n) {\n       switch (n.getType()) {\n         case Token.NULL:\n           n.setJSType(getNativeType(NULL_TYPE));\n           break;\n \n         case Token.VOID:\n           n.setJSType(getNativeType(VOID_TYPE));\n           break;\n \n         case Token.STRING:\n           // Defer keys to the Token.OBJECTLIT case\n           if (!NodeUtil.isObjectLitKey(n, n.getParent())) {\n             n.setJSType(getNativeType(STRING_TYPE));\n           }\n           break;\n \n         case Token.NUMBER:\n           n.setJSType(getNativeType(NUMBER_TYPE));\n           break;\n \n         case Token.TRUE:\n         case Token.FALSE:\n           n.setJSType(getNativeType(BOOLEAN_TYPE));\n           break;\n \n         case Token.REGEXP:\n           n.setJSType(getNativeType(REGEXP_TYPE));\n           break;\n \n         case Token.OBJECTLIT:\n        JSDocInfo info = n.getJSDocInfo();\n        if (info != null &&\n            info.getLendsName() != null) {\n          if (lentObjectLiterals == null) {\n            lentObjectLiterals = Lists.newArrayList();\n          }\n          lentObjectLiterals.add(n);\n        } else {\n             defineObjectLiteral(n);\n        }\n           break;\n \n           // NOTE(nicksantos): If we ever support Array tuples,\n           // we will need to put ARRAYLIT here as well.\n       }\n     }\n \n","CodeWithNoComments":"\n   private JSType getNativeType(JSTypeNative nativeType) {\n     return typeRegistry.getNativeType(nativeType);\n   }\n \n   private abstract class AbstractScopeBuilder\n       implements NodeTraversal.Callback {\n \n     final Scope scope;\n \n     private final List<DeferredSetType> deferredSetTypes =\n         Lists.newArrayList();\n \n     private final List<Node> nonExternFunctions = Lists.newArrayList();\n \n \n     private final List<StubDeclaration> stubDeclarations =\n         Lists.newArrayList();\n      private String sourceName = null;\n \n     private InputId inputId;\n \n\n     public void visit(NodeTraversal t, Node n, Node parent) {\n       inputId = t.getInputId();\n       attachLiteralTypes(t, n);\n \n       switch (n.getType()) {\n         case Token.CALL:\n           checkForClassDefiningCalls(t, n, parent);\n           checkForCallingConventionDefiningCalls(n, delegateCallingConventions);\n           break;\n \n         case Token.FUNCTION:\n           if (t.getInput() == null || !t.getInput().isExtern()) {\n             nonExternFunctions.add(n);\n           }\n \n                      if (!NodeUtil.isHoistedFunctionDeclaration(n)) {\n             defineFunctionLiteral(n, parent);\n           }\n           break;\n \n         case Token.ASSIGN:\n                      Node firstChild = n.getFirstChild();\n           if (firstChild.isGetProp() &&\n               firstChild.isQualifiedName()) {\n             maybeDeclareQualifiedName(t, n.getJSDocInfo(),\n                 firstChild, n, firstChild.getNext());\n           }\n           break;\n \n         case Token.CATCH:\n           defineCatch(n, parent);\n           break;\n \n         case Token.VAR:\n           defineVar(n, parent);\n           break;\n \n         case Token.GETPROP:\n                      if (parent.isExprResult() &&\n               n.isQualifiedName()) {\n             maybeDeclareQualifiedName(t, n.getJSDocInfo(), n, parent, null);\n           }\n           break;\n       }\n \n            }\n \n     private void attachLiteralTypes(NodeTraversal t, Node n) {\n       switch (n.getType()) {\n         case Token.NULL:\n           n.setJSType(getNativeType(NULL_TYPE));\n           break;\n \n         case Token.VOID:\n           n.setJSType(getNativeType(VOID_TYPE));\n           break;\n \n         case Token.STRING:\n                      if (!NodeUtil.isObjectLitKey(n, n.getParent())) {\n             n.setJSType(getNativeType(STRING_TYPE));\n           }\n           break;\n \n         case Token.NUMBER:\n           n.setJSType(getNativeType(NUMBER_TYPE));\n           break;\n \n         case Token.TRUE:\n         case Token.FALSE:\n           n.setJSType(getNativeType(BOOLEAN_TYPE));\n           break;\n \n         case Token.REGEXP:\n           n.setJSType(getNativeType(REGEXP_TYPE));\n           break;\n \n         case Token.OBJECTLIT:\n             defineObjectLiteral(n);\n           break;\n \n                             }\n     }\n \n","SolutionWithNoComments":"\n   private JSType getNativeType(JSTypeNative nativeType) {\n     return typeRegistry.getNativeType(nativeType);\n   }\n \n   private abstract class AbstractScopeBuilder\n       implements NodeTraversal.Callback {     final Scope scope;\n \n     private final List<DeferredSetType> deferredSetTypes =\n         Lists.newArrayList();     private final List<Node> nonExternFunctions = Lists.newArrayList();\n \n    private List<Node> lentObjectLiterals = null;\n \n     private final List<StubDeclaration> stubDeclarations =\n         Lists.newArrayList();\n \n     private String sourceName = null;\n \n     private InputId inputId;\n \n\n     public void visit(NodeTraversal t, Node n, Node parent) {\n       inputId = t.getInputId();\n       attachLiteralTypes(t, n);\n \n       switch (n.getType()) {\n         case Token.CALL:\n           checkForClassDefiningCalls(t, n, parent);\n           checkForCallingConventionDefiningCalls(n, delegateCallingConventions);\n           break;\n \n         case Token.FUNCTION:\n           if (t.getInput() == null || !t.getInput().isExtern()) {\n             nonExternFunctions.add(n);\n           }\n \n                      if (!NodeUtil.isHoistedFunctionDeclaration(n)) {\n             defineFunctionLiteral(n, parent);\n           }\n           break;\n \n         case Token.ASSIGN:\n                      Node firstChild = n.getFirstChild();\n           if (firstChild.isGetProp() &&\n               firstChild.isQualifiedName()) {\n             maybeDeclareQualifiedName(t, n.getJSDocInfo(),\n                 firstChild, n, firstChild.getNext());\n           }\n           break;\n \n         case Token.CATCH:\n           defineCatch(n, parent);\n           break;\n \n         case Token.VAR:\n           defineVar(n, parent);\n           break;\n \n         case Token.GETPROP:\n                      if (parent.isExprResult() &&\n               n.isQualifiedName()) {\n             maybeDeclareQualifiedName(t, n.getJSDocInfo(), n, parent, null);\n           }\n           break;\n       }\n \n             if (n.getParent() != null && NodeUtil.isStatement(n) &&\n          lentObjectLiterals != null) {\n        for (Node objLit : lentObjectLiterals) {\n          defineObjectLiteral(objLit);\n        }\n        lentObjectLiterals.clear();\n      }\n     }\n \n     private void attachLiteralTypes(NodeTraversal t, Node n) {\n       switch (n.getType()) {\n         case Token.NULL:\n           n.setJSType(getNativeType(NULL_TYPE));\n           break;\n \n         case Token.VOID:\n           n.setJSType(getNativeType(VOID_TYPE));\n           break;\n \n         case Token.STRING:\n                      if (!NodeUtil.isObjectLitKey(n, n.getParent())) {\n             n.setJSType(getNativeType(STRING_TYPE));\n           }\n           break;\n \n         case Token.NUMBER:\n           n.setJSType(getNativeType(NUMBER_TYPE));\n           break;\n \n         case Token.TRUE:\n         case Token.FALSE:\n           n.setJSType(getNativeType(BOOLEAN_TYPE));\n           break;\n \n         case Token.REGEXP:\n           n.setJSType(getNativeType(REGEXP_TYPE));\n           break;\n \n         case Token.OBJECTLIT:\n          JSDocInfo info = n.getJSDocInfo();\n          if (info != null &&\n              info.getLendsName() != null) {\n            if (lentObjectLiterals == null) {\n              lentObjectLiterals = Lists.newArrayList();\n            }\n            lentObjectLiterals.add(n);\n          } else {\n             defineObjectLiteral(n);\n          }\n           break;\n \n                             }\n     }\n \n"},{"ids":72,"error":"junit.framework.AssertionFailedError","source":"/src/com/google/javascript/rhino/jstype/RecordType.java","code":"@@ -137,22 +137,6 @@ boolean defineProperty(String propertyName, JSType type,\n         propertyNode);\n   }\n \n@Override\npublic JSType getLeastSupertype(JSType that) {\n  if (!that.isRecordType()) {\n    return super.getLeastSupertype(that);\n  }\n  RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n  for (String property : properties.keySet()) {\n    if (that.toMaybeRecordType().hasProperty(property) &&\n        that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(\n            getPropertyType(property))) {\n      builder.addProperty(property, getPropertyType(property),\n          getPropertyNode(property));\n    }\n  }\n  return builder.build();\n}\n   JSType getGreatestSubtypeHelper(JSType that) {\n     if (that.isRecordType()) {\n       RecordType thatRecord = that.toMaybeRecordType();\n","solution":"@@ -137,22 +137,6 @@ boolean defineProperty(String propertyName, JSType type,\n         propertyNode);\n   }\n \n   JSType getGreatestSubtypeHelper(JSType that) {\n     if (that.isRecordType()) {\n       RecordType thatRecord = that.toMaybeRecordType();\n","CodeWithNoComments":"\n         propertyNode);\n   }\n \n  @Override\n  public JSType getLeastSupertype(JSType that) {\n    if (!that.isRecordType()) {\n      return super.getLeastSupertype(that);\n    }\n    RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n    for (String property : properties.keySet()) {\n      if (that.toMaybeRecordType().hasProperty(property) &&\n          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(\n              getPropertyType(property))) {\n        builder.addProperty(property, getPropertyType(property),\n            getPropertyNode(property));\n      }\n    }\n    return builder.build();\n  }\n   JSType getGreatestSubtypeHelper(JSType that) {\n     if (that.isRecordType()) {\n       RecordType thatRecord = that.toMaybeRecordType();\n","SolutionWithNoComments":"\n         propertyNode);\n   }\n \n   JSType getGreatestSubtypeHelper(JSType that) {\n     if (that.isRecordType()) {\n       RecordType thatRecord = that.toMaybeRecordType();\n"},{"ids":73,"error":"junit.framework.AssertionFailedError","source":"/src/com/google/debugging/sourcemap/SourceMapConsumerV3.java","code":"@@ -486,8 +486,8 @@ private OriginalMapping getOriginalMappingForEntry(Entry entry) {\n       // Adjust the line/column here to be start at 1.\n       Builder x = OriginalMapping.newBuilder()\n         .setOriginalFile(sources[entry.getSourceFileId()])\n      .setLineNumber(entry.getSourceLine())\n      .setColumnPosition(entry.getSourceColumn());\n       if (entry.getNameId() != UNMAPPED) {\n         x.setIdentifier(names[entry.getNameId()]);\n       }\n/src/com/google/javascript/jscomp/SourceMap.java @@ -135,10 +135,15 @@ public void addMapping(\n     // zero based.\n     // We don't change this for the v1 or v2 source maps but for\n     // v3 we make them both 0 based.\n \n     generator.addMapping(\n         sourceFile, originalName,\n      new FilePosition(node.getLineno(), node.getCharno()),\n         outputStartPosition, outputEndPosition);\n   }\n \n","solution":"@@ -486,8 +486,8 @@ private OriginalMapping getOriginalMappingForEntry(Entry entry) {\n       // Adjust the line/column here to be start at 1.\n       Builder x = OriginalMapping.newBuilder()\n         .setOriginalFile(sources[entry.getSourceFileId()])\n      .setLineNumber(entry.getSourceLine() + 1)\n      .setColumnPosition(entry.getSourceColumn() + 1);\n       if (entry.getNameId() != UNMAPPED) {\n         x.setIdentifier(names[entry.getNameId()]);\n       }\n/src/com/google/javascript/jscomp/SourceMap.java @@ -135,10 +135,15 @@ public void addMapping(\n     // zero based.\n     // We don't change this for the v1 or v2 source maps but for\n     // v3 we make them both 0 based.\n  int lineBaseOffset = 1;\n  if (generator instanceof SourceMapGeneratorV1\n      || generator instanceof SourceMapGeneratorV2) {\n    lineBaseOffset = 0;\n  }\n \n     generator.addMapping(\n         sourceFile, originalName,\n      new FilePosition(node.getLineno() - lineBaseOffset, node.getCharno()),\n         outputStartPosition, outputEndPosition);\n   }\n \n","CodeWithNoComments":"\n              Builder x = OriginalMapping.newBuilder()\n         .setOriginalFile(sources[entry.getSourceFileId()])\n        .setLineNumber(entry.getSourceLine())\n        .setColumnPosition(entry.getSourceColumn());\n       if (entry.getNameId() != UNMAPPED) {\n         x.setIdentifier(names[entry.getNameId()]);\n       }\n\n                \n     generator.addMapping(\n         sourceFile, originalName,\n        new FilePosition(node.getLineno(), node.getCharno()),\n         outputStartPosition, outputEndPosition);\n   }\n \n","SolutionWithNoComments":"\n              Builder x = OriginalMapping.newBuilder()\n         .setOriginalFile(sources[entry.getSourceFileId()])\n        .setLineNumber(entry.getSourceLine() + 1)\n        .setColumnPosition(entry.getSourceColumn() + 1);\n       if (entry.getNameId() != UNMAPPED) {\n         x.setIdentifier(names[entry.getNameId()]);\n       }\n\n                   int lineBaseOffset = 1;\n    if (generator instanceof SourceMapGeneratorV1\n        || generator instanceof SourceMapGeneratorV2) {\n      lineBaseOffset = 0;\n    }\n \n     generator.addMapping(\n         sourceFile, originalName,\n        new FilePosition(node.getLineno() - lineBaseOffset, node.getCharno()),\n         outputStartPosition, outputEndPosition);\n   }\n \n"},{"ids":74,"error":"junit.framework.AssertionFailedError","source":"/src/com/google/javascript/jscomp/TypedScopeCreator.java","code":"@@ -1518,11 +1518,14 @@ void maybeDeclareQualifiedName(NodeTraversal t, JSDocInfo info,\n             || FunctionTypeBuilder.isFunctionTypeDeclaration(info));\n       }\n \n    if (inferred) {\n         // Determining declaration for #2\n      inferred = !(rhsValue != null &&\n          rhsValue.isFunction() &&\n          (info != null || !scope.isDeclared(qName, false)));\n       }\n \n       if (!inferred) {\n","solution":"@@ -1518,11 +1518,14 @@ void maybeDeclareQualifiedName(NodeTraversal t, JSDocInfo info,\n             || FunctionTypeBuilder.isFunctionTypeDeclaration(info));\n       }\n \n    if (inferred && rhsValue != null && rhsValue.isFunction()) {\n         // Determining declaration for #2\n      if (info != null) {\n        inferred = false;\n      } else if (!scope.isDeclared(qName, false) &&\n                 n.isUnscopedQualifiedName()) {\n        inferred = false;\n      }\n       }\n \n       if (!inferred) {\n","CodeWithNoComments":"\n             || FunctionTypeBuilder.isFunctionTypeDeclaration(info));\n       }\n \n      if (inferred) {\n                 inferred = !(rhsValue != null &&\n            rhsValue.isFunction() &&\n            (info != null || !scope.isDeclared(qName, false)));\n       }\n \n       if (!inferred) {\n","SolutionWithNoComments":"\n             || FunctionTypeBuilder.isFunctionTypeDeclaration(info));\n       }\n \n      if (inferred && rhsValue != null && rhsValue.isFunction()) {\n                 if (info != null) {\n          inferred = false;\n        } else if (!scope.isDeclared(qName, false) &&\n                   n.isUnscopedQualifiedName()) {\n          inferred = false;\n        }\n       }\n \n       if (!inferred) {\n"},{"ids":75,"error":"junit.framework.AssertionFailedError","source":"/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java","code":"@@ -88,14 +88,6 @@ public void enterScope(NodeTraversal t) {\n       renamer = nameStack.peek().forChildScope();\n     }\n \n  if (declarationRoot.getType() == Token.FUNCTION) {\n    for (Node c = declarationRoot.getFirstChild().getNext().getFirstChild(); c != null; c = c.getNext()) {\n      String name = c.getString();\n      renamer.addDeclaredName(name);\n    }\n    Node functionBody = declarationRoot.getLastChild();\n    findDeclaredNames(functionBody, null, renamer);\n  }  else \n     if (declarationRoot.getType() != Token.FUNCTION) {\n       // Add the block declarations\n       findDeclaredNames(declarationRoot, null, renamer);\n@@ -127,11 +119,22 @@ public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n             renamer.addDeclaredName(name);\n           }\n \n \n \n           // Add the function parameters\n \n           // Add the function body declarations\n \n           nameStack.push(renamer);\n         }\n@@ -170,13 +173,16 @@ public void visit(NodeTraversal t, Node n, Node parent) {\n \n       case Token.FUNCTION:\n         // Remove the function body scope\n         // Remove function recursive name (if any).\n         nameStack.pop();\n         break;\n \n         // Note: The parameters and function body variables live in the\n         // same scope, we introduce the scope when in the \"shouldTraverse\"\n         // visit of LP, but remove it when when we exit the function above.\n \n       case Token.CATCH:\n         // Remove catch except name from the stack of names.\n","solution":"@@ -88,14 +88,6 @@ public void enterScope(NodeTraversal t) {\n       renamer = nameStack.peek().forChildScope();\n     }\n \n     if (declarationRoot.getType() != Token.FUNCTION) {\n       // Add the block declarations\n       findDeclaredNames(declarationRoot, null, renamer);\n@@ -127,11 +119,22 @@ public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n             renamer.addDeclaredName(name);\n           }\n \n        nameStack.push(renamer);\n      }\n      break;\n \n    case Token.LP: {\n        Renamer renamer = nameStack.peek().forChildScope();\n \n           // Add the function parameters\n        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n          String name = c.getString();\n          renamer.addDeclaredName(name);\n        }\n \n           // Add the function body declarations\n        Node functionBody = n.getNext();\n        findDeclaredNames(functionBody, null, renamer);\n \n           nameStack.push(renamer);\n         }\n@@ -170,13 +173,16 @@ public void visit(NodeTraversal t, Node n, Node parent) {\n \n       case Token.FUNCTION:\n         // Remove the function body scope\n      nameStack.pop();\n         // Remove function recursive name (if any).\n         nameStack.pop();\n         break;\n \n    case Token.LP:\n         // Note: The parameters and function body variables live in the\n         // same scope, we introduce the scope when in the \"shouldTraverse\"\n         // visit of LP, but remove it when when we exit the function above.\n      break;\n \n       case Token.CATCH:\n         // Remove catch except name from the stack of names.\n","CodeWithNoComments":"\n       renamer = nameStack.peek().forChildScope();\n     }\n \n    if (declarationRoot.getType() == Token.FUNCTION) {\n      for (Node c = declarationRoot.getFirstChild().getNext().getFirstChild(); c != null; c = c.getNext()) {\n        String name = c.getString();\n        renamer.addDeclaredName(name);\n      }\n      Node functionBody = declarationRoot.getLastChild();\n      findDeclaredNames(functionBody, null, renamer);\n    }  else \n     if (declarationRoot.getType() != Token.FUNCTION) {\n              findDeclaredNames(declarationRoot, null, renamer);\n\n             renamer.addDeclaredName(name);\n           }\n \n \n \n            \n            \n           nameStack.push(renamer);\n         }\n\n \n       case Token.FUNCTION:\n                           nameStack.pop();\n         break;\n \n                            \n       case Token.CATCH:\n         ","SolutionWithNoComments":"\n       renamer = nameStack.peek().forChildScope();\n     }\n \n     if (declarationRoot.getType() != Token.FUNCTION) {\n              findDeclaredNames(declarationRoot, null, renamer);\n\n             renamer.addDeclaredName(name);\n           }\n \n          nameStack.push(renamer);\n        }\n        break;\n \n      case Token.LP: {\n          Renamer renamer = nameStack.peek().forChildScope();\n \n                     for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n            String name = c.getString();\n            renamer.addDeclaredName(name);\n          }\n \n                     Node functionBody = n.getNext();\n          findDeclaredNames(functionBody, null, renamer);\n \n           nameStack.push(renamer);\n         }\n\n \n       case Token.FUNCTION:\n                 nameStack.pop();\n                  nameStack.pop();\n         break;\n \n      case Token.LP:\n                                   break;\n \n       case Token.CATCH:\n         "},{"ids":76,"error":"junit.framework.AssertionFailedError","source":"/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java","code":"@@ -373,7 +373,7 @@ private Node tryFoldArrayJoin(Node n) {\n \n     Node right = callTarget.getNext();\n     if (right != null) {\n    if (!NodeUtil.isImmutableValue(right)) {\n         return n;\n       }\n     }\n@@ -386,7 +386,12 @@ private Node tryFoldArrayJoin(Node n) {\n       return n;\n     }\n \n       // \",\" is the default, it doesn't need to be explicit\n \n     String joinString = (right == null) ? \",\" : NodeUtil.getStringValue(right);\n     List<Node> arrayFoldedChildren = Lists.newLinkedList();\n","solution":"@@ -373,7 +373,7 @@ private Node tryFoldArrayJoin(Node n) {\n \n     Node right = callTarget.getNext();\n     if (right != null) {\n    if (right.getNext() != null || !NodeUtil.isImmutableValue(right)) {\n         return n;\n       }\n     }\n@@ -386,7 +386,12 @@ private Node tryFoldArrayJoin(Node n) {\n       return n;\n     }\n \n  if (right != null && right.getType() == Token.STRING\n      && \",\".equals(right.getString())) {\n       // \",\" is the default, it doesn't need to be explicit\n    n.removeChild(right);\n    reportCodeChange();\n  }\n \n     String joinString = (right == null) ? \",\" : NodeUtil.getStringValue(right);\n     List<Node> arrayFoldedChildren = Lists.newLinkedList();\n","CodeWithNoComments":"\n \n     Node right = callTarget.getNext();\n     if (right != null) {\n      if (!NodeUtil.isImmutableValue(right)) {\n         return n;\n       }\n     }\n\n       return n;\n     }\n \n        \n     String joinString = (right == null) ? \",\" : NodeUtil.getStringValue(right);\n     List<Node> arrayFoldedChildren = Lists.newLinkedList();\n","SolutionWithNoComments":"\n \n     Node right = callTarget.getNext();\n     if (right != null) {\n      if (right.getNext() != null || !NodeUtil.isImmutableValue(right)) {\n         return n;\n       }\n     }\n\n       return n;\n     }\n \n    if (right != null && right.getType() == Token.STRING\n        && \",\".equals(right.getString())) {\n             n.removeChild(right);\n      reportCodeChange();\n    }\n \n     String joinString = (right == null) ? \",\" : NodeUtil.getStringValue(right);\n     List<Node> arrayFoldedChildren = Lists.newLinkedList();\n"},{"ids":77,"error":"java.lang.RuntimeException","source":"/src/com/google/javascript/jscomp/InlineObjectLiterals.java","code":"@@ -328,6 +328,9 @@ private void replaceAssignmentExpression(Var v, Reference ref,\n       }\n \n       Node replacement;\n         // All assignments evaluate to true, so make sure that the\n         // expr statement evaluates to true in case it matters.\n         nodes.add(new Node(Token.TRUE));\n@@ -347,6 +350,7 @@ private void replaceAssignmentExpression(Var v, Reference ref,\n         }\n         cur.addChildToFront(nodes.get(i));\n         cur.addChildToFront(nodes.get(i + 1));\n \n       Node replace = ref.getParent();\n       replacement.copyInformationFromForTree(replace);\n","solution":"@@ -328,6 +328,9 @@ private void replaceAssignmentExpression(Var v, Reference ref,\n       }\n \n       Node replacement;\n    if (nodes.isEmpty()) {\n      replacement = new Node(Token.TRUE);\n    } else {\n         // All assignments evaluate to true, so make sure that the\n         // expr statement evaluates to true in case it matters.\n         nodes.add(new Node(Token.TRUE));\n@@ -347,6 +350,7 @@ private void replaceAssignmentExpression(Var v, Reference ref,\n         }\n         cur.addChildToFront(nodes.get(i));\n         cur.addChildToFront(nodes.get(i + 1));\n    }\n \n       Node replace = ref.getParent();\n       replacement.copyInformationFromForTree(replace);\n","CodeWithNoComments":"\n       }\n \n       Node replacement;\n                           nodes.add(new Node(Token.TRUE));\n\n         }\n         cur.addChildToFront(nodes.get(i));\n         cur.addChildToFront(nodes.get(i + 1));\n \n       Node replace = ref.getParent();\n       replacement.copyInformationFromForTree(replace);\n","SolutionWithNoComments":"\n       }\n \n       Node replacement;\n      if (nodes.isEmpty()) {\n        replacement = new Node(Token.TRUE);\n      } else {\n                           nodes.add(new Node(Token.TRUE));\n\n         }\n         cur.addChildToFront(nodes.get(i));\n         cur.addChildToFront(nodes.get(i + 1));\n      }\n \n       Node replace = ref.getParent();\n       replacement.copyInformationFromForTree(replace);\n"},{"ids":78,"error":"junit.framework.ComparisonFailure","source":"/src/com/google/javascript/jscomp/CodeConsumer.java","code":"@@ -238,7 +238,7 @@ void addNumber(double x) {\n       add(\" \");\n     }\n \n  if ((long) x == x) {\n       long value = (long) x;\n       long mantissa = value;\n       int exp = 0;\n","solution":"@@ -238,7 +238,7 @@ void addNumber(double x) {\n       add(\" \");\n     }\n \n  if ((long) x == x && !isNegativeZero(x)) {\n       long value = (long) x;\n       long mantissa = value;\n       int exp = 0;\n","CodeWithNoComments":"\n       add(\" \");\n     }\n \n    if ((long) x == x) {\n       long value = (long) x;\n       long mantissa = value;\n       int exp = 0;\n","SolutionWithNoComments":"\n       add(\" \");\n     }\n \n    if ((long) x == x && !isNegativeZero(x)) {\n       long value = (long) x;\n       long mantissa = value;\n       int exp = 0;\n"},{"ids":79,"error":"junit.framework.ComparisonFailure","source":"/src/com/google/javascript/jscomp/CodeGenerator.java","code":"@@ -742,7 +742,7 @@ static boolean isSimpleNumber(String s) {\n         return false;\n       }\n     }\n  return len > 0;\n   }\n \n   static double getSimpleNumber(String s) {\n","solution":"@@ -742,7 +742,7 @@ static boolean isSimpleNumber(String s) {\n         return false;\n       }\n     }\n  return len > 0 && s.charAt(0) != '0';\n   }\n \n   static double getSimpleNumber(String s) {\n","CodeWithNoComments":"\n         return false;\n       }\n     }\n    return len > 0;\n   }\n \n   static double getSimpleNumber(String s) {\n","SolutionWithNoComments":"\n         return false;\n       }\n     }\n    return len > 0 && s.charAt(0) != '0';\n   }\n \n   static double getSimpleNumber(String s) {\n"},{"ids":80,"error":"junit.framework.AssertionFailedError","source":"/src/com/google/javascript/jscomp/Compiler.java","code":"@@ -252,7 +252,8 @@ public void initOptions(CompilerOptions options) {\n           CheckLevel.OFF);\n     }\n \n  if (options.checkGlobalThisLevel.isOn()) {\n       options.setWarningLevel(\n           DiagnosticGroups.GLOBAL_THIS,\n           options.checkGlobalThisLevel);\n","solution":"@@ -252,7 +252,8 @@ public void initOptions(CompilerOptions options) {\n           CheckLevel.OFF);\n     }\n \n  if (options.checkGlobalThisLevel.isOn() &&\n      !options.disables(DiagnosticGroups.GLOBAL_THIS)) {\n       options.setWarningLevel(\n           DiagnosticGroups.GLOBAL_THIS,\n           options.checkGlobalThisLevel);\n","CodeWithNoComments":"\n           CheckLevel.OFF);\n     }\n \n    if (options.checkGlobalThisLevel.isOn()) {\n       options.setWarningLevel(\n           DiagnosticGroups.GLOBAL_THIS,\n           options.checkGlobalThisLevel);\n","SolutionWithNoComments":"\n           CheckLevel.OFF);\n     }\n \n    if (options.checkGlobalThisLevel.isOn() &&\n        !options.disables(DiagnosticGroups.GLOBAL_THIS)) {\n       options.setWarningLevel(\n           DiagnosticGroups.GLOBAL_THIS,\n           options.checkGlobalThisLevel);\n"},{"ids":81,"error":"java.lang.IllegalStateException","source":"/src/com/google/javascript/jscomp/FunctionRewriter.java","code":"@@ -114,7 +114,8 @@ public Node parseHelperCode(Reducer reducer) {\n   }\n \n   private static boolean isReduceableFunctionExpression(Node n) {\n  return NodeUtil.isFunctionExpression(n);\n   }\n \n   /**\n","solution":"@@ -114,7 +114,8 @@ public Node parseHelperCode(Reducer reducer) {\n   }\n \n   private static boolean isReduceableFunctionExpression(Node n) {\n  return NodeUtil.isFunctionExpression(n)\n      && !NodeUtil.isGetOrSetKey(n.getParent());\n   }\n \n   /**\n","CodeWithNoComments":"\n   }\n \n   private static boolean isReduceableFunctionExpression(Node n) {\n    return NodeUtil.isFunctionExpression(n);\n   }\n","SolutionWithNoComments":"\n   }\n \n   private static boolean isReduceableFunctionExpression(Node n) {\n    return NodeUtil.isFunctionExpression(n)\n        && !NodeUtil.isGetOrSetKey(n.getParent());\n   }\n"},{"ids":82,"error":"junit.framework.ComparisonFailure","source":"/src/com/google/javascript/jscomp/TypedScopeCreator.java","code":"@@ -1410,7 +1410,13 @@ void maybeDeclareQualifiedName(NodeTraversal t, JSDocInfo info,\n           // then they are responsible for making sure that the object literal's\n           // implicit prototype is set up appropriately. We just obey\n           // the @extends tag.\n        if (!qVar.isTypeInferred()) {\n             // If the programmer has declared that F inherits from Super,\n             // and they assign F.prototype to some arbitrary expression,\n             // there's not much we can do. We just ignore the expression,\n/src/com/google/javascript/rhino/jstype/FunctionType.java @@ -338,7 +338,6 @@ public void setPrototypeBasedOn(ObjectType baseType) {\n     //\n     // In the second case, we just use the anonymous object as the prototype.\n     if (baseType.hasReferenceName() ||\n      baseType.isUnknownType() ||\n         isNativeObjectType() ||\n         baseType.isFunctionPrototypeType() ||\n         !(baseType instanceof PrototypeObjectType)) {\n@@ -363,14 +362,18 @@ public boolean setPrototype(PrototypeObjectType prototype) {\n       return false;\n     }\n \n  boolean replacedPrototype = prototype != null;\n \n     this.prototype = prototype;\n     this.prototypeSlot = new SimpleSlot(\"prototype\", prototype, true);\n     this.prototype.setOwnerFunction(this);\n \n       // Disassociating the old prototype makes this easier to debug--\n       // we don't have to worry about two prototypes running around.\n \n     if (isConstructor() || isInterface()) {\n       FunctionType superClass = getSuperClassConstructor();\n","solution":"@@ -1410,7 +1410,13 @@ void maybeDeclareQualifiedName(NodeTraversal t, JSDocInfo info,\n           // then they are responsible for making sure that the object literal's\n           // implicit prototype is set up appropriately. We just obey\n           // the @extends tag.\n        ObjectType qVarType = ObjectType.cast(qVar.getType());\n        if (qVarType != null &&\n            rhsValue != null &&\n            rhsValue.getType() == Token.OBJECTLIT) {\n          typeRegistry.resetImplicitPrototype(\n              rhsValue.getJSType(), qVarType.getImplicitPrototype());\n        } else if (!qVar.isTypeInferred()) {\n             // If the programmer has declared that F inherits from Super,\n             // and they assign F.prototype to some arbitrary expression,\n             // there's not much we can do. We just ignore the expression,\n/src/com/google/javascript/rhino/jstype/FunctionType.java @@ -338,7 +338,6 @@ public void setPrototypeBasedOn(ObjectType baseType) {\n     //\n     // In the second case, we just use the anonymous object as the prototype.\n     if (baseType.hasReferenceName() ||\n         isNativeObjectType() ||\n         baseType.isFunctionPrototypeType() ||\n         !(baseType instanceof PrototypeObjectType)) {\n@@ -363,14 +362,18 @@ public boolean setPrototype(PrototypeObjectType prototype) {\n       return false;\n     }\n \n  PrototypeObjectType oldPrototype = this.prototype;\n  boolean replacedPrototype = oldPrototype != null;\n \n     this.prototype = prototype;\n     this.prototypeSlot = new SimpleSlot(\"prototype\", prototype, true);\n     this.prototype.setOwnerFunction(this);\n \n  if (oldPrototype != null) {\n       // Disassociating the old prototype makes this easier to debug--\n       // we don't have to worry about two prototypes running around.\n    oldPrototype.setOwnerFunction(null);\n  }\n \n     if (isConstructor() || isInterface()) {\n       FunctionType superClass = getSuperClassConstructor();\n","CodeWithNoComments":"\n                                           if (!qVar.isTypeInferred()) {\n\n               if (baseType.hasReferenceName() ||\n        baseType.isUnknownType() ||\n         isNativeObjectType() ||\n         baseType.isFunctionPrototypeType() ||\n         !(baseType instanceof PrototypeObjectType)) {\n\n       return false;\n     }\n \n    boolean replacedPrototype = prototype != null;\n \n     this.prototype = prototype;\n     this.prototypeSlot = new SimpleSlot(\"prototype\", prototype, true);\n     this.prototype.setOwnerFunction(this);\n \n               \n     if (isConstructor() || isInterface()) {\n       FunctionType superClass = getSuperClassConstructor();\n","SolutionWithNoComments":"\n                                           ObjectType qVarType = ObjectType.cast(qVar.getType());\n          if (qVarType != null &&\n              rhsValue != null &&\n              rhsValue.getType() == Token.OBJECTLIT) {\n            typeRegistry.resetImplicitPrototype(\n                rhsValue.getJSType(), qVarType.getImplicitPrototype());\n          } else if (!qVar.isTypeInferred()) {\n\n               if (baseType.hasReferenceName() ||\n         isNativeObjectType() ||\n         baseType.isFunctionPrototypeType() ||\n         !(baseType instanceof PrototypeObjectType)) {\n\n       return false;\n     }\n \n    PrototypeObjectType oldPrototype = this.prototype;\n    boolean replacedPrototype = oldPrototype != null;\n \n     this.prototype = prototype;\n     this.prototypeSlot = new SimpleSlot(\"prototype\", prototype, true);\n     this.prototype.setOwnerFunction(this);\n \n    if (oldPrototype != null) {\n                    oldPrototype.setOwnerFunction(null);\n    }\n \n     if (isConstructor() || isInterface()) {\n       FunctionType superClass = getSuperClassConstructor();\n"},{"ids":83,"error":"junit.framework.ComparisonFailure","source":"/src/com/google/javascript/jscomp/SourceFile.java","code":"@@ -239,7 +239,11 @@ public String getLine(int lineNumber) {\n       // If next new line cannot be found, there are two cases\n       // 1. pos already reaches the end of file, then null should be returned\n       // 2. otherwise, return the contents between pos and the end of file.\n         return null;\n     } else {\n       return js.substring(pos, js.indexOf('\\n', pos));\n     }\n","solution":"@@ -239,7 +239,11 @@ public String getLine(int lineNumber) {\n       // If next new line cannot be found, there are two cases\n       // 1. pos already reaches the end of file, then null should be returned\n       // 2. otherwise, return the contents between pos and the end of file.\n    if (pos >= js.length()) {\n         return null;\n    } else {\n      return js.substring(pos, js.length());\n    }\n     } else {\n       return js.substring(pos, js.indexOf('\\n', pos));\n     }\n","CodeWithNoComments":"\n                              return null;\n     } else {\n       return js.substring(pos, js.indexOf('\\n', pos));\n     }\n","SolutionWithNoComments":"\n                           if (pos >= js.length()) {\n         return null;\n      } else {\n        return js.substring(pos, js.length());\n      }\n     } else {\n       return js.substring(pos, js.indexOf('\\n', pos));\n     }\n"},{"ids":84,"error":"java.lang.IllegalStateException","source":"/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java","code":"@@ -203,8 +203,12 @@ private void computeGenKill(Node n, BitSet gen, BitSet kill,\n             // for(var x in y) {...}\n             lhs = lhs.getLastChild();\n           }\n             addToSetIfLocal(lhs, kill);\n             addToSetIfLocal(lhs, gen);\n           computeGenKill(rhs, gen, kill, conditional);\n         }\n         return;\n","solution":"@@ -203,8 +203,12 @@ private void computeGenKill(Node n, BitSet gen, BitSet kill,\n             // for(var x in y) {...}\n             lhs = lhs.getLastChild();\n           }\n        if (NodeUtil.isName(lhs)) {\n             addToSetIfLocal(lhs, kill);\n             addToSetIfLocal(lhs, gen);\n        } else {\n          computeGenKill(lhs, gen, kill, conditional);\n        }\n           computeGenKill(rhs, gen, kill, conditional);\n         }\n         return;\n","CodeWithNoComments":"\n                          lhs = lhs.getLastChild();\n           }\n             addToSetIfLocal(lhs, kill);\n             addToSetIfLocal(lhs, gen);\n           computeGenKill(rhs, gen, kill, conditional);\n         }\n         return;\n","SolutionWithNoComments":"\n                          lhs = lhs.getLastChild();\n           }\n          if (NodeUtil.isName(lhs)) {\n             addToSetIfLocal(lhs, kill);\n             addToSetIfLocal(lhs, gen);\n          } else {\n            computeGenKill(lhs, gen, kill, conditional);\n          }\n           computeGenKill(rhs, gen, kill, conditional);\n         }\n         return;\n"},{"ids":85,"error":"junit.framework.AssertionFailedError","source":"/src/com/google/javascript/jscomp/ClosureCodingConvention.java","code":"@@ -194,7 +194,7 @@ private static String extractClassNameIfGoog(Node node, Node parent,\n         String qualifiedName = callee.getQualifiedName();\n         if (functionName.equals(qualifiedName)) {\n           Node target = callee.getNext();\n        if (target != null) {\n             className = target.getString();\n           }\n         }\n","solution":"@@ -194,7 +194,7 @@ private static String extractClassNameIfGoog(Node node, Node parent,\n         String qualifiedName = callee.getQualifiedName();\n         if (functionName.equals(qualifiedName)) {\n           Node target = callee.getNext();\n        if (target != null && target.getType() == Token.STRING) {\n             className = target.getString();\n           }\n         }\n","CodeWithNoComments":"\n         String qualifiedName = callee.getQualifiedName();\n         if (functionName.equals(qualifiedName)) {\n           Node target = callee.getNext();\n          if (target != null) {\n             className = target.getString();\n           }\n         }\n","SolutionWithNoComments":"\n         String qualifiedName = callee.getQualifiedName();\n         if (functionName.equals(qualifiedName)) {\n           Node target = callee.getNext();\n          if (target != null && target.getType() == Token.STRING) {\n             className = target.getString();\n           }\n         }\n"},{"ids":86,"error":"junit.framework.ComparisonFailure","source":"/src/com/google/javascript/jscomp/LightweightMessageFormatter.java","code":"@@ -95,7 +95,7 @@ private String format(JSError error, boolean warning) {\n       // charno == sourceExpert.length() means something is missing\n       // at the end of the line\n       if (excerpt.equals(LINE)\n        && 0 <= charno && charno < sourceExcerpt.length()) {\n         for (int i = 0; i < charno; i++) {\n           char c = sourceExcerpt.charAt(i);\n           if (Character.isWhitespace(c)) {\n","solution":"@@ -95,7 +95,7 @@ private String format(JSError error, boolean warning) {\n       // charno == sourceExpert.length() means something is missing\n       // at the end of the line\n       if (excerpt.equals(LINE)\n        && 0 <= charno && charno <= sourceExcerpt.length()) {\n         for (int i = 0; i < charno; i++) {\n           char c = sourceExcerpt.charAt(i);\n           if (Character.isWhitespace(c)) {\n","CodeWithNoComments":"\n                     if (excerpt.equals(LINE)\n          && 0 <= charno && charno < sourceExcerpt.length()) {\n         for (int i = 0; i < charno; i++) {\n           char c = sourceExcerpt.charAt(i);\n           if (Character.isWhitespace(c)) {\n","SolutionWithNoComments":"\n                     if (excerpt.equals(LINE)\n          && 0 <= charno && charno <= sourceExcerpt.length()) {\n         for (int i = 0; i < charno; i++) {\n           char c = sourceExcerpt.charAt(i);\n           if (Character.isWhitespace(c)) {\n"},{"ids":87,"error":"junit.framework.AssertionFailedError","source":"/src/com/google/javascript/jscomp/NodeUtil.java","code":"@@ -105,6 +105,8 @@ static TernaryValue getImpureBooleanValue(Node n) {\n         // ignoring side-effects\n         return TernaryValue.TRUE;\n \n \n       default:\n         return getPureBooleanValue(n);\n@@ -133,7 +135,10 @@ static TernaryValue getPureBooleanValue(Node n) {\n         return TernaryValue.FALSE;\n \n       case Token.VOID:\n           return TernaryValue.FALSE;\n \n       case Token.NAME:\n         String name = n.getString();\n","solution":"@@ -105,6 +105,8 @@ static TernaryValue getImpureBooleanValue(Node n) {\n         // ignoring side-effects\n         return TernaryValue.TRUE;\n \n    case Token.VOID:\n      return TernaryValue.FALSE;\n \n       default:\n         return getPureBooleanValue(n);\n@@ -133,7 +135,10 @@ static TernaryValue getPureBooleanValue(Node n) {\n         return TernaryValue.FALSE;\n \n       case Token.VOID:\n      if (!mayHaveSideEffects(n.getFirstChild())) {\n           return TernaryValue.FALSE;\n      }\n      break;\n \n       case Token.NAME:\n         String name = n.getString();\n","CodeWithNoComments":"\n                  return TernaryValue.TRUE;\n \n \n       default:\n         return getPureBooleanValue(n);\n\n         return TernaryValue.FALSE;\n \n       case Token.VOID:\n           return TernaryValue.FALSE;\n \n       case Token.NAME:\n         String name = n.getString();\n","SolutionWithNoComments":"\n                  return TernaryValue.TRUE;\n \n      case Token.VOID:\n        return TernaryValue.FALSE;\n \n       default:\n         return getPureBooleanValue(n);\n\n         return TernaryValue.FALSE;\n \n       case Token.VOID:\n        if (!mayHaveSideEffects(n.getFirstChild())) {\n           return TernaryValue.FALSE;\n        }\n        break;\n \n       case Token.NAME:\n         String name = n.getString();\n"},{"ids":88,"error":"junit.framework.ComparisonFailure","source":"/src/com/google/javascript/jscomp/LightweightMessageFormatter.java","code":"@@ -95,7 +95,7 @@ private String format(JSError error, boolean warning) {\n       // charno == sourceExpert.length() means something is missing\n       // at the end of the line\n       if (excerpt.equals(LINE)\n        && 0 <= charno && charno < sourceExcerpt.length()) {\n         for (int i = 0; i < charno; i++) {\n           char c = sourceExcerpt.charAt(i);\n           if (Character.isWhitespace(c)) {\n","solution":"@@ -95,7 +95,7 @@ private String format(JSError error, boolean warning) {\n       // charno == sourceExpert.length() means something is missing\n       // at the end of the line\n       if (excerpt.equals(LINE)\n        && 0 <= charno && charno <= sourceExcerpt.length()) {\n         for (int i = 0; i < charno; i++) {\n           char c = sourceExcerpt.charAt(i);\n           if (Character.isWhitespace(c)) {\n","CodeWithNoComments":"\n                     if (excerpt.equals(LINE)\n          && 0 <= charno && charno < sourceExcerpt.length()) {\n         for (int i = 0; i < charno; i++) {\n           char c = sourceExcerpt.charAt(i);\n           if (Character.isWhitespace(c)) {\n","SolutionWithNoComments":"\n                     if (excerpt.equals(LINE)\n          && 0 <= charno && charno <= sourceExcerpt.length()) {\n         for (int i = 0; i < charno; i++) {\n           char c = sourceExcerpt.charAt(i);\n           if (Character.isWhitespace(c)) {\n"},{"ids":89,"error":"junit.framework.AssertionFailedError","source":"/src/com/google/javascript/jscomp/NodeUtil.java","code":"@@ -955,6 +955,12 @@ static boolean functionCallHasSideEffects(\n       }\n \n       // Functions in the \"Math\" namespace have no side effects.\n \n       if (compiler != null && !compiler.hasRegExpGlobalReferences()) {\n         if (nameNode.getFirstChild().getType() == Token.REGEXP\n","solution":"@@ -955,6 +955,12 @@ static boolean functionCallHasSideEffects(\n       }\n \n       // Functions in the \"Math\" namespace have no side effects.\n    if (nameNode.getFirstChild().getType() == Token.NAME) {\n      String namespaceName = nameNode.getFirstChild().getString();\n      if (namespaceName.equals(\"Math\")) {\n        return false;\n      }\n    }\n \n       if (compiler != null && !compiler.hasRegExpGlobalReferences()) {\n         if (nameNode.getFirstChild().getType() == Token.REGEXP\n","CodeWithNoComments":"\n       }\n \n        \n       if (compiler != null && !compiler.hasRegExpGlobalReferences()) {\n         if (nameNode.getFirstChild().getType() == Token.REGEXP\n","SolutionWithNoComments":"\n       }\n \n             if (nameNode.getFirstChild().getType() == Token.NAME) {\n        String namespaceName = nameNode.getFirstChild().getString();\n        if (namespaceName.equals(\"Math\")) {\n          return false;\n        }\n      }\n \n       if (compiler != null && !compiler.hasRegExpGlobalReferences()) {\n         if (nameNode.getFirstChild().getType() == Token.REGEXP\n"},{"ids":90,"error":"junit.framework.AssertionFailedError","source":"/src/com/google/javascript/jscomp/Compiler.java","code":"@@ -1429,7 +1429,7 @@ public Void call() throws Exception {\n \n         // if LanguageMode is ECMASCRIPT5_STRICT, only print 'use strict'\n         // for the first input file\n      String code = toSource(root, sourceMap);\n         if (!code.isEmpty()) {\n           cb.append(code);\n \n@@ -1458,19 +1458,19 @@ public Void call() throws Exception {\n   @Override\n   String toSource(Node n) {\n     initCompilerOptionsIfTesting();\n  return toSource(n, null);\n   }\n \n   /**\n    * Generates JavaScript source code for an AST.\n    */\nprivate String toSource(Node n, SourceMap sourceMap) {\n     CodePrinter.Builder builder = new CodePrinter.Builder(n);\n     builder.setPrettyPrint(options.prettyPrint);\n     builder.setLineBreak(options.lineBreak);\n     builder.setSourceMap(sourceMap);\n     builder.setSourceMapDetailLevel(options.sourceMapDetailLevel);\n  builder.setTagAsStrict(\n         options.getLanguageOut() == LanguageMode.ECMASCRIPT5_STRICT);\n     builder.setLineLengthThreshold(options.lineLengthThreshold);\n \n","solution":"@@ -1429,7 +1429,7 @@ public Void call() throws Exception {\n \n         // if LanguageMode is ECMASCRIPT5_STRICT, only print 'use strict'\n         // for the first input file\n      String code = toSource(root, sourceMap, inputSeqNum == 0);\n         if (!code.isEmpty()) {\n           cb.append(code);\n \n@@ -1458,19 +1458,19 @@ public Void call() throws Exception {\n   @Override\n   String toSource(Node n) {\n     initCompilerOptionsIfTesting();\n  return toSource(n, null, true);\n   }\n \n   /**\n    * Generates JavaScript source code for an AST.\n    */\nprivate String toSource(Node n, SourceMap sourceMap, boolean firstOutput) {\n     CodePrinter.Builder builder = new CodePrinter.Builder(n);\n     builder.setPrettyPrint(options.prettyPrint);\n     builder.setLineBreak(options.lineBreak);\n     builder.setSourceMap(sourceMap);\n     builder.setSourceMapDetailLevel(options.sourceMapDetailLevel);\n  builder.setTagAsStrict(firstOutput &&\n         options.getLanguageOut() == LanguageMode.ECMASCRIPT5_STRICT);\n     builder.setLineLengthThreshold(options.lineLengthThreshold);\n \n","CodeWithNoComments":"\n \n                          String code = toSource(root, sourceMap);\n         if (!code.isEmpty()) {\n           cb.append(code);\n \n\n   @Override\n   String toSource(Node n) {\n     initCompilerOptionsIfTesting();\n    return toSource(n, null);\n   }\n \n  private String toSource(Node n, SourceMap sourceMap) {\n     CodePrinter.Builder builder = new CodePrinter.Builder(n);\n     builder.setPrettyPrint(options.prettyPrint);\n     builder.setLineBreak(options.lineBreak);\n     builder.setSourceMap(sourceMap);\n     builder.setSourceMapDetailLevel(options.sourceMapDetailLevel);\n    builder.setTagAsStrict(\n         options.getLanguageOut() == LanguageMode.ECMASCRIPT5_STRICT);\n     builder.setLineLengthThreshold(options.lineLengthThreshold);\n \n","SolutionWithNoComments":"\n \n                          String code = toSource(root, sourceMap, inputSeqNum == 0);\n         if (!code.isEmpty()) {\n           cb.append(code);\n \n\n   @Override\n   String toSource(Node n) {\n     initCompilerOptionsIfTesting();\n    return toSource(n, null, true);\n   }\n \n  private String toSource(Node n, SourceMap sourceMap, boolean firstOutput) {\n     CodePrinter.Builder builder = new CodePrinter.Builder(n);\n     builder.setPrettyPrint(options.prettyPrint);\n     builder.setLineBreak(options.lineBreak);\n     builder.setSourceMap(sourceMap);\n     builder.setSourceMapDetailLevel(options.sourceMapDetailLevel);\n    builder.setTagAsStrict(firstOutput &&\n         options.getLanguageOut() == LanguageMode.ECMASCRIPT5_STRICT);\n     builder.setLineLengthThreshold(options.lineLengthThreshold);\n \n"},{"ids":91,"error":"junit.framework.ComparisonFailure","source":"/src/com/google/javascript/jscomp/CodeGenerator.java","code":"@@ -1012,7 +1012,7 @@ static String strEscape(String s, char quote,\n     for (int i = 0; i < s.length(); i++) {\n       char c = s.charAt(i);\n       switch (c) {\n      case '\\0': sb.append(\"\\\\0\"); break;\n         case '\\n': sb.append(\"\\\\n\"); break;\n         case '\\r': sb.append(\"\\\\r\"); break;\n         case '\\t': sb.append(\"\\\\t\"); break;\n","solution":"@@ -1012,7 +1012,7 @@ static String strEscape(String s, char quote,\n     for (int i = 0; i < s.length(); i++) {\n       char c = s.charAt(i);\n       switch (c) {\n      case '\\0': sb.append(\"\\\\000\"); break;\n         case '\\n': sb.append(\"\\\\n\"); break;\n         case '\\r': sb.append(\"\\\\r\"); break;\n         case '\\t': sb.append(\"\\\\t\"); break;\n","CodeWithNoComments":"\n     for (int i = 0; i < s.length(); i++) {\n       char c = s.charAt(i);\n       switch (c) {\n        case '\\0': sb.append(\"\\\\0\"); break;\n         case '\\n': sb.append(\"\\\\n\"); break;\n         case '\\r': sb.append(\"\\\\r\"); break;\n         case '\\t': sb.append(\"\\\\t\"); break;\n","SolutionWithNoComments":"\n     for (int i = 0; i < s.length(); i++) {\n       char c = s.charAt(i);\n       switch (c) {\n        case '\\0': sb.append(\"\\\\000\"); break;\n         case '\\n': sb.append(\"\\\\n\"); break;\n         case '\\r': sb.append(\"\\\\r\"); break;\n         case '\\t': sb.append(\"\\\\t\"); break;\n"},{"ids":92,"error":"junit.framework.AssertionFailedError","source":"/src/com/google/javascript/jscomp/TypeCheck.java","code":"@@ -513,7 +513,9 @@ public void visit(NodeTraversal t, Node n, Node parent) {\n         // Object literal keys are handled with OBJECTLIT\n         if (!NodeUtil.isObjectLitKey(n, n.getParent())) {\n           ensureTyped(t, n, STRING_TYPE);\n           // Object literal keys are not typeable\n         }\n         break;\n \n","solution":"@@ -513,7 +513,9 @@ public void visit(NodeTraversal t, Node n, Node parent) {\n         // Object literal keys are handled with OBJECTLIT\n         if (!NodeUtil.isObjectLitKey(n, n.getParent())) {\n           ensureTyped(t, n, STRING_TYPE);\n      } else {\n           // Object literal keys are not typeable\n        typeable = false;\n         }\n         break;\n \n","CodeWithNoComments":"\n                  if (!NodeUtil.isObjectLitKey(n, n.getParent())) {\n           ensureTyped(t, n, STRING_TYPE);\n                    }\n         break;\n \n","SolutionWithNoComments":"\n                  if (!NodeUtil.isObjectLitKey(n, n.getParent())) {\n           ensureTyped(t, n, STRING_TYPE);\n        } else {\n                     typeable = false;\n         }\n         break;\n \n"},{"ids":93,"error":"junit.framework.ComparisonFailure","source":"/src/com/google/javascript/jscomp/CodeGenerator.java","code":"@@ -1042,7 +1042,7 @@ static String strEscape(String s, char quote,\n             // No charsetEncoder provided - pass straight latin characters\n             // through, and escape the rest.  Doing the explicit character\n             // check is measurably faster than using the CharsetEncoder.\n          if (c > 0x1f && c <= 0x7f) {\n               sb.append(c);\n             } else {\n               // Other characters can be misinterpreted by some js parsers,\n","solution":"@@ -1042,7 +1042,7 @@ static String strEscape(String s, char quote,\n             // No charsetEncoder provided - pass straight latin characters\n             // through, and escape the rest.  Doing the explicit character\n             // check is measurably faster than using the CharsetEncoder.\n          if (c > 0x1f && c < 0x7f) {\n               sb.append(c);\n             } else {\n               // Other characters can be misinterpreted by some js parsers,\n","CodeWithNoComments":"\n                                                   if (c > 0x1f && c <= 0x7f) {\n               sb.append(c);\n             } else {\n               ","SolutionWithNoComments":"\n                                                   if (c > 0x1f && c < 0x7f) {\n               sb.append(c);\n             } else {\n               "},{"ids":94,"error":"junit.framework.AssertionFailedError","source":"/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java","code":"@@ -315,7 +315,7 @@ private boolean isPrototypePropertyAssign(Node assign) {\n       Node n = assign.getFirstChild();\n       if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)\n           && n.getType() == Token.GETPROP\n        ) {\n         // We want to exclude the assignment itself from the usage list\n         boolean isChainedProperty =\n             n.getFirstChild().getType() == Token.GETPROP;\n","solution":"@@ -315,7 +315,7 @@ private boolean isPrototypePropertyAssign(Node assign) {\n       Node n = assign.getFirstChild();\n       if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)\n           && n.getType() == Token.GETPROP\n        && assign.getParent().getType() == Token.EXPR_RESULT) {\n         // We want to exclude the assignment itself from the usage list\n         boolean isChainedProperty =\n             n.getFirstChild().getType() == Token.GETPROP;\n","CodeWithNoComments":"\n       Node n = assign.getFirstChild();\n       if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)\n           && n.getType() == Token.GETPROP\n          ) {\n                  boolean isChainedProperty =\n             n.getFirstChild().getType() == Token.GETPROP;\n","SolutionWithNoComments":"\n       Node n = assign.getFirstChild();\n       if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)\n           && n.getType() == Token.GETPROP\n          && assign.getParent().getType() == Token.EXPR_RESULT) {\n                  boolean isChainedProperty =\n             n.getFirstChild().getType() == Token.GETPROP;\n"},{"ids":95,"error":"junit.framework.AssertionFailedError","source":"/src/com/google/javascript/jscomp/PeepholeFoldConstants.java","code":"@@ -904,8 +904,8 @@ private Node tryFoldComparison(Node n, Node left, Node right) {\n           && right.getString().equals(\"undefined\"))\n           || (Token.VOID == right.getType()\n               && NodeUtil.isLiteralValue(right.getFirstChild(), false)));\n  int lhType = left.getType();\n  int rhType = right.getType();\n     switch (lhType) {\n       case Token.VOID:\n         if (!NodeUtil.isLiteralValue(left.getFirstChild(), false)) {\n@@ -1071,6 +1071,19 @@ private Node tryFoldComparison(Node n, Node left, Node right) {\n   /**\n    * @return Translate NOT expressions into TRUE or FALSE when possible.\n    */\n \n   /**\n    * The result of the comparison as a Boolean or null if the\n","solution":"@@ -904,8 +904,8 @@ private Node tryFoldComparison(Node n, Node left, Node right) {\n           && right.getString().equals(\"undefined\"))\n           || (Token.VOID == right.getType()\n               && NodeUtil.isLiteralValue(right.getFirstChild(), false)));\n  int lhType = getNormalizedNodeType(left);\n  int rhType = getNormalizedNodeType(right);\n     switch (lhType) {\n       case Token.VOID:\n         if (!NodeUtil.isLiteralValue(left.getFirstChild(), false)) {\n@@ -1071,6 +1071,19 @@ private Node tryFoldComparison(Node n, Node left, Node right) {\n   /**\n    * @return Translate NOT expressions into TRUE or FALSE when possible.\n    */\nprivate int getNormalizedNodeType(Node n) {\n  int type = n.getType();\n  if (type == Token.NOT) {\n    TernaryValue value = NodeUtil.getPureBooleanValue(n);\n    switch (value) {\n      case TRUE:\n        return Token.TRUE;\n      case FALSE:\n        return Token.FALSE;\n    }\n  }\n  return type;\n}\n \n   /**\n    * The result of the comparison as a Boolean or null if the\n","CodeWithNoComments":"\n           && right.getString().equals(\"undefined\"))\n           || (Token.VOID == right.getType()\n               && NodeUtil.isLiteralValue(right.getFirstChild(), false)));\n    int lhType = left.getType();\n    int rhType = right.getType();\n     switch (lhType) {\n       case Token.VOID:\n         if (!NodeUtil.isLiteralValue(left.getFirstChild(), false)) {\n\n","SolutionWithNoComments":"\n           && right.getString().equals(\"undefined\"))\n           || (Token.VOID == right.getType()\n               && NodeUtil.isLiteralValue(right.getFirstChild(), false)));\n    int lhType = getNormalizedNodeType(left);\n    int rhType = getNormalizedNodeType(right);\n     switch (lhType) {\n       case Token.VOID:\n         if (!NodeUtil.isLiteralValue(left.getFirstChild(), false)) {\n\n    int type = n.getType();\n    if (type == Token.NOT) {\n      TernaryValue value = NodeUtil.getPureBooleanValue(n);\n      switch (value) {\n        case TRUE:\n          return Token.TRUE;\n        case FALSE:\n          return Token.FALSE;\n      }\n    }\n    return type;\n  }\n"},{"ids":96,"error":"junit.framework.AssertionFailedError","source":"/src/com/google/javascript/jscomp/CheckAccessControls.java","code":"@@ -413,7 +413,7 @@ private void checkPropertyVisibility(NodeTraversal t,\n     if (objectType != null) {\n       // Is this a normal property access, or are we trying to override\n       // an existing property?\n    boolean isOverride = t.inGlobalScope() &&\n           parent.getType() == Token.ASSIGN &&\n           parent.getFirstChild() == getprop;\n \n","solution":"@@ -413,7 +413,7 @@ private void checkPropertyVisibility(NodeTraversal t,\n     if (objectType != null) {\n       // Is this a normal property access, or are we trying to override\n       // an existing property?\n    boolean isOverride = parent.getJSDocInfo() != null &&\n           parent.getType() == Token.ASSIGN &&\n           parent.getFirstChild() == getprop;\n \n","CodeWithNoComments":"\n     if (objectType != null) {\n                    boolean isOverride = t.inGlobalScope() &&\n           parent.getType() == Token.ASSIGN &&\n           parent.getFirstChild() == getprop;\n \n","SolutionWithNoComments":"\n     if (objectType != null) {\n                    boolean isOverride = parent.getJSDocInfo() != null &&\n           parent.getType() == Token.ASSIGN &&\n           parent.getFirstChild() == getprop;\n \n"},{"ids":97,"error":"junit.framework.AssertionFailedError","source":"/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java","code":"@@ -865,9 +865,9 @@ boolean parse() {\n                         }\n                         break;\n                     }\n \n                   token = eatTokensUntilEOL();\n                }\n                   continue retry;\n               }\n             }\n@@ -1706,6 +1706,7 @@ private Node parseBasicTypeExpression(JsDocToken token) {\n       }\n     }\n \n     return reportGenericTypeSyntaxWarning();\n   }\n \n@@ -1758,6 +1759,7 @@ private Node parseFunctionType(JsDocToken token) {\n     // NOTE(nicksantos): We're not implementing generics at the moment, so\n     // just throw out TypeParameters.\n     if (token != JsDocToken.LP) {\n       return reportTypeSyntaxWarning(\"msg.jsdoc.missing.lp\");\n     }\n \n","solution":"@@ -865,9 +865,9 @@ boolean parse() {\n                         }\n                         break;\n                     }\n                }\n \n                   token = eatTokensUntilEOL();\n                   continue retry;\n               }\n             }\n@@ -1706,6 +1706,7 @@ private Node parseBasicTypeExpression(JsDocToken token) {\n       }\n     }\n \n  restoreLookAhead(token);\n     return reportGenericTypeSyntaxWarning();\n   }\n \n@@ -1758,6 +1759,7 @@ private Node parseFunctionType(JsDocToken token) {\n     // NOTE(nicksantos): We're not implementing generics at the moment, so\n     // just throw out TypeParameters.\n     if (token != JsDocToken.LP) {\n    restoreLookAhead(token);\n       return reportTypeSyntaxWarning(\"msg.jsdoc.missing.lp\");\n     }\n \n","CodeWithNoComments":"\n                         }\n                         break;\n                     }\n \n                   token = eatTokensUntilEOL();\n                  }\n                   continue retry;\n               }\n             }\n\n       }\n     }\n \n     return reportGenericTypeSyntaxWarning();\n   }\n\n\n               if (token != JsDocToken.LP) {\n       return reportTypeSyntaxWarning(\"msg.jsdoc.missing.lp\");\n     }\n \n","SolutionWithNoComments":"\n                         }\n                         break;\n                     }\n                  }\n \n                   token = eatTokensUntilEOL();\n                   continue retry;\n               }\n             }\n\n       }\n     }\n \n    restoreLookAhead(token);\n     return reportGenericTypeSyntaxWarning();\n   }\n \n\n               if (token != JsDocToken.LP) {\n      restoreLookAhead(token);\n       return reportTypeSyntaxWarning(\"msg.jsdoc.missing.lp\");\n     }\n \n"},{"ids":98,"error":"junit.framework.AssertionFailedError","source":"/src/com/google/javascript/jscomp/TypeCheck.java","code":"@@ -1577,6 +1577,13 @@ private void visitCall(NodeTraversal t, Node n) {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());\n","solution":"@@ -1577,6 +1577,13 @@ private void visitCall(NodeTraversal t, Node n) {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n    if (functionType.isOrdinaryFunction() &&\n        !functionType.getTypeOfThis().isUnknownType() &&\n        !functionType.getTypeOfThis().isNativeObjectType() &&\n        !(child.getType() == Token.GETELEM ||\n          child.getType() == Token.GETPROP)) {\n      report(t, n, EXPECTED_THIS_TYPE, functionType.toString());\n    }\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());\n","CodeWithNoComments":"\n \n               \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());\n","SolutionWithNoComments":"\n \n                    if (functionType.isOrdinaryFunction() &&\n          !functionType.getTypeOfThis().isUnknownType() &&\n          !functionType.getTypeOfThis().isNativeObjectType() &&\n          !(child.getType() == Token.GETELEM ||\n            child.getType() == Token.GETPROP)) {\n        report(t, n, EXPECTED_THIS_TYPE, functionType.toString());\n      }\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());\n"},{"ids":99,"error":"junit.framework.AssertionFailedError","source":"/src/com/google/javascript/jscomp/TypedScopeCreator.java","code":"@@ -1742,7 +1742,7 @@ private void declareArguments(Node functionNode) {\n           for (Node astParameter : astParameters.children()) {\n             if (jsDocParameter != null) {\n               defineSlot(astParameter, functionNode,\n                jsDocParameter.getJSType(), true);\n               jsDocParameter = jsDocParameter.getNext();\n             } else {\n               defineSlot(astParameter, functionNode, null, true);\n","solution":"@@ -1742,7 +1742,7 @@ private void declareArguments(Node functionNode) {\n           for (Node astParameter : astParameters.children()) {\n             if (jsDocParameter != null) {\n               defineSlot(astParameter, functionNode,\n                jsDocParameter.getJSType(), false);\n               jsDocParameter = jsDocParameter.getNext();\n             } else {\n               defineSlot(astParameter, functionNode, null, true);\n","CodeWithNoComments":"\n           for (Node astParameter : astParameters.children()) {\n             if (jsDocParameter != null) {\n               defineSlot(astParameter, functionNode,\n                  jsDocParameter.getJSType(), true);\n               jsDocParameter = jsDocParameter.getNext();\n             } else {\n               defineSlot(astParameter, functionNode, null, true);\n","SolutionWithNoComments":"\n           for (Node astParameter : astParameters.children()) {\n             if (jsDocParameter != null) {\n               defineSlot(astParameter, functionNode,\n                  jsDocParameter.getJSType(), false);\n               jsDocParameter = jsDocParameter.getNext();\n             } else {\n               defineSlot(astParameter, functionNode, null, true);\n"},{"ids":100,"error":"junit.framework.AssertionFailedError","source":"/src/com/google/javascript/jscomp/FunctionToBlockMutator.java","code":"@@ -149,6 +149,8 @@ private void makeLocalNamesUnique(Node fnNode, boolean isCallInLoop) {\n                 \"inline_\",\n                 isCallInLoop)));\n     // Make label names unique to this instance.\n   }\n \n   static class LabelNameSupplier implements Supplier<String> {\n/src/com/google/javascript/jscomp/RenameLabels.java @@ -212,7 +212,7 @@ private void visitLabel(Node node, Node parent) {\n       String name = nameNode.getString();\n       LabelInfo li = getLabelInfo(name);\n       // This is a label...\n    if (li.referenced) {\n         String newName = getNameForId(li.id);\n         if (!name.equals(newName)) {\n           // ... and it is used, give it the short name.\n","solution":"@@ -149,6 +149,8 @@ private void makeLocalNamesUnique(Node fnNode, boolean isCallInLoop) {\n                 \"inline_\",\n                 isCallInLoop)));\n     // Make label names unique to this instance.\n  new RenameLabels(compiler, new LabelNameSupplier(idSupplier), false)\n      .process(null, fnNode);\n   }\n \n   static class LabelNameSupplier implements Supplier<String> {\n/src/com/google/javascript/jscomp/RenameLabels.java @@ -212,7 +212,7 @@ private void visitLabel(Node node, Node parent) {\n       String name = nameNode.getString();\n       LabelInfo li = getLabelInfo(name);\n       // This is a label...\n    if (li.referenced || !removeUnused) {\n         String newName = getNameForId(li.id);\n         if (!name.equals(newName)) {\n           // ... and it is used, give it the short name.\n","CodeWithNoComments":"\n                 \"inline_\",\n                 isCallInLoop)));\n        }\n \n   static class LabelNameSupplier implements Supplier<String> {\n\n       String name = nameNode.getString();\n       LabelInfo li = getLabelInfo(name);\n             if (li.referenced) {\n         String newName = getNameForId(li.id);\n         if (!name.equals(newName)) {\n           ","SolutionWithNoComments":"\n                 \"inline_\",\n                 isCallInLoop)));\n         new RenameLabels(compiler, new LabelNameSupplier(idSupplier), false)\n        .process(null, fnNode);\n   }\n \n   static class LabelNameSupplier implements Supplier<String> {\n\n       String name = nameNode.getString();\n       LabelInfo li = getLabelInfo(name);\n             if (li.referenced || !removeUnused) {\n         String newName = getNameForId(li.id);\n         if (!name.equals(newName)) {\n           "},{"ids":101,"error":"junit.framework.AssertionFailedError","source":"/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java","code":"@@ -297,26 +297,40 @@ private boolean isVariableStillLiveWithinExpression(\n           // If the currently node is the first child of\n           // AND/OR, be conservative only consider the READs\n           // of the second operand.\n \n         case Token.HOOK:\n           // If current node is the condition, check each following\n           // branch, otherwise it is a conditional branch and the\n           // other branch can be ignored.\n \n         default:\n           for(Node sibling = n.getNext(); sibling != null;\n               sibling = sibling.getNext()) {\n          if (!ControlFlowGraph.isEnteringNewCfgNode(sibling)) {\n             state = isVariableReadBeforeKill(sibling, variable);\n \n       // If we see a READ or KILL there is no need to continue.\n       if (state == VariableLiveness.READ) {\n         return true;\n       } else if (state == VariableLiveness.KILL) {\n         return false;\n          }\n        }\n    }\n       }\n       n = n.getParent();\n     }\n@@ -337,6 +351,9 @@ private boolean isVariableStillLiveWithinExpression(\n    */\n   private VariableLiveness isVariableReadBeforeKill(\n       Node n, String variable) {\n \n     if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n       if (NodeUtil.isLhs(n, n.getParent())) {\n@@ -359,9 +376,25 @@ private VariableLiveness isVariableReadBeforeKill(\n       // Conditionals\n       case Token.OR:\n       case Token.AND:\n         // With a AND/OR the first branch always runs, but the second is\n         // may not.\n       case Token.HOOK:\n         return checkHookBranchReadBeforeKill(\n             n.getFirstChild().getNext(), n.getLastChild(), variable);\n \n@@ -369,13 +402,11 @@ private VariableLiveness isVariableReadBeforeKill(\n         // Expressions are evaluated left-right, depth first.\n         for (Node child = n.getFirstChild();\n             child != null; child = child.getNext()) {\n        if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION\n           VariableLiveness state = isVariableReadBeforeKill(child, variable);\n           if (state != VariableLiveness.MAYBE_LIVE) {\n             return state;\n           }\n         }\n    }\n     }\n \n     return VariableLiveness.MAYBE_LIVE;\n","solution":"@@ -297,26 +297,40 @@ private boolean isVariableStillLiveWithinExpression(\n           // If the currently node is the first child of\n           // AND/OR, be conservative only consider the READs\n           // of the second operand.\n        if (n.getNext() != null) {\n          state = isVariableReadBeforeKill(\n              n.getNext(), variable);\n          if (state == VariableLiveness.KILL) {\n            state = VariableLiveness.MAYBE_LIVE;\n          }\n        }\n        break;\n \n         case Token.HOOK:\n           // If current node is the condition, check each following\n           // branch, otherwise it is a conditional branch and the\n           // other branch can be ignored.\n        if (n.getNext() != null && n.getNext().getNext() != null) {\n          state = checkHookBranchReadBeforeKill(\n              n.getNext(), n.getNext().getNext(), variable);\n        }\n        break;\n \n         default:\n           for(Node sibling = n.getNext(); sibling != null;\n               sibling = sibling.getNext()) {\n             state = isVariableReadBeforeKill(sibling, variable);\n          if (state != VariableLiveness.MAYBE_LIVE) {\n            break;\n          }\n        }\n    }\n \n       // If we see a READ or KILL there is no need to continue.\n       if (state == VariableLiveness.READ) {\n         return true;\n       } else if (state == VariableLiveness.KILL) {\n         return false;\n       }\n       n = n.getParent();\n     }\n@@ -337,6 +351,9 @@ private boolean isVariableStillLiveWithinExpression(\n    */\n   private VariableLiveness isVariableReadBeforeKill(\n       Node n, String variable) {\n  if (ControlFlowGraph.isEnteringNewCfgNode(n)) { // Not a FUNCTION\n    return VariableLiveness.MAYBE_LIVE;\n  }\n \n     if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n       if (NodeUtil.isLhs(n, n.getParent())) {\n@@ -359,9 +376,25 @@ private VariableLiveness isVariableReadBeforeKill(\n       // Conditionals\n       case Token.OR:\n       case Token.AND:\n      VariableLiveness v1 = isVariableReadBeforeKill(\n        n.getFirstChild(), variable);\n      VariableLiveness v2 = isVariableReadBeforeKill(\n        n.getLastChild(), variable);\n         // With a AND/OR the first branch always runs, but the second is\n         // may not.\n      if (v1 != VariableLiveness.MAYBE_LIVE) {\n        return v1;\n      } else if (v2 == VariableLiveness.READ) {\n        return VariableLiveness.READ;\n      } else {\n        return VariableLiveness.MAYBE_LIVE;\n      }\n       case Token.HOOK:\n      VariableLiveness first = isVariableReadBeforeKill(\n          n.getFirstChild(), variable);\n      if (first != VariableLiveness.MAYBE_LIVE) {\n        return first;\n      }\n         return checkHookBranchReadBeforeKill(\n             n.getFirstChild().getNext(), n.getLastChild(), variable);\n \n@@ -369,13 +402,11 @@ private VariableLiveness isVariableReadBeforeKill(\n         // Expressions are evaluated left-right, depth first.\n         for (Node child = n.getFirstChild();\n             child != null; child = child.getNext()) {\n           VariableLiveness state = isVariableReadBeforeKill(child, variable);\n           if (state != VariableLiveness.MAYBE_LIVE) {\n             return state;\n           }\n         }\n     }\n \n     return VariableLiveness.MAYBE_LIVE;\n","CodeWithNoComments":"\n                                  \n         case Token.HOOK:\n                                  \n         default:\n           for(Node sibling = n.getNext(); sibling != null;\n               sibling = sibling.getNext()) {\n            if (!ControlFlowGraph.isEnteringNewCfgNode(sibling)) {\n             state = isVariableReadBeforeKill(sibling, variable);\n \n              if (state == VariableLiveness.READ) {\n         return true;\n       } else if (state == VariableLiveness.KILL) {\n         return false;\n            }\n          }\n      }\n       }\n       n = n.getParent();\n     }\n\n    \n   private VariableLiveness isVariableReadBeforeKill(\n       Node n, String variable) {\n \n     if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n       if (NodeUtil.isLhs(n, n.getParent())) {\n\n              case Token.OR:\n       case Token.AND:\n                         case Token.HOOK:\n         return checkHookBranchReadBeforeKill(\n             n.getFirstChild().getNext(), n.getLastChild(), variable);\n \n\n                  for (Node child = n.getFirstChild();\n             child != null; child = child.getNext()) {\n          if (!ControlFlowGraph.isEnteringNewCfgNode(child)) {            VariableLiveness state = isVariableReadBeforeKill(child, variable);\n           if (state != VariableLiveness.MAYBE_LIVE) {\n             return state;\n           }\n         }\n      }\n     }\n \n     return VariableLiveness.MAYBE_LIVE;\n","SolutionWithNoComments":"\n                                           if (n.getNext() != null) {\n            state = isVariableReadBeforeKill(\n                n.getNext(), variable);\n            if (state == VariableLiveness.KILL) {\n              state = VariableLiveness.MAYBE_LIVE;\n            }\n          }\n          break;\n \n         case Token.HOOK:\n                                           if (n.getNext() != null && n.getNext().getNext() != null) {\n            state = checkHookBranchReadBeforeKill(\n                n.getNext(), n.getNext().getNext(), variable);\n          }\n          break;\n \n         default:\n           for(Node sibling = n.getNext(); sibling != null;\n               sibling = sibling.getNext()) {\n             state = isVariableReadBeforeKill(sibling, variable);\n            if (state != VariableLiveness.MAYBE_LIVE) {\n              break;\n            }\n          }\n      }\n \n              if (state == VariableLiveness.READ) {\n         return true;\n       } else if (state == VariableLiveness.KILL) {\n         return false;\n       }\n       n = n.getParent();\n     }\n\n    \n   private VariableLiveness isVariableReadBeforeKill(\n       Node n, String variable) {\n    if (ControlFlowGraph.isEnteringNewCfgNode(n)) {       return VariableLiveness.MAYBE_LIVE;\n    }\n \n     if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n       if (NodeUtil.isLhs(n, n.getParent())) {\n\n              case Token.OR:\n       case Token.AND:\n        VariableLiveness v1 = isVariableReadBeforeKill(\n          n.getFirstChild(), variable);\n        VariableLiveness v2 = isVariableReadBeforeKill(\n          n.getLastChild(), variable);\n                          if (v1 != VariableLiveness.MAYBE_LIVE) {\n          return v1;\n        } else if (v2 == VariableLiveness.READ) {\n          return VariableLiveness.READ;\n        } else {\n          return VariableLiveness.MAYBE_LIVE;\n        }\n       case Token.HOOK:\n        VariableLiveness first = isVariableReadBeforeKill(\n            n.getFirstChild(), variable);\n        if (first != VariableLiveness.MAYBE_LIVE) {\n          return first;\n        }\n         return checkHookBranchReadBeforeKill(\n             n.getFirstChild().getNext(), n.getLastChild(), variable);\n \n\n                  for (Node child = n.getFirstChild();\n             child != null; child = child.getNext()) {\n           VariableLiveness state = isVariableReadBeforeKill(child, variable);\n           if (state != VariableLiveness.MAYBE_LIVE) {\n             return state;\n           }\n         }\n     }\n \n     return VariableLiveness.MAYBE_LIVE;\n"},{"ids":102,"error":"java.lang.RuntimeException","source":"/src/com/google/javascript/jscomp/Normalize.java","code":"@@ -119,7 +119,7 @@ private void reportCodeChange(String changeDescription) {\n   public void process(Node externs, Node root) {\n     new NodeTraversal(\n         compiler, new NormalizeStatements(compiler, assertOnChange))\n      .traverse(root);\n     if (MAKE_LOCAL_NAMES_UNIQUE) {\n       MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();\n       NodeTraversal t = new NodeTraversal(compiler, renamer);\n/src/com/google/javascript/jscomp/VarCheck.java @@ -218,6 +218,7 @@ private void createSynthesizedExternVar(String varName) {\n     getSynthesizedExternsRoot().addChildToBack(\n         new Node(Token.VAR, nameNode));\n     varsToDeclareInExterns.remove(varName);\n   }\n \n   /**\n","solution":"@@ -119,7 +119,7 @@ private void reportCodeChange(String changeDescription) {\n   public void process(Node externs, Node root) {\n     new NodeTraversal(\n         compiler, new NormalizeStatements(compiler, assertOnChange))\n      .traverseRoots(externs, root);\n     if (MAKE_LOCAL_NAMES_UNIQUE) {\n       MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();\n       NodeTraversal t = new NodeTraversal(compiler, renamer);\n/src/com/google/javascript/jscomp/VarCheck.java @@ -218,6 +218,7 @@ private void createSynthesizedExternVar(String varName) {\n     getSynthesizedExternsRoot().addChildToBack(\n         new Node(Token.VAR, nameNode));\n     varsToDeclareInExterns.remove(varName);\n  compiler.reportCodeChange();\n   }\n \n   /**\n","CodeWithNoComments":"\n   public void process(Node externs, Node root) {\n     new NodeTraversal(\n         compiler, new NormalizeStatements(compiler, assertOnChange))\n        .traverse(root);\n     if (MAKE_LOCAL_NAMES_UNIQUE) {\n       MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();\n       NodeTraversal t = new NodeTraversal(compiler, renamer);\n\n     getSynthesizedExternsRoot().addChildToBack(\n         new Node(Token.VAR, nameNode));\n     varsToDeclareInExterns.remove(varName);\n   }\n \n","SolutionWithNoComments":"\n   public void process(Node externs, Node root) {\n     new NodeTraversal(\n         compiler, new NormalizeStatements(compiler, assertOnChange))\n        .traverseRoots(externs, root);\n     if (MAKE_LOCAL_NAMES_UNIQUE) {\n       MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();\n       NodeTraversal t = new NodeTraversal(compiler, renamer);\n\n     getSynthesizedExternsRoot().addChildToBack(\n         new Node(Token.VAR, nameNode));\n     varsToDeclareInExterns.remove(varName);\n    compiler.reportCodeChange();\n   }\n \n"},{"ids":103,"error":"junit.framework.ComparisonFailure","source":"/src/com/google/javascript/jscomp/CodeGenerator.java","code":"@@ -963,6 +963,7 @@ static String strEscape(String s, char quote,\n     for (int i = 0; i < s.length(); i++) {\n       char c = s.charAt(i);\n       switch (c) {\n         case '\\n': sb.append(\"\\\\n\"); break;\n         case '\\r': sb.append(\"\\\\r\"); break;\n         case '\\t': sb.append(\"\\\\t\"); break;\n","solution":"@@ -963,6 +963,7 @@ static String strEscape(String s, char quote,\n     for (int i = 0; i < s.length(); i++) {\n       char c = s.charAt(i);\n       switch (c) {\n      case '\\0': sb.append(\"\\\\0\"); break;\n         case '\\n': sb.append(\"\\\\n\"); break;\n         case '\\r': sb.append(\"\\\\r\"); break;\n         case '\\t': sb.append(\"\\\\t\"); break;\n","CodeWithNoComments":"\n     for (int i = 0; i < s.length(); i++) {\n       char c = s.charAt(i);\n       switch (c) {\n         case '\\n': sb.append(\"\\\\n\"); break;\n         case '\\r': sb.append(\"\\\\r\"); break;\n         case '\\t': sb.append(\"\\\\t\"); break;\n","SolutionWithNoComments":"\n     for (int i = 0; i < s.length(); i++) {\n       char c = s.charAt(i);\n       switch (c) {\n        case '\\0': sb.append(\"\\\\0\"); break;\n         case '\\n': sb.append(\"\\\\n\"); break;\n         case '\\r': sb.append(\"\\\\r\"); break;\n         case '\\t': sb.append(\"\\\\t\"); break;\n"},{"ids":104,"error":"junit.framework.AssertionFailedError","source":"/src/com/google/javascript/jscomp/NodeUtil.java","code":"@@ -310,7 +310,10 @@ static Double getNumberValue(Node n) {\n   }\n \n   static Double getStringNumberValue(String rawJsString) {\n       // vertical tab is not always whitespace\n \n     String s = trimJsWhiteSpace(rawJsString);\n     // return ScriptRuntime.toNumber(s);\n@@ -372,7 +375,7 @@ static String trimJsWhiteSpace(String s) {\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n      return TernaryValue.TRUE;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n","solution":"@@ -310,7 +310,10 @@ static Double getNumberValue(Node n) {\n   }\n \n   static Double getStringNumberValue(String rawJsString) {\n  if (rawJsString.contains(\"\\u000b\")) {\n       // vertical tab is not always whitespace\n    return null;\n  }\n \n     String s = trimJsWhiteSpace(rawJsString);\n     // return ScriptRuntime.toNumber(s);\n@@ -372,7 +375,7 @@ static String trimJsWhiteSpace(String s) {\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n      return TernaryValue.UNKNOWN;  // IE says \"no\", EcmaScript says \"yes\"\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n","CodeWithNoComments":"\n   }\n \n   static Double getStringNumberValue(String rawJsString) {\n        \n     String s = trimJsWhiteSpace(rawJsString);\n     \n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B':         return TernaryValue.TRUE;\n       case ' ':        case '\\n':        case '\\r': ","SolutionWithNoComments":"\n   }\n \n   static Double getStringNumberValue(String rawJsString) {\n    if (rawJsString.contains(\"\\u000b\")) {\n             return null;\n    }\n \n     String s = trimJsWhiteSpace(rawJsString);\n     \n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B':         return TernaryValue.UNKNOWN;         case ' ':        case '\\n':        case '\\r': "},{"ids":105,"error":"junit.framework.AssertionFailedError","source":"/src/com/google/javascript/jscomp/PeepholeFoldConstants.java","code":"@@ -708,14 +708,12 @@ private Node performArithmeticOp(int opType, Node left, Node right) {\n         break;\n       case Token.MOD:\n         if (rval == 0) {\n        error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\", \"Divide by 0\"), right);\n           return null;\n         }\n         result = lval % rval;\n         break;\n       case Token.DIV:\n         if (rval == 0) {\n        error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\", \"Divide by 0\"), right);\n           return null;\n         }\n         result = lval / rval;\n","solution":"@@ -708,14 +708,12 @@ private Node performArithmeticOp(int opType, Node left, Node right) {\n         break;\n       case Token.MOD:\n         if (rval == 0) {\n           return null;\n         }\n         result = lval % rval;\n         break;\n       case Token.DIV:\n         if (rval == 0) {\n           return null;\n         }\n         result = lval / rval;\n","CodeWithNoComments":"\n         break;\n       case Token.MOD:\n         if (rval == 0) {\n          error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\", \"Divide by 0\"), right);\n           return null;\n         }\n         result = lval % rval;\n         break;\n       case Token.DIV:\n         if (rval == 0) {\n          error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\", \"Divide by 0\"), right);\n           return null;\n         }\n         result = lval / rval;\n","SolutionWithNoComments":"\n         break;\n       case Token.MOD:\n         if (rval == 0) {\n           return null;\n         }\n         result = lval % rval;\n         break;\n       case Token.DIV:\n         if (rval == 0) {\n           return null;\n         }\n         result = lval / rval;\n"},{"ids":106,"error":"junit.framework.AssertionFailedError","source":"/src/com/google/javascript/jscomp/CommandLineRunner.java","code":"@@ -331,7 +331,10 @@ public BooleanOptionHandler(\n \n       @Override\n       public int parseArguments(Parameters params) throws CmdLineException {\n      String param = params.getParameter(0);\n \n         if (param == null) {\n           setter.addValue(true);\n","solution":"@@ -331,7 +331,10 @@ public BooleanOptionHandler(\n \n       @Override\n       public int parseArguments(Parameters params) throws CmdLineException {\n      String param = null;\n      try {\n        param = params.getParameter(0);\n      } catch (CmdLineException e) {}\n \n         if (param == null) {\n           setter.addValue(true);\n","CodeWithNoComments":"\n \n       @Override\n       public int parseArguments(Parameters params) throws CmdLineException {\n        String param = params.getParameter(0);\n \n         if (param == null) {\n           setter.addValue(true);\n","SolutionWithNoComments":"\n \n       @Override\n       public int parseArguments(Parameters params) throws CmdLineException {\n        String param = null;\n        try {\n          param = params.getParameter(0);\n        } catch (CmdLineException e) {}\n \n         if (param == null) {\n           setter.addValue(true);\n"},{"ids":107,"error":"junit.framework.AssertionFailedError","source":"/src/com/google/javascript/jscomp/NodeUtil.java","code":"@@ -1259,6 +1259,7 @@ static boolean isBooleanResultHelper(Node n) {\n       // Inversion\n       case Token.NOT:\n       // delete operator returns a boolean.\n         return true;\n       default:\n         return false;\n@@ -2907,6 +2908,7 @@ static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {\n       case Token.OBJECTLIT:\n         // Literals objects with non-literal children are allowed.\n         return true;\n       case Token.IN:\n         // TODO(johnlenz): should IN operator be included in #isSimpleOperator?\n         return true;\n","solution":"@@ -1259,6 +1259,7 @@ static boolean isBooleanResultHelper(Node n) {\n       // Inversion\n       case Token.NOT:\n       // delete operator returns a boolean.\n    case Token.DELPROP:\n         return true;\n       default:\n         return false;\n@@ -2907,6 +2908,7 @@ static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {\n       case Token.OBJECTLIT:\n         // Literals objects with non-literal children are allowed.\n         return true;\n    case Token.DELPROP:\n       case Token.IN:\n         // TODO(johnlenz): should IN operator be included in #isSimpleOperator?\n         return true;\n","CodeWithNoComments":"\n              case Token.NOT:\n                return true;\n       default:\n         return false;\n\n       case Token.OBJECTLIT:\n                  return true;\n       case Token.IN:\n                  return true;\n","SolutionWithNoComments":"\n              case Token.NOT:\n             case Token.DELPROP:\n         return true;\n       default:\n         return false;\n\n       case Token.OBJECTLIT:\n                  return true;\n      case Token.DELPROP:\n       case Token.IN:\n                  return true;\n"},{"ids":108,"error":"junit.framework.AssertionFailedError","source":"/src/com/google/javascript/jscomp/parsing/IRFactory.java","code":"@@ -514,6 +514,13 @@ Node processFunctionNode(FunctionNode functionNode) {\n       Name name = functionNode.getFunctionName();\n       Boolean isUnnamedFunction = false;\n       if (name == null) {\n         name = new Name();\n         name.setIdentifier(\"\");\n         isUnnamedFunction = true;\n","solution":"@@ -514,6 +514,13 @@ Node processFunctionNode(FunctionNode functionNode) {\n       Name name = functionNode.getFunctionName();\n       Boolean isUnnamedFunction = false;\n       if (name == null) {\n      int functionType = functionNode.getFunctionType();\n      if (functionType != FunctionNode.FUNCTION_EXPRESSION) {\n        errorReporter.error(\n          \"unnamed function statement\",\n          sourceName,\n          functionNode.getLineno(), \"\", 0);\n      }\n         name = new Name();\n         name.setIdentifier(\"\");\n         isUnnamedFunction = true;\n","CodeWithNoComments":"\n       Name name = functionNode.getFunctionName();\n       Boolean isUnnamedFunction = false;\n       if (name == null) {\n         name = new Name();\n         name.setIdentifier(\"\");\n         isUnnamedFunction = true;\n","SolutionWithNoComments":"\n       Name name = functionNode.getFunctionName();\n       Boolean isUnnamedFunction = false;\n       if (name == null) {\n        int functionType = functionNode.getFunctionType();\n        if (functionType != FunctionNode.FUNCTION_EXPRESSION) {\n          errorReporter.error(\n            \"unnamed function statement\",\n            sourceName,\n            functionNode.getLineno(), \"\", 0);\n        }\n         name = new Name();\n         name.setIdentifier(\"\");\n         isUnnamedFunction = true;\n"},{"ids":109,"error":"junit.framework.AssertionFailedError","source":"/src/com/google/javascript/rhino/jstype/JSType.java","code":"@@ -160,7 +160,9 @@ public boolean isNoObjectType() {\n   }\n \n   public final boolean isEmptyType() {\n  return isNoType() || isNoObjectType() || isNoResolvedType();\n   }\n \n   public boolean isNumberObjectType() {\n","solution":"@@ -160,7 +160,9 @@ public boolean isNoObjectType() {\n   }\n \n   public final boolean isEmptyType() {\n  return isNoType() || isNoObjectType() || isNoResolvedType() ||\n      (registry.getNativeFunctionType(\n           JSTypeNative.LEAST_FUNCTION_TYPE) == this);\n   }\n \n   public boolean isNumberObjectType() {\n","CodeWithNoComments":"\n   }\n \n   public final boolean isEmptyType() {\n    return isNoType() || isNoObjectType() || isNoResolvedType();\n   }\n \n   public boolean isNumberObjectType() {\n","SolutionWithNoComments":"\n   }\n \n   public final boolean isEmptyType() {\n    return isNoType() || isNoObjectType() || isNoResolvedType() ||\n        (registry.getNativeFunctionType(\n             JSTypeNative.LEAST_FUNCTION_TYPE) == this);\n   }\n \n   public boolean isNumberObjectType() {\n"},{"ids":110,"error":"junit.framework.AssertionFailedError","source":"/src/com/google/javascript/jscomp/UnreachableCodeElimination.java","code":"@@ -150,20 +150,7 @@ private Node tryRemoveUnconditionalBranching(Node n) {\n       return n;\n     }\n \n  if (n.getParent() == null) {\n    List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges();\n    if (outEdges.size() == 1) {\n      return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());\n    }\n  }\n     switch (n.getType()) {\n    case Token.BLOCK:\n      if (n.hasChildren()) {\n        Node first = n.getFirstChild();\n        return tryRemoveUnconditionalBranching(first);\n      } else {\n        return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));\n      }\n       case Token.RETURN:\n         if (n.hasChildren()) {\n           break;\n@@ -180,7 +167,7 @@ private Node tryRemoveUnconditionalBranching(Node n) {\n             (n.getNext() == null || n.getNext().getType() == Token.FUNCTION)) {\n \n           Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n        Node fallThrough = tryRemoveUnconditionalBranching(computeFollowing(n));\n           Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n           if (nextCfgNode == fallThrough) {\n             removeDeadExprStatementSafely(n);\n@@ -193,6 +180,13 @@ private Node tryRemoveUnconditionalBranching(Node n) {\n \n   private Node computeFollowing(Node n) {\n     Node next = ControlFlowAnalysis.computeFollowNode(n);\n     return next;\n   }\n \n","solution":"@@ -150,20 +150,7 @@ private Node tryRemoveUnconditionalBranching(Node n) {\n       return n;\n     }\n \n     switch (n.getType()) {\n       case Token.RETURN:\n         if (n.hasChildren()) {\n           break;\n@@ -180,7 +167,7 @@ private Node tryRemoveUnconditionalBranching(Node n) {\n             (n.getNext() == null || n.getNext().getType() == Token.FUNCTION)) {\n \n           Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n        Node fallThrough = computeFollowing(n);\n           Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n           if (nextCfgNode == fallThrough) {\n             removeDeadExprStatementSafely(n);\n@@ -193,6 +180,13 @@ private Node tryRemoveUnconditionalBranching(Node n) {\n \n   private Node computeFollowing(Node n) {\n     Node next = ControlFlowAnalysis.computeFollowNode(n);\n  while (next != null && next.getType() == Token.BLOCK) {\n    if (next.hasChildren()) {\n      next = next.getFirstChild();\n    } else {\n      next = computeFollowing(next);\n    }\n  }\n     return next;\n   }\n \n","CodeWithNoComments":"\n       return n;\n     }\n \n    if (n.getParent() == null) {\n      List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges();\n      if (outEdges.size() == 1) {\n        return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());\n      }\n    }\n     switch (n.getType()) {\n      case Token.BLOCK:\n        if (n.hasChildren()) {\n          Node first = n.getFirstChild();\n          return tryRemoveUnconditionalBranching(first);\n        } else {\n          return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));\n        }\n       case Token.RETURN:\n         if (n.hasChildren()) {\n           break;\n\n             (n.getNext() == null || n.getNext().getType() == Token.FUNCTION)) {\n \n           Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n          Node fallThrough = tryRemoveUnconditionalBranching(computeFollowing(n));\n           Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n           if (nextCfgNode == fallThrough) {\n             removeDeadExprStatementSafely(n);\n\n \n   private Node computeFollowing(Node n) {\n     Node next = ControlFlowAnalysis.computeFollowNode(n);\n     return next;\n   }\n \n","SolutionWithNoComments":"\n       return n;\n     }\n \n     switch (n.getType()) {\n       case Token.RETURN:\n         if (n.hasChildren()) {\n           break;\n\n             (n.getNext() == null || n.getNext().getType() == Token.FUNCTION)) {\n \n           Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n          Node fallThrough = computeFollowing(n);\n           Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n           if (nextCfgNode == fallThrough) {\n             removeDeadExprStatementSafely(n);\n\n \n   private Node computeFollowing(Node n) {\n     Node next = ControlFlowAnalysis.computeFollowNode(n);\n    while (next != null && next.getType() == Token.BLOCK) {\n      if (next.hasChildren()) {\n        next = next.getFirstChild();\n      } else {\n        next = computeFollowing(next);\n      }\n    }\n     return next;\n   }\n \n"},{"ids":111,"error":"junit.framework.AssertionFailedError","source":"/src/com/google/javascript/jscomp/NodeUtil.java","code":"@@ -2462,7 +2462,7 @@ static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {\n         // TODO(nicksantos): This needs to be changed so that it\n         // returns true iff we're sure the value was never aliased from inside\n         // the constructor (similar to callHasLocalResult)\n      return true;\n       case Token.FUNCTION:\n       case Token.REGEXP:\n       case Token.ARRAYLIT:\n","solution":"@@ -2462,7 +2462,7 @@ static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {\n         // TODO(nicksantos): This needs to be changed so that it\n         // returns true iff we're sure the value was never aliased from inside\n         // the constructor (similar to callHasLocalResult)\n      return false;\n       case Token.FUNCTION:\n       case Token.REGEXP:\n       case Token.ARRAYLIT:\n","CodeWithNoComments":"\n                                   return true;\n       case Token.FUNCTION:\n       case Token.REGEXP:\n       case Token.ARRAYLIT:\n","SolutionWithNoComments":"\n                                   return false;\n       case Token.FUNCTION:\n       case Token.REGEXP:\n       case Token.ARRAYLIT:\n"},{"ids":112,"error":"junit.framework.AssertionFailedError","source":"/src/com/google/javascript/jscomp/parsing/IRFactory.java","code":"@@ -338,6 +338,13 @@ Node processArrayLiteral(ArrayLiteral literalNode) {\n     @Override\n     Node processAssignment(Assignment assignmentNode) {\n       Node assign = processInfixExpression(assignmentNode);\n       return assign;\n     }\n \n@@ -794,6 +801,17 @@ Node processUnaryExpression(UnaryExpression exprNode) {\n         operand.setDouble(-operand.getDouble());\n         return operand;\n       } else {\n \n         Node node = newNode(type, operand);\n         if (exprNode.isPostfix()) {\n@@ -803,6 +821,15 @@ Node processUnaryExpression(UnaryExpression exprNode) {\n       }\n     }\n \n \n     @Override\n     Node processVariableDeclaration(VariableDeclaration declarationNode) {\n","solution":"@@ -338,6 +338,13 @@ Node processArrayLiteral(ArrayLiteral literalNode) {\n     @Override\n     Node processAssignment(Assignment assignmentNode) {\n       Node assign = processInfixExpression(assignmentNode);\n    Node target = assign.getFirstChild();\n    if (!validAssignmentTarget(target)) {\n      errorReporter.error(\n        \"invalid assignment target\",\n        sourceName,\n        target.getLineno(), \"\", 0);\n    }\n       return assign;\n     }\n \n@@ -794,6 +801,17 @@ Node processUnaryExpression(UnaryExpression exprNode) {\n         operand.setDouble(-operand.getDouble());\n         return operand;\n       } else {\n      if (type == Token.INC || type == Token.DEC) {\n        if (!validAssignmentTarget(operand)) {\n          String msg = (type == Token.INC)\n              ? \"invalid increment target\"\n              : \"invalid decrement target\";\n          errorReporter.error(\n            msg,\n            sourceName,\n            operand.getLineno(), \"\", 0);\n        }\n      }\n \n         Node node = newNode(type, operand);\n         if (exprNode.isPostfix()) {\n@@ -803,6 +821,15 @@ Node processUnaryExpression(UnaryExpression exprNode) {\n       }\n     }\n \n  private boolean validAssignmentTarget(Node target) {\n    switch (target.getType()) {\n      case Token.NAME:\n      case Token.GETPROP:\n      case Token.GETELEM:\n        return true;\n    }\n    return false;\n  }\n \n     @Override\n     Node processVariableDeclaration(VariableDeclaration declarationNode) {\n","CodeWithNoComments":"\n     @Override\n     Node processAssignment(Assignment assignmentNode) {\n       Node assign = processInfixExpression(assignmentNode);\n       return assign;\n     }\n \n\n         operand.setDouble(-operand.getDouble());\n         return operand;\n       } else {\n \n         Node node = newNode(type, operand);\n         if (exprNode.isPostfix()) {\n\n       }\n     }\n \n \n     @Override\n     Node processVariableDeclaration(VariableDeclaration declarationNode) {\n","SolutionWithNoComments":"\n     @Override\n     Node processAssignment(Assignment assignmentNode) {\n       Node assign = processInfixExpression(assignmentNode);\n      Node target = assign.getFirstChild();\n      if (!validAssignmentTarget(target)) {\n        errorReporter.error(\n          \"invalid assignment target\",\n          sourceName,\n          target.getLineno(), \"\", 0);\n      }\n       return assign;\n     }\n \n\n         operand.setDouble(-operand.getDouble());\n         return operand;\n       } else {\n        if (type == Token.INC || type == Token.DEC) {\n          if (!validAssignmentTarget(operand)) {\n            String msg = (type == Token.INC)\n                ? \"invalid increment target\"\n                : \"invalid decrement target\";\n            errorReporter.error(\n              msg,\n              sourceName,\n              operand.getLineno(), \"\", 0);\n          }\n        }\n \n         Node node = newNode(type, operand);\n         if (exprNode.isPostfix()) {\n\n       }\n     }\n \n    private boolean validAssignmentTarget(Node target) {\n      switch (target.getType()) {\n        case Token.NAME:\n        case Token.GETPROP:\n        case Token.GETELEM:\n          return true;\n      }\n      return false;\n    }\n \n     @Override\n     Node processVariableDeclaration(VariableDeclaration declarationNode) {\n"},{"ids":113,"error":"junit.framework.AssertionFailedError","source":"/src/com/google/javascript/jscomp/CollapseProperties.java","code":"@@ -481,6 +481,9 @@ private void updateSimpleDeclaration(String alias, Name refName, Ref ref) {\n     Node greatGramps = gramps.getParent();\n     Node greatGreatGramps = greatGramps.getParent();\n \n \n     // Create the new alias node.\n     Node nameNode = NodeUtil.newName(\n/src/com/google/javascript/jscomp/GlobalNamespace.java @@ -917,7 +917,7 @@ boolean canCollapseUnannotatedChildNames() {\n       }\n \n       // If this is aliased, then its properties can't be collapsed either.\n    if (type != Type.FUNCTION && aliasingGets > 0) {\n         return false;\n       }\n \n","solution":"@@ -481,6 +481,9 @@ private void updateSimpleDeclaration(String alias, Name refName, Ref ref) {\n     Node greatGramps = gramps.getParent();\n     Node greatGreatGramps = greatGramps.getParent();\n \n  if (rvalue != null && rvalue.getType() == Token.FUNCTION) {\n    checkForHosedThisReferences(rvalue, refName.docInfo, refName);\n  }\n \n     // Create the new alias node.\n     Node nameNode = NodeUtil.newName(\n/src/com/google/javascript/jscomp/GlobalNamespace.java @@ -917,7 +917,7 @@ boolean canCollapseUnannotatedChildNames() {\n       }\n \n       // If this is aliased, then its properties can't be collapsed either.\n    if (aliasingGets > 0) {\n         return false;\n       }\n \n","CodeWithNoComments":"\n     Node greatGramps = gramps.getParent();\n     Node greatGreatGramps = greatGramps.getParent();\n \n \n          Node nameNode = NodeUtil.newName(\n\n       }\n \n             if (type != Type.FUNCTION && aliasingGets > 0) {\n         return false;\n       }\n \n","SolutionWithNoComments":"\n     Node greatGramps = gramps.getParent();\n     Node greatGreatGramps = greatGramps.getParent();\n \n    if (rvalue != null && rvalue.getType() == Token.FUNCTION) {\n      checkForHosedThisReferences(rvalue, refName.docInfo, refName);\n    }\n \n          Node nameNode = NodeUtil.newName(\n\n       }\n \n             if (aliasingGets > 0) {\n         return false;\n       }\n \n"},{"ids":114,"error":"junit.framework.AssertionFailedError","source":"/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java","code":"@@ -324,9 +324,15 @@ private VariableLiveness isVariableReadBeforeKill(\n       Node n, String variable) {\n     if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n       if (NodeUtil.isLhs(n, n.getParent())) {\n         // The expression to which the assignment is made is evaluated before\n         // the RHS is evaluated (normal left to right evaluation) but the KILL\n         // occurs after the RHS is evaluated.\n         return VariableLiveness.KILL;\n       } else {\n         return VariableLiveness.READ;\n","solution":"@@ -324,9 +324,15 @@ private VariableLiveness isVariableReadBeforeKill(\n       Node n, String variable) {\n     if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n       if (NodeUtil.isLhs(n, n.getParent())) {\n      Preconditions.checkState(n.getParent().getType() == Token.ASSIGN);\n         // The expression to which the assignment is made is evaluated before\n         // the RHS is evaluated (normal left to right evaluation) but the KILL\n         // occurs after the RHS is evaluated.\n      Node rhs = n.getNext();\n      VariableLiveness state = isVariableReadBeforeKill(rhs, variable);\n      if (state == VariableLiveness.READ) {\n        return state;\n      }\n         return VariableLiveness.KILL;\n       } else {\n         return VariableLiveness.READ;\n","CodeWithNoComments":"\n       Node n, String variable) {\n     if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n       if (NodeUtil.isLhs(n, n.getParent())) {\n                                    return VariableLiveness.KILL;\n       } else {\n         return VariableLiveness.READ;\n","SolutionWithNoComments":"\n       Node n, String variable) {\n     if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n       if (NodeUtil.isLhs(n, n.getParent())) {\n        Preconditions.checkState(n.getParent().getType() == Token.ASSIGN);\n                                   Node rhs = n.getNext();\n        VariableLiveness state = isVariableReadBeforeKill(rhs, variable);\n        if (state == VariableLiveness.READ) {\n          return state;\n        }\n         return VariableLiveness.KILL;\n       } else {\n         return VariableLiveness.READ;\n"},{"ids":115,"error":"junit.framework.AssertionFailedError","source":"/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java","code":"@@ -520,17 +520,29 @@ private boolean isFoldableExpressBlock(Node n) {\n     if (n.getType() == Token.BLOCK) {\n       if (n.hasOneChild()) {\n         Node maybeExpr = n.getFirstChild();\n           // IE has a bug where event handlers behave differently when\n           // their return value is used vs. when their return value is in\n           // an EXPR_RESULT. It's pretty freaking weird. See:\n           // http://code.google.com/p/closure-compiler/issues/detail?id=291\n           // We try to detect this case, and not fold EXPR_RESULTs\n           // into other expressions.\n \n             // We only have to worry about methods with an implicit 'this'\n             // param, or this doesn't happen.\n \n        return NodeUtil.isExpressionNode(maybeExpr);\n       }\n     }\n \n","solution":"@@ -520,17 +520,29 @@ private boolean isFoldableExpressBlock(Node n) {\n     if (n.getType() == Token.BLOCK) {\n       if (n.hasOneChild()) {\n         Node maybeExpr = n.getFirstChild();\n      if (maybeExpr.getType() == Token.EXPR_RESULT) {\n           // IE has a bug where event handlers behave differently when\n           // their return value is used vs. when their return value is in\n           // an EXPR_RESULT. It's pretty freaking weird. See:\n           // http://code.google.com/p/closure-compiler/issues/detail?id=291\n           // We try to detect this case, and not fold EXPR_RESULTs\n           // into other expressions.\n        if (maybeExpr.getFirstChild().getType() == Token.CALL) {\n          Node calledFn = maybeExpr.getFirstChild().getFirstChild();\n \n             // We only have to worry about methods with an implicit 'this'\n             // param, or this doesn't happen.\n          if (calledFn.getType() == Token.GETELEM) {\n            return false;\n          } else if (calledFn.getType() == Token.GETPROP &&\n                     calledFn.getLastChild().getString().startsWith(\"on\")) {\n            return false;\n          }\n        }\n \n        return true;\n      }\n      return false;\n       }\n     }\n \n","CodeWithNoComments":"\n     if (n.getType() == Token.BLOCK) {\n       if (n.hasOneChild()) {\n         Node maybeExpr = n.getFirstChild();\n                                                                   \n                           \n          return NodeUtil.isExpressionNode(maybeExpr);\n       }\n     }\n \n","SolutionWithNoComments":"\n     if (n.getType() == Token.BLOCK) {\n       if (n.hasOneChild()) {\n         Node maybeExpr = n.getFirstChild();\n        if (maybeExpr.getType() == Token.EXPR_RESULT) {\n                                                                            if (maybeExpr.getFirstChild().getType() == Token.CALL) {\n            Node calledFn = maybeExpr.getFirstChild().getFirstChild();\n \n                                      if (calledFn.getType() == Token.GETELEM) {\n              return false;\n            } else if (calledFn.getType() == Token.GETPROP &&\n                       calledFn.getLastChild().getString().startsWith(\"on\")) {\n              return false;\n            }\n          }\n \n          return true;\n        }\n        return false;\n       }\n     }\n \n"},{"ids":116,"error":"junit.framework.AssertionFailedError","source":"/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java","code":"@@ -786,7 +786,7 @@ void replace() {\n         } else {\n           // In this case, the name was implicitly provided by two independent\n           // modules. We need to move this code up to a common module.\n        int indexOfDot = namespace.indexOf('.');\n           if (indexOfDot == -1) {\n             // Any old place is fine.\n             compiler.getNodeForCodeInsertion(minimumModule)\n","solution":"@@ -786,7 +786,7 @@ void replace() {\n         } else {\n           // In this case, the name was implicitly provided by two independent\n           // modules. We need to move this code up to a common module.\n        int indexOfDot = namespace.lastIndexOf('.');\n           if (indexOfDot == -1) {\n             // Any old place is fine.\n             compiler.getNodeForCodeInsertion(minimumModule)\n","CodeWithNoComments":"\n         } else {\n                                int indexOfDot = namespace.indexOf('.');\n           if (indexOfDot == -1) {\n                          compiler.getNodeForCodeInsertion(minimumModule)\n","SolutionWithNoComments":"\n         } else {\n                                int indexOfDot = namespace.lastIndexOf('.');\n           if (indexOfDot == -1) {\n                          compiler.getNodeForCodeInsertion(minimumModule)\n"},{"ids":117,"error":"junit.framework.AssertionFailedError","source":"/src/com/google/javascript/jscomp/TypedScopeCreator.java","code":"@@ -896,9 +896,16 @@ void defineSlot(Node n, Node parent, JSType type, boolean inferred) {\n       // scope where the root object appears. This helps out people\n       // who declare \"global\" names in an anonymous namespace.\n       Scope scopeToDeclareIn = scope;\n \n         // don't try to declare in the global scope if there's\n         // already a symbol there with this name.\n \n       // declared in closest scope?\n       if (scopeToDeclareIn.isDeclared(variableName, false)) {\n","solution":"@@ -896,9 +896,16 @@ void defineSlot(Node n, Node parent, JSType type, boolean inferred) {\n       // scope where the root object appears. This helps out people\n       // who declare \"global\" names in an anonymous namespace.\n       Scope scopeToDeclareIn = scope;\n    if (n.getType() == Token.GETPROP && !scope.isGlobal() &&\n        isQnameRootedInGlobalScope(n)) {\n      Scope globalScope = scope.getGlobalScope();\n \n         // don't try to declare in the global scope if there's\n         // already a symbol there with this name.\n      if (!globalScope.isDeclared(variableName, false)) {\n        scopeToDeclareIn = scope.getGlobalScope();\n      }\n    }\n \n       // declared in closest scope?\n       if (scopeToDeclareIn.isDeclared(variableName, false)) {\n","CodeWithNoComments":"\n                     Scope scopeToDeclareIn = scope;\n \n                   \n              if (scopeToDeclareIn.isDeclared(variableName, false)) {\n","SolutionWithNoComments":"\n                     Scope scopeToDeclareIn = scope;\n      if (n.getType() == Token.GETPROP && !scope.isGlobal() &&\n          isQnameRootedInGlobalScope(n)) {\n        Scope globalScope = scope.getGlobalScope();\n \n                          if (!globalScope.isDeclared(variableName, false)) {\n          scopeToDeclareIn = scope.getGlobalScope();\n        }\n      }\n \n              if (scopeToDeclareIn.isDeclared(variableName, false)) {\n"},{"ids":118,"error":"junit.framework.AssertionFailedError","source":"/src/com/google/javascript/jscomp/FunctionTypeBuilder.java","code":"@@ -181,7 +181,7 @@ public boolean apply(JSType type) {\n       // create interfaces JSType, ObjectType, FunctionType etc and have\n       // separate implementation instead of the class hierarchy, so that\n       // union types can also be object types, etc.\n    if (!type.isSubtype(\n               typeRegistry.getNativeType(OBJECT_TYPE))) {\n         reportWarning(THIS_TYPE_NON_OBJECT, type.toString());\n         return false;\n/src/com/google/javascript/rhino/jstype/FunctionType.java @@ -877,6 +877,9 @@ JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {\n     // mean \"nullable Foo\". For certain tags (like @extends) we de-nullify\n     // the name for them.\n     JSType maybeTypeOfThis = safeResolve(typeOfThis, t, scope);\n     if (maybeTypeOfThis instanceof ObjectType) {\n       typeOfThis = (ObjectType) maybeTypeOfThis;\n     }\n","solution":"@@ -181,7 +181,7 @@ public boolean apply(JSType type) {\n       // create interfaces JSType, ObjectType, FunctionType etc and have\n       // separate implementation instead of the class hierarchy, so that\n       // union types can also be object types, etc.\n    if (!type.restrictByNotNullOrUndefined().isSubtype(\n               typeRegistry.getNativeType(OBJECT_TYPE))) {\n         reportWarning(THIS_TYPE_NON_OBJECT, type.toString());\n         return false;\n/src/com/google/javascript/rhino/jstype/FunctionType.java @@ -877,6 +877,9 @@ JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {\n     // mean \"nullable Foo\". For certain tags (like @extends) we de-nullify\n     // the name for them.\n     JSType maybeTypeOfThis = safeResolve(typeOfThis, t, scope);\n  if (maybeTypeOfThis != null) {\n    maybeTypeOfThis = maybeTypeOfThis.restrictByNotNullOrUndefined();\n  }\n     if (maybeTypeOfThis instanceof ObjectType) {\n       typeOfThis = (ObjectType) maybeTypeOfThis;\n     }\n","CodeWithNoComments":"\n                           if (!type.isSubtype(\n               typeRegistry.getNativeType(OBJECT_TYPE))) {\n         reportWarning(THIS_TYPE_NON_OBJECT, type.toString());\n         return false;\n\n               JSType maybeTypeOfThis = safeResolve(typeOfThis, t, scope);\n     if (maybeTypeOfThis instanceof ObjectType) {\n       typeOfThis = (ObjectType) maybeTypeOfThis;\n     }\n","SolutionWithNoComments":"\n                           if (!type.restrictByNotNullOrUndefined().isSubtype(\n               typeRegistry.getNativeType(OBJECT_TYPE))) {\n         reportWarning(THIS_TYPE_NON_OBJECT, type.toString());\n         return false;\n\n               JSType maybeTypeOfThis = safeResolve(typeOfThis, t, scope);\n    if (maybeTypeOfThis != null) {\n      maybeTypeOfThis = maybeTypeOfThis.restrictByNotNullOrUndefined();\n    }\n     if (maybeTypeOfThis instanceof ObjectType) {\n       typeOfThis = (ObjectType) maybeTypeOfThis;\n     }\n"},{"ids":119,"error":"junit.framework.AssertionFailedError","source":"/src/com/google/javascript/jscomp/NodeUtil.java","code":"@@ -326,14 +326,33 @@ static boolean isValidDefineValue(Node val, Set<String> defines) {\n         return true;\n \n       // Binary operators are only valid if both children are valid.\n       case Token.BITAND:\n       case Token.BITNOT:\n       case Token.BITOR:\n       case Token.BITXOR:\n \n       // Uniary operators are valid if the child is valid.\n       case Token.NOT:\n       case Token.NEG:\n         return isValidDefineValue(val.getFirstChild(), defines);\n \n       // Names are valid if and only if they are defines themselves.\n","solution":"@@ -326,14 +326,33 @@ static boolean isValidDefineValue(Node val, Set<String> defines) {\n         return true;\n \n       // Binary operators are only valid if both children are valid.\n    case Token.ADD:\n       case Token.BITAND:\n       case Token.BITNOT:\n       case Token.BITOR:\n       case Token.BITXOR:\n    case Token.DIV:\n    case Token.EQ:\n    case Token.GE:\n    case Token.GT:\n    case Token.LE:\n    case Token.LSH:\n    case Token.LT:\n    case Token.MOD:\n    case Token.MUL:\n    case Token.NE:\n    case Token.RSH:\n    case Token.SHEQ:\n    case Token.SHNE:\n    case Token.SUB:\n    case Token.URSH:\n      return isValidDefineValue(val.getFirstChild(), defines)\n          && isValidDefineValue(val.getLastChild(), defines);\n \n       // Uniary operators are valid if the child is valid.\n       case Token.NOT:\n       case Token.NEG:\n    case Token.POS:\n         return isValidDefineValue(val.getFirstChild(), defines);\n \n       // Names are valid if and only if they are defines themselves.\n","CodeWithNoComments":"\n         return true;\n \n              case Token.BITAND:\n       case Token.BITNOT:\n       case Token.BITOR:\n       case Token.BITXOR:\n \n              case Token.NOT:\n       case Token.NEG:\n         return isValidDefineValue(val.getFirstChild(), defines);\n \n       ","SolutionWithNoComments":"\n         return true;\n \n             case Token.ADD:\n       case Token.BITAND:\n       case Token.BITNOT:\n       case Token.BITOR:\n       case Token.BITXOR:\n      case Token.DIV:\n      case Token.EQ:\n      case Token.GE:\n      case Token.GT:\n      case Token.LE:\n      case Token.LSH:\n      case Token.LT:\n      case Token.MOD:\n      case Token.MUL:\n      case Token.NE:\n      case Token.RSH:\n      case Token.SHEQ:\n      case Token.SHNE:\n      case Token.SUB:\n      case Token.URSH:\n        return isValidDefineValue(val.getFirstChild(), defines)\n            && isValidDefineValue(val.getLastChild(), defines);\n \n              case Token.NOT:\n       case Token.NEG:\n      case Token.POS:\n         return isValidDefineValue(val.getFirstChild(), defines);\n \n       "},{"ids":120,"error":"junit.framework.AssertionFailedError","source":"/src/com/google/javascript/jscomp/CheckGlobalThis.java","code":"@@ -112,6 +112,15 @@ public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {\n","solution":"@@ -112,6 +112,15 @@ public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n    Node gramps = parent.getParent();\n    if (NodeUtil.isObjectLitKey(parent, gramps)) {\n      JSDocInfo maybeLends = gramps.getJSDocInfo();\n      if (maybeLends != null &&\n          maybeLends.getLendsName() != null &&\n          maybeLends.getLendsName().endsWith(\".prototype\")) {\n        return false;\n      }\n    }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {\n","CodeWithNoComments":"\n       }\n \n            }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {\n","SolutionWithNoComments":"\n       }\n \n             Node gramps = parent.getParent();\n      if (NodeUtil.isObjectLitKey(parent, gramps)) {\n        JSDocInfo maybeLends = gramps.getJSDocInfo();\n        if (maybeLends != null &&\n            maybeLends.getLendsName() != null &&\n            maybeLends.getLendsName().endsWith(\".prototype\")) {\n          return false;\n        }\n      }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {\n"},{"ids":121,"error":"junit.framework.AssertionFailedError","source":"/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java","code":"@@ -786,7 +786,7 @@ void replace() {\n         } else {\n           // In this case, the name was implicitly provided by two independent\n           // modules. We need to move this code up to a common module.\n        int indexOfDot = namespace.indexOf('.');\n           if (indexOfDot == -1) {\n             // Any old place is fine.\n             compiler.getNodeForCodeInsertion(minimumModule)\n","solution":"@@ -786,7 +786,7 @@ void replace() {\n         } else {\n           // In this case, the name was implicitly provided by two independent\n           // modules. We need to move this code up to a common module.\n        int indexOfDot = namespace.lastIndexOf('.');\n           if (indexOfDot == -1) {\n             // Any old place is fine.\n             compiler.getNodeForCodeInsertion(minimumModule)\n","CodeWithNoComments":"\n         } else {\n                                int indexOfDot = namespace.indexOf('.');\n           if (indexOfDot == -1) {\n                          compiler.getNodeForCodeInsertion(minimumModule)\n","SolutionWithNoComments":"\n         } else {\n                                int indexOfDot = namespace.lastIndexOf('.');\n           if (indexOfDot == -1) {\n                          compiler.getNodeForCodeInsertion(minimumModule)\n"},{"ids":122,"error":"junit.framework.AssertionFailedError","source":"/src/com/google/javascript/jscomp/PeepholeFoldConstants.java","code":"@@ -695,7 +695,8 @@ private Node tryFoldShift(Node n, Node left, Node right) {\n           // JavaScript handles zero shifts on signed numbers differently than\n           // Java as an Java int can not represent the unsigned 32-bit number\n           // where JavaScript can so use a long here.\n        result = lvalInt >>> rvalInt;\n           break;\n         default:\n           throw new AssertionError(\"Unknown shift operator: \" +\n","solution":"@@ -695,7 +695,8 @@ private Node tryFoldShift(Node n, Node left, Node right) {\n           // JavaScript handles zero shifts on signed numbers differently than\n           // Java as an Java int can not represent the unsigned 32-bit number\n           // where JavaScript can so use a long here.\n        long lvalLong = lvalInt & 0xffffffffL;\n        result = lvalLong >>> rvalInt;\n           break;\n         default:\n           throw new AssertionError(\"Unknown shift operator: \" +\n","CodeWithNoComments":"\n                                           result = lvalInt >>> rvalInt;\n           break;\n         default:\n           throw new AssertionError(\"Unknown shift operator: \" +\n","SolutionWithNoComments":"\n                                           long lvalLong = lvalInt & 0xffffffffL;\n          result = lvalLong >>> rvalInt;\n           break;\n         default:\n           throw new AssertionError(\"Unknown shift operator: \" +\n"},{"ids":123,"error":"junit.framework.AssertionFailedError","source":"/src/com/google/javascript/jscomp/TypeCheck.java","code":"@@ -1406,10 +1406,13 @@ private void visitParameterList(NodeTraversal t, Node call,\n     Node parameter = null;\n     Node argument = null;\n     while (arguments.hasNext() &&\n         parameters.hasNext()) {\n       // If there are no parameters left in the list, then the while loop\n       // above implies that this must be a var_args function.\n         parameter = parameters.next();\n       argument = arguments.next();\n       ordinal++;\n \n","solution":"@@ -1406,10 +1406,13 @@ private void visitParameterList(NodeTraversal t, Node call,\n     Node parameter = null;\n     Node argument = null;\n     while (arguments.hasNext() &&\n         (parameters.hasNext() ||\n          parameter != null && parameter.isVarArgs())) {\n       // If there are no parameters left in the list, then the while loop\n       // above implies that this must be a var_args function.\n    if (parameters.hasNext()) {\n         parameter = parameters.next();\n    }\n       argument = arguments.next();\n       ordinal++;\n \n","CodeWithNoComments":"\n     Node parameter = null;\n     Node argument = null;\n     while (arguments.hasNext() &&\n           parameters.hasNext()) {\n                       parameter = parameters.next();\n       argument = arguments.next();\n       ordinal++;\n \n","SolutionWithNoComments":"\n     Node parameter = null;\n     Node argument = null;\n     while (arguments.hasNext() &&\n           (parameters.hasNext() ||\n            parameter != null && parameter.isVarArgs())) {\n                    if (parameters.hasNext()) {\n         parameter = parameters.next();\n      }\n       argument = arguments.next();\n       ordinal++;\n \n"},{"ids":124,"error":"junit.framework.AssertionFailedError","source":"/src/com/google/javascript/jscomp/CommandLineRunner.java","code":"@@ -430,10 +430,8 @@ protected CompilerOptions createOptions() {\n     for (FormattingOption formattingOption : flags.formatting) {\n       formattingOption.applyToOptions(options);\n     }\n  if (flags.process_closure_primitives) {\n    options.closurePass = true;\n  }\n \n     initOptionsFromFlags(options);\n     return options;\n   }\n","solution":"@@ -430,10 +430,8 @@ protected CompilerOptions createOptions() {\n     for (FormattingOption formattingOption : flags.formatting) {\n       formattingOption.applyToOptions(options);\n     }\n \n  options.closurePass = flags.process_closure_primitives;\n     initOptionsFromFlags(options);\n     return options;\n   }\n","CodeWithNoComments":"\n     for (FormattingOption formattingOption : flags.formatting) {\n       formattingOption.applyToOptions(options);\n     }\n    if (flags.process_closure_primitives) {\n      options.closurePass = true;\n    }\n \n     initOptionsFromFlags(options);\n     return options;\n   }\n","SolutionWithNoComments":"\n     for (FormattingOption formattingOption : flags.formatting) {\n       formattingOption.applyToOptions(options);\n     }\n \n    options.closurePass = flags.process_closure_primitives;\n     initOptionsFromFlags(options);\n     return options;\n   }\n"},{"ids":125,"error":"junit.framework.AssertionFailedError","source":"/src/com/google/javascript/jscomp/CheckGlobalThis.java","code":"@@ -96,6 +96,13 @@ public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n       // var a = function() { }; // or\n       // function a() {} // or\n       // a.x = function() {};\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {\n@@ -143,7 +150,7 @@ private boolean shouldReportThis(Node n, Node parent) {\n     }\n \n     // Also report a THIS with a property access.\n  return false;\n   }\n \n   /**\n","solution":"@@ -96,6 +96,13 @@ public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n       // var a = function() { }; // or\n       // function a() {} // or\n       // a.x = function() {};\n    int pType = parent.getType();\n    if (!(pType == Token.BLOCK ||\n          pType == Token.SCRIPT ||\n          pType == Token.NAME ||\n          pType == Token.ASSIGN)) {\n      return false;\n    }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {\n@@ -143,7 +150,7 @@ private boolean shouldReportThis(Node n, Node parent) {\n     }\n \n     // Also report a THIS with a property access.\n  return parent != null && NodeUtil.isGet(parent);\n   }\n \n   /**\n","CodeWithNoComments":"\n                          }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {\n\n     }\n \n         return false;\n   }\n \n","SolutionWithNoComments":"\n                           int pType = parent.getType();\n      if (!(pType == Token.BLOCK ||\n            pType == Token.SCRIPT ||\n            pType == Token.NAME ||\n            pType == Token.ASSIGN)) {\n        return false;\n      }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {\n\n     }\n \n         return parent != null && NodeUtil.isGet(parent);\n   }\n \n"},{"ids":126,"error":"junit.framework.AssertionFailedError","source":"/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java","code":"@@ -354,15 +354,23 @@ Reference getInitializingReferenceForConstants() {\n     boolean isAssignedOnceInLifetime() {\n       Reference ref = getOneAndOnlyAssignment();\n       if (ref == null) {\n         return false;\n       }\n \n       // Make sure this assignment is not in a loop.\n \n       return true;\n     }\n \n     /**\n      * @return The one and only assignment. Returns if there are 0 or 2+\n      *    assignments.\n      */\n@@ -523,41 +531,52 @@ Scope getScope() {\n     public String getSourceName() {\n       return sourceName;\n     }\n   }\n \n   /**\n    * Represents a section of code that is uninterrupted by control structures\n    * (conditional or iterative logic).\n    */\n   static final class BasicBlock {\n \n     private final BasicBlock parent;\n \n     /**\n      * Determines whether the block may not be part of the normal control flow,\n      * but instead \"hoisted\" to the top of the scope.\n      */\n     private final boolean isHoisted;\n \n     /**\n      * Whether this block denotes a function scope.\n      */\n \n     /**\n      * Whether this block denotes a loop.\n      */\n \n     /**\n      * Creates a new block.\n      * @param parent The containing block.\n      * @param root The root node of the block.\n      */\n     BasicBlock(BasicBlock parent, Node root) {\n       this.parent = parent;\n \n       // only named functions may be hoisted.\n       this.isHoisted = NodeUtil.isHoistedFunctionDeclaration(root);\n \n \n     }\n \n","solution":"@@ -354,15 +354,23 @@ Reference getInitializingReferenceForConstants() {\n     boolean isAssignedOnceInLifetime() {\n       Reference ref = getOneAndOnlyAssignment();\n       if (ref == null) {\n         return false;\n       }\n \n       // Make sure this assignment is not in a loop.\n    for (BasicBlock block = ref.getBasicBlock();\n         block != null; block = block.getParent()) {\n      if (block.isFunction) {\n        break;\n      } else if (block.isLoop) {\n        return false;\n      }\n    }\n \n       return true;\n     }\n \n     /**\n      * @return The one and only assignment. Returns if there are 0 or 2+\n      *    assignments.\n      */\n@@ -523,41 +531,52 @@ Scope getScope() {\n     public String getSourceName() {\n       return sourceName;\n     }\n   }\n \n   /**\n    * Represents a section of code that is uninterrupted by control structures\n    * (conditional or iterative logic).\n    */\n   static final class BasicBlock {\n \n     private final BasicBlock parent;\n \n     /**\n      * Determines whether the block may not be part of the normal control flow,\n      * but instead \"hoisted\" to the top of the scope.\n      */\n     private final boolean isHoisted;\n \n     /**\n      * Whether this block denotes a function scope.\n      */\n  private final boolean isFunction;\n \n     /**\n      * Whether this block denotes a loop.\n      */\n  private final boolean isLoop;\n \n     /**\n      * Creates a new block.\n      * @param parent The containing block.\n      * @param root The root node of the block.\n      */\n     BasicBlock(BasicBlock parent, Node root) {\n       this.parent = parent;\n \n       // only named functions may be hoisted.\n       this.isHoisted = NodeUtil.isHoistedFunctionDeclaration(root);\n \n    this.isFunction = root.getType() == Token.FUNCTION;\n \n    if (root.getParent() != null) {\n      int pType = root.getParent().getType();\n      this.isLoop = pType == Token.DO ||\n          pType == Token.WHILE ||\n          pType == Token.FOR;\n    } else {\n      this.isLoop = false;\n    }\n     }\n \n","CodeWithNoComments":"\n     boolean isAssignedOnceInLifetime() {\n       Reference ref = getOneAndOnlyAssignment();\n       if (ref == null) {\n         return false;\n       }\n \n        \n       return true;\n     }\n     public String getSourceName() {\n       return sourceName;\n     }\n   }\n \n  \n   static final class BasicBlock {\n \n     private final BasicBlock parent;\n \n     private final boolean isHoisted;\n \n \n \n   \n     BasicBlock(BasicBlock parent, Node root) {\n       this.parent = parent;\n \n              this.isHoisted = NodeUtil.isHoistedFunctionDeclaration(root);\n \n \n     }\n \n","SolutionWithNoComments":"\n     boolean isAssignedOnceInLifetime() {\n       Reference ref = getOneAndOnlyAssignment();\n       if (ref == null) {\n         return false;\n       }\n \n             for (BasicBlock block = ref.getBasicBlock();\n           block != null; block = block.getParent()) {\n        if (block.isFunction) {\n          break;\n        } else if (block.isLoop) {\n          return false;\n        }\n      }\n \n       return true;\n     }\n     public String getSourceName() {\n       return sourceName;\n     }\n   }   static final class BasicBlock {\n \n     private final BasicBlock parent;\n \n     private final boolean isHoisted;\n \n    private final boolean isFunction;\n \n \n    private final boolean isLoop;\n      BasicBlock(BasicBlock parent, Node root) {\n       this.parent = parent;\n \n              this.isHoisted = NodeUtil.isHoistedFunctionDeclaration(root);\n \n      this.isFunction = root.getType() == Token.FUNCTION;\n \n      if (root.getParent() != null) {\n        int pType = root.getParent().getType();\n        this.isLoop = pType == Token.DO ||\n            pType == Token.WHILE ||\n            pType == Token.FOR;\n      } else {\n        this.isLoop = false;\n      }\n     }\n \n"},{"ids":127,"error":"junit.framework.AssertionFailedError","source":"/src/com/google/javascript/jscomp/CheckGlobalThis.java","code":"@@ -89,6 +89,7 @@ public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n       JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n       if (jsDoc != null &&\n           (jsDoc.isConstructor() ||\n            jsDoc.hasThisType() ||\n            jsDoc.isOverride())) {\n         return false;\n@@ -122,13 +123,17 @@ public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n       } else {\n         // Only traverse the right side if it's not an assignment to a prototype\n         // property or subproperty.\n           if (lhs.getType() == Token.GETPROP &&\n               lhs.getLastChild().getString().equals(\"prototype\")) {\n             return false;\n           }\n        if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(\".prototype.\")) {\n             return false;\n           }\n       }\n     }\n \n","solution":"@@ -89,6 +89,7 @@ public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n       JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n       if (jsDoc != null &&\n           (jsDoc.isConstructor() ||\n         jsDoc.isInterface() ||\n            jsDoc.hasThisType() ||\n            jsDoc.isOverride())) {\n         return false;\n@@ -122,13 +123,17 @@ public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n       } else {\n         // Only traverse the right side if it's not an assignment to a prototype\n         // property or subproperty.\n      if (NodeUtil.isGet(lhs)) {\n           if (lhs.getType() == Token.GETPROP &&\n               lhs.getLastChild().getString().equals(\"prototype\")) {\n             return false;\n           }\n        Node llhs = lhs.getFirstChild();\n        if (llhs.getType() == Token.GETPROP &&\n            llhs.getLastChild().getString().equals(\"prototype\")) {\n             return false;\n           }\n      }\n       }\n     }\n \n","CodeWithNoComments":"\n       JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n       if (jsDoc != null &&\n           (jsDoc.isConstructor() ||\n            jsDoc.hasThisType() ||\n            jsDoc.isOverride())) {\n         return false;\n\n       } else {\n                             if (lhs.getType() == Token.GETPROP &&\n               lhs.getLastChild().getString().equals(\"prototype\")) {\n             return false;\n           }\n          if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(\".prototype.\")) {\n             return false;\n           }\n       }\n     }\n \n","SolutionWithNoComments":"\n       JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n       if (jsDoc != null &&\n           (jsDoc.isConstructor() ||\n           jsDoc.isInterface() ||\n            jsDoc.hasThisType() ||\n            jsDoc.isOverride())) {\n         return false;\n\n       } else {\n                          if (NodeUtil.isGet(lhs)) {\n           if (lhs.getType() == Token.GETPROP &&\n               lhs.getLastChild().getString().equals(\"prototype\")) {\n             return false;\n           }\n          Node llhs = lhs.getFirstChild();\n          if (llhs.getType() == Token.GETPROP &&\n              llhs.getLastChild().getString().equals(\"prototype\")) {\n             return false;\n           }\n        }\n       }\n     }\n \n"},{"ids":128,"error":"junit.framework.AssertionFailedError","source":"/src/com/google/javascript/rhino/jstype/UnionType.java","code":"@@ -288,7 +288,7 @@ JSType meet(JSType that) {\n       builder.addAlternate(that);\n     }\n     JSType result = builder.build();\n  if (result != null) {\n       return result;\n     } else if (this.isObject() && that.isObject()) {\n       return getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n","solution":"@@ -288,7 +288,7 @@ JSType meet(JSType that) {\n       builder.addAlternate(that);\n     }\n     JSType result = builder.build();\n  if (!result.isNoType()) {\n       return result;\n     } else if (this.isObject() && that.isObject()) {\n       return getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n","CodeWithNoComments":"\n       builder.addAlternate(that);\n     }\n     JSType result = builder.build();\n    if (result != null) {\n       return result;\n     } else if (this.isObject() && that.isObject()) {\n       return getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n","SolutionWithNoComments":"\n       builder.addAlternate(that);\n     }\n     JSType result = builder.build();\n    if (!result.isNoType()) {\n       return result;\n     } else if (this.isObject() && that.isObject()) {\n       return getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n"},{"ids":129,"error":"junit.framework.AssertionFailedError","source":"/src/com/google/javascript/jscomp/FoldConstants.java","code":"@@ -1474,22 +1474,24 @@ void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,\n \n     String joinString = NodeUtil.getStringValue(right);\n     List<Node> arrayFoldedChildren = Lists.newLinkedList();\n  StringBuilder sb = new StringBuilder();\n     int foldedSize = 0;\n     Node elem = arrayNode.getFirstChild();\n     // Merges adjacent String nodes.\n     while (elem != null) {\n       if (NodeUtil.isImmutableValue(elem)) {\n      if (sb.length() > 0) {\n           sb.append(joinString);\n         }\n         sb.append(NodeUtil.getStringValue(elem));\n       } else {\n      if (sb.length() > 0) {\n           // + 2 for the quotes.\n           foldedSize += sb.length() + 2;\n           arrayFoldedChildren.add(Node.newString(sb.toString()));\n        sb = new StringBuilder();\n         }\n         foldedSize += InlineCostEstimator.getCost(elem);\n         arrayFoldedChildren.add(elem);\n@@ -1497,7 +1499,7 @@ void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,\n       elem = elem.getNext();\n     }\n \n  if (sb.length() > 0) {\n       // + 2 for the quotes.\n       foldedSize += sb.length() + 2;\n       arrayFoldedChildren.add(Node.newString(sb.toString()));\n","solution":"@@ -1474,22 +1474,24 @@ void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,\n \n     String joinString = NodeUtil.getStringValue(right);\n     List<Node> arrayFoldedChildren = Lists.newLinkedList();\n  StringBuilder sb = null;\n     int foldedSize = 0;\n     Node elem = arrayNode.getFirstChild();\n     // Merges adjacent String nodes.\n     while (elem != null) {\n       if (NodeUtil.isImmutableValue(elem)) {\n      if (sb == null) {\n        sb = new StringBuilder();\n      } else {\n           sb.append(joinString);\n         }\n         sb.append(NodeUtil.getStringValue(elem));\n       } else {\n      if (sb != null) {\n           // + 2 for the quotes.\n           foldedSize += sb.length() + 2;\n           arrayFoldedChildren.add(Node.newString(sb.toString()));\n        sb = null;\n         }\n         foldedSize += InlineCostEstimator.getCost(elem);\n         arrayFoldedChildren.add(elem);\n@@ -1497,7 +1499,7 @@ void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,\n       elem = elem.getNext();\n     }\n \n  if (sb != null) {\n       // + 2 for the quotes.\n       foldedSize += sb.length() + 2;\n       arrayFoldedChildren.add(Node.newString(sb.toString()));\n","CodeWithNoComments":"\n \n     String joinString = NodeUtil.getStringValue(right);\n     List<Node> arrayFoldedChildren = Lists.newLinkedList();\n    StringBuilder sb = new StringBuilder();\n     int foldedSize = 0;\n     Node elem = arrayNode.getFirstChild();\n          while (elem != null) {\n       if (NodeUtil.isImmutableValue(elem)) {\n        if (sb.length() > 0) {\n           sb.append(joinString);\n         }\n         sb.append(NodeUtil.getStringValue(elem));\n       } else {\n        if (sb.length() > 0) {\n                      foldedSize += sb.length() + 2;\n           arrayFoldedChildren.add(Node.newString(sb.toString()));\n          sb = new StringBuilder();\n         }\n         foldedSize += InlineCostEstimator.getCost(elem);\n         arrayFoldedChildren.add(elem);\n\n       elem = elem.getNext();\n     }\n \n    if (sb.length() > 0) {\n              foldedSize += sb.length() + 2;\n       arrayFoldedChildren.add(Node.newString(sb.toString()));\n","SolutionWithNoComments":"\n \n     String joinString = NodeUtil.getStringValue(right);\n     List<Node> arrayFoldedChildren = Lists.newLinkedList();\n    StringBuilder sb = null;\n     int foldedSize = 0;\n     Node elem = arrayNode.getFirstChild();\n          while (elem != null) {\n       if (NodeUtil.isImmutableValue(elem)) {\n        if (sb == null) {\n          sb = new StringBuilder();\n        } else {\n           sb.append(joinString);\n         }\n         sb.append(NodeUtil.getStringValue(elem));\n       } else {\n        if (sb != null) {\n                      foldedSize += sb.length() + 2;\n           arrayFoldedChildren.add(Node.newString(sb.toString()));\n          sb = null;\n         }\n         foldedSize += InlineCostEstimator.getCost(elem);\n         arrayFoldedChildren.add(elem);\n\n       elem = elem.getNext();\n     }\n \n    if (sb != null) {\n              foldedSize += sb.length() + 2;\n       arrayFoldedChildren.add(Node.newString(sb.toString()));\n"},{"ids":130,"error":"junit.framework.AssertionFailedError","source":"/src/com/google/javascript/jscomp/GlobalNamespace.java","code":"@@ -904,6 +904,10 @@ boolean canCollapseUnannotatedChildNames() {\n       // Don't try to collapse if the one global set is a twin reference.\n       // We could theoretically handle this case in CollapseProperties, but\n       // it's probably not worth the effort.\n \n       if (isClassOrEnum) {\n         return true;\n/src/com/google/javascript/rhino/JSDocInfoBuilder.java @@ -186,9 +186,7 @@ public void markName(String name, int lineno, int charno) {\n    * @return {@code true} if the description was recorded.\n    */\n   public boolean recordBlockDescription(String description) {\n  if (parseDocumentation) {\n     populated = true;\n  }\n     return currentInfo.documentBlock(description);\n   }\n \n","solution":"@@ -904,6 +904,10 @@ boolean canCollapseUnannotatedChildNames() {\n       // Don't try to collapse if the one global set is a twin reference.\n       // We could theoretically handle this case in CollapseProperties, but\n       // it's probably not worth the effort.\n    Preconditions.checkNotNull(declaration);\n    if (declaration.getTwin() != null) {\n      return false;\n    }\n \n       if (isClassOrEnum) {\n         return true;\n/src/com/google/javascript/rhino/JSDocInfoBuilder.java @@ -186,9 +186,7 @@ public void markName(String name, int lineno, int charno) {\n    * @return {@code true} if the description was recorded.\n    */\n   public boolean recordBlockDescription(String description) {\n     populated = true;\n     return currentInfo.documentBlock(description);\n   }\n \n","CodeWithNoComments":"\n                      \n       if (isClassOrEnum) {\n         return true;\n\n    if (parseDocumentation) {\n     populated = true;\n    }\n     return currentInfo.documentBlock(description);\n   }\n \n","SolutionWithNoComments":"\n                           Preconditions.checkNotNull(declaration);\n      if (declaration.getTwin() != null) {\n        return false;\n      }\n \n       if (isClassOrEnum) {\n         return true;\n\n     populated = true;\n     return currentInfo.documentBlock(description);\n   }\n \n"},{"ids":131,"error":"junit.framework.AssertionFailedError","source":"/src/com/google/javascript/jscomp/Normalize.java","code":"@@ -86,12 +86,12 @@ private void reportCodeChange(String changeDescription) {\n   @Override\n   public void process(Node externs, Node root) {\n     NodeTraversal.traverse(compiler, root, this);\n     if (MAKE_LOCAL_NAMES_UNIQUE) {\n       MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();\n       NodeTraversal t = new NodeTraversal(compiler, renamer);\n       t.traverseRoots(externs, root);\n     }\n  removeDuplicateDeclarations(root);\n     new PropogateConstantAnnotations(compiler, assertOnChange)\n         .process(externs, root);\n   }\n","solution":"@@ -86,12 +86,12 @@ private void reportCodeChange(String changeDescription) {\n   @Override\n   public void process(Node externs, Node root) {\n     NodeTraversal.traverse(compiler, root, this);\n  removeDuplicateDeclarations(root);\n     if (MAKE_LOCAL_NAMES_UNIQUE) {\n       MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();\n       NodeTraversal t = new NodeTraversal(compiler, renamer);\n       t.traverseRoots(externs, root);\n     }\n     new PropogateConstantAnnotations(compiler, assertOnChange)\n         .process(externs, root);\n   }\n","CodeWithNoComments":"\n   @Override\n   public void process(Node externs, Node root) {\n     NodeTraversal.traverse(compiler, root, this);\n     if (MAKE_LOCAL_NAMES_UNIQUE) {\n       MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();\n       NodeTraversal t = new NodeTraversal(compiler, renamer);\n       t.traverseRoots(externs, root);\n     }\n    removeDuplicateDeclarations(root);\n     new PropogateConstantAnnotations(compiler, assertOnChange)\n         .process(externs, root);\n   }\n","SolutionWithNoComments":"\n   @Override\n   public void process(Node externs, Node root) {\n     NodeTraversal.traverse(compiler, root, this);\n    removeDuplicateDeclarations(root);\n     if (MAKE_LOCAL_NAMES_UNIQUE) {\n       MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();\n       NodeTraversal t = new NodeTraversal(compiler, renamer);\n       t.traverseRoots(externs, root);\n     }\n     new PropogateConstantAnnotations(compiler, assertOnChange)\n         .process(externs, root);\n   }\n"},{"ids":132,"error":"junit.framework.AssertionFailedError","source":"/src/com/google/javascript/jscomp/ControlFlowAnalysis.java","code":"@@ -891,6 +891,7 @@ private static boolean mayThrowException(Node n) {\n       case Token.ASSIGN:\n       case Token.INC:\n       case Token.DEC:\n         return true;\n       case Token.FUNCTION:\n         return false;\n/src/com/google/javascript/jscomp/DisambiguateProperties.java @@ -760,9 +760,16 @@ public JSTypeSystem(AbstractCompiler compiler) {\n       }\n       // If the property does not exist on the referenced type but the original\n       // type is an object type, see if any subtype has the property.\n         // getGreatestSubtypeWithProperty does not guarantee that the property\n         // is defined on the returned type, it just indicates that it might be,\n         // so we have to double check.\n       return foundType;\n     }\n \n","solution":"@@ -891,6 +891,7 @@ private static boolean mayThrowException(Node n) {\n       case Token.ASSIGN:\n       case Token.INC:\n       case Token.DEC:\n    case Token.INSTANCEOF:\n         return true;\n       case Token.FUNCTION:\n         return false;\n/src/com/google/javascript/jscomp/DisambiguateProperties.java @@ -760,9 +760,16 @@ public JSTypeSystem(AbstractCompiler compiler) {\n       }\n       // If the property does not exist on the referenced type but the original\n       // type is an object type, see if any subtype has the property.\n    if (foundType == null) {\n      ObjectType maybeType = ObjectType.cast(\n          registry.getGreatestSubtypeWithProperty(type, field));\n         // getGreatestSubtypeWithProperty does not guarantee that the property\n         // is defined on the returned type, it just indicates that it might be,\n         // so we have to double check.\n      if (maybeType != null && maybeType.hasOwnProperty(field)) {\n        foundType = maybeType;\n      }\n    }\n       return foundType;\n     }\n \n","CodeWithNoComments":"\n       case Token.ASSIGN:\n       case Token.INC:\n       case Token.DEC:\n         return true;\n       case Token.FUNCTION:\n         return false;\n\n       }\n                                                return foundType;\n     }\n \n","SolutionWithNoComments":"\n       case Token.ASSIGN:\n       case Token.INC:\n       case Token.DEC:\n      case Token.INSTANCEOF:\n         return true;\n       case Token.FUNCTION:\n         return false;\n\n       }\n                    if (foundType == null) {\n        ObjectType maybeType = ObjectType.cast(\n            registry.getGreatestSubtypeWithProperty(type, field));\n                                   if (maybeType != null && maybeType.hasOwnProperty(field)) {\n          foundType = maybeType;\n        }\n      }\n       return foundType;\n     }\n \n"},{"ids":133,"error":"junit.framework.AssertionFailedError","source":"/src/com/google/javascript/jscomp/CommandLineRunner.java","code":"@@ -859,6 +859,7 @@ protected CompilerOptions createOptions() {\n       // so we might as well inline it. But shut off the i18n warnings,\n       // because the user didn't really ask for i18n.\n       options.messageBundle = new EmptyMessageBundle();\n     }\n \n     return options;\n","solution":"@@ -859,6 +859,7 @@ protected CompilerOptions createOptions() {\n       // so we might as well inline it. But shut off the i18n warnings,\n       // because the user didn't really ask for i18n.\n       options.messageBundle = new EmptyMessageBundle();\n    options.setWarningLevel(JsMessageVisitor.MSG_CONVENTIONS, CheckLevel.OFF);\n     }\n \n     return options;\n","CodeWithNoComments":"\n                     options.messageBundle = new EmptyMessageBundle();\n     }\n \n     return options;\n","SolutionWithNoComments":"\n                     options.messageBundle = new EmptyMessageBundle();\n      options.setWarningLevel(JsMessageVisitor.MSG_CONVENTIONS, CheckLevel.OFF);\n     }\n \n     return options;\n"},{"ids":134,"error":"java.lang.IllegalStateException","source":"/src/com/google/javascript/jscomp/ScopedAliases.java","code":"@@ -256,6 +256,7 @@ public void applyAlias() {\n     private final Map<String, Var> aliases = Maps.newHashMap();\n \n     // Also temporary and cleared for each scope.\n \n     // Suppose you create an alias.\n     // var x = goog.x;\n@@ -313,6 +314,7 @@ public void exitScope(NodeTraversal t) {\n \n       if (t.getScopeDepth() == 2) {\n         renameNamespaceShadows(t);\n         aliases.clear();\n         forbiddenLocals.clear();\n         transformation = null;\n@@ -429,6 +431,7 @@ private void findAliases(NodeTraversal t) {\n             } else {\n               grandparent.addChildBefore(newDecl, varNode);\n             }\n           }\n \n           // Rewrite \"var name = EXPR;\" to \"var name = $jscomp.scope.name;\"\n@@ -578,7 +581,7 @@ public void visit(NodeTraversal t, Node n, Node parent) {\n         // When we inject declarations, we duplicate jsdoc. Make sure\n         // we only process that jsdoc once.\n         JSDocInfo info = n.getJSDocInfo();\n      if (info != null) {\n           for (Node node : info.getTypeNodes()) {\n             fixTypeNode(node);\n           }\n","solution":"@@ -256,6 +256,7 @@ public void applyAlias() {\n     private final Map<String, Var> aliases = Maps.newHashMap();\n \n     // Also temporary and cleared for each scope.\n  private final Set<Node> injectedDecls = Sets.newHashSet();\n \n     // Suppose you create an alias.\n     // var x = goog.x;\n@@ -313,6 +314,7 @@ public void exitScope(NodeTraversal t) {\n \n       if (t.getScopeDepth() == 2) {\n         renameNamespaceShadows(t);\n      injectedDecls.clear();\n         aliases.clear();\n         forbiddenLocals.clear();\n         transformation = null;\n@@ -429,6 +431,7 @@ private void findAliases(NodeTraversal t) {\n             } else {\n               grandparent.addChildBefore(newDecl, varNode);\n             }\n          injectedDecls.add(newDecl.getFirstChild());\n           }\n \n           // Rewrite \"var name = EXPR;\" to \"var name = $jscomp.scope.name;\"\n@@ -578,7 +581,7 @@ public void visit(NodeTraversal t, Node n, Node parent) {\n         // When we inject declarations, we duplicate jsdoc. Make sure\n         // we only process that jsdoc once.\n         JSDocInfo info = n.getJSDocInfo();\n      if (info != null && !injectedDecls.contains(n)) {\n           for (Node node : info.getTypeNodes()) {\n             fixTypeNode(node);\n           }\n","CodeWithNoComments":"\n     private final Map<String, Var> aliases = Maps.newHashMap();\n \n      \n          \n \n       if (t.getScopeDepth() == 2) {\n         renameNamespaceShadows(t);\n         aliases.clear();\n         forbiddenLocals.clear();\n         transformation = null;\n\n             } else {\n               grandparent.addChildBefore(newDecl, varNode);\n             }\n           }\n \n           \n                           JSDocInfo info = n.getJSDocInfo();\n        if (info != null) {\n           for (Node node : info.getTypeNodes()) {\n             fixTypeNode(node);\n           }\n","SolutionWithNoComments":"\n     private final Map<String, Var> aliases = Maps.newHashMap();\n \n         private final Set<Node> injectedDecls = Sets.newHashSet();\n \n          \n \n       if (t.getScopeDepth() == 2) {\n         renameNamespaceShadows(t);\n        injectedDecls.clear();\n         aliases.clear();\n         forbiddenLocals.clear();\n         transformation = null;\n\n             } else {\n               grandparent.addChildBefore(newDecl, varNode);\n             }\n            injectedDecls.add(newDecl.getFirstChild());\n           }\n \n           \n                           JSDocInfo info = n.getJSDocInfo();\n        if (info != null && !injectedDecls.contains(n)) {\n           for (Node node : info.getTypeNodes()) {\n             fixTypeNode(node);\n           }\n"},{"ids":135,"error":"junit.framework.AssertionFailedError","source":"/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java","code":"@@ -1905,7 +1905,11 @@ private Node parseTypeExpression(JsDocToken token) {\n    * For expressions on the right hand side of a this: or new:\n    */\n   private Node parseContextTypeExpression(JsDocToken token) {\n        return parseTypeName(token);\n   }\n \n   /**\n","solution":"@@ -1905,7 +1905,11 @@ private Node parseTypeExpression(JsDocToken token) {\n    * For expressions on the right hand side of a this: or new:\n    */\n   private Node parseContextTypeExpression(JsDocToken token) {\n  if (token == JsDocToken.QMARK) {\n    return newNode(Token.QMARK);\n  } else {\n    return parseBasicTypeExpression(token);\n  }\n   }\n \n   /**\n","CodeWithNoComments":"\n          return parseTypeName(token);\n   }\n \n","SolutionWithNoComments":"\n    if (token == JsDocToken.QMARK) {\n      return newNode(Token.QMARK);\n    } else {\n      return parseBasicTypeExpression(token);\n    }\n   }\n \n"},{"ids":136,"error":"junit.framework.ComparisonFailure","source":"/src/com/google/javascript/jscomp/TypeValidator.java","code":"@@ -722,8 +722,20 @@ private String formatFoundRequired(String description, JSType found,\n    *     to an Object type, if possible.\n    */\n   String getReadableJSTypeName(Node n, boolean dereference) {\n \n     // The best type name is the actual type name.\n \n     // If we're analyzing a GETPROP, the property may be inherited by the\n     // prototype chain. So climb the prototype chain and find out where\n@@ -753,18 +765,6 @@ String getReadableJSTypeName(Node n, boolean dereference) {\n       }\n     }\n \n  JSType type = getJSType(n);\n  if (dereference) {\n    ObjectType dereferenced = type.dereference();\n    if (dereferenced != null) {\n      type = dereferenced;\n    }\n  }\n  if (type.isFunctionPrototypeType() ||\n      (type.toObjectType() != null &&\n       type.toObjectType().getConstructor() != null)) {\n    return type.toString();\n  }\n     String qualifiedName = n.getQualifiedName();\n     if (qualifiedName != null) {\n       return qualifiedName;\n","solution":"@@ -722,8 +722,20 @@ private String formatFoundRequired(String description, JSType found,\n    *     to an Object type, if possible.\n    */\n   String getReadableJSTypeName(Node n, boolean dereference) {\n  JSType type = getJSType(n);\n  if (dereference) {\n    ObjectType dereferenced = type.dereference();\n    if (dereferenced != null) {\n      type = dereferenced;\n    }\n  }\n \n     // The best type name is the actual type name.\n  if (type.isFunctionPrototypeType() ||\n      (type.toObjectType() != null &&\n       type.toObjectType().getConstructor() != null)) {\n    return type.toString();\n  }\n \n     // If we're analyzing a GETPROP, the property may be inherited by the\n     // prototype chain. So climb the prototype chain and find out where\n@@ -753,18 +765,6 @@ String getReadableJSTypeName(Node n, boolean dereference) {\n       }\n     }\n \n     String qualifiedName = n.getQualifiedName();\n     if (qualifiedName != null) {\n       return qualifiedName;\n","CodeWithNoComments":"\n \n      \n          \n       }\n     }\n \n    JSType type = getJSType(n);\n    if (dereference) {\n      ObjectType dereferenced = type.dereference();\n      if (dereferenced != null) {\n        type = dereferenced;\n      }\n    }\n    if (type.isFunctionPrototypeType() ||\n        (type.toObjectType() != null &&\n         type.toObjectType().getConstructor() != null)) {\n      return type.toString();\n    }\n     String qualifiedName = n.getQualifiedName();\n     if (qualifiedName != null) {\n       return qualifiedName;\n","SolutionWithNoComments":"\n    JSType type = getJSType(n);\n    if (dereference) {\n      ObjectType dereferenced = type.dereference();\n      if (dereferenced != null) {\n        type = dereferenced;\n      }\n    }\n \n         if (type.isFunctionPrototypeType() ||\n        (type.toObjectType() != null &&\n         type.toObjectType().getConstructor() != null)) {\n      return type.toString();\n    }\n \n          \n       }\n     }\n \n     String qualifiedName = n.getQualifiedName();\n     if (qualifiedName != null) {\n       return qualifiedName;\n"},{"ids":137,"error":"junit.framework.AssertionFailedError","source":"/src/com/google/javascript/jscomp/TypeInference.java","code":"@@ -1189,9 +1189,15 @@ private boolean inferTemplatedTypesForCall(\n     }\n \n     // Try to infer the template types\n  Map<TemplateType, JSType> inferred = \n      inferTemplateTypesFromParameters(fnType, n);\n \n     // Replace all template types. If we couldn't find a replacement, we\n     // replace it with UNKNOWN.\n","solution":"@@ -1189,9 +1189,15 @@ private boolean inferTemplatedTypesForCall(\n     }\n \n     // Try to infer the template types\n  Map<TemplateType, JSType> inferred = Maps.filterKeys(\n      inferTemplateTypesFromParameters(fnType, n),\n      new Predicate<TemplateType>() {\n        @Override\n        public boolean apply(TemplateType key) {\n          return keys.contains(key);\n        }}\n      );\n \n     // Replace all template types. If we couldn't find a replacement, we\n     // replace it with UNKNOWN.\n","CodeWithNoComments":"\n     }\n \n         Map<TemplateType, JSType> inferred = \n        inferTemplateTypesFromParameters(fnType, n);\n-\n+\n \n          ","SolutionWithNoComments":"\n     }\n \n     -\n    Map<TemplateType, JSType> inferred = Maps.filterKeys(\n        inferTemplateTypesFromParameters(fnType, n),\n        new Predicate<TemplateType>() {\n+\n          @Override\n          public boolean apply(TemplateType key) {\n            return keys.contains(key);\n          }}\n        );\n \n          "},{"ids":138,"error":"junit.framework.AssertionFailedError","source":"/src/com/google/javascript/jscomp/NameAnalyzer.java","code":"@@ -575,7 +575,7 @@ private void recordAssignment(NodeTraversal t, Node n, Node recordNode) {\n           } else {\n             recordDepScope(nameNode, ns);\n           }\n      } else {\n           // The rhs of the assignment is the caller, so it's used by the\n           // context. Don't associate it w/ the lhs.\n           // FYI: this fixes only the specific case where the assignment is the\n","solution":"@@ -575,7 +575,7 @@ private void recordAssignment(NodeTraversal t, Node n, Node recordNode) {\n           } else {\n             recordDepScope(nameNode, ns);\n           }\n      } else if (!(parent.isCall() && parent.getFirstChild() == n)) {\n           // The rhs of the assignment is the caller, so it's used by the\n           // context. Don't associate it w/ the lhs.\n           // FYI: this fixes only the specific case where the assignment is the\n","CodeWithNoComments":"\n           } else {\n             recordDepScope(nameNode, ns);\n           }\n        } else {\n                                 ","SolutionWithNoComments":"\n           } else {\n             recordDepScope(nameNode, ns);\n           }\n        } else if (!(parent.isCall() && parent.getFirstChild() == n)) {\n                                 "},{"ids":139,"error":"junit.framework.AssertionFailedError","source":"/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java","code":"@@ -326,7 +326,7 @@ private void processRequireCall(NodeTraversal t, Node n, Node parent) {\n       // the checks for broken requires turned off. In these cases, we\n       // allow broken requires to be preserved by the first run to\n       // let them be caught in the subsequent run.\n    if (provided != null) {\n         parent.detachFromParent();\n         compiler.reportCodeChange();\n       }\n","solution":"@@ -326,7 +326,7 @@ private void processRequireCall(NodeTraversal t, Node n, Node parent) {\n       // the checks for broken requires turned off. In these cases, we\n       // allow broken requires to be preserved by the first run to\n       // let them be caught in the subsequent run.\n    if (provided != null || requiresLevel.isOn()) {\n         parent.detachFromParent();\n         compiler.reportCodeChange();\n       }\n","CodeWithNoComments":"\n                           if (provided != null) {\n         parent.detachFromParent();\n         compiler.reportCodeChange();\n       }\n","SolutionWithNoComments":"\n                           if (provided != null || requiresLevel.isOn()) {\n         parent.detachFromParent();\n         compiler.reportCodeChange();\n       }\n"},{"ids":140,"error":"junit.framework.AssertionFailedError","source":"/src/com/google/javascript/jscomp/FunctionInjector.java","code":"@@ -694,14 +694,6 @@ private CanInlineResult canInlineReferenceDirectly(\n \n     Node block = fnNode.getLastChild();\n \n  boolean hasSideEffects = false;\n  if (block.hasChildren()) {\n    Preconditions.checkState(block.hasOneChild());\n    Node stmt = block.getFirstChild();\n    if (stmt.isReturn()) {\n      hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);\n    }\n  }\n     // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n     Node cArg = callNode.getFirstChild().getNext();\n \n@@ -727,9 +719,6 @@ private CanInlineResult canInlineReferenceDirectly(\n       // For each named parameter check if a mutable argument use more than one.\n       if (fnParam != null) {\n         if (cArg != null) {\n        if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {\n          return CanInlineResult.NO;\n        }\n           // Check for arguments that are evaluated more than once.\n           // Note: Unlike block inlining, there it is not possible that a\n           // parameter reference will be in a loop.\n","solution":"@@ -694,14 +694,6 @@ private CanInlineResult canInlineReferenceDirectly(\n \n     Node block = fnNode.getLastChild();\n \n     // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n     Node cArg = callNode.getFirstChild().getNext();\n \n@@ -727,9 +719,6 @@ private CanInlineResult canInlineReferenceDirectly(\n       // For each named parameter check if a mutable argument use more than one.\n       if (fnParam != null) {\n         if (cArg != null) {\n           // Check for arguments that are evaluated more than once.\n           // Note: Unlike block inlining, there it is not possible that a\n           // parameter reference will be in a loop.\n","CodeWithNoComments":"\n \n     Node block = fnNode.getLastChild();\n \n    boolean hasSideEffects = false;\n    if (block.hasChildren()) {\n      Preconditions.checkState(block.hasOneChild());\n      Node stmt = block.getFirstChild();\n      if (stmt.isReturn()) {\n        hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);\n      }\n    }\n          Node cArg = callNode.getFirstChild().getNext();\n \n\n              if (fnParam != null) {\n         if (cArg != null) {\n          if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {\n            return CanInlineResult.NO;\n          }\n                                 ","SolutionWithNoComments":"\n \n     Node block = fnNode.getLastChild();\n \n          Node cArg = callNode.getFirstChild().getNext();\n \n\n              if (fnParam != null) {\n         if (cArg != null) {\n                                 "},{"ids":141,"error":"junit.framework.AssertionFailedError","source":"/src/com/google/javascript/jscomp/FunctionInjector.java","code":"@@ -694,6 +694,15 @@ private CanInlineResult canInlineReferenceDirectly(\n \n     Node block = fnNode.getLastChild();\n \n \n     // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n     Node cArg = callNode.getFirstChild().getNext();\n@@ -720,6 +729,9 @@ private CanInlineResult canInlineReferenceDirectly(\n       // For each named parameter check if a mutable argument use more than one.\n       if (fnParam != null) {\n         if (cArg != null) {\n \n           // Check for arguments that are evaluated more than once.\n           // Note: Unlike block inlining, there it is not possible that a\n","solution":"@@ -694,6 +694,15 @@ private CanInlineResult canInlineReferenceDirectly(\n \n     Node block = fnNode.getLastChild();\n \n  boolean hasSideEffects = false;  // empty function case\n  if (block.hasChildren()) {\n    Preconditions.checkState(block.hasOneChild());\n    Node stmt = block.getFirstChild();\n    if (stmt.isReturn()) {\n      hasSideEffects = NodeUtil.mayHaveSideEffects(\n          stmt.getFirstChild(), compiler);\n    }\n  }\n \n     // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n     Node cArg = callNode.getFirstChild().getNext();\n@@ -720,6 +729,9 @@ private CanInlineResult canInlineReferenceDirectly(\n       // For each named parameter check if a mutable argument use more than one.\n       if (fnParam != null) {\n         if (cArg != null) {\n        if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {\n          return CanInlineResult.NO;\n        }\n \n           // Check for arguments that are evaluated more than once.\n           // Note: Unlike block inlining, there it is not possible that a\n","CodeWithNoComments":"\n \n     Node block = fnNode.getLastChild();\n \n \n          Node cArg = callNode.getFirstChild().getNext();\n\n              if (fnParam != null) {\n         if (cArg != null) {\n \n                      ","SolutionWithNoComments":"\n \n     Node block = fnNode.getLastChild();\n \n    boolean hasSideEffects = false;      if (block.hasChildren()) {\n      Preconditions.checkState(block.hasOneChild());\n      Node stmt = block.getFirstChild();\n      if (stmt.isReturn()) {\n        hasSideEffects = NodeUtil.mayHaveSideEffects(\n            stmt.getFirstChild(), compiler);\n      }\n    }\n \n          Node cArg = callNode.getFirstChild().getNext();\n\n              if (fnParam != null) {\n         if (cArg != null) {\n          if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {\n            return CanInlineResult.NO;\n          }\n \n                      "},{"ids":142,"error":"junit.framework.AssertionFailedError","source":"/src/com/google/javascript/jscomp/type/ClosureReverseAbstractInterpreter.java","code":"@@ -51,7 +51,8 @@\n       new RestrictByTrueTypeOfResultVisitor() {\n         @Override\n         protected JSType caseTopType(JSType topType) {\n        return topType;\n         }\n \n         @Override\n","solution":"@@ -51,7 +51,8 @@\n       new RestrictByTrueTypeOfResultVisitor() {\n         @Override\n         protected JSType caseTopType(JSType topType) {\n        return topType.isAllType() ?\n            getNativeType(ARRAY_TYPE) : topType;\n         }\n \n         @Override\n","CodeWithNoComments":"\n       new RestrictByTrueTypeOfResultVisitor() {\n         @Override\n         protected JSType caseTopType(JSType topType) {\n          return topType;\n         }\n \n         @Override\n","SolutionWithNoComments":"\n       new RestrictByTrueTypeOfResultVisitor() {\n         @Override\n         protected JSType caseTopType(JSType topType) {\n          return topType.isAllType() ?\n              getNativeType(ARRAY_TYPE) : topType;\n         }\n \n         @Override\n"},{"ids":143,"error":"junit.framework.AssertionFailedError","source":"/src/com/google/javascript/jscomp/ScopedAliases.java","code":"@@ -355,6 +355,7 @@ private void findAliases(NodeTraversal t) {\n         Node n = v.getNode();\n         Node parent = n.getParent();\n         boolean isVar = parent.isVar();\n         if (isVar && n.getFirstChild() != null && n.getFirstChild().isQualifiedName()) {\n           recordAlias(v);\n         } else if (v.isBleedingFunction()) {\n@@ -363,12 +364,13 @@ private void findAliases(NodeTraversal t) {\n         } else if (parent.getType() == Token.LP) {\n           // Parameters of the scope function also get a BAD_PARAMETERS\n           // error.\n      } else if (isVar) {\n           Node grandparent = parent.getParent();\n        Node value = n.hasChildren() ?\n            v.getInitialValue().detachFromParent() :\n               null;\n        Node varNode = parent;\n \n           String name = n.getString();\n           int nameCount = scopedAliasNames.count(name);\n@@ -380,7 +382,9 @@ private void findAliases(NodeTraversal t) {\n \n           // First, we need to free up the function expression (EXPR)\n           // to be used in another expression.\n             // Replace \"function NAME() { ... }\" with \"var NAME;\".\n \n             // We can't keep the local name on the function expression,\n             // because IE is buggy and will leak the name into the global\n@@ -389,9 +393,19 @@ private void findAliases(NodeTraversal t) {\n             //\n             // This will only cause problems if this is a hoisted, recursive\n             // function, and the programmer is using the hoisting.\n \n               // If this is a VAR, we can just detach the expression and\n               // the tree will still be valid.\n \n           // Add $jscomp.scope.name = EXPR;\n           // Make sure we copy over all the jsdoc and debug info.\n@@ -405,7 +419,11 @@ private void findAliases(NodeTraversal t) {\n             NodeUtil.setDebugInformation(\n                 newDecl.getFirstChild().getFirstChild(), n, name);\n \n               grandparent.addChildBefore(newDecl, varNode);\n           }\n \n           // Rewrite \"var name = EXPR;\" to \"var name = $jscomp.scope.name;\"\n/src/com/google/javascript/rhino/Node.java @@ -551,6 +551,9 @@ public Node getChildBefore(Node child) {\n       return null;\n     }\n     Node n = first;\n \n     while (n.next != child) {\n       n = n.next;\n","solution":"@@ -355,6 +355,7 @@ private void findAliases(NodeTraversal t) {\n         Node n = v.getNode();\n         Node parent = n.getParent();\n         boolean isVar = parent.isVar();\n      boolean isFunctionDecl = NodeUtil.isFunctionDeclaration(parent);\n         if (isVar && n.getFirstChild() != null && n.getFirstChild().isQualifiedName()) {\n           recordAlias(v);\n         } else if (v.isBleedingFunction()) {\n@@ -363,12 +364,13 @@ private void findAliases(NodeTraversal t) {\n         } else if (parent.getType() == Token.LP) {\n           // Parameters of the scope function also get a BAD_PARAMETERS\n           // error.\n      } else if (isVar || isFunctionDecl) {\n        boolean isHoisted = NodeUtil.isHoistedFunctionDeclaration(parent);\n           Node grandparent = parent.getParent();\n        Node value = v.getInitialValue() != null ?\n            v.getInitialValue() :\n               null;\n        Node varNode = null;\n \n           String name = n.getString();\n           int nameCount = scopedAliasNames.count(name);\n@@ -380,7 +382,9 @@ private void findAliases(NodeTraversal t) {\n \n           // First, we need to free up the function expression (EXPR)\n           // to be used in another expression.\n        if (isFunctionDecl) {\n             // Replace \"function NAME() { ... }\" with \"var NAME;\".\n          Node existingName = v.getNameNode();\n \n             // We can't keep the local name on the function expression,\n             // because IE is buggy and will leak the name into the global\n@@ -389,9 +393,19 @@ private void findAliases(NodeTraversal t) {\n             //\n             // This will only cause problems if this is a hoisted, recursive\n             // function, and the programmer is using the hoisting.\n          Node newName = IR.name(\"\").useSourceInfoFrom(existingName);\n          value.replaceChild(existingName, newName);\n \n          varNode = IR.var(existingName).useSourceInfoFrom(existingName);\n          grandparent.replaceChild(parent, varNode);\n        } else {\n          if (value != null) {\n               // If this is a VAR, we can just detach the expression and\n               // the tree will still be valid.\n            value.detachFromParent();\n          }\n          varNode = parent;\n        }\n \n           // Add $jscomp.scope.name = EXPR;\n           // Make sure we copy over all the jsdoc and debug info.\n@@ -405,7 +419,11 @@ private void findAliases(NodeTraversal t) {\n             NodeUtil.setDebugInformation(\n                 newDecl.getFirstChild().getFirstChild(), n, name);\n \n          if (isHoisted) {\n            grandparent.addChildToFront(newDecl);\n          } else {\n               grandparent.addChildBefore(newDecl, varNode);\n          }\n           }\n \n           // Rewrite \"var name = EXPR;\" to \"var name = $jscomp.scope.name;\"\n/src/com/google/javascript/rhino/Node.java @@ -551,6 +551,9 @@ public Node getChildBefore(Node child) {\n       return null;\n     }\n     Node n = first;\n  if (n == null) {\n    throw new RuntimeException(\"node is not a child\");\n  }\n \n     while (n.next != child) {\n       n = n.next;\n","CodeWithNoComments":"\n         Node n = v.getNode();\n         Node parent = n.getParent();\n         boolean isVar = parent.isVar();\n         if (isVar && n.getFirstChild() != null && n.getFirstChild().isQualifiedName()) {\n           recordAlias(v);\n         } else if (v.isBleedingFunction()) {\n\n         } else if (parent.getType() == Token.LP) {\n                              } else if (isVar) {\n           Node grandparent = parent.getParent();\n          Node value = n.hasChildren() ?\n              v.getInitialValue().detachFromParent() :\n               null;\n          Node varNode = parent;\n \n           String name = n.getString();\n           int nameCount = scopedAliasNames.count(name);\n\n                    \n                                        \n                               \n                    \n             NodeUtil.setDebugInformation(\n                 newDecl.getFirstChild().getFirstChild(), n, name);\n \n               grandparent.addChildBefore(newDecl, varNode);\n           }\n \n\n       return null;\n     }\n     Node n = first;\n \n     while (n.next != child) {\n       n = n.next;\n","SolutionWithNoComments":"\n         Node n = v.getNode();\n         Node parent = n.getParent();\n         boolean isVar = parent.isVar();\n        boolean isFunctionDecl = NodeUtil.isFunctionDeclaration(parent);\n         if (isVar && n.getFirstChild() != null && n.getFirstChild().isQualifiedName()) {\n           recordAlias(v);\n         } else if (v.isBleedingFunction()) {\n\n         } else if (parent.getType() == Token.LP) {\n                              } else if (isVar || isFunctionDecl) {\n          boolean isHoisted = NodeUtil.isHoistedFunctionDeclaration(parent);\n           Node grandparent = parent.getParent();\n          Node value = v.getInitialValue() != null ?\n              v.getInitialValue() :\n               null;\n          Node varNode = null;\n \n           String name = n.getString();\n           int nameCount = scopedAliasNames.count(name);\n\n \n                                if (isFunctionDecl) {\n                         Node existingName = v.getNameNode();\n \n                          \n                                                   Node newName = IR.name(\"\").useSourceInfoFrom(existingName);\n            value.replaceChild(existingName, newName);\n \n            varNode = IR.var(existingName).useSourceInfoFrom(existingName);\n            grandparent.replaceChild(parent, varNode);\n          } else {\n            if (value != null) {\n                                            value.detachFromParent();\n            }\n            varNode = parent;\n          }\n \n                      \n             NodeUtil.setDebugInformation(\n                 newDecl.getFirstChild().getFirstChild(), n, name);\n \n            if (isHoisted) {\n              grandparent.addChildToFront(newDecl);\n            } else {\n               grandparent.addChildBefore(newDecl, varNode);\n            }\n           }\n \n\n       return null;\n     }\n     Node n = first;\n    if (n == null) {\n      throw new RuntimeException(\"node is not a child\");\n    }\n \n     while (n.next != child) {\n       n = n.next;\n"},{"ids":144,"error":"junit.framework.ComparisonFailure","source":"/src/com/google/javascript/jscomp/DisambiguateProperties.java","code":"@@ -492,6 +492,9 @@ private void handleObjectLit(NodeTraversal t, Node n) {\n           child != null;\n           child = child.getNext()) {\n         // Maybe STRING, GET, SET\n \n         // We should never see a mix of numbers and strings.\n         String name = child.getString();\n","solution":"@@ -492,6 +492,9 @@ private void handleObjectLit(NodeTraversal t, Node n) {\n           child != null;\n           child = child.getNext()) {\n         // Maybe STRING, GET, SET\n      if (child.isQuotedString()) {\n        continue;\n      }\n \n         // We should never see a mix of numbers and strings.\n         String name = child.getString();\n","CodeWithNoComments":"\n           child != null;\n           child = child.getNext()) {\n          \n                  String name = child.getString();\n","SolutionWithNoComments":"\n           child != null;\n           child = child.getNext()) {\n                 if (child.isQuotedString()) {\n          continue;\n        }\n \n                  String name = child.getString();\n"},{"ids":145,"error":"junit.framework.AssertionFailedError","source":"/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java","code":"@@ -428,6 +428,9 @@ boolean isAssignedOnceInLifetime() {\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n           break;\n         } else if (block.isLoop) {\n           return false;\n","solution":"@@ -428,6 +428,9 @@ boolean isAssignedOnceInLifetime() {\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n        if (ref.getSymbol().getScope() != ref.scope) {\n          return false;\n        }\n           break;\n         } else if (block.isLoop) {\n           return false;\n","CodeWithNoComments":"\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n           break;\n         } else if (block.isLoop) {\n           return false;\n","SolutionWithNoComments":"\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n          if (ref.getSymbol().getScope() != ref.scope) {\n            return false;\n          }\n           break;\n         } else if (block.isLoop) {\n           return false;\n"},{"ids":146,"error":"junit.framework.AssertionFailedError","source":"/src/com/google/javascript/jscomp/GlobalNamespace.java","code":"@@ -363,6 +363,7 @@ public void collect(JSModule module, Scope scope, Node n) {\n                 isSet = true;\n                 type = Name.Type.FUNCTION;\n                 break;\n               case Token.INC:\n               case Token.DEC:\n                 isSet = true;\n","solution":"@@ -363,6 +363,7 @@ public void collect(JSModule module, Scope scope, Node n) {\n                 isSet = true;\n                 type = Name.Type.FUNCTION;\n                 break;\n            case Token.CATCH:\n               case Token.INC:\n               case Token.DEC:\n                 isSet = true;\n","CodeWithNoComments":"\n                 isSet = true;\n                 type = Name.Type.FUNCTION;\n                 break;\n               case Token.INC:\n               case Token.DEC:\n                 isSet = true;\n","SolutionWithNoComments":"\n                 isSet = true;\n                 type = Name.Type.FUNCTION;\n                 break;\n              case Token.CATCH:\n               case Token.INC:\n               case Token.DEC:\n                 isSet = true;\n"},{"ids":147,"error":"junit.framework.AssertionFailedError","source":"/src/com/google/javascript/jscomp/InlineVariables.java","code":"@@ -301,10 +301,12 @@ private void inlineNonConstants(\n       if (!maybeModifiedArguments &&\n           !staleVars.contains(v) &&\n           referenceInfo.isWellDefined() &&\n        referenceInfo.isAssignedOnceInLifetime()) {\n           // Inlining the variable based solely on well-defined and assigned\n           // once is *NOT* correct. We relax the correctness requirement if\n           // the variable is declared constant.\n         List<Reference> refs = referenceInfo.references;\n         for (int i = 1 /* start from a read */; i < refs.size(); i++) {\n           Node nameNode = refs.get(i).getNode();\n","solution":"@@ -301,10 +301,12 @@ private void inlineNonConstants(\n       if (!maybeModifiedArguments &&\n           !staleVars.contains(v) &&\n           referenceInfo.isWellDefined() &&\n        referenceInfo.isAssignedOnceInLifetime() &&\n           // Inlining the variable based solely on well-defined and assigned\n           // once is *NOT* correct. We relax the correctness requirement if\n           // the variable is declared constant.\n        (isInlineableDeclaredConstant(v, referenceInfo) ||\n         referenceInfo.isOnlyAssignmentSameScopeAsDeclaration())) {\n         List<Reference> refs = referenceInfo.references;\n         for (int i = 1 /* start from a read */; i < refs.size(); i++) {\n           Node nameNode = refs.get(i).getNode();\n","CodeWithNoComments":"\n       if (!maybeModifiedArguments &&\n           !staleVars.contains(v) &&\n           referenceInfo.isWellDefined() &&\n          referenceInfo.isAssignedOnceInLifetime()) {\n                                          List<Reference> refs = referenceInfo.references;\n         for (int i = 1 ; i < refs.size(); i++) {\n           Node nameNode = refs.get(i).getNode();\n","SolutionWithNoComments":"\n       if (!maybeModifiedArguments &&\n           !staleVars.contains(v) &&\n           referenceInfo.isWellDefined() &&\n          referenceInfo.isAssignedOnceInLifetime() &&\n                                           (isInlineableDeclaredConstant(v, referenceInfo) ||\n           referenceInfo.isOnlyAssignmentSameScopeAsDeclaration())) {\n         List<Reference> refs = referenceInfo.references;\n         for (int i = 1 ; i < refs.size(); i++) {\n           Node nameNode = refs.get(i).getNode();\n"},{"ids":148,"error":"junit.framework.ComparisonFailure","source":"/src/com/google/javascript/jscomp/CodeGenerator.java","code":"@@ -282,7 +282,7 @@ void add(Node n, Context context) {\n       case Token.HOOK: {\n         Preconditions.checkState(childCount == 3);\n         int p = NodeUtil.precedence(type);\n      Context rhsContext = Context.OTHER;\n         addExpr(first, p + 1, context);\n         cc.addOp(\"?\", true);\n         addExpr(first.getNext(), 1, rhsContext);\n","solution":"@@ -282,7 +282,7 @@ void add(Node n, Context context) {\n       case Token.HOOK: {\n         Preconditions.checkState(childCount == 3);\n         int p = NodeUtil.precedence(type);\n      Context rhsContext = getContextForNoInOperator(context);\n         addExpr(first, p + 1, context);\n         cc.addOp(\"?\", true);\n         addExpr(first.getNext(), 1, rhsContext);\n","CodeWithNoComments":"\n       case Token.HOOK: {\n         Preconditions.checkState(childCount == 3);\n         int p = NodeUtil.precedence(type);\n        Context rhsContext = Context.OTHER;\n         addExpr(first, p + 1, context);\n         cc.addOp(\"?\", true);\n         addExpr(first.getNext(), 1, rhsContext);\n","SolutionWithNoComments":"\n       case Token.HOOK: {\n         Preconditions.checkState(childCount == 3);\n         int p = NodeUtil.precedence(type);\n        Context rhsContext = getContextForNoInOperator(context);\n         addExpr(first, p + 1, context);\n         cc.addOp(\"?\", true);\n         addExpr(first.getNext(), 1, rhsContext);\n"},{"ids":149,"error":"junit.framework.AssertionFailedError","source":"/src/com/google/javascript/jscomp/parsing/IRFactory.java","code":"@@ -249,7 +249,8 @@ private Node transformBlock(AstNode node) {\n    * Check to see if the given block comment looks like it should be JSDoc.\n    */\n   private void handleBlockComment(Comment comment) {\n  if (comment.getValue().indexOf(\"/* @\") != -1 || comment.getValue().indexOf(\"\\n * @\") != -1) {\n       errorReporter.warning(\n           SUSPICIOUS_COMMENT_WARNING,\n           sourceName,\n","solution":"@@ -249,7 +249,8 @@ private Node transformBlock(AstNode node) {\n    * Check to see if the given block comment looks like it should be JSDoc.\n    */\n   private void handleBlockComment(Comment comment) {\n  Pattern p = Pattern.compile(\"(/|(\\n[ \\t]*))\\\\*[ \\t]*@[a-zA-Z]\");\n  if (p.matcher(comment.getValue()).find()) {\n       errorReporter.warning(\n           SUSPICIOUS_COMMENT_WARNING,\n           sourceName,\n","CodeWithNoComments":"\n    if (comment.getValue().indexOf(\"/* @\") != -1 || comment.getValue().indexOf(\"\\n * @\") != -1) {\n       errorReporter.warning(\n           SUSPICIOUS_COMMENT_WARNING,\n           sourceName,\n","SolutionWithNoComments":"\n \n   private void handleBlockComment(Comment comment) {\n    Pattern p = Pattern.compile(\"(/|(\\n[ \\t]*))\\\\*[ \\t]*@[a-zA-Z]\");\n    if (p.matcher(comment.getValue()).find()) {\n       errorReporter.warning(\n           SUSPICIOUS_COMMENT_WARNING,\n           sourceName,\n"},{"ids":150,"error":"junit.framework.AssertionFailedError","source":"/src/com/google/javascript/jscomp/MinimizeExitPoints.java","code":"@@ -138,10 +138,6 @@ void tryMinimizeExits(Node n, int exitType, String labelName) {\n        * can cause problems if it changes the completion type of the finally\n        * block. See ECMA 262 Sections 8.9 & 12.14\n        */\n    if (NodeUtil.hasFinally(n)) {\n      Node finallyBlock = n.getLastChild();\n      tryMinimizeExits(finallyBlock, exitType, labelName);\n    }\n     }\n \n     // Just a 'label'.\n","solution":"@@ -138,10 +138,6 @@ void tryMinimizeExits(Node n, int exitType, String labelName) {\n        * can cause problems if it changes the completion type of the finally\n        * block. See ECMA 262 Sections 8.9 & 12.14\n        */\n     }\n \n     // Just a 'label'.\n","CodeWithNoComments":"\n        Node finallyBlock = n.getLastChild();\n        tryMinimizeExits(finallyBlock, exitType, labelName);\n      }\n     }\n \n     ","SolutionWithNoComments":"\n     }\n \n     "},{"ids":151,"error":"junit.framework.AssertionFailedError","source":"/src/com/google/javascript/jscomp/ExploitAssigns.java","code":"@@ -210,7 +210,9 @@ private boolean isSafeReplacement(Node node, Node replacement) {\n     }\n     Preconditions.checkArgument(node.isGetProp());\n \n       node = node.getFirstChild();\n     if (node.isName()\n         && isNameAssignedTo(node.getString(), replacement)) {\n       return false;\n","solution":"@@ -210,7 +210,9 @@ private boolean isSafeReplacement(Node node, Node replacement) {\n     }\n     Preconditions.checkArgument(node.isGetProp());\n \n  while (node.isGetProp()) {\n       node = node.getFirstChild();\n  }\n     if (node.isName()\n         && isNameAssignedTo(node.getString(), replacement)) {\n       return false;\n","CodeWithNoComments":"\n     }\n     Preconditions.checkArgument(node.isGetProp());\n \n       node = node.getFirstChild();\n     if (node.isName()\n         && isNameAssignedTo(node.getString(), replacement)) {\n       return false;\n","SolutionWithNoComments":"\n     }\n     Preconditions.checkArgument(node.isGetProp());\n \n    while (node.isGetProp()) {\n       node = node.getFirstChild();\n    }\n     if (node.isName()\n         && isNameAssignedTo(node.getString(), replacement)) {\n       return false;\n"},{"ids":152,"error":"junit.framework.AssertionFailedError","source":"/src/com/google/javascript/jscomp/UnreachableCodeElimination.java","code":"@@ -167,13 +167,22 @@ private void tryRemoveUnconditionalBranching(Node n) {\n                 outEdges.get(0).getValue() == Branch.UNCOND);\n             Node fallThrough = computeFollowing(n);\n             Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n          if (nextCfgNode == fallThrough) {\n               removeNode(n);\n             }\n           }\n       }\n     }\n \n \n     private Node computeFollowing(Node n) {\n       Node next = ControlFlowAnalysis.computeFollowNode(n);\n","solution":"@@ -167,13 +167,22 @@ private void tryRemoveUnconditionalBranching(Node n) {\n                 outEdges.get(0).getValue() == Branch.UNCOND);\n             Node fallThrough = computeFollowing(n);\n             Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n          if (nextCfgNode == fallThrough && !inFinally(n.getParent(), n)) {\n               removeNode(n);\n             }\n           }\n       }\n     }\n \n  private boolean inFinally(Node parent, Node child) {\n    if (parent == null || parent.isFunction()) {\n      return false;\n    } else if (NodeUtil.isTryFinallyNode(parent, child)) {\n      return true;\n    } else {\n      return inFinally(parent.getParent(), parent);\n    }\n  }\n \n     private Node computeFollowing(Node n) {\n       Node next = ControlFlowAnalysis.computeFollowNode(n);\n","CodeWithNoComments":"\n                 outEdges.get(0).getValue() == Branch.UNCOND);\n             Node fallThrough = computeFollowing(n);\n             Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n            if (nextCfgNode == fallThrough) {\n               removeNode(n);\n             }\n           }\n       }\n     }\n \n \n     private Node computeFollowing(Node n) {\n       Node next = ControlFlowAnalysis.computeFollowNode(n);\n","SolutionWithNoComments":"\n                 outEdges.get(0).getValue() == Branch.UNCOND);\n             Node fallThrough = computeFollowing(n);\n             Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n            if (nextCfgNode == fallThrough && !inFinally(n.getParent(), n)) {\n               removeNode(n);\n             }\n           }\n       }\n     }\n \n    private boolean inFinally(Node parent, Node child) {\n      if (parent == null || parent.isFunction()) {\n        return false;\n      } else if (NodeUtil.isTryFinallyNode(parent, child)) {\n        return true;\n      } else {\n        return inFinally(parent.getParent(), parent);\n      }\n    }\n \n     private Node computeFollowing(Node n) {\n       Node next = ControlFlowAnalysis.computeFollowNode(n);\n"},{"ids":153,"error":"java.lang.IllegalStateException","source":"/src/com/google/javascript/jscomp/TypeCheck.java","code":"@@ -1658,7 +1658,7 @@ private void visitNew(NodeTraversal t, Node n) {\n     JSType type = getJSType(constructor).restrictByNotNullOrUndefined();\n     if (type.isConstructor() || type.isEmptyType() || type.isUnknownType()) {\n       FunctionType fnType = type.toMaybeFunctionType();\n    if (fnType != null) {\n         visitParameterList(t, n, fnType);\n         ensureTyped(t, n, fnType.getInstanceType());\n       } else {\n","solution":"@@ -1658,7 +1658,7 @@ private void visitNew(NodeTraversal t, Node n) {\n     JSType type = getJSType(constructor).restrictByNotNullOrUndefined();\n     if (type.isConstructor() || type.isEmptyType() || type.isUnknownType()) {\n       FunctionType fnType = type.toMaybeFunctionType();\n    if (fnType != null && fnType.hasInstanceType()) {\n         visitParameterList(t, n, fnType);\n         ensureTyped(t, n, fnType.getInstanceType());\n       } else {\n","CodeWithNoComments":"\n     JSType type = getJSType(constructor).restrictByNotNullOrUndefined();\n     if (type.isConstructor() || type.isEmptyType() || type.isUnknownType()) {\n       FunctionType fnType = type.toMaybeFunctionType();\n      if (fnType != null) {\n         visitParameterList(t, n, fnType);\n         ensureTyped(t, n, fnType.getInstanceType());\n       } else {\n","SolutionWithNoComments":"\n     JSType type = getJSType(constructor).restrictByNotNullOrUndefined();\n     if (type.isConstructor() || type.isEmptyType() || type.isUnknownType()) {\n       FunctionType fnType = type.toMaybeFunctionType();\n      if (fnType != null && fnType.hasInstanceType()) {\n         visitParameterList(t, n, fnType);\n         ensureTyped(t, n, fnType.getInstanceType());\n       } else {\n"},{"ids":154,"error":"junit.framework.ComparisonFailure","source":"/src/com/google/javascript/jscomp/CodeGenerator.java","code":"@@ -782,13 +782,16 @@ private void unrollBinaryOperator(\n \n   static boolean isSimpleNumber(String s) {\n     int len = s.length();\n     for (int index = 0; index < len; index++) {\n       char c = s.charAt(index);\n       if (c < '0' || c > '9') {\n         return false;\n       }\n     }\n  return len > 0 && s.charAt(0) != '0';\n   }\n \n   static double getSimpleNumber(String s) {\n","solution":"@@ -782,13 +782,16 @@ private void unrollBinaryOperator(\n \n   static boolean isSimpleNumber(String s) {\n     int len = s.length();\n  if (len == 0) {\n    return false;\n  }\n     for (int index = 0; index < len; index++) {\n       char c = s.charAt(index);\n       if (c < '0' || c > '9') {\n         return false;\n       }\n     }\n  return len == 1 || s.charAt(0) != '0';\n   }\n \n   static double getSimpleNumber(String s) {\n","CodeWithNoComments":"\n \n   static boolean isSimpleNumber(String s) {\n     int len = s.length();\n     for (int index = 0; index < len; index++) {\n       char c = s.charAt(index);\n       if (c < '0' || c > '9') {\n         return false;\n       }\n     }\n    return len > 0 && s.charAt(0) != '0';\n   }\n \n   static double getSimpleNumber(String s) {\n","SolutionWithNoComments":"\n \n   static boolean isSimpleNumber(String s) {\n     int len = s.length();\n    if (len == 0) {\n      return false;\n    }\n     for (int index = 0; index < len; index++) {\n       char c = s.charAt(index);\n       if (c < '0' || c > '9') {\n         return false;\n       }\n     }\n    return len == 1 || s.charAt(0) != '0';\n   }\n \n   static double getSimpleNumber(String s) {\n"},{"ids":155,"error":"junit.framework.AssertionFailedError","source":"/src/main/java/org/apache/commons/lang3/math/NumberUtils.java","code":"@@ -590,18 +590,22 @@ public static Number createNumber(final String str) throws NumberFormatException\n         //Must be a Float, Double, BigDecimal\n         final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n         try {\n                 final Float f = createFloat(str);\n                 if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                     return f;\n                 }\n         } catch (final NumberFormatException nfe) { // NOPMD\n             // ignore the bad number\n         }\n         try {\n                 final Double d = createDouble(str);\n                 if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                     return d;\n                 }\n         } catch (final NumberFormatException nfe) { // NOPMD\n             // ignore the bad number\n         }\n","solution":"@@ -590,18 +590,22 @@ public static Number createNumber(final String str) throws NumberFormatException\n         //Must be a Float, Double, BigDecimal\n         final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n         try {\n          if(numDecimals <= 7){// If number has 7 or fewer digits past the decimal point then make it a float\n                 final Float f = createFloat(str);\n                 if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                     return f;\n                 }\n          }\n         } catch (final NumberFormatException nfe) { // NOPMD\n             // ignore the bad number\n         }\n         try {\n          if(numDecimals <= 16){// If number has between 8 and 16 digits past the decimal point then make it a double\n                 final Double d = createDouble(str);\n                 if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                     return d;\n                 }\n          }\n         } catch (final NumberFormatException nfe) { // NOPMD\n             // ignore the bad number\n         }\n","CodeWithNoComments":"\n                  final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n         try {\n                 final Float f = createFloat(str);\n                 if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                     return f;\n                 }\n         } catch (final NumberFormatException nfe) {                       }\n         try {\n                 final Double d = createDouble(str);\n                 if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                     return d;\n                 }\n         } catch (final NumberFormatException nfe) {                       }\n","SolutionWithNoComments":"\n                  final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n         try {\n            if(numDecimals <= 7){                 final Float f = createFloat(str);\n                 if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                     return f;\n                 }\n            }\n         } catch (final NumberFormatException nfe) {                       }\n         try {\n            if(numDecimals <= 16){                 final Double d = createDouble(str);\n                 if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                     return d;\n                 }\n            }\n         } catch (final NumberFormatException nfe) {                       }\n"},{"ids":156,"error":"junit.framework.AssertionFailedError","source":"/src/main/java/org/apache/commons/lang3/LocaleUtils.java","code":"@@ -89,6 +89,9 @@ public static Locale toLocale(final String str) {\n         if (str == null) {\n             return null;\n         }\n         final int len = str.length();\n         if (len < 2) {\n             throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n","solution":"@@ -89,6 +89,9 @@ public static Locale toLocale(final String str) {\n         if (str == null) {\n             return null;\n         }\n      if (str.contains(\"#\")) { // LANG-879 - Cannot handle Java 7 script & extensions\n          throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n      }\n         final int len = str.length();\n         if (len < 2) {\n             throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n","CodeWithNoComments":"\n         if (str == null) {\n             return null;\n         }\n         final int len = str.length();\n         if (len < 2) {\n             throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n","SolutionWithNoComments":"\n         if (str == null) {\n             return null;\n         }\n        if (str.contains(\"#\")) {             throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n         final int len = str.length();\n         if (len < 2) {\n             throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n"},{"ids":157,"error":"java.lang.IllegalArgumentException","source":"/src/main/java/org/apache/commons/lang3/LocaleUtils.java","code":"@@ -94,6 +94,26 @@ public static Locale toLocale(final String str) {\n             throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n         }\n         final char ch0 = str.charAt(0);\n             final char ch1 = str.charAt(1);\n             if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n@@ -125,6 +145,7 @@ public static Locale toLocale(final String str) {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n             }\n             return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));\n     }\n \n     //-----------------------------------------------------------------------\n","solution":"@@ -94,6 +94,26 @@ public static Locale toLocale(final String str) {\n             throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n         }\n         final char ch0 = str.charAt(0);\n      if (ch0 == '_') {\n          if (len < 3) {\n              throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n          }\n          final char ch1 = str.charAt(1);\n          final char ch2 = str.charAt(2);\n          if (!Character.isUpperCase(ch1) || !Character.isUpperCase(ch2)) {\n              throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n          }\n          if (len == 3) {\n              return new Locale(\"\", str.substring(1, 3));\n          }\n          if (len < 5) {\n              throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n          }\n          if (str.charAt(3) != '_') {\n              throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n          }\n          return new Locale(\"\", str.substring(1, 3), str.substring(4));\n      } else {\n             final char ch1 = str.charAt(1);\n             if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n@@ -125,6 +145,7 @@ public static Locale toLocale(final String str) {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n             }\n             return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));\n      }\n     }\n \n     //-----------------------------------------------------------------------\n","CodeWithNoComments":"\n             throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n         }\n         final char ch0 = str.charAt(0);\n             final char ch1 = str.charAt(1);\n             if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n             }\n             return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));\n     }\n \n     ","SolutionWithNoComments":"\n             throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n         }\n         final char ch0 = str.charAt(0);\n        if (ch0 == '_') {\n            if (len < 3) {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            final char ch1 = str.charAt(1);\n            final char ch2 = str.charAt(2);\n            if (!Character.isUpperCase(ch1) || !Character.isUpperCase(ch2)) {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            if (len == 3) {\n                return new Locale(\"\", str.substring(1, 3));\n            }\n            if (len < 5) {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            if (str.charAt(3) != '_') {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            return new Locale(\"\", str.substring(1, 3), str.substring(4));\n        } else {\n             final char ch1 = str.charAt(1);\n             if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n             }\n             return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));\n        }\n     }\n \n     "},{"ids":158,"error":"junit.framework.AssertionFailedError","source":"/src/com/google/javascript/jscomp/CollapseProperties.java","code":"@@ -169,7 +169,7 @@ private void inlineAliases(GlobalNamespace namespace) {\n         continue;\n       }\n \n    if (name.globalSets == 1 && name.localSets == 0 &&\n           name.aliasingGets > 0) {\n         // {@code name} meets condition (b). Find all of its local aliases\n         // and try to inline them.\n","solution":"@@ -169,7 +169,7 @@ private void inlineAliases(GlobalNamespace namespace) {\n         continue;\n       }\n \n    if (!name.inExterns && name.globalSets == 1 && name.localSets == 0 &&\n           name.aliasingGets > 0) {\n         // {@code name} meets condition (b). Find all of its local aliases\n         // and try to inline them.\n","CodeWithNoComments":"\n         continue;\n       }\n \n      if (name.globalSets == 1 && name.localSets == 0 &&\n           name.aliasingGets > 0) {\n                  ","SolutionWithNoComments":"\n         continue;\n       }\n \n      if (!name.inExterns && name.globalSets == 1 && name.localSets == 0 &&\n           name.aliasingGets > 0) {\n                  "},{"ids":159,"error":"junit.framework.AssertionFailedError","source":"/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java","code":"@@ -28,7 +28,7 @@\n  */\n public class LookupTranslator extends CharSequenceTranslator {\n \n  private final HashMap<CharSequence, CharSequence> lookupMap;\n     private final int shortest;\n     private final int longest;\n \n@@ -43,12 +43,12 @@\n      * @param lookup CharSequence[][] table of size [*][2]\n      */\n     public LookupTranslator(final CharSequence[]... lookup) {\n      lookupMap = new HashMap<CharSequence, CharSequence>();\n         int _shortest = Integer.MAX_VALUE;\n         int _longest = 0;\n         if (lookup != null) {\n             for (final CharSequence[] seq : lookup) {\n              this.lookupMap.put(seq[0], seq[1]);\n                 final int sz = seq[0].length();\n                 if (sz < _shortest) {\n                     _shortest = sz;\n@@ -74,7 +74,7 @@ public int translate(final CharSequence input, final int index, final Writer out\n         // descend so as to get a greedy algorithm\n         for (int i = max; i >= shortest; i--) {\n             final CharSequence subSeq = input.subSequence(index, index + i);\n          final CharSequence result = lookupMap.get(subSeq);\n             if (result != null) {\n                 out.write(result.toString());\n                 return i;\n","solution":"@@ -28,7 +28,7 @@\n  */\n public class LookupTranslator extends CharSequenceTranslator {\n \n  private final HashMap<String, CharSequence> lookupMap;\n     private final int shortest;\n     private final int longest;\n \n@@ -43,12 +43,12 @@\n      * @param lookup CharSequence[][] table of size [*][2]\n      */\n     public LookupTranslator(final CharSequence[]... lookup) {\n      lookupMap = new HashMap<String, CharSequence>();\n         int _shortest = Integer.MAX_VALUE;\n         int _longest = 0;\n         if (lookup != null) {\n             for (final CharSequence[] seq : lookup) {\n              this.lookupMap.put(seq[0].toString(), seq[1]);\n                 final int sz = seq[0].length();\n                 if (sz < _shortest) {\n                     _shortest = sz;\n@@ -74,7 +74,7 @@ public int translate(final CharSequence input, final int index, final Writer out\n         // descend so as to get a greedy algorithm\n         for (int i = max; i >= shortest; i--) {\n             final CharSequence subSeq = input.subSequence(index, index + i);\n          final CharSequence result = lookupMap.get(subSeq.toString());\n             if (result != null) {\n                 out.write(result.toString());\n                 return i;\n","CodeWithNoComments":"\n public class LookupTranslator extends CharSequenceTranslator {\n \n    private final HashMap<CharSequence, CharSequence> lookupMap;\n     private final int shortest;\n     private final int longest;\n \n\n     public LookupTranslator(final CharSequence[]... lookup) {\n        lookupMap = new HashMap<CharSequence, CharSequence>();\n         int _shortest = Integer.MAX_VALUE;\n         int _longest = 0;\n         if (lookup != null) {\n             for (final CharSequence[] seq : lookup) {\n                this.lookupMap.put(seq[0], seq[1]);\n                 final int sz = seq[0].length();\n                 if (sz < _shortest) {\n                     _shortest = sz;\n\n                  for (int i = max; i >= shortest; i--) {\n             final CharSequence subSeq = input.subSequence(index, index + i);\n            final CharSequence result = lookupMap.get(subSeq);\n             if (result != null) {\n                 out.write(result.toString());\n                 return i;\n","SolutionWithNoComments":"\n public class LookupTranslator extends CharSequenceTranslator {\n \n    private final HashMap<String, CharSequence> lookupMap;\n     private final int shortest;\n     private final int longest;\n \n\n     public LookupTranslator(final CharSequence[]... lookup) {\n        lookupMap = new HashMap<String, CharSequence>();\n         int _shortest = Integer.MAX_VALUE;\n         int _longest = 0;\n         if (lookup != null) {\n             for (final CharSequence[] seq : lookup) {\n                this.lookupMap.put(seq[0].toString(), seq[1]);\n                 final int sz = seq[0].length();\n                 if (sz < _shortest) {\n                     _shortest = sz;\n\n                  for (int i = max; i >= shortest; i--) {\n             final CharSequence subSeq = input.subSequence(index, index + i);\n            final CharSequence result = lookupMap.get(subSeq.toString());\n             if (result != null) {\n                 out.write(result.toString());\n                 return i;\n"},{"ids":160,"error":"junit.framework.AssertionFailedError","source":"/src/com/google/javascript/jscomp/PrepareAst.java","code":"@@ -163,6 +163,9 @@ private void annotateCalls(Node n) {\n       Node first = n.getFirstChild();\n \n       // ignore cast nodes.\n \n       if (!NodeUtil.isGet(first)) {\n         n.putBooleanProp(Node.FREE_CALL, true);\n","solution":"@@ -163,6 +163,9 @@ private void annotateCalls(Node n) {\n       Node first = n.getFirstChild();\n \n       // ignore cast nodes.\n    while (first.isCast()) {\n      first = first.getFirstChild();\n    }\n \n       if (!NodeUtil.isGet(first)) {\n         n.putBooleanProp(Node.FREE_CALL, true);\n","CodeWithNoComments":"\n       Node first = n.getFirstChild();\n \n        \n       if (!NodeUtil.isGet(first)) {\n         n.putBooleanProp(Node.FREE_CALL, true);\n","SolutionWithNoComments":"\n       Node first = n.getFirstChild();\n \n             while (first.isCast()) {\n        first = first.getFirstChild();\n      }\n \n       if (!NodeUtil.isGet(first)) {\n         n.putBooleanProp(Node.FREE_CALL, true);\n"},{"ids":161,"error":"java.lang.NumberFormatException","source":"/src/main/java/org/apache/commons/lang3/math/NumberUtils.java","code":"@@ -464,11 +464,20 @@ public static Number createNumber(final String str) throws NumberFormatException\n             }\n         }\n         if (pfxLen > 0) { // we have a hex number\n             final int hexDigits = str.length() - pfxLen;\n          if (hexDigits > 16) { // too many for Long\n                 return createBigInteger(str);\n             }\n          if (hexDigits > 8) { // too many for an int\n                 return createLong(str);\n             }\n             return createInteger(str);\n","solution":"@@ -464,11 +464,20 @@ public static Number createNumber(final String str) throws NumberFormatException\n             }\n         }\n         if (pfxLen > 0) { // we have a hex number\n          char firstSigDigit = 0; // strip leading zeroes\n          for(int i = pfxLen; i < str.length(); i++) {\n              firstSigDigit = str.charAt(i);\n              if (firstSigDigit == '0') { // count leading zeroes\n                  pfxLen++;\n              } else {\n                  break;\n              }\n          }\n             final int hexDigits = str.length() - pfxLen;\n          if (hexDigits > 16 || (hexDigits == 16 && firstSigDigit > '7')) { // too many for Long\n                 return createBigInteger(str);\n             }\n          if (hexDigits > 8 || (hexDigits == 8 && firstSigDigit > '7')) { // too many for an int\n                 return createLong(str);\n             }\n             return createInteger(str);\n","CodeWithNoComments":"\n             }\n         }\n         if (pfxLen > 0) {              final int hexDigits = str.length() - pfxLen;\n            if (hexDigits > 16) {                  return createBigInteger(str);\n             }\n            if (hexDigits > 8) {                  return createLong(str);\n             }\n             return createInteger(str);\n","SolutionWithNoComments":"\n             }\n         }\n         if (pfxLen > 0) {             char firstSigDigit = 0;             for(int i = pfxLen; i < str.length(); i++) {\n                firstSigDigit = str.charAt(i);\n                if (firstSigDigit == '0') {                     pfxLen++;\n                } else {\n                    break;\n                }\n            }\n             final int hexDigits = str.length() - pfxLen;\n            if (hexDigits > 16 || (hexDigits == 16 && firstSigDigit > '7')) {                  return createBigInteger(str);\n             }\n            if (hexDigits > 8 || (hexDigits == 8 && firstSigDigit > '7')) {                  return createLong(str);\n             }\n             return createInteger(str);\n"},{"ids":162,"error":"junit.framework.AssertionFailedError","source":"/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java","code":"@@ -779,7 +779,9 @@ private Node tryMinimizeIf(Node n) {\n               // evaluates LHS before cond]\n               // NOTE - there are some circumstances where we can\n               // proceed even if there are side effects...\n            !mayEffectMutableState(lhs)) {\n \n             n.removeChild(cond);\n             Node assignName = thenOp.removeFirstChild();\n","solution":"@@ -779,7 +779,9 @@ private Node tryMinimizeIf(Node n) {\n               // evaluates LHS before cond]\n               // NOTE - there are some circumstances where we can\n               // proceed even if there are side effects...\n            !mayEffectMutableState(lhs) &&\n            (!mayHaveSideEffects(cond) ||\n                (thenOp.isAssign() && thenOp.getFirstChild().isName()))) {\n \n             n.removeChild(cond);\n             Node assignName = thenOp.removeFirstChild();\n","CodeWithNoComments":"\n                                                           !mayEffectMutableState(lhs)) {\n \n             n.removeChild(cond);\n             Node assignName = thenOp.removeFirstChild();\n","SolutionWithNoComments":"\n                                                           !mayEffectMutableState(lhs) &&\n              (!mayHaveSideEffects(cond) ||\n                  (thenOp.isAssign() && thenOp.getFirstChild().isName()))) {\n \n             n.removeChild(cond);\n             Node assignName = thenOp.removeFirstChild();\n"},{"ids":163,"error":"java.lang.StringIndexOutOfBoundsException","source":"/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java","code":"@@ -92,7 +92,7 @@ public final void translate(CharSequence input, Writer out) throws IOException {\n //          // contract with translators is that they have to understand codepoints \n //          // and they just took care of a surrogate pair\n             for (int pt = 0; pt < consumed; pt++) {\n              pos += Character.charCount(Character.codePointAt(input, pos));\n             }\n         }\n     }\n","solution":"@@ -92,7 +92,7 @@ public final void translate(CharSequence input, Writer out) throws IOException {\n //          // contract with translators is that they have to understand codepoints \n //          // and they just took care of a surrogate pair\n             for (int pt = 0; pt < consumed; pt++) {\n              pos += Character.charCount(Character.codePointAt(input, pt));\n             }\n         }\n     }\n","CodeWithNoComments":"\n               for (int pt = 0; pt < consumed; pt++) {\n                pos += Character.charCount(Character.codePointAt(input, pos));\n             }\n         }\n     }\n","SolutionWithNoComments":"\n               for (int pt = 0; pt < consumed; pt++) {\n                pos += Character.charCount(Character.codePointAt(input, pt));\n             }\n         }\n     }\n"},{"ids":164,"error":"java.lang.IllegalStateException","source":"/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java","code":"@@ -2398,6 +2398,7 @@ private void skipEOLs() {\n    */\n   private String getRemainingJSDocLine() {\n     String result = stream.getRemainingJSDocLine();\n     return result;\n   }\n \n","solution":"@@ -2398,6 +2398,7 @@ private void skipEOLs() {\n    */\n   private String getRemainingJSDocLine() {\n     String result = stream.getRemainingJSDocLine();\n  unreadToken = NO_UNREAD_TOKEN;\n     return result;\n   }\n \n","CodeWithNoComments":"\n   private String getRemainingJSDocLine() {\n     String result = stream.getRemainingJSDocLine();\n     return result;\n   }\n \n","SolutionWithNoComments":"\n   private String getRemainingJSDocLine() {\n     String result = stream.getRemainingJSDocLine();\n    unreadToken = NO_UNREAD_TOKEN;\n     return result;\n   }\n \n"},{"ids":165,"error":"junit.framework.AssertionFailedError","source":"/src/main/java/org/apache/commons/lang3/math/NumberUtils.java","code":"@@ -449,9 +449,6 @@ public static Number createNumber(String str) throws NumberFormatException {\n         if (StringUtils.isBlank(str)) {\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n      if (str.startsWith(\"--\")) {\n          return null;\n      }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n             if (str.startsWith(\"-\")) { // drop -\n@@ -718,10 +715,13 @@ public static BigDecimal createBigDecimal(String str) {\n         if (StringUtils.isBlank(str)) {\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }\n             // this is protection for poorness in java.lang.BigDecimal.\n             // it accepts this as a legal value, but it does not appear \n             // to be in specification of class. OS X Java parses it to \n             // a wrong value.\n         return new BigDecimal(str);\n     }\n \n","solution":"@@ -449,9 +449,6 @@ public static Number createNumber(String str) throws NumberFormatException {\n         if (StringUtils.isBlank(str)) {\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n             if (str.startsWith(\"-\")) { // drop -\n@@ -718,10 +715,13 @@ public static BigDecimal createBigDecimal(String str) {\n         if (StringUtils.isBlank(str)) {\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }\n      if (str.trim().startsWith(\"--\")) {\n             // this is protection for poorness in java.lang.BigDecimal.\n             // it accepts this as a legal value, but it does not appear \n             // to be in specification of class. OS X Java parses it to \n             // a wrong value.\n          throw new NumberFormatException(str + \" is not a valid number.\");\n      }\n         return new BigDecimal(str);\n     }\n \n","CodeWithNoComments":"\n         if (StringUtils.isBlank(str)) {\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n        if (str.startsWith(\"--\")) {\n            return null;\n        }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2;              if (str.startsWith(\"-\")) { \n         if (StringUtils.isBlank(str)) {\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }\n                                                             return new BigDecimal(str);\n     }\n \n","SolutionWithNoComments":"\n         if (StringUtils.isBlank(str)) {\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2;              if (str.startsWith(\"-\")) { \n         if (StringUtils.isBlank(str)) {\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }\n        if (str.trim().startsWith(\"--\")) {\n                                                                throw new NumberFormatException(str + \" is not a valid number.\");\n        }\n         return new BigDecimal(str);\n     }\n \n"},{"ids":166,"error":"junit.framework.AssertionFailedError","source":"/src/com/google/javascript/rhino/TokenStream.java","code":"@@ -191,12 +191,13 @@ public static boolean isJSIdentifier(String s) {\n       int length = s.length();\n \n       if (length == 0 ||\n           !Character.isJavaIdentifierStart(s.charAt(0))) {\n         return false;\n       }\n \n       for (int i = 1; i < length; i++) {\n      if (\n             !Character.isJavaIdentifierPart(s.charAt(i))) {\n           return false;\n         }\n","solution":"@@ -191,12 +191,13 @@ public static boolean isJSIdentifier(String s) {\n       int length = s.length();\n \n       if (length == 0 ||\n        Character.isIdentifierIgnorable(s.charAt(0)) ||\n           !Character.isJavaIdentifierStart(s.charAt(0))) {\n         return false;\n       }\n \n       for (int i = 1; i < length; i++) {\n      if (Character.isIdentifierIgnorable(s.charAt(i)) ||\n             !Character.isJavaIdentifierPart(s.charAt(i))) {\n           return false;\n         }\n","CodeWithNoComments":"\n       int length = s.length();\n \n       if (length == 0 ||\n           !Character.isJavaIdentifierStart(s.charAt(0))) {\n         return false;\n       }\n \n       for (int i = 1; i < length; i++) {\n        if (\n             !Character.isJavaIdentifierPart(s.charAt(i))) {\n           return false;\n         }\n","SolutionWithNoComments":"\n       int length = s.length();\n \n       if (length == 0 ||\n          Character.isIdentifierIgnorable(s.charAt(0)) ||\n           !Character.isJavaIdentifierStart(s.charAt(0))) {\n         return false;\n       }\n \n       for (int i = 1; i < length; i++) {\n        if (Character.isIdentifierIgnorable(s.charAt(i)) ||\n             !Character.isJavaIdentifierPart(s.charAt(i))) {\n           return false;\n         }\n"},{"ids":167,"error":"junit.framework.AssertionFailedError","source":"/src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java","code":"@@ -1095,7 +1095,6 @@ static String getTimeZoneDisplay(TimeZone tz, boolean daylight, int style, Local\n     private static class TimeZoneNameRule implements Rule {\n         private final Locale mLocale;\n         private final int mStyle;\n      private final TimeZone zone;\n         private final String mStandard;\n         private final String mDaylight;\n \n@@ -1109,7 +1108,6 @@ static String getTimeZoneDisplay(TimeZone tz, boolean daylight, int style, Local\n         TimeZoneNameRule(TimeZone timeZone, Locale locale, int style) {\n             mLocale = locale;\n             mStyle = style;\n          zone = timeZone;\n             \n             mStandard = getTimeZoneDisplay(timeZone, false, style, locale);\n             mDaylight = getTimeZoneDisplay(timeZone, true, style, locale);\n@@ -1131,6 +1129,7 @@ public int estimateLength() {\n          */\n         @Override\n         public void appendTo(StringBuffer buffer, Calendar calendar) {\n             if (zone.useDaylightTime()\n                     && calendar.get(Calendar.DST_OFFSET) != 0) {\n                 buffer.append(getTimeZoneDisplay(zone, true, mStyle, mLocale));\n","solution":"@@ -1095,7 +1095,6 @@ static String getTimeZoneDisplay(TimeZone tz, boolean daylight, int style, Local\n     private static class TimeZoneNameRule implements Rule {\n         private final Locale mLocale;\n         private final int mStyle;\n         private final String mStandard;\n         private final String mDaylight;\n \n@@ -1109,7 +1108,6 @@ static String getTimeZoneDisplay(TimeZone tz, boolean daylight, int style, Local\n         TimeZoneNameRule(TimeZone timeZone, Locale locale, int style) {\n             mLocale = locale;\n             mStyle = style;\n             \n             mStandard = getTimeZoneDisplay(timeZone, false, style, locale);\n             mDaylight = getTimeZoneDisplay(timeZone, true, style, locale);\n@@ -1131,6 +1129,7 @@ public int estimateLength() {\n          */\n         @Override\n         public void appendTo(StringBuffer buffer, Calendar calendar) {\n          TimeZone zone = calendar.getTimeZone();\n             if (zone.useDaylightTime()\n                     && calendar.get(Calendar.DST_OFFSET) != 0) {\n                 buffer.append(getTimeZoneDisplay(zone, true, mStyle, mLocale));\n","CodeWithNoComments":"\n     private static class TimeZoneNameRule implements Rule {\n         private final Locale mLocale;\n         private final int mStyle;\n        private final TimeZone zone;\n         private final String mStandard;\n         private final String mDaylight;\n \n\n         TimeZoneNameRule(TimeZone timeZone, Locale locale, int style) {\n             mLocale = locale;\n             mStyle = style;\n            zone = timeZone;\n             \n             mStandard = getTimeZoneDisplay(timeZone, false, style, locale);\n             mDaylight = getTimeZoneDisplay(timeZone, true, style, locale);\n\n         @Override\n         public void appendTo(StringBuffer buffer, Calendar calendar) {\n             if (zone.useDaylightTime()\n                     && calendar.get(Calendar.DST_OFFSET) != 0) {\n                 buffer.append(getTimeZoneDisplay(zone, true, mStyle, mLocale));\n","SolutionWithNoComments":"\n     private static class TimeZoneNameRule implements Rule {\n         private final Locale mLocale;\n         private final int mStyle;\n         private final String mStandard;\n         private final String mDaylight;\n \n\n         TimeZoneNameRule(TimeZone timeZone, Locale locale, int style) {\n             mLocale = locale;\n             mStyle = style;\n             \n             mStandard = getTimeZoneDisplay(timeZone, false, style, locale);\n             mDaylight = getTimeZoneDisplay(timeZone, true, style, locale);\n\n         @Override\n         public void appendTo(StringBuffer buffer, Calendar calendar) {\n            TimeZone zone = calendar.getTimeZone();\n             if (zone.useDaylightTime()\n                     && calendar.get(Calendar.DST_OFFSET) != 0) {\n                 buffer.append(getTimeZoneDisplay(zone, true, mStyle, mLocale));\n"},{"ids":168,"error":"junit.framework.AssertionFailedError","source":"/src/main/java/org/apache/commons/lang3/time/FastDateParser.java","code":"@@ -301,17 +301,8 @@ public Date parse(String source, ParsePosition pos) {\n      * @return The <code>StringBuilder<\/code>\n      */\n     private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n      boolean wasWhite= false;\n         for(int i= 0; i<value.length(); ++i) {\n             char c= value.charAt(i);\n          if(Character.isWhitespace(c)) {\n              if(!wasWhite) {\n                  wasWhite= true;\n                  regex.append(\"\\\\s*+\");\n              }\n              continue;\n          }\n          wasWhite= false;\n             switch(c) {\n             case '\\'':\n                 if(unquote) {\n","solution":"@@ -301,17 +301,8 @@ public Date parse(String source, ParsePosition pos) {\n      * @return The <code>StringBuilder<\/code>\n      */\n     private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n         for(int i= 0; i<value.length(); ++i) {\n             char c= value.charAt(i);\n             switch(c) {\n             case '\\'':\n                 if(unquote) {\n","CodeWithNoComments":"\n        boolean wasWhite= false;\n         for(int i= 0; i<value.length(); ++i) {\n             char c= value.charAt(i);\n            if(Character.isWhitespace(c)) {\n                if(!wasWhite) {\n                    wasWhite= true;\n                    regex.append(\"\\\\s*+\");\n                }\n                continue;\n            }\n            wasWhite= false;\n             switch(c) {\n             case '\\'':\n                 if(unquote) {\n","SolutionWithNoComments":"\n     private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n         for(int i= 0; i<value.length(); ++i) {\n             char c= value.charAt(i);\n             switch(c) {\n             case '\\'':\n                 if(unquote) {\n"},{"ids":169,"error":"junit.framework.AssertionFailedError","source":"/src/main/java/org/apache/commons/lang3/RandomStringUtils.java","code":"@@ -242,6 +242,10 @@ public static String random(int count, int start, int end, boolean letters, bool\n                     start = ' ';                \n                 }\n             }\n         }\n \n         char[] buffer = new char[count];\n","solution":"@@ -242,6 +242,10 @@ public static String random(int count, int start, int end, boolean letters, bool\n                     start = ' ';                \n                 }\n             }\n      } else {\n          if (end <= start) {\n              throw new IllegalArgumentException(\"Parameter end (\" + end + \") must be greater than start (\" + start + \")\");\n          }\n         }\n \n         char[] buffer = new char[count];\n","CodeWithNoComments":"\n                     start = ' ';                \n                 }\n             }\n         }\n \n         char[] buffer = new char[count];\n","SolutionWithNoComments":"\n                     start = ' ';                \n                 }\n             }\n        } else {\n            if (end <= start) {\n                throw new IllegalArgumentException(\"Parameter end (\" + end + \") must be greater than start (\" + start + \")\");\n            }\n         }\n \n         char[] buffer = new char[count];\n"},{"ids":170,"error":"junit.framework.AssertionFailedError","source":"/src/main/java/org/apache/commons/lang3/time/FastDateParser.java","code":"@@ -141,6 +141,9 @@ private void init() {\n             currentFormatField= nextFormatField;\n             currentStrategy= nextStrategy;\n         }\n         if(currentStrategy.addRegex(this, regex)) {\n             collector.add(currentStrategy);\n         }\n","solution":"@@ -141,6 +141,9 @@ private void init() {\n             currentFormatField= nextFormatField;\n             currentStrategy= nextStrategy;\n         }\n      if (patternMatcher.regionStart() != patternMatcher.regionEnd()) {\n          throw new IllegalArgumentException(\"Failed to parse \\\"\"+pattern+\"\\\" ; gave up at index \"+patternMatcher.regionStart());\n      }\n         if(currentStrategy.addRegex(this, regex)) {\n             collector.add(currentStrategy);\n         }\n","CodeWithNoComments":"\n             currentFormatField= nextFormatField;\n             currentStrategy= nextStrategy;\n         }\n         if(currentStrategy.addRegex(this, regex)) {\n             collector.add(currentStrategy);\n         }\n","SolutionWithNoComments":"\n             currentFormatField= nextFormatField;\n             currentStrategy= nextStrategy;\n         }\n        if (patternMatcher.regionStart() != patternMatcher.regionEnd()) {\n            throw new IllegalArgumentException(\"Failed to parse \\\"\"+pattern+\"\\\" ; gave up at index \"+patternMatcher.regionStart());\n        }\n         if(currentStrategy.addRegex(this, regex)) {\n             collector.add(currentStrategy);\n         }\n"},{"ids":171,"error":"org.apache.commons.lang3.SerializationException","source":"/src/main/java/org/apache/commons/lang3/SerializationUtils.java","code":"@@ -217,58 +217,77 @@ public static Object deserialize(InputStream inputStream) {\n     public static Object deserialize(byte[] objectData) {\n         if (objectData == null) {\n             throw new IllegalArgumentException(\"The byte[] must not be null\");\n         }\n         ByteArrayInputStream bais = new ByteArrayInputStream(objectData);\n         return deserialize(bais);\n     }\n \n     /**\n      * <p>Custom specialization of the standard JDK {@link java.io.ObjectInputStream}\n      * that uses a custom  <code>ClassLoader<\/code> to resolve a class.\n      * If the specified <code>ClassLoader<\/code> is not able to resolve the class,\n      * the context classloader of the current thread will be used.\n      * This way, the standard deserialization work also in web-application\n      * containers and application servers, no matter in which of the\n      * <code>ClassLoader<\/code> the particular class that encapsulates\n      * serialization/deserialization lives. <\/p>\n      * \n      * <p>For more in-depth information about the problem for which this\n      * class here is a workaround, see the JIRA issue LANG-626. <\/p>\n      */\n      static class ClassLoaderAwareObjectInputStream extends ObjectInputStream {\n         private ClassLoader classLoader;\n         \n         /**\n          * Constructor.\n          * @param in The <code>InputStream<\/code>.\n          * @param classLoader classloader to use\n          * @throws IOException if an I/O error occurs while reading stream header.\n          * @see java.io.ObjectInputStream\n          */\n         public ClassLoaderAwareObjectInputStream(InputStream in, ClassLoader classLoader) throws IOException {\n             super(in);\n             this.classLoader = classLoader;\n \n         }\n \n         /**\n          * Overriden version that uses the parametrized <code>ClassLoader<\/code> or the <code>ClassLoader<\/code>\n          * of the current <code>Thread<\/code> to resolve the class.\n          * @param desc An instance of class <code>ObjectStreamClass<\/code>.\n          * @return A <code>Class<\/code> object corresponding to <code>desc<\/code>.\n          * @throws IOException Any of the usual Input/Output exceptions.\n          * @throws ClassNotFoundException If class of a serialized object cannot be found.\n          */\n         @Override\n         protected Class<?> resolveClass(ObjectStreamClass desc) throws IOException, ClassNotFoundException {\n             String name = desc.getName();\n             try {\n                 return Class.forName(name, false, classLoader);\n             } catch (ClassNotFoundException ex) {\n                     return Class.forName(name, false, Thread.currentThread().getContextClassLoader());\n             }\n         }\n \n     }\n \n }\n","solution":"@@ -217,58 +217,77 @@ public static Object deserialize(InputStream inputStream) {\n     public static Object deserialize(byte[] objectData) {\n         if (objectData == null) {\n             throw new IllegalArgumentException(\"The byte[] must not be null\");\n         }\n         ByteArrayInputStream bais = new ByteArrayInputStream(objectData);\n         return deserialize(bais);\n     }\n \n     /**\n      * <p>Custom specialization of the standard JDK {@link java.io.ObjectInputStream}\n      * that uses a custom  <code>ClassLoader<\/code> to resolve a class.\n      * If the specified <code>ClassLoader<\/code> is not able to resolve the class,\n      * the context classloader of the current thread will be used.\n      * This way, the standard deserialization work also in web-application\n      * containers and application servers, no matter in which of the\n      * <code>ClassLoader<\/code> the particular class that encapsulates\n      * serialization/deserialization lives. <\/p>\n      * \n      * <p>For more in-depth information about the problem for which this\n      * class here is a workaround, see the JIRA issue LANG-626. <\/p>\n      */\n      static class ClassLoaderAwareObjectInputStream extends ObjectInputStream {\n      private static final Map<String, Class<?>> primitiveTypes = \n              new HashMap<String, Class<?>>();\n         private ClassLoader classLoader;\n         \n         /**\n          * Constructor.\n          * @param in The <code>InputStream<\/code>.\n          * @param classLoader classloader to use\n          * @throws IOException if an I/O error occurs while reading stream header.\n          * @see java.io.ObjectInputStream\n          */\n         public ClassLoaderAwareObjectInputStream(InputStream in, ClassLoader classLoader) throws IOException {\n             super(in);\n             this.classLoader = classLoader;\n \n          primitiveTypes.put(\"byte\", byte.class);\n          primitiveTypes.put(\"short\", short.class);\n          primitiveTypes.put(\"int\", int.class);\n          primitiveTypes.put(\"long\", long.class);\n          primitiveTypes.put(\"float\", float.class);\n          primitiveTypes.put(\"double\", double.class);\n          primitiveTypes.put(\"boolean\", boolean.class);\n          primitiveTypes.put(\"char\", char.class);\n          primitiveTypes.put(\"void\", void.class);\n         }\n \n         /**\n          * Overriden version that uses the parametrized <code>ClassLoader<\/code> or the <code>ClassLoader<\/code>\n          * of the current <code>Thread<\/code> to resolve the class.\n          * @param desc An instance of class <code>ObjectStreamClass<\/code>.\n          * @return A <code>Class<\/code> object corresponding to <code>desc<\/code>.\n          * @throws IOException Any of the usual Input/Output exceptions.\n          * @throws ClassNotFoundException If class of a serialized object cannot be found.\n          */\n         @Override\n         protected Class<?> resolveClass(ObjectStreamClass desc) throws IOException, ClassNotFoundException {\n             String name = desc.getName();\n             try {\n                 return Class.forName(name, false, classLoader);\n             } catch (ClassNotFoundException ex) {\n              try {\n                     return Class.forName(name, false, Thread.currentThread().getContextClassLoader());\n              } catch (ClassNotFoundException cnfe) {\n                  Class<?> cls = primitiveTypes.get(name);\n                  if (cls != null)\n                      return cls;\n                  else\n                      throw cnfe;\n              }\n             }\n         }\n \n     }\n \n }\n","CodeWithNoComments":"\n     public static Object deserialize(byte[] objectData) {\n         if (objectData == null) {\n             throw new IllegalArgumentException(\"The byte[] must not be null\");\n         }\n         ByteArrayInputStream bais = new ByteArrayInputStream(objectData);\n         return deserialize(bais);\n     }\n       static class ClassLoaderAwareObjectInputStream extends ObjectInputStream {\n         private ClassLoader classLoader;         public ClassLoaderAwareObjectInputStream(InputStream in, ClassLoader classLoader) throws IOException {\n             super(in);\n             this.classLoader = classLoader;\n \n         }         @Override\n         protected Class<?> resolveClass(ObjectStreamClass desc) throws IOException, ClassNotFoundException {\n             String name = desc.getName();\n             try {\n                 return Class.forName(name, false, classLoader);\n             } catch (ClassNotFoundException ex) {\n                     return Class.forName(name, false, Thread.currentThread().getContextClassLoader());\n             }\n         }\n \n     }\n \n }\n","SolutionWithNoComments":"\n     public static Object deserialize(byte[] objectData) {\n         if (objectData == null) {\n             throw new IllegalArgumentException(\"The byte[] must not be null\");\n         }\n         ByteArrayInputStream bais = new ByteArrayInputStream(objectData);\n         return deserialize(bais);\n     }      static class ClassLoaderAwareObjectInputStream extends ObjectInputStream {\n        private static final Map<String, Class<?>> primitiveTypes = \n                new HashMap<String, Class<?>>();\n         private ClassLoader classLoader;\n         public ClassLoaderAwareObjectInputStream(InputStream in, ClassLoader classLoader) throws IOException {\n             super(in);\n             this.classLoader = classLoader;\n \n            primitiveTypes.put(\"byte\", byte.class);\n            primitiveTypes.put(\"short\", short.class);\n            primitiveTypes.put(\"int\", int.class);\n            primitiveTypes.put(\"long\", long.class);\n            primitiveTypes.put(\"float\", float.class);\n            primitiveTypes.put(\"double\", double.class);\n            primitiveTypes.put(\"boolean\", boolean.class);\n            primitiveTypes.put(\"char\", char.class);\n            primitiveTypes.put(\"void\", void.class);\n         }\n \n         @Override\n         protected Class<?> resolveClass(ObjectStreamClass desc) throws IOException, ClassNotFoundException {\n             String name = desc.getName();\n             try {\n                 return Class.forName(name, false, classLoader);\n             } catch (ClassNotFoundException ex) {\n                try {\n                     return Class.forName(name, false, Thread.currentThread().getContextClassLoader());\n                } catch (ClassNotFoundException cnfe) {\n                    Class<?> cls = primitiveTypes.get(name);\n                    if (cls != null)\n                        return cls;\n                    else\n                        throw cnfe;\n                }\n             }\n         }\n \n     }\n \n }\n"},{"ids":172,"error":"java.lang.ArrayIndexOutOfBoundsException","source":"/src/main/java/org/apache/commons/lang3/RandomStringUtils.java","code":"@@ -227,14 +227,21 @@ public static String random(int count, int start, int end, boolean letters, bool\n         } else if (count < 0) {\n             throw new IllegalArgumentException(\"Requested random string length \" + count + \" is less than 0.\");\n         }\n \n         if (start == 0 && end == 0) {\n                 if (!letters && !numbers) {\n                     end = Integer.MAX_VALUE;\n                 } else {\n                     end = 'z' + 1;\n                     start = ' ';                \n                 }\n         }\n \n         char[] buffer = new char[count];\n","solution":"@@ -227,14 +227,21 @@ public static String random(int count, int start, int end, boolean letters, bool\n         } else if (count < 0) {\n             throw new IllegalArgumentException(\"Requested random string length \" + count + \" is less than 0.\");\n         }\n      if (chars != null && chars.length == 0) {\n          throw new IllegalArgumentException(\"The chars array must not be empty\");\n      }\n \n         if (start == 0 && end == 0) {\n          if (chars != null) {\n              end = chars.length;\n          } else {\n                 if (!letters && !numbers) {\n                     end = Integer.MAX_VALUE;\n                 } else {\n                     end = 'z' + 1;\n                     start = ' ';                \n                 }\n          }\n         }\n \n         char[] buffer = new char[count];\n","CodeWithNoComments":"\n         } else if (count < 0) {\n             throw new IllegalArgumentException(\"Requested random string length \" + count + \" is less than 0.\");\n         }\n \n         if (start == 0 && end == 0) {\n                 if (!letters && !numbers) {\n                     end = Integer.MAX_VALUE;\n                 } else {\n                     end = 'z' + 1;\n                     start = ' ';                \n                 }\n         }\n \n         char[] buffer = new char[count];\n","SolutionWithNoComments":"\n         } else if (count < 0) {\n             throw new IllegalArgumentException(\"Requested random string length \" + count + \" is less than 0.\");\n         }\n        if (chars != null && chars.length == 0) {\n            throw new IllegalArgumentException(\"The chars array must not be empty\");\n        }\n \n         if (start == 0 && end == 0) {\n            if (chars != null) {\n                end = chars.length;\n            } else {\n                 if (!letters && !numbers) {\n                     end = Integer.MAX_VALUE;\n                 } else {\n                     end = 'z' + 1;\n                     start = ' ';                \n                 }\n            }\n         }\n \n         char[] buffer = new char[count];\n"},{"ids":173,"error":"junit.framework.ComparisonFailure","source":"/src/main/java/org/apache/commons/lang3/time/FastDateFormat.java","code":"@@ -492,10 +492,10 @@ private void init() {\n                 rule = new TextField(Calendar.ERA, ERAs);\n                 break;\n             case 'y': // year (number)\n              if (tokenLen >= 4) {\n                  rule = selectNumberRule(Calendar.YEAR, tokenLen);\n              } else {\n                     rule = TwoDigitYearField.INSTANCE;\n                 }\n                 break;\n             case 'M': // month in year (text and number)\n","solution":"@@ -492,10 +492,10 @@ private void init() {\n                 rule = new TextField(Calendar.ERA, ERAs);\n                 break;\n             case 'y': // year (number)\n              if (tokenLen == 2) {\n                     rule = TwoDigitYearField.INSTANCE;\n              } else {\n                  rule = selectNumberRule(Calendar.YEAR, tokenLen < 4 ? 4 : tokenLen);\n                 }\n                 break;\n             case 'M': // month in year (text and number)\n","CodeWithNoComments":"\n                 rule = new TextField(Calendar.ERA, ERAs);\n                 break;\n             case 'y':                 if (tokenLen >= 4) {\n                    rule = selectNumberRule(Calendar.YEAR, tokenLen);\n                } else {\n                     rule = TwoDigitYearField.INSTANCE;\n                 }\n                 break;\n             case 'M': ","SolutionWithNoComments":"\n                 rule = new TextField(Calendar.ERA, ERAs);\n                 break;\n             case 'y':                 if (tokenLen == 2) {\n                     rule = TwoDigitYearField.INSTANCE;\n                } else {\n                    rule = selectNumberRule(Calendar.YEAR, tokenLen < 4 ? 4 : tokenLen);\n                 }\n                 break;\n             case 'M': "},{"ids":174,"error":"junit.framework.ComparisonFailure","source":"/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java","code":"@@ -80,26 +80,20 @@ public final void translate(CharSequence input, Writer out) throws IOException {\n             return;\n         }\n         int pos = 0;\n      int len = Character.codePointCount(input, 0, input.length());\n         while (pos < len) {\n             int consumed = translate(input, pos, out);\n             if (consumed == 0) {\n                 char[] c = Character.toChars(Character.codePointAt(input, pos));\n                 out.write(c);\n             }\n          else {\n //          // contract with translators is that they have to understand codepoints \n //          // and they just took care of a surrogate pair\n             for (int pt = 0; pt < consumed; pt++) {\n                  if (pos < len - 2) {\n                 pos += Character.charCount(Character.codePointAt(input, pos));\n                  } else {\n                      pos++;\n                  }\n              }\n              pos--;\n             }\n          pos++;\n         }\n     }\n \n","solution":"@@ -80,26 +80,20 @@ public final void translate(CharSequence input, Writer out) throws IOException {\n             return;\n         }\n         int pos = 0;\n      int len = input.length();\n         while (pos < len) {\n             int consumed = translate(input, pos, out);\n             if (consumed == 0) {\n                 char[] c = Character.toChars(Character.codePointAt(input, pos));\n                 out.write(c);\n              pos+= c.length;\n              continue;\n             }\n //          // contract with translators is that they have to understand codepoints \n //          // and they just took care of a surrogate pair\n             for (int pt = 0; pt < consumed; pt++) {\n                 pos += Character.charCount(Character.codePointAt(input, pos));\n             }\n         }\n     }\n \n","CodeWithNoComments":"\n             return;\n         }\n         int pos = 0;\n        int len = Character.codePointCount(input, 0, input.length());\n         while (pos < len) {\n             int consumed = translate(input, pos, out);\n             if (consumed == 0) {\n                 char[] c = Character.toChars(Character.codePointAt(input, pos));\n                 out.write(c);\n             }\n            else {\n               for (int pt = 0; pt < consumed; pt++) {\n                    if (pos < len - 2) {\n                 pos += Character.charCount(Character.codePointAt(input, pos));\n                    } else {\n                        pos++;\n                    }\n                }\n                pos--;\n             }\n            pos++;\n         }\n     }\n \n","SolutionWithNoComments":"\n             return;\n         }\n         int pos = 0;\n        int len = input.length();\n         while (pos < len) {\n             int consumed = translate(input, pos, out);\n             if (consumed == 0) {\n                 char[] c = Character.toChars(Character.codePointAt(input, pos));\n                 out.write(c);\n                pos+= c.length;\n                continue;\n             }\n               for (int pt = 0; pt < consumed; pt++) {\n                 pos += Character.charCount(Character.codePointAt(input, pos));\n             }\n         }\n     }\n \n"},{"ids":175,"error":"junit.framework.AssertionFailedError","source":"/src/main/java/org/apache/commons/lang3/StringUtils.java","code":"@@ -785,7 +785,10 @@ public static boolean equals(CharSequence cs1, CharSequence cs2) {\n         if (cs1 == null || cs2 == null) {\n             return false;\n         }\n             return cs1.equals(cs2);\n     }\n \n     /**\n","solution":"@@ -785,7 +785,10 @@ public static boolean equals(CharSequence cs1, CharSequence cs2) {\n         if (cs1 == null || cs2 == null) {\n             return false;\n         }\n      if (cs1 instanceof String && cs2 instanceof String) {\n             return cs1.equals(cs2);\n      }\n      return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));\n     }\n \n     /**\n","CodeWithNoComments":"\n         if (cs1 == null || cs2 == null) {\n             return false;\n         }\n             return cs1.equals(cs2);\n     }\n \n","SolutionWithNoComments":"\n         if (cs1 == null || cs2 == null) {\n             return false;\n         }\n        if (cs1 instanceof String && cs2 instanceof String) {\n             return cs1.equals(cs2);\n        }\n        return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));\n     }\n \n"},{"ids":176,"error":"java.lang.NumberFormatException","source":"/src/main/java/org/apache/commons/lang3/math/NumberUtils.java","code":"@@ -455,7 +455,7 @@ public static Number createNumber(String str) throws NumberFormatException {\n             // a wrong value.\n             return null;\n         }\n      if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n             return createInteger(str);\n         }   \n         char lastChar = str.charAt(str.length() - 1);\n","solution":"@@ -455,7 +455,7 @@ public static Number createNumber(String str) throws NumberFormatException {\n             // a wrong value.\n             return null;\n         }\n      if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             return createInteger(str);\n         }   \n         char lastChar = str.charAt(str.length() - 1);\n","CodeWithNoComments":"\n                          return null;\n         }\n        if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n             return createInteger(str);\n         }   \n         char lastChar = str.charAt(str.length() - 1);\n","SolutionWithNoComments":"\n                          return null;\n         }\n        if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             return createInteger(str);\n         }   \n         char lastChar = str.charAt(str.length() - 1);\n"},{"ids":177,"error":"junit.framework.AssertionFailedError","source":"/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java","code":"@@ -216,9 +216,9 @@ private static boolean isAssignable(Type type, ParameterizedType toParameterized\n                 toClass, typeVarAssigns);\n \n         // now to check each type argument\n      for (Map.Entry<TypeVariable<?>, Type> entry : toTypeVarAssigns.entrySet()) {\n          Type toTypeArg = entry.getValue();\n          Type fromTypeArg = fromTypeVarAssigns.get(entry.getKey());\n \n             // parameters must either be absent from the subject type, within\n             // the bounds of the wildcard type, or be an exact match to the\n@@ -672,7 +672,7 @@ private static Type substituteTypeVariables(Type type, Map<TypeVariable<?>, Type\n                 : new HashMap<TypeVariable<?>, Type>(subtypeVarAssigns);\n \n         // has target class been reached?\n      if (cls.getTypeParameters().length > 0 || toClass.equals(cls)) {\n             return typeVarAssigns;\n         }\n \n","solution":"@@ -216,9 +216,9 @@ private static boolean isAssignable(Type type, ParameterizedType toParameterized\n                 toClass, typeVarAssigns);\n \n         // now to check each type argument\n      for (TypeVariable<?> var : toTypeVarAssigns.keySet()) {\n          Type toTypeArg = unrollVariableAssignments(var, toTypeVarAssigns);\n          Type fromTypeArg = unrollVariableAssignments(var, fromTypeVarAssigns);\n \n             // parameters must either be absent from the subject type, within\n             // the bounds of the wildcard type, or be an exact match to the\n@@ -672,7 +672,7 @@ private static Type substituteTypeVariables(Type type, Map<TypeVariable<?>, Type\n                 : new HashMap<TypeVariable<?>, Type>(subtypeVarAssigns);\n \n         // has target class been reached?\n      if (toClass.equals(cls)) {\n             return typeVarAssigns;\n         }\n \n","CodeWithNoComments":"\n                 toClass, typeVarAssigns);\n \n                 for (Map.Entry<TypeVariable<?>, Type> entry : toTypeVarAssigns.entrySet()) {\n            Type toTypeArg = entry.getValue();\n            Type fromTypeArg = fromTypeVarAssigns.get(entry.getKey());\n \n                          \n                 : new HashMap<TypeVariable<?>, Type>(subtypeVarAssigns);\n \n                 if (cls.getTypeParameters().length > 0 || toClass.equals(cls)) {\n             return typeVarAssigns;\n         }\n \n","SolutionWithNoComments":"\n                 toClass, typeVarAssigns);\n \n                 for (TypeVariable<?> var : toTypeVarAssigns.keySet()) {\n            Type toTypeArg = unrollVariableAssignments(var, toTypeVarAssigns);\n            Type fromTypeArg = unrollVariableAssignments(var, fromTypeVarAssigns);\n \n                          \n                 : new HashMap<TypeVariable<?>, Type>(subtypeVarAssigns);\n \n                 if (toClass.equals(cls)) {\n             return typeVarAssigns;\n         }\n \n"},{"ids":178,"error":"junit.framework.AssertionFailedError","source":"/src/main/java/org/apache/commons/lang3/time/DateUtils.java","code":"@@ -262,7 +262,7 @@ public static boolean isSameLocalTime(Calendar cal1, Calendar cal2) {\n         return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) &&\n                 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) &&\n                 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) &&\n              cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) &&\n                 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) &&\n                 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) &&\n                 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) &&\n","solution":"@@ -262,7 +262,7 @@ public static boolean isSameLocalTime(Calendar cal1, Calendar cal2) {\n         return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) &&\n                 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) &&\n                 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) &&\n              cal1.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR_OF_DAY) &&\n                 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) &&\n                 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) &&\n                 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) &&\n","CodeWithNoComments":"\n         return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) &&\n                 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) &&\n                 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) &&\n                cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) &&\n                 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) &&\n                 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) &&\n                 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) &&\n","SolutionWithNoComments":"\n         return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) &&\n                 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) &&\n                 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) &&\n                cal1.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR_OF_DAY) &&\n                 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) &&\n                 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) &&\n                 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) &&\n"},{"ids":179,"error":"java.lang.StringIndexOutOfBoundsException","source":"/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java","code":"@@ -37,7 +37,7 @@\n     public int translate(CharSequence input, int index, Writer out) throws IOException {\n         int seqEnd = input.length();\n         // Uses -2 to ensure there is something after the &#\n      if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {\n             int start = index + 2;\n             boolean isHex = false;\n \n@@ -47,11 +47,16 @@ public int translate(CharSequence input, int index, Writer out) throws IOExcepti\n                 isHex = true;\n \n                 // Check there's more than just an x after the &#\n             }\n \n             int end = start;\n             // Note that this supports character codes without a ; on the end\n          while(input.charAt(end) != ';') \n             {\n                 end++;\n             }\n@@ -76,8 +81,9 @@ public int translate(CharSequence input, int index, Writer out) throws IOExcepti\n                 out.write(entityValue);\n             }\n \n \n          return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n         }\n         return 0;\n     }\n","solution":"@@ -37,7 +37,7 @@\n     public int translate(CharSequence input, int index, Writer out) throws IOException {\n         int seqEnd = input.length();\n         // Uses -2 to ensure there is something after the &#\n      if(input.charAt(index) == '&' && index < seqEnd - 2 && input.charAt(index + 1) == '#') {\n             int start = index + 2;\n             boolean isHex = false;\n \n@@ -47,11 +47,16 @@ public int translate(CharSequence input, int index, Writer out) throws IOExcepti\n                 isHex = true;\n \n                 // Check there's more than just an x after the &#\n              if(start == seqEnd) {\n                  return 0;\n              }\n             }\n \n             int end = start;\n             // Note that this supports character codes without a ; on the end\n          while(end < seqEnd && ( (input.charAt(end) >= '0' && input.charAt(end) <= '9') ||\n                                  (input.charAt(end) >= 'a' && input.charAt(end) <= 'f') ||\n                                  (input.charAt(end) >= 'A' && input.charAt(end) <= 'F') ) )\n             {\n                 end++;\n             }\n@@ -76,8 +81,9 @@ public int translate(CharSequence input, int index, Writer out) throws IOExcepti\n                 out.write(entityValue);\n             }\n \n          boolean semiNext = (end != seqEnd) && (input.charAt(end) == ';');\n \n          return 2 + (end - start) + (isHex ? 1 : 0) + (semiNext ? 1 : 0);\n         }\n         return 0;\n     }\n","CodeWithNoComments":"\n     public int translate(CharSequence input, int index, Writer out) throws IOException {\n         int seqEnd = input.length();\n                 if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {\n             int start = index + 2;\n             boolean isHex = false;\n \n\n                 isHex = true;\n \n                              }\n \n             int end = start;\n                         while(input.charAt(end) != ';') \n             {\n                 end++;\n             }\n\n                 out.write(entityValue);\n             }\n \n \n            return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n         }\n         return 0;\n     }\n","SolutionWithNoComments":"\n     public int translate(CharSequence input, int index, Writer out) throws IOException {\n         int seqEnd = input.length();\n                 if(input.charAt(index) == '&' && index < seqEnd - 2 && input.charAt(index + 1) == '#') {\n             int start = index + 2;\n             boolean isHex = false;\n \n\n                 isHex = true;\n \n                                 if(start == seqEnd) {\n                    return 0;\n                }\n             }\n \n             int end = start;\n                         while(end < seqEnd && ( (input.charAt(end) >= '0' && input.charAt(end) <= '9') ||\n                                    (input.charAt(end) >= 'a' && input.charAt(end) <= 'f') ||\n                                    (input.charAt(end) >= 'A' && input.charAt(end) <= 'F') ) )\n             {\n                 end++;\n             }\n\n                 out.write(entityValue);\n             }\n \n            boolean semiNext = (end != seqEnd) && (input.charAt(end) == ';');\n \n            return 2 + (end - start) + (isHex ? 1 : 0) + (semiNext ? 1 : 0);\n         }\n         return 0;\n     }\n"},{"ids":180,"error":"junit.framework.AssertionFailedError","source":"/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java","code":"@@ -70,6 +70,7 @@\n  */\n public class ExtendedMessageFormat extends MessageFormat {\n     private static final long serialVersionUID = -2362048321261811743L;\n \n     private static final String DUMMY_PATTERN = \"\";\n     private static final String ESCAPED_QUOTE = \"''\";\n@@ -260,12 +261,42 @@ public void setFormatsByArgumentIndex(Format[] newFormats) {\n      * @param obj the object to compare to\n      * @return true if this object equals the other, otherwise false\n      */\n \n     /**\n      * Return the hashcode.\n      *\n      * @return the hashcode\n      */\n \n     /**\n      * Get a custom format from a format description.\n","solution":"@@ -70,6 +70,7 @@\n  */\n public class ExtendedMessageFormat extends MessageFormat {\n     private static final long serialVersionUID = -2362048321261811743L;\n  private static final int HASH_SEED = 31;\n \n     private static final String DUMMY_PATTERN = \"\";\n     private static final String ESCAPED_QUOTE = \"''\";\n@@ -260,12 +261,42 @@ public void setFormatsByArgumentIndex(Format[] newFormats) {\n      * @param obj the object to compare to\n      * @return true if this object equals the other, otherwise false\n      */\n  @Override\n  public boolean equals(Object obj) {\n      if (obj == this) {\n          return true;\n      }\n      if (obj == null) {\n          return false;\n      }\n      if (!super.equals(obj)) {\n          return false;\n      }\n      if (ObjectUtils.notEqual(getClass(), obj.getClass())) {\n        return false;\n      }\n      ExtendedMessageFormat rhs = (ExtendedMessageFormat)obj;\n      if (ObjectUtils.notEqual(toPattern, rhs.toPattern)) {\n          return false;\n      }\n      if (ObjectUtils.notEqual(registry, rhs.registry)) {\n          return false;\n      }\n      return true;\n  }\n \n     /**\n      * Return the hashcode.\n      *\n      * @return the hashcode\n      */\n  @Override\n  public int hashCode() {\n      int result = super.hashCode();\n      result = HASH_SEED * result + ObjectUtils.hashCode(registry);\n      result = HASH_SEED * result + ObjectUtils.hashCode(toPattern);\n      return result;\n  }\n \n     /**\n      * Get a custom format from a format description.\n","CodeWithNoComments":"\n public class ExtendedMessageFormat extends MessageFormat {\n     private static final long serialVersionUID = -2362048321261811743L;\n \n     private static final String DUMMY_PATTERN = \"\";\n     private static final String ESCAPED_QUOTE = \"''\";\n\n","SolutionWithNoComments":"\n public class ExtendedMessageFormat extends MessageFormat {\n     private static final long serialVersionUID = -2362048321261811743L;\n    private static final int HASH_SEED = 31;\n \n     private static final String DUMMY_PATTERN = \"\";\n     private static final String ESCAPED_QUOTE = \"''\";\n\n    @Override\n    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (obj == null) {\n            return false;\n        }\n        if (!super.equals(obj)) {\n            return false;\n        }\n        if (ObjectUtils.notEqual(getClass(), obj.getClass())) {\n          return false;\n        }\n        ExtendedMessageFormat rhs = (ExtendedMessageFormat)obj;\n        if (ObjectUtils.notEqual(toPattern, rhs.toPattern)) {\n            return false;\n        }\n        if (ObjectUtils.notEqual(registry, rhs.registry)) {\n            return false;\n        }\n        return true;\n    }\n \n    @Override\n    public int hashCode() {\n        int result = super.hashCode();\n        result = HASH_SEED * result + ObjectUtils.hashCode(registry);\n        result = HASH_SEED * result + ObjectUtils.hashCode(toPattern);\n        return result;\n    }\n \n"},{"ids":181,"error":"junit.framework.AssertionFailedError","source":"/src/main/java/org/apache/commons/lang3/math/Fraction.java","code":"@@ -580,8 +580,14 @@ public Fraction pow(int power) {\n      */\n     private static int greatestCommonDivisor(int u, int v) {\n         // From Commons Math:\n         //if either operand is abs 1, return 1:\n      if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n             return 1;\n         }\n         // keep u and v negative, as negative integers range down to\n","solution":"@@ -580,8 +580,14 @@ public Fraction pow(int power) {\n      */\n     private static int greatestCommonDivisor(int u, int v) {\n         // From Commons Math:\n      if ((u == 0) || (v == 0)) {\n          if ((u == Integer.MIN_VALUE) || (v == Integer.MIN_VALUE)) {\n              throw new ArithmeticException(\"overflow: gcd is 2^31\");\n          }\n          return Math.abs(u) + Math.abs(v);\n      }\n         //if either operand is abs 1, return 1:\n      if (Math.abs(u) == 1 || Math.abs(v) == 1) {\n             return 1;\n         }\n         // keep u and v negative, as negative integers range down to\n","CodeWithNoComments":"\n     private static int greatestCommonDivisor(int u, int v) {\n                          if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n             return 1;\n         }\n         ","SolutionWithNoComments":"\n     private static int greatestCommonDivisor(int u, int v) {\n                 if ((u == 0) || (v == 0)) {\n            if ((u == Integer.MIN_VALUE) || (v == Integer.MIN_VALUE)) {\n                throw new ArithmeticException(\"overflow: gcd is 2^31\");\n            }\n            return Math.abs(u) + Math.abs(v);\n        }\n                 if (Math.abs(u) == 1 || Math.abs(v) == 1) {\n             return 1;\n         }\n         "},{"ids":182,"error":"java.lang.NullPointerException","source":"/src/main/java/org/apache/commons/lang3/StringUtils.java","code":"@@ -3295,7 +3295,7 @@ public static String join(Object[] array, char separator, int startIndex, int en\n             return EMPTY;\n         }\n         \n      StringBuilder buf = new StringBuilder((array[startIndex] == null ? 16 : array[startIndex].toString().length()) + 1);\n \n         for (int i = startIndex; i < endIndex; i++) {\n             if (i > startIndex) {\n@@ -3380,7 +3380,7 @@ public static String join(Object[] array, String separator, int startIndex, int\n             return EMPTY;\n         }\n \n      StringBuilder buf = new StringBuilder((array[startIndex] == null ? 16 : array[startIndex].toString().length()) + separator.length());\n \n         for (int i = startIndex; i < endIndex; i++) {\n             if (i > startIndex) {\n","solution":"@@ -3295,7 +3295,7 @@ public static String join(Object[] array, char separator, int startIndex, int en\n             return EMPTY;\n         }\n         \n      StringBuilder buf = new StringBuilder(noOfItems * 16);\n \n         for (int i = startIndex; i < endIndex; i++) {\n             if (i > startIndex) {\n@@ -3380,7 +3380,7 @@ public static String join(Object[] array, String separator, int startIndex, int\n             return EMPTY;\n         }\n \n      StringBuilder buf = new StringBuilder(noOfItems * 16);\n \n         for (int i = startIndex; i < endIndex; i++) {\n             if (i > startIndex) {\n","CodeWithNoComments":"\n             return EMPTY;\n         }\n         \n        StringBuilder buf = new StringBuilder((array[startIndex] == null ? 16 : array[startIndex].toString().length()) + 1);\n \n         for (int i = startIndex; i < endIndex; i++) {\n             if (i > startIndex) {\n\n             return EMPTY;\n         }\n \n        StringBuilder buf = new StringBuilder((array[startIndex] == null ? 16 : array[startIndex].toString().length()) + separator.length());\n \n         for (int i = startIndex; i < endIndex; i++) {\n             if (i > startIndex) {\n","SolutionWithNoComments":"\n             return EMPTY;\n         }\n         \n        StringBuilder buf = new StringBuilder(noOfItems * 16);\n \n         for (int i = startIndex; i < endIndex; i++) {\n             if (i > startIndex) {\n\n             return EMPTY;\n         }\n \n        StringBuilder buf = new StringBuilder(noOfItems * 16);\n \n         for (int i = startIndex; i < endIndex; i++) {\n             if (i > startIndex) {\n"},{"ids":183,"error":"junit.framework.AssertionFailedError","source":"/src/main/java/org/apache/commons/lang3/math/NumberUtils.java","code":"@@ -1410,7 +1410,7 @@ public static boolean isNumber(String str) {\n             if (chars[i] == 'l'\n                 || chars[i] == 'L') {\n                 // not allowing L with an exponent or decimal point\n              return foundDigit && !hasExp;\n             }\n             // last character is illegal\n             return false;\n","solution":"@@ -1410,7 +1410,7 @@ public static boolean isNumber(String str) {\n             if (chars[i] == 'l'\n                 || chars[i] == 'L') {\n                 // not allowing L with an exponent or decimal point\n              return foundDigit && !hasExp && !hasDecPoint;\n             }\n             // last character is illegal\n             return false;\n","CodeWithNoComments":"\n             if (chars[i] == 'l'\n                 || chars[i] == 'L') {\n                                 return foundDigit && !hasExp;\n             }\n                          return false;\n","SolutionWithNoComments":"\n             if (chars[i] == 'l'\n                 || chars[i] == 'L') {\n                                 return foundDigit && !hasExp && !hasDecPoint;\n             }\n                          return false;\n"},{"ids":184,"error":"junit.framework.ComparisonFailure","source":"/src/main/java/org/apache/commons/lang3/time/FastDateFormat.java","code":"@@ -817,7 +817,7 @@ public String format(long millis) {\n      * @return the formatted string\n      */\n     public String format(Date date) {\n      Calendar c = new GregorianCalendar(mTimeZone);\n         c.setTime(date);\n         return applyRules(c, new StringBuffer(mMaxLengthEstimate)).toString();\n     }\n","solution":"@@ -817,7 +817,7 @@ public String format(long millis) {\n      * @return the formatted string\n      */\n     public String format(Date date) {\n      Calendar c = new GregorianCalendar(mTimeZone, mLocale);\n         c.setTime(date);\n         return applyRules(c, new StringBuffer(mMaxLengthEstimate)).toString();\n     }\n","CodeWithNoComments":"\n        Calendar c = new GregorianCalendar(mTimeZone);\n         c.setTime(date);\n         return applyRules(c, new StringBuffer(mMaxLengthEstimate)).toString();\n     }\n","SolutionWithNoComments":"\n     public String format(Date date) {\n        Calendar c = new GregorianCalendar(mTimeZone, mLocale);\n         c.setTime(date);\n         return applyRules(c, new StringBuffer(mMaxLengthEstimate)).toString();\n     }\n"},{"ids":185,"error":"junit.framework.AssertionFailedError","source":"/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java","code":"@@ -71,33 +71,33 @@\n         {\"\\u00C7\", \"&Ccedil;\"}, // � - uppercase C, cedilla\n         {\"\\u00C8\", \"&Egrave;\"}, // � - uppercase E, grave accent\n         {\"\\u00C9\", \"&Eacute;\"}, // � - uppercase E, acute accent\n      {\"\\u00CB\", \"&Ecirc;\"}, // � - uppercase E, circumflex accent\n      {\"\\u00CC\", \"&Euml;\"}, // � - uppercase E, umlaut\n      {\"\\u00CD\", \"&Igrave;\"}, // � - uppercase I, grave accent\n      {\"\\u00CE\", \"&Iacute;\"}, // � - uppercase I, acute accent\n      {\"\\u00CF\", \"&Icirc;\"}, // � - uppercase I, circumflex accent\n      {\"\\u00D0\", \"&Iuml;\"}, // � - uppercase I, umlaut\n      {\"\\u00D1\", \"&ETH;\"}, // � - uppercase Eth, Icelandic\n      {\"\\u00D2\", \"&Ntilde;\"}, // � - uppercase N, tilde\n      {\"\\u00D3\", \"&Ograve;\"}, // � - uppercase O, grave accent\n      {\"\\u00D4\", \"&Oacute;\"}, // � - uppercase O, acute accent\n      {\"\\u00D5\", \"&Ocirc;\"}, // � - uppercase O, circumflex accent\n      {\"\\u00D6\", \"&Otilde;\"}, // � - uppercase O, tilde\n      {\"\\u00D7\", \"&Ouml;\"}, // � - uppercase O, umlaut\n      {\"\\u00D8\", \"&times;\"}, // multiplication sign\n      {\"\\u00D9\", \"&Oslash;\"}, // � - uppercase O, slash\n      {\"\\u00DA\", \"&Ugrave;\"}, // � - uppercase U, grave accent\n      {\"\\u00DB\", \"&Uacute;\"}, // � - uppercase U, acute accent\n      {\"\\u00DC\", \"&Ucirc;\"}, // � - uppercase U, circumflex accent\n      {\"\\u00DD\", \"&Uuml;\"}, // � - uppercase U, umlaut\n      {\"\\u00DE\", \"&Yacute;\"}, // � - uppercase Y, acute accent\n      {\"\\u00DF\", \"&THORN;\"}, // � - uppercase THORN, Icelandic\n      {\"\\u00E0\", \"&szlig;\"}, // � - lowercase sharps, German\n      {\"\\u00E1\", \"&agrave;\"}, // � - lowercase a, grave accent\n      {\"\\u00E2\", \"&aacute;\"}, // � - lowercase a, acute accent\n      {\"\\u00E3\", \"&acirc;\"}, // � - lowercase a, circumflex accent\n      {\"\\u00E4\", \"&atilde;\"}, // � - lowercase a, tilde\n      {\"\\u00E5\", \"&auml;\"}, // � - lowercase a, umlaut\n         {\"\\u00E5\", \"&aring;\"}, // � - lowercase a, ring\n         {\"\\u00E6\", \"&aelig;\"}, // � - lowercase ae\n         {\"\\u00E7\", \"&ccedil;\"}, // � - lowercase c, cedilla\n","solution":"@@ -71,33 +71,33 @@\n         {\"\\u00C7\", \"&Ccedil;\"}, // � - uppercase C, cedilla\n         {\"\\u00C8\", \"&Egrave;\"}, // � - uppercase E, grave accent\n         {\"\\u00C9\", \"&Eacute;\"}, // � - uppercase E, acute accent\n      {\"\\u00CA\", \"&Ecirc;\"}, // � - uppercase E, circumflex accent\n      {\"\\u00CB\", \"&Euml;\"}, // � - uppercase E, umlaut\n      {\"\\u00CC\", \"&Igrave;\"}, // � - uppercase I, grave accent\n      {\"\\u00CD\", \"&Iacute;\"}, // � - uppercase I, acute accent\n      {\"\\u00CE\", \"&Icirc;\"}, // � - uppercase I, circumflex accent\n      {\"\\u00CF\", \"&Iuml;\"}, // � - uppercase I, umlaut\n      {\"\\u00D0\", \"&ETH;\"}, // � - uppercase Eth, Icelandic\n      {\"\\u00D1\", \"&Ntilde;\"}, // � - uppercase N, tilde\n      {\"\\u00D2\", \"&Ograve;\"}, // � - uppercase O, grave accent\n      {\"\\u00D3\", \"&Oacute;\"}, // � - uppercase O, acute accent\n      {\"\\u00D4\", \"&Ocirc;\"}, // � - uppercase O, circumflex accent\n      {\"\\u00D5\", \"&Otilde;\"}, // � - uppercase O, tilde\n      {\"\\u00D6\", \"&Ouml;\"}, // � - uppercase O, umlaut\n      {\"\\u00D7\", \"&times;\"}, // multiplication sign\n      {\"\\u00D8\", \"&Oslash;\"}, // � - uppercase O, slash\n      {\"\\u00D9\", \"&Ugrave;\"}, // � - uppercase U, grave accent\n      {\"\\u00DA\", \"&Uacute;\"}, // � - uppercase U, acute accent\n      {\"\\u00DB\", \"&Ucirc;\"}, // � - uppercase U, circumflex accent\n      {\"\\u00DC\", \"&Uuml;\"}, // � - uppercase U, umlaut\n      {\"\\u00DD\", \"&Yacute;\"}, // � - uppercase Y, acute accent\n      {\"\\u00DE\", \"&THORN;\"}, // � - uppercase THORN, Icelandic\n      {\"\\u00DF\", \"&szlig;\"}, // � - lowercase sharps, German\n      {\"\\u00E0\", \"&agrave;\"}, // � - lowercase a, grave accent\n      {\"\\u00E1\", \"&aacute;\"}, // � - lowercase a, acute accent\n      {\"\\u00E2\", \"&acirc;\"}, // � - lowercase a, circumflex accent\n      {\"\\u00E3\", \"&atilde;\"}, // � - lowercase a, tilde\n      {\"\\u00E4\", \"&auml;\"}, // � - lowercase a, umlaut\n         {\"\\u00E5\", \"&aring;\"}, // � - lowercase a, ring\n         {\"\\u00E6\", \"&aelig;\"}, // � - lowercase ae\n         {\"\\u00E7\", \"&ccedil;\"}, // � - lowercase c, cedilla\n","CodeWithNoComments":"\n         {\"\\u00C7\", \"&Ccedil;\"},          {\"\\u00C8\", \"&Egrave;\"},          {\"\\u00C9\", \"&Eacute;\"},         {\"\\u00CB\", \"&Ecirc;\"},         {\"\\u00CC\", \"&Euml;\"},         {\"\\u00CD\", \"&Igrave;\"},         {\"\\u00CE\", \"&Iacute;\"},         {\"\\u00CF\", \"&Icirc;\"},         {\"\\u00D0\", \"&Iuml;\"},         {\"\\u00D1\", \"&ETH;\"},         {\"\\u00D2\", \"&Ntilde;\"},         {\"\\u00D3\", \"&Ograve;\"},         {\"\\u00D4\", \"&Oacute;\"},         {\"\\u00D5\", \"&Ocirc;\"},         {\"\\u00D6\", \"&Otilde;\"},         {\"\\u00D7\", \"&Ouml;\"},         {\"\\u00D8\", \"&times;\"},         {\"\\u00D9\", \"&Oslash;\"},         {\"\\u00DA\", \"&Ugrave;\"},         {\"\\u00DB\", \"&Uacute;\"},         {\"\\u00DC\", \"&Ucirc;\"},         {\"\\u00DD\", \"&Uuml;\"},         {\"\\u00DE\", \"&Yacute;\"},         {\"\\u00DF\", \"&THORN;\"},         {\"\\u00E0\", \"&szlig;\"},         {\"\\u00E1\", \"&agrave;\"},         {\"\\u00E2\", \"&aacute;\"},         {\"\\u00E3\", \"&acirc;\"},         {\"\\u00E4\", \"&atilde;\"},         {\"\\u00E5\", \"&auml;\"},          {\"\\u00E5\", \"&aring;\"},          {\"\\u00E6\", \"&aelig;\"},          {\"\\u00E7\", \"&ccedil;\"}, ","SolutionWithNoComments":"\n         {\"\\u00C7\", \"&Ccedil;\"},          {\"\\u00C8\", \"&Egrave;\"},          {\"\\u00C9\", \"&Eacute;\"},         {\"\\u00CA\", \"&Ecirc;\"},         {\"\\u00CB\", \"&Euml;\"},         {\"\\u00CC\", \"&Igrave;\"},         {\"\\u00CD\", \"&Iacute;\"},         {\"\\u00CE\", \"&Icirc;\"},         {\"\\u00CF\", \"&Iuml;\"},         {\"\\u00D0\", \"&ETH;\"},         {\"\\u00D1\", \"&Ntilde;\"},         {\"\\u00D2\", \"&Ograve;\"},         {\"\\u00D3\", \"&Oacute;\"},         {\"\\u00D4\", \"&Ocirc;\"},         {\"\\u00D5\", \"&Otilde;\"},         {\"\\u00D6\", \"&Ouml;\"},         {\"\\u00D7\", \"&times;\"},         {\"\\u00D8\", \"&Oslash;\"},         {\"\\u00D9\", \"&Ugrave;\"},         {\"\\u00DA\", \"&Uacute;\"},         {\"\\u00DB\", \"&Ucirc;\"},         {\"\\u00DC\", \"&Uuml;\"},         {\"\\u00DD\", \"&Yacute;\"},         {\"\\u00DE\", \"&THORN;\"},         {\"\\u00DF\", \"&szlig;\"},         {\"\\u00E0\", \"&agrave;\"},         {\"\\u00E1\", \"&aacute;\"},         {\"\\u00E2\", \"&acirc;\"},         {\"\\u00E3\", \"&atilde;\"},         {\"\\u00E4\", \"&auml;\"},          {\"\\u00E5\", \"&aring;\"},          {\"\\u00E6\", \"&aelig;\"},          {\"\\u00E7\", \"&ccedil;\"}, "},{"ids":186,"error":"junit.framework.AssertionFailedError","source":"/src/main/java/org/apache/commons/lang3/SystemUtils.java","code":"@@ -1669,7 +1669,7 @@ static float toJavaVersionFloat(String version) {\n      * \n      * @return the version, for example 131 for Java 1.3.1\n      */\n  static float toJavaVersionInt(String version) {\n         return toVersionInt(toJavaVersionIntArray(version, JAVA_VERSION_TRIM_SIZE));\n     }\n \n","solution":"@@ -1669,7 +1669,7 @@ static float toJavaVersionFloat(String version) {\n      * \n      * @return the version, for example 131 for Java 1.3.1\n      */\n  static int toJavaVersionInt(String version) {\n         return toVersionInt(toJavaVersionIntArray(version, JAVA_VERSION_TRIM_SIZE));\n     }\n \n","CodeWithNoComments":"\n         return toVersionInt(toJavaVersionIntArray(version, JAVA_VERSION_TRIM_SIZE));\n     }\n \n","SolutionWithNoComments":"\n    static int toJavaVersionInt(String version) {\n         return toVersionInt(toJavaVersionIntArray(version, JAVA_VERSION_TRIM_SIZE));\n     }\n \n"},{"ids":187,"error":"junit.framework.AssertionFailedError","source":"/src/main/java/org/apache/commons/lang3/StringUtils.java","code":"@@ -1373,13 +1373,21 @@ public static int indexOfAny(CharSequence cs, char[] searchChars) {\n             return INDEX_NOT_FOUND;\n         }\n         int csLen = cs.length();\n         int searchLen = searchChars.length;\n         for (int i = 0; i < csLen; i++) {\n             char ch = cs.charAt(i);\n             for (int j = 0; j < searchLen; j++) {\n                 if (searchChars[j] == ch) {\n                         // ch is a supplementary character\n                         return i;\n                 }\n             }\n         }\n@@ -1440,7 +1448,7 @@ public static int indexOfAny(CharSequence cs, String searchChars) {\n      * <code>false<\/code> if no match or null input\n      * @since 2.4\n      */\n  public static boolean containsAny(CharSequence cs, char[] searchChars) {\n         if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n             return false;\n         }\n@@ -1452,9 +1460,12 @@ public static boolean containsAny(CharSequence cs, char[] searchChars) {\n             char ch = cs.charAt(i);\n             for (int j = 0; j < searchLength; j++) {\n                 if (searchChars[j] == ch) {\n                  if (i < csLast && j < searchLast && ch >= Character.MIN_HIGH_SURROGATE && ch <= Character.MAX_HIGH_SURROGATE) {\n                             // missing low surrogate, fine, like String.indexOf(String)\n                      if (searchChars[j + 1] == cs.charAt(i + 1)) {\n                             return true;\n                         }\n                     } else {\n@@ -1494,7 +1505,7 @@ public static boolean containsAny(CharSequence cs, char[] searchChars) {\n      * @return the <code>true<\/code> if any of the chars are found, <code>false<\/code> if no match or null input\n      * @since 2.4\n      */\n  public static boolean containsAny(CharSequence cs, String searchChars) {\n         if (searchChars == null) {\n             return false;\n         }\n@@ -1530,13 +1541,21 @@ public static int indexOfAnyBut(CharSequence cs, char[] searchChars) {\n             return INDEX_NOT_FOUND;\n         }\n         int csLen = cs.length();\n         int searchLen = searchChars.length;\n         outer:\n         for (int i = 0; i < csLen; i++) {\n             char ch = cs.charAt(i);\n             for (int j = 0; j < searchLen; j++) {\n                 if (searchChars[j] == ch) {\n                         continue outer;\n                 }\n             }\n             return i;\n@@ -1573,8 +1592,16 @@ public static int indexOfAnyBut(String str, String searchChars) {\n         int strLen = str.length();\n         for (int i = 0; i < strLen; i++) {\n             char ch = str.charAt(i);\n          if (searchChars.indexOf(ch) < 0) {\n                     return i;\n             }\n         }\n         return INDEX_NOT_FOUND;\n@@ -1675,14 +1702,25 @@ public static boolean containsNone(CharSequence cs, char[] searchChars) {\n             return true;\n         }\n         int csLen = cs.length();\n         int searchLen = searchChars.length;\n         for (int i = 0; i < csLen; i++) {\n             char ch = cs.charAt(i);\n             for (int j = 0; j < searchLen; j++) {\n                 if (searchChars[j] == ch) {\n                             // missing low surrogate, fine, like String.indexOf(String)\n                         // ch is in the Basic Multilingual Plane\n                         return false;\n                 }\n             }\n         }\n","solution":"@@ -1373,13 +1373,21 @@ public static int indexOfAny(CharSequence cs, char[] searchChars) {\n             return INDEX_NOT_FOUND;\n         }\n         int csLen = cs.length();\n      int csLast = csLen - 1;\n         int searchLen = searchChars.length;\n      int searchLast = searchLen - 1;\n         for (int i = 0; i < csLen; i++) {\n             char ch = cs.charAt(i);\n             for (int j = 0; j < searchLen; j++) {\n                 if (searchChars[j] == ch) {\n                  if (i < csLast && j < searchLast && Character.isHighSurrogate(ch)) {\n                         // ch is a supplementary character\n                      if (searchChars[j + 1] == cs.charAt(i + 1)) {\n                          return i;\n                      }\n                  } else {\n                         return i;\n                  }\n                 }\n             }\n         }\n@@ -1440,7 +1448,7 @@ public static int indexOfAny(CharSequence cs, String searchChars) {\n      * <code>false<\/code> if no match or null input\n      * @since 2.4\n      */\n  public static boolean containsAny(String cs, char[] searchChars) {\n         if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n             return false;\n         }\n@@ -1452,9 +1460,12 @@ public static boolean containsAny(CharSequence cs, char[] searchChars) {\n             char ch = cs.charAt(i);\n             for (int j = 0; j < searchLength; j++) {\n                 if (searchChars[j] == ch) {\n                  if (Character.isHighSurrogate(ch)) {\n                      if (j == searchLast) {\n                             // missing low surrogate, fine, like String.indexOf(String)\n                          return true;\n                      }\n                      if (i < csLast && searchChars[j + 1] == cs.charAt(i + 1)) {\n                             return true;\n                         }\n                     } else {\n@@ -1494,7 +1505,7 @@ public static boolean containsAny(CharSequence cs, char[] searchChars) {\n      * @return the <code>true<\/code> if any of the chars are found, <code>false<\/code> if no match or null input\n      * @since 2.4\n      */\n  public static boolean containsAny(String cs, String searchChars) {\n         if (searchChars == null) {\n             return false;\n         }\n@@ -1530,13 +1541,21 @@ public static int indexOfAnyBut(CharSequence cs, char[] searchChars) {\n             return INDEX_NOT_FOUND;\n         }\n         int csLen = cs.length();\n      int csLast = csLen - 1;\n         int searchLen = searchChars.length;\n      int searchLast = searchLen - 1;\n         outer:\n         for (int i = 0; i < csLen; i++) {\n             char ch = cs.charAt(i);\n             for (int j = 0; j < searchLen; j++) {\n                 if (searchChars[j] == ch) {\n                  if (i < csLast && j < searchLast && Character.isHighSurrogate(ch)) {\n                      if (searchChars[j + 1] == cs.charAt(i + 1)) {\n                          continue outer;\n                      }\n                  } else {\n                         continue outer;\n                  }\n                 }\n             }\n             return i;\n@@ -1573,8 +1592,16 @@ public static int indexOfAnyBut(String str, String searchChars) {\n         int strLen = str.length();\n         for (int i = 0; i < strLen; i++) {\n             char ch = str.charAt(i);\n          boolean chFound = searchChars.indexOf(ch) >= 0;\n          if (i + 1 < strLen && Character.isHighSurrogate(ch)) {\n              char ch2 = str.charAt(i + 1);\n              if (chFound && searchChars.indexOf(ch2) < 0) {\n                     return i;\n              }\n          } else {\n              if (!chFound) {\n                  return i;\n              }\n             }\n         }\n         return INDEX_NOT_FOUND;\n@@ -1675,14 +1702,25 @@ public static boolean containsNone(CharSequence cs, char[] searchChars) {\n             return true;\n         }\n         int csLen = cs.length();\n      int csLast = csLen - 1;\n         int searchLen = searchChars.length;\n      int searchLast = searchLen - 1;\n         for (int i = 0; i < csLen; i++) {\n             char ch = cs.charAt(i);\n             for (int j = 0; j < searchLen; j++) {\n                 if (searchChars[j] == ch) {\n                  if (Character.isHighSurrogate(ch)) {\n                      if (j == searchLast) {\n                             // missing low surrogate, fine, like String.indexOf(String)\n                          return false;\n                      }\n                      if (i < csLast && searchChars[j + 1] == cs.charAt(i + 1)) {\n                          return false;\n                      }\n                  } else {\n                         // ch is in the Basic Multilingual Plane\n                         return false;\n                  }\n                 }\n             }\n         }\n","CodeWithNoComments":"\n             return INDEX_NOT_FOUND;\n         }\n         int csLen = cs.length();\n         int searchLen = searchChars.length;\n         for (int i = 0; i < csLen; i++) {\n             char ch = cs.charAt(i);\n             for (int j = 0; j < searchLen; j++) {\n                 if (searchChars[j] == ch) {\n                                                  return i;\n                 }\n             }\n         }\n\n    public static boolean containsAny(CharSequence cs, char[] searchChars) {\n         if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n             return false;\n         }\n\n             char ch = cs.charAt(i);\n             for (int j = 0; j < searchLength; j++) {\n                 if (searchChars[j] == ch) {\n                    if (i < csLast && j < searchLast && ch >= Character.MIN_HIGH_SURROGATE && ch <= Character.MAX_HIGH_SURROGATE) {\n                                                     if (searchChars[j + 1] == cs.charAt(i + 1)) {\n                             return true;\n                         }\n                     } else {\n\n    public static boolean containsAny(CharSequence cs, String searchChars) {\n         if (searchChars == null) {\n             return false;\n         }\n\n             return INDEX_NOT_FOUND;\n         }\n         int csLen = cs.length();\n         int searchLen = searchChars.length;\n         outer:\n         for (int i = 0; i < csLen; i++) {\n             char ch = cs.charAt(i);\n             for (int j = 0; j < searchLen; j++) {\n                 if (searchChars[j] == ch) {\n                         continue outer;\n                 }\n             }\n             return i;\n\n         int strLen = str.length();\n         for (int i = 0; i < strLen; i++) {\n             char ch = str.charAt(i);\n            if (searchChars.indexOf(ch) < 0) {\n                     return i;\n             }\n         }\n         return INDEX_NOT_FOUND;\n\n             return true;\n         }\n         int csLen = cs.length();\n         int searchLen = searchChars.length;\n         for (int i = 0; i < csLen; i++) {\n             char ch = cs.charAt(i);\n             for (int j = 0; j < searchLen; j++) {\n                 if (searchChars[j] == ch) {\n                                                                               return false;\n                 }\n             }\n         }\n","SolutionWithNoComments":"\n             return INDEX_NOT_FOUND;\n         }\n         int csLen = cs.length();\n        int csLast = csLen - 1;\n         int searchLen = searchChars.length;\n        int searchLast = searchLen - 1;\n         for (int i = 0; i < csLen; i++) {\n             char ch = cs.charAt(i);\n             for (int j = 0; j < searchLen; j++) {\n                 if (searchChars[j] == ch) {\n                    if (i < csLast && j < searchLast && Character.isHighSurrogate(ch)) {\n                                                 if (searchChars[j + 1] == cs.charAt(i + 1)) {\n                            return i;\n                        }\n                    } else {\n                         return i;\n                    }\n                 }\n             }\n         }\n\n    public static boolean containsAny(String cs, char[] searchChars) {\n         if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n             return false;\n         }\n\n             char ch = cs.charAt(i);\n             for (int j = 0; j < searchLength; j++) {\n                 if (searchChars[j] == ch) {\n                    if (Character.isHighSurrogate(ch)) {\n                        if (j == searchLast) {\n                                                         return true;\n                        }\n                        if (i < csLast && searchChars[j + 1] == cs.charAt(i + 1)) {\n                             return true;\n                         }\n                     } else {\n\n    public static boolean containsAny(String cs, String searchChars) {\n         if (searchChars == null) {\n             return false;\n         }\n\n             return INDEX_NOT_FOUND;\n         }\n         int csLen = cs.length();\n        int csLast = csLen - 1;\n         int searchLen = searchChars.length;\n        int searchLast = searchLen - 1;\n         outer:\n         for (int i = 0; i < csLen; i++) {\n             char ch = cs.charAt(i);\n             for (int j = 0; j < searchLen; j++) {\n                 if (searchChars[j] == ch) {\n                    if (i < csLast && j < searchLast && Character.isHighSurrogate(ch)) {\n                        if (searchChars[j + 1] == cs.charAt(i + 1)) {\n                            continue outer;\n                        }\n                    } else {\n                         continue outer;\n                    }\n                 }\n             }\n             return i;\n\n         int strLen = str.length();\n         for (int i = 0; i < strLen; i++) {\n             char ch = str.charAt(i);\n            boolean chFound = searchChars.indexOf(ch) >= 0;\n            if (i + 1 < strLen && Character.isHighSurrogate(ch)) {\n                char ch2 = str.charAt(i + 1);\n                if (chFound && searchChars.indexOf(ch2) < 0) {\n                     return i;\n                }\n            } else {\n                if (!chFound) {\n                    return i;\n                }\n             }\n         }\n         return INDEX_NOT_FOUND;\n\n             return true;\n         }\n         int csLen = cs.length();\n        int csLast = csLen - 1;\n         int searchLen = searchChars.length;\n        int searchLast = searchLen - 1;\n         for (int i = 0; i < csLen; i++) {\n             char ch = cs.charAt(i);\n             for (int j = 0; j < searchLen; j++) {\n                 if (searchChars[j] == ch) {\n                    if (Character.isHighSurrogate(ch)) {\n                        if (j == searchLast) {\n                                                         return false;\n                        }\n                        if (i < csLast && searchChars[j + 1] == cs.charAt(i + 1)) {\n                            return false;\n                        }\n                    } else {\n                                                  return false;\n                    }\n                 }\n             }\n         }\n"},{"ids":188,"error":"junit.framework.ComparisonFailure","source":"/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java","code":"@@ -60,7 +60,13 @@ public int translate(CharSequence input, int index, Writer out) throws IOExcepti\n                 return 0;\n             }\n \n                 out.write(entityValue);\n             return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n         }\n         return 0;\n","solution":"@@ -60,7 +60,13 @@ public int translate(CharSequence input, int index, Writer out) throws IOExcepti\n                 return 0;\n             }\n \n          if(entityValue > 0xFFFF) {\n              char[] chrs = Character.toChars(entityValue);\n              out.write(chrs[0]);\n              out.write(chrs[1]);\n          } else {\n                 out.write(entityValue);\n          }\n             return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n         }\n         return 0;\n","CodeWithNoComments":"\n                 return 0;\n             }\n \n                 out.write(entityValue);\n             return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n         }\n         return 0;\n","SolutionWithNoComments":"\n                 return 0;\n             }\n \n            if(entityValue > 0xFFFF) {\n                char[] chrs = Character.toChars(entityValue);\n                out.write(chrs[0]);\n                out.write(chrs[1]);\n            } else {\n                 out.write(entityValue);\n            }\n             return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n         }\n         return 0;\n"},{"ids":189,"error":"java.lang.StringIndexOutOfBoundsException","source":"/src/main/java/org/apache/commons/lang3/math/NumberUtils.java","code":"@@ -476,7 +476,7 @@ public static Number createNumber(String str) throws NumberFormatException {\n         if (decPos > -1) {\n \n             if (expPos > -1) {\n              if (expPos < decPos) {\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n                 }\n                 dec = str.substring(decPos + 1, expPos);\n@@ -486,6 +486,9 @@ public static Number createNumber(String str) throws NumberFormatException {\n             mant = str.substring(0, decPos);\n         } else {\n             if (expPos > -1) {\n                 mant = str.substring(0, expPos);\n             } else {\n                 mant = str;\n","solution":"@@ -476,7 +476,7 @@ public static Number createNumber(String str) throws NumberFormatException {\n         if (decPos > -1) {\n \n             if (expPos > -1) {\n              if (expPos < decPos || expPos > str.length()) {\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n                 }\n                 dec = str.substring(decPos + 1, expPos);\n@@ -486,6 +486,9 @@ public static Number createNumber(String str) throws NumberFormatException {\n             mant = str.substring(0, decPos);\n         } else {\n             if (expPos > -1) {\n              if (expPos > str.length()) {\n                  throw new NumberFormatException(str + \" is not a valid number.\");\n              }\n                 mant = str.substring(0, expPos);\n             } else {\n                 mant = str;\n","CodeWithNoComments":"\n         if (decPos > -1) {\n \n             if (expPos > -1) {\n                if (expPos < decPos) {\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n                 }\n                 dec = str.substring(decPos + 1, expPos);\n\n             mant = str.substring(0, decPos);\n         } else {\n             if (expPos > -1) {\n                 mant = str.substring(0, expPos);\n             } else {\n                 mant = str;\n","SolutionWithNoComments":"\n         if (decPos > -1) {\n \n             if (expPos > -1) {\n                if (expPos < decPos || expPos > str.length()) {\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n                 }\n                 dec = str.substring(decPos + 1, expPos);\n\n             mant = str.substring(0, decPos);\n         } else {\n             if (expPos > -1) {\n                if (expPos > str.length()) {\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n                }\n                 mant = str.substring(0, expPos);\n             } else {\n                 mant = str;\n"},{"ids":190,"error":"junit.framework.AssertionFailedError","source":"/src/main/java/org/apache/commons/lang3/StringUtils.java","code":"@@ -1443,13 +1443,21 @@ public static boolean containsAny(CharSequence cs, char[] searchChars) {\n \t\t}\n \t\tint csLength = cs.length();\n \t\tint searchLength = searchChars.length;\n \t\tfor (int i = 0; i < csLength; i++) {\n \t\t\tchar ch = cs.charAt(i);\n \t\t\tfor (int j = 0; j < searchLength; j++) {\n \t\t\t\tif (searchChars[j] == ch) {\n \t\t\t\t\t\t// ch is a supplementary character\n \t\t\t\t\t\t// ch is in the Basic Multilingual Plane\n \t\t\t\t\t\treturn true;\n \t\t\t\t}\n \t\t\t}\n \t\t}\n","solution":"@@ -1443,13 +1443,21 @@ public static boolean containsAny(CharSequence cs, char[] searchChars) {\n \t\t}\n \t\tint csLength = cs.length();\n \t\tint searchLength = searchChars.length;\n\t\tint csLastIndex = csLength - 1;\n\t\tint searchLastIndex = searchLength - 1;\n \t\tfor (int i = 0; i < csLength; i++) {\n \t\t\tchar ch = cs.charAt(i);\n \t\t\tfor (int j = 0; j < searchLength; j++) {\n \t\t\t\tif (searchChars[j] == ch) {\n\t\t\t\t\tif (i < csLastIndex && j < searchLastIndex && ch >= Character.MIN_HIGH_SURROGATE && ch <= Character.MAX_HIGH_SURROGATE) {\n \t\t\t\t\t\t// ch is a supplementary character\n\t\t\t\t\t\tif (searchChars[j + 1] == cs.charAt(i + 1)) {\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n \t\t\t\t\t\t// ch is in the Basic Multilingual Plane\n \t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n \t\t\t\t}\n \t\t\t}\n \t\t}\n","CodeWithNoComments":"\n \t\t}\n \t\tint csLength = cs.length();\n \t\tint searchLength = searchChars.length;\n \t\tfor (int i = 0; i < csLength; i++) {\n \t\t\tchar ch = cs.charAt(i);\n \t\t\tfor (int j = 0; j < searchLength; j++) {\n \t\t\t\tif (searchChars[j] == ch) {\n \t\t\t\t\t\t \t\t\t\t\t\treturn true;\n \t\t\t\t}\n \t\t\t}\n \t\t}\n","SolutionWithNoComments":"\n \t\t}\n \t\tint csLength = cs.length();\n \t\tint searchLength = searchChars.length;\n\t\tint csLastIndex = csLength - 1;\n\t\tint searchLastIndex = searchLength - 1;\n \t\tfor (int i = 0; i < csLength; i++) {\n \t\t\tchar ch = cs.charAt(i);\n \t\t\tfor (int j = 0; j < searchLength; j++) {\n \t\t\t\tif (searchChars[j] == ch) {\n\t\t\t\t\tif (i < csLastIndex && j < searchLastIndex && ch >= Character.MIN_HIGH_SURROGATE && ch <= Character.MAX_HIGH_SURROGATE) {\n\t\t\t\t\t\t\t\t\t\t\t\tif (searchChars[j + 1] == cs.charAt(i + 1)) {\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n \t\t\t\t\t\t \t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n \t\t\t\t}\n \t\t\t}\n \t\t}\n"},{"ids":191,"error":"junit.framework.AssertionFailedError","source":"/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java","code":"@@ -101,12 +101,7 @@\n      * \n      * @since 2.3\n      */\n  private static final ThreadLocal<Set<IDKey>> REGISTRY = new ThreadLocal<Set<IDKey>>() {\n      @Override\n      protected Set<IDKey> initialValue() {\n          return new HashSet<IDKey>();\n      }\n  };\n \n     /*\n      * N.B. we cannot store the actual objects in a HashSet, as that would use the very hashCode()\n@@ -149,7 +144,8 @@\n      * @since 2.3\n      */\n     static boolean isRegistered(Object value) {\n      return getRegistry().contains(new IDKey(value));\n     }\n \n     /**\n@@ -519,6 +515,11 @@ public static int reflectionHashCode(Object object, String[] excludeFields) {\n      *            The object to register.\n      */\n     static void register(Object value) {\n         getRegistry().add(new IDKey(value));\n     }\n \n@@ -535,7 +536,15 @@ static void register(Object value) {\n      * @since 2.3\n      */\n     static void unregister(Object value) {\n      getRegistry().remove(new IDKey(value));\n     }\n \n     /**\n","solution":"@@ -101,12 +101,7 @@\n      * \n      * @since 2.3\n      */\n  private static final ThreadLocal<Set<IDKey>> REGISTRY = new ThreadLocal<Set<IDKey>>();\n \n     /*\n      * N.B. we cannot store the actual objects in a HashSet, as that would use the very hashCode()\n@@ -149,7 +144,8 @@\n      * @since 2.3\n      */\n     static boolean isRegistered(Object value) {\n      Set<IDKey> registry = getRegistry();\n      return registry != null && registry.contains(new IDKey(value));\n     }\n \n     /**\n@@ -519,6 +515,11 @@ public static int reflectionHashCode(Object object, String[] excludeFields) {\n      *            The object to register.\n      */\n     static void register(Object value) {\n      synchronized (HashCodeBuilder.class) {\n          if (getRegistry() == null) {\n              REGISTRY.set(new HashSet<IDKey>());\n          }\n      }\n         getRegistry().add(new IDKey(value));\n     }\n \n@@ -535,7 +536,15 @@ static void register(Object value) {\n      * @since 2.3\n      */\n     static void unregister(Object value) {\n      Set<IDKey> s = getRegistry();\n      if (s != null) {\n          s.remove(new IDKey(value));\n          synchronized (HashCodeBuilder.class) {\n              if (s.isEmpty()) {\n                  REGISTRY.remove();\n              }\n          }\n      }\n     }\n \n     /**\n","CodeWithNoComments":"\n    private static final ThreadLocal<Set<IDKey>> REGISTRY = new ThreadLocal<Set<IDKey>>() {\n        @Override\n        protected Set<IDKey> initialValue() {\n            return new HashSet<IDKey>();\n        }\n    };\n \n\n     static boolean isRegistered(Object value) {\n        return getRegistry().contains(new IDKey(value));\n     }\n \n\n     static void register(Object value) {\n         getRegistry().add(new IDKey(value));\n     }\n \n\n     static void unregister(Object value) {\n        getRegistry().remove(new IDKey(value));\n     }\n \n","SolutionWithNoComments":"\n    private static final ThreadLocal<Set<IDKey>> REGISTRY = new ThreadLocal<Set<IDKey>>();\n \n\n     static boolean isRegistered(Object value) {\n        Set<IDKey> registry = getRegistry();\n        return registry != null && registry.contains(new IDKey(value));\n     }\n \n\n     static void register(Object value) {\n        synchronized (HashCodeBuilder.class) {\n            if (getRegistry() == null) {\n                REGISTRY.set(new HashSet<IDKey>());\n            }\n        }\n         getRegistry().add(new IDKey(value));\n     }\n \n\n     static void unregister(Object value) {\n        Set<IDKey> s = getRegistry();\n        if (s != null) {\n            s.remove(new IDKey(value));\n            synchronized (HashCodeBuilder.class) {\n                if (s.isEmpty()) {\n                    REGISTRY.remove();\n                }\n            }\n        }\n     }\n \n"},{"ids":192,"error":"java.lang.NullPointerException","source":"/src/main/java/org/apache/commons/lang3/ClassUtils.java","code":"@@ -907,7 +907,7 @@ private static String toCanonicalName(String className) {\n         }\n         Class<?>[] classes = new Class[array.length];\n         for (int i = 0; i < array.length; i++) {\n          classes[i] = array[i].getClass();\n         }\n         return classes;\n     }\n","solution":"@@ -907,7 +907,7 @@ private static String toCanonicalName(String className) {\n         }\n         Class<?>[] classes = new Class[array.length];\n         for (int i = 0; i < array.length; i++) {\n          classes[i] = array[i] == null ? null : array[i].getClass();\n         }\n         return classes;\n     }\n","CodeWithNoComments":"\n         }\n         Class<?>[] classes = new Class[array.length];\n         for (int i = 0; i < array.length; i++) {\n            classes[i] = array[i].getClass();\n         }\n         return classes;\n     }\n","SolutionWithNoComments":"\n         }\n         Class<?>[] classes = new Class[array.length];\n         for (int i = 0; i < array.length; i++) {\n            classes[i] = array[i] == null ? null : array[i].getClass();\n         }\n         return classes;\n     }\n"},{"ids":193,"error":"junit.framework.AssertionFailedError","source":"/src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java","code":"@@ -145,7 +145,7 @@\n      * @return Set the registry of objects being traversed\n      */\n     static Map<Object, Object> getRegistry() {\n      return REGISTRY.get() != null ? REGISTRY.get() : Collections.<Object, Object>emptyMap();\n     }\n \n     /**\n@@ -161,7 +161,7 @@\n      */\n     static boolean isRegistered(Object value) {\n         Map<Object, Object> m = getRegistry();\n      return m.containsKey(value);\n     }\n \n     /**\n","solution":"@@ -145,7 +145,7 @@\n      * @return Set the registry of objects being traversed\n      */\n     static Map<Object, Object> getRegistry() {\n      return REGISTRY.get();\n     }\n \n     /**\n@@ -161,7 +161,7 @@\n      */\n     static boolean isRegistered(Object value) {\n         Map<Object, Object> m = getRegistry();\n      return m != null && m.containsKey(value);\n     }\n \n     /**\n","CodeWithNoComments":"\n    \n     static Map<Object, Object> getRegistry() {\n        return REGISTRY.get() != null ? REGISTRY.get() : Collections.<Object, Object>emptyMap();\n     }\n \n\n     static boolean isRegistered(Object value) {\n         Map<Object, Object> m = getRegistry();\n        return m.containsKey(value);\n     }\n \n","SolutionWithNoComments":"\n     static Map<Object, Object> getRegistry() {\n        return REGISTRY.get();\n     }\n \n\n     static boolean isRegistered(Object value) {\n         Map<Object, Object> m = getRegistry();\n        return m != null && m.containsKey(value);\n     }\n \n"},{"ids":194,"error":"java.lang.ArrayStoreException","source":"/src/java/org/apache/commons/lang3/ArrayUtils.java","code":"@@ -2959,8 +2959,16 @@ public static boolean isEmpty(boolean[] array) {\n         final Class<?> type1 = array1.getClass().getComponentType();\n         T[] joinedArray = (T[]) Array.newInstance(type1, array1.length + array2.length);\n         System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n             System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n             // Check if problem is incompatible types\n         return joinedArray;\n     }\n \n","solution":"@@ -2959,8 +2959,16 @@ public static boolean isEmpty(boolean[] array) {\n         final Class<?> type1 = array1.getClass().getComponentType();\n         T[] joinedArray = (T[]) Array.newInstance(type1, array1.length + array2.length);\n         System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n      try {\n             System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n      } catch (ArrayStoreException ase) {\n             // Check if problem is incompatible types\n          final Class<?> type2 = array2.getClass().getComponentType();\n          if (!type1.isAssignableFrom(type2)){\n              throw new IllegalArgumentException(\"Cannot store \"+type2.getName()+\" in an array of \"+type1.getName());\n          }\n          throw ase; // No, so rethrow original\n      }\n         return joinedArray;\n     }\n \n","CodeWithNoComments":"\n         final Class<?> type1 = array1.getClass().getComponentType();\n         T[] joinedArray = (T[]) Array.newInstance(type1, array1.length + array2.length);\n         System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n             System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n                      return joinedArray;\n     }\n \n","SolutionWithNoComments":"\n         final Class<?> type1 = array1.getClass().getComponentType();\n         T[] joinedArray = (T[]) Array.newInstance(type1, array1.length + array2.length);\n         System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n        try {\n             System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n        } catch (ArrayStoreException ase) {\n                         final Class<?> type2 = array2.getClass().getComponentType();\n            if (!type1.isAssignableFrom(type2)){\n                throw new IllegalArgumentException(\"Cannot store \"+type2.getName()+\" in an array of \"+type1.getName());\n            }\n            throw ase;         }\n         return joinedArray;\n     }\n \n"},{"ids":195,"error":"java.lang.ClassCastException","source":"/src/main/java/org/apache/commons/lang3/ArrayUtils.java","code":"@@ -3292,7 +3292,7 @@ public static boolean isEmpty(boolean[] array) {\n         } else if (element != null) {\n             type = element.getClass();\n         } else {\n          type = Object.class;\n         }\n         @SuppressWarnings(\"unchecked\") // type must be T\n         T[] newArray = (T[]) copyArrayGrow1(array, type);\n@@ -3571,7 +3571,7 @@ private static Object copyArrayGrow1(Object array, Class<?> newArrayComponentTyp\n         } else if (element != null) {\n             clss = element.getClass();\n         } else {\n          return (T[]) new Object[] { null };\n         }\n         @SuppressWarnings(\"unchecked\") // the add method creates an array of type clss, which is type T\n         final T[] newArray = (T[]) add(array, index, element, clss);\n","solution":"@@ -3292,7 +3292,7 @@ public static boolean isEmpty(boolean[] array) {\n         } else if (element != null) {\n             type = element.getClass();\n         } else {\n          throw new IllegalArgumentException(\"Arguments cannot both be null\");            \n         }\n         @SuppressWarnings(\"unchecked\") // type must be T\n         T[] newArray = (T[]) copyArrayGrow1(array, type);\n@@ -3571,7 +3571,7 @@ private static Object copyArrayGrow1(Object array, Class<?> newArrayComponentTyp\n         } else if (element != null) {\n             clss = element.getClass();\n         } else {\n          throw new IllegalArgumentException(\"Array and element cannot both be null\");            \n         }\n         @SuppressWarnings(\"unchecked\") // the add method creates an array of type clss, which is type T\n         final T[] newArray = (T[]) add(array, index, element, clss);\n","CodeWithNoComments":"\n         } else if (element != null) {\n             type = element.getClass();\n         } else {\n            type = Object.class;\n         }\n         @SuppressWarnings(\"unchecked\")          T[] newArray = (T[]) copyArrayGrow1(array, type);\n\n         } else if (element != null) {\n             clss = element.getClass();\n         } else {\n            return (T[]) new Object[] { null };\n         }\n         @SuppressWarnings(\"unchecked\")          final T[] newArray = (T[]) add(array, index, element, clss);\n","SolutionWithNoComments":"\n         } else if (element != null) {\n             type = element.getClass();\n         } else {\n            throw new IllegalArgumentException(\"Arguments cannot both be null\");            \n         }\n         @SuppressWarnings(\"unchecked\")          T[] newArray = (T[]) copyArrayGrow1(array, type);\n\n         } else if (element != null) {\n             clss = element.getClass();\n         } else {\n            throw new IllegalArgumentException(\"Array and element cannot both be null\");            \n         }\n         @SuppressWarnings(\"unchecked\")          final T[] newArray = (T[]) add(array, index, element, clss);\n"},{"ids":196,"error":"junit.framework.ComparisonFailure","source":"/src/java/org/apache/commons/lang3/time/FastDateFormat.java","code":"@@ -869,6 +869,7 @@ public StringBuffer format(Date date, StringBuffer buf) {\n      */\n     public StringBuffer format(Calendar calendar, StringBuffer buf) {\n         if (mTimeZoneForced) {\n             calendar = (Calendar) calendar.clone();\n             calendar.setTimeZone(mTimeZone);\n         }\n","solution":"@@ -869,6 +869,7 @@ public StringBuffer format(Date date, StringBuffer buf) {\n      */\n     public StringBuffer format(Calendar calendar, StringBuffer buf) {\n         if (mTimeZoneForced) {\n          calendar.getTime(); /// LANG-538\n             calendar = (Calendar) calendar.clone();\n             calendar.setTimeZone(mTimeZone);\n         }\n","CodeWithNoComments":"\n      \n     public StringBuffer format(Calendar calendar, StringBuffer buf) {\n         if (mTimeZoneForced) {\n             calendar = (Calendar) calendar.clone();\n             calendar.setTimeZone(mTimeZone);\n         }\n","SolutionWithNoComments":"\n      \n     public StringBuffer format(Calendar calendar, StringBuffer buf) {\n         if (mTimeZoneForced) {\n            calendar.getTime();              calendar = (Calendar) calendar.clone();\n             calendar.setTimeZone(mTimeZone);\n         }\n"},{"ids":197,"error":"junit.framework.ComparisonFailure","source":"/src/java/org/apache/commons/lang/Entities.java","code":"@@ -825,10 +825,15 @@ public String escape(String str) {\n     public void escape(Writer writer, String str) throws IOException {\n         int len = str.length();\n         for (int i = 0; i < len; i++) {\n          char c = str.charAt(i);\n             String entityName = this.entityName(c);\n             if (entityName == null) {\n              if (c > 0x7F) {\n                     writer.write(\"&#\");\n                     writer.write(Integer.toString(c, 10));\n                     writer.write(';');\n","solution":"@@ -825,10 +825,15 @@ public String escape(String str) {\n     public void escape(Writer writer, String str) throws IOException {\n         int len = str.length();\n         for (int i = 0; i < len; i++) {\n          int c = Character.codePointAt(str, i); \n             String entityName = this.entityName(c);\n             if (entityName == null) {\n              if (c >= 0x010000 && i < len - 1) {\n                  writer.write(\"&#\");\n                  writer.write(Integer.toString(c, 10));\n                  writer.write(';');\n                  i++;\n              } else if (c > 0x7F) { \n                     writer.write(\"&#\");\n                     writer.write(Integer.toString(c, 10));\n                     writer.write(';');\n","CodeWithNoComments":"\n     public void escape(Writer writer, String str) throws IOException {\n         int len = str.length();\n         for (int i = 0; i < len; i++) {\n            char c = str.charAt(i);\n             String entityName = this.entityName(c);\n             if (entityName == null) {\n                if (c > 0x7F) {\n                     writer.write(\"&#\");\n                     writer.write(Integer.toString(c, 10));\n                     writer.write(';');\n","SolutionWithNoComments":"\n     public void escape(Writer writer, String str) throws IOException {\n         int len = str.length();\n         for (int i = 0; i < len; i++) {\n            int c = Character.codePointAt(str, i); \n             String entityName = this.entityName(c);\n             if (entityName == null) {\n                if (c >= 0x010000 && i < len - 1) {\n                    writer.write(\"&#\");\n                    writer.write(Integer.toString(c, 10));\n                    writer.write(';');\n                    i++;\n                } else if (c > 0x7F) { \n                     writer.write(\"&#\");\n                     writer.write(Integer.toString(c, 10));\n                     writer.write(';');\n"},{"ids":198,"error":"java.lang.OutOfMemoryError","source":"/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java","code":"@@ -419,6 +419,7 @@ private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n         int start = pos.getIndex();\n         char[] c = pattern.toCharArray();\n         if (escapingOn && c[start] == QUOTE) {\n             return appendTo == null ? null : appendTo.append(QUOTE);\n         }\n         int lastHold = start;\n","solution":"@@ -419,6 +419,7 @@ private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n         int start = pos.getIndex();\n         char[] c = pattern.toCharArray();\n         if (escapingOn && c[start] == QUOTE) {\n          next(pos);\n             return appendTo == null ? null : appendTo.append(QUOTE);\n         }\n         int lastHold = start;\n","CodeWithNoComments":"\n         int start = pos.getIndex();\n         char[] c = pattern.toCharArray();\n         if (escapingOn && c[start] == QUOTE) {\n             return appendTo == null ? null : appendTo.append(QUOTE);\n         }\n         int lastHold = start;\n","SolutionWithNoComments":"\n         int start = pos.getIndex();\n         char[] c = pattern.toCharArray();\n         if (escapingOn && c[start] == QUOTE) {\n            next(pos);\n             return appendTo == null ? null : appendTo.append(QUOTE);\n         }\n         int lastHold = start;\n"},{"ids":199,"error":"java.lang.NumberFormatException","source":"/src/java/org/apache/commons/lang3/math/NumberUtils.java","code":"@@ -488,7 +488,7 @@ public static Number createNumber(String str) throws NumberFormatException {\n             }\n             dec = null;\n         }\n      if (!Character.isDigit(lastChar)) {\n             if (expPos > -1 && expPos < str.length() - 1) {\n                 exp = str.substring(expPos + 1, str.length() - 1);\n             } else {\n@@ -1385,6 +1385,14 @@ public static boolean isNumber(String str) {\n                 // can't have an E at the last byte\n                 return false;\n             }\n             if (!allowSigns\n                 && (chars[i] == 'd'\n                     || chars[i] == 'D'\n","solution":"@@ -488,7 +488,7 @@ public static Number createNumber(String str) throws NumberFormatException {\n             }\n             dec = null;\n         }\n      if (!Character.isDigit(lastChar) && lastChar != '.') {\n             if (expPos > -1 && expPos < str.length() - 1) {\n                 exp = str.substring(expPos + 1, str.length() - 1);\n             } else {\n@@ -1385,6 +1385,14 @@ public static boolean isNumber(String str) {\n                 // can't have an E at the last byte\n                 return false;\n             }\n          if (chars[i] == '.') {\n              if (hasDecPoint || hasExp) {\n                  // two decimal points or dec in exponent\n                  return false;\n              }\n              // single trailing decimal point after non-exponent is ok\n              return foundDigit;\n          }\n             if (!allowSigns\n                 && (chars[i] == 'd'\n                     || chars[i] == 'D'\n","CodeWithNoComments":"\n             }\n             dec = null;\n         }\n        if (!Character.isDigit(lastChar)) {\n             if (expPos > -1 && expPos < str.length() - 1) {\n                 exp = str.substring(expPos + 1, str.length() - 1);\n             } else {\n\n                                  return false;\n             }\n             if (!allowSigns\n                 && (chars[i] == 'd'\n                     || chars[i] == 'D'\n","SolutionWithNoComments":"\n             }\n             dec = null;\n         }\n        if (!Character.isDigit(lastChar) && lastChar != '.') {\n             if (expPos > -1 && expPos < str.length() - 1) {\n                 exp = str.substring(expPos + 1, str.length() - 1);\n             } else {\n\n                                  return false;\n             }\n            if (chars[i] == '.') {\n                if (hasDecPoint || hasExp) {\n                                        return false;\n                }\n                                return foundDigit;\n            }\n             if (!allowSigns\n                 && (chars[i] == 'd'\n                     || chars[i] == 'D'\n"},{"ids":200,"error":"java.lang.NullPointerException","source":"/src/java/org/apache/commons/lang3/StringUtils.java","code":"@@ -3673,6 +3673,9 @@ private static String replaceEach(String text, String[] searchList, String[] rep\n \n         // count the replacement text elements that are larger than their corresponding text being replaced\n         for (int i = 0; i < searchList.length; i++) {\n             int greater = replacementList[i].length() - searchList[i].length();\n             if (greater > 0) {\n                 increase += 3 * greater; // assume 3 matches\n","solution":"@@ -3673,6 +3673,9 @@ private static String replaceEach(String text, String[] searchList, String[] rep\n \n         // count the replacement text elements that are larger than their corresponding text being replaced\n         for (int i = 0; i < searchList.length; i++) {\n          if (searchList[i] == null || replacementList[i] == null) {\n              continue;\n          }\n             int greater = replacementList[i].length() - searchList[i].length();\n             if (greater > 0) {\n                 increase += 3 * greater; // assume 3 matches\n","CodeWithNoComments":"\n \n                  for (int i = 0; i < searchList.length; i++) {\n             int greater = replacementList[i].length() - searchList[i].length();\n             if (greater > 0) {\n                 increase += 3 * greater; ","SolutionWithNoComments":"\n \n                  for (int i = 0; i < searchList.length; i++) {\n            if (searchList[i] == null || replacementList[i] == null) {\n                continue;\n            }\n             int greater = replacementList[i].length() - searchList[i].length();\n             if (greater > 0) {\n                 increase += 3 * greater; "},{"ids":201,"error":"junit.framework.ComparisonFailure","source":"/src/java/org/apache/commons/lang/ClassUtils.java","code":"@@ -188,10 +188,23 @@ public static String getShortClassName(String className) {\n             return StringUtils.EMPTY;\n         }\n \n \n         // Handle array encoding\n             // Strip Object type encoding\n \n \n         int lastDotIdx = className.lastIndexOf(PACKAGE_SEPARATOR_CHAR);\n         int innerIdx = className.indexOf(\n@@ -200,7 +213,7 @@ public static String getShortClassName(String className) {\n         if (innerIdx != -1) {\n             out = out.replace(INNER_CLASS_SEPARATOR_CHAR, PACKAGE_SEPARATOR_CHAR);\n         }\n      return out;\n     }\n \n     // Package name\n@@ -242,12 +255,18 @@ public static String getPackageName(Class<?> cls) {\n      * @return the package name or an empty string\n      */\n     public static String getPackageName(String className) {\n      if (className == null) {\n             return StringUtils.EMPTY;\n         }\n \n         // Strip array encoding\n         // Strip Object type encoding\n \n         int i = className.lastIndexOf(PACKAGE_SEPARATOR_CHAR);\n         if (i == -1) {\n","solution":"@@ -188,10 +188,23 @@ public static String getShortClassName(String className) {\n             return StringUtils.EMPTY;\n         }\n \n      StringBuffer arrayPrefix = new StringBuffer();\n \n         // Handle array encoding\n      if (className.startsWith(\"[\")) {\n          while (className.charAt(0) == '[') {\n              className = className.substring(1);\n              arrayPrefix.append(\"[]\");\n          }\n             // Strip Object type encoding\n          if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {\n              className = className.substring(1, className.length() - 1);\n          }\n      }\n \n      if (reverseAbbreviationMap.containsKey(className)) {\n          className = reverseAbbreviationMap.get(className);\n      }\n \n         int lastDotIdx = className.lastIndexOf(PACKAGE_SEPARATOR_CHAR);\n         int innerIdx = className.indexOf(\n@@ -200,7 +213,7 @@ public static String getShortClassName(String className) {\n         if (innerIdx != -1) {\n             out = out.replace(INNER_CLASS_SEPARATOR_CHAR, PACKAGE_SEPARATOR_CHAR);\n         }\n      return out + arrayPrefix;\n     }\n \n     // Package name\n@@ -242,12 +255,18 @@ public static String getPackageName(Class<?> cls) {\n      * @return the package name or an empty string\n      */\n     public static String getPackageName(String className) {\n      if (className == null || className.length() == 0) {\n             return StringUtils.EMPTY;\n         }\n \n         // Strip array encoding\n      while (className.charAt(0) == '[') {\n          className = className.substring(1);\n      }\n         // Strip Object type encoding\n      if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {\n          className = className.substring(1);\n      }\n \n         int i = className.lastIndexOf(PACKAGE_SEPARATOR_CHAR);\n         if (i == -1) {\n","CodeWithNoComments":"\n             return StringUtils.EMPTY;\n         }\n \n \n                       \n \n         int lastDotIdx = className.lastIndexOf(PACKAGE_SEPARATOR_CHAR);\n         int innerIdx = className.indexOf(\n\n         if (innerIdx != -1) {\n             out = out.replace(INNER_CLASS_SEPARATOR_CHAR, PACKAGE_SEPARATOR_CHAR);\n         }\n        return out;\n     }\n \n     \n        if (className == null) {\n             return StringUtils.EMPTY;\n         }\n \n                   \n         int i = className.lastIndexOf(PACKAGE_SEPARATOR_CHAR);\n         if (i == -1) {\n","SolutionWithNoComments":"\n             return StringUtils.EMPTY;\n         }\n \n        StringBuffer arrayPrefix = new StringBuffer();\n \n                 if (className.startsWith(\"[\")) {\n            while (className.charAt(0) == '[') {\n                className = className.substring(1);\n                arrayPrefix.append(\"[]\");\n            }\n                         if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {\n                className = className.substring(1, className.length() - 1);\n            }\n        }\n \n        if (reverseAbbreviationMap.containsKey(className)) {\n            className = reverseAbbreviationMap.get(className);\n        }\n \n         int lastDotIdx = className.lastIndexOf(PACKAGE_SEPARATOR_CHAR);\n         int innerIdx = className.indexOf(\n\n         if (innerIdx != -1) {\n             out = out.replace(INNER_CLASS_SEPARATOR_CHAR, PACKAGE_SEPARATOR_CHAR);\n         }\n        return out + arrayPrefix;\n     }\n \n     \n    \n     public static String getPackageName(String className) {\n        if (className == null || className.length() == 0) {\n             return StringUtils.EMPTY;\n         }\n \n                 while (className.charAt(0) == '[') {\n            className = className.substring(1);\n        }\n                 if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {\n            className = className.substring(1);\n        }\n \n         int i = className.lastIndexOf(PACKAGE_SEPARATOR_CHAR);\n         if (i == -1) {\n"},{"ids":202,"error":"junit.framework.AssertionFailedError","source":"/src/java/org/apache/commons/lang/StringUtils.java","code":"@@ -1045,7 +1045,14 @@ public static boolean containsIgnoreCase(String str, String searchStr) {\n         if (str == null || searchStr == null) {\n             return false;\n         }\n      return contains(str.toUpperCase(), searchStr.toUpperCase());\n     }\n \n     // IndexOfAny chars\n","solution":"@@ -1045,7 +1045,14 @@ public static boolean containsIgnoreCase(String str, String searchStr) {\n         if (str == null || searchStr == null) {\n             return false;\n         }\n      int len = searchStr.length();\n      int max = str.length() - len;\n      for (int i = 0; i <= max; i++) {\n          if (str.regionMatches(true, i, searchStr, 0, len)) {\n              return true;\n          }\n      }\n      return false;\n     }\n \n     // IndexOfAny chars\n","CodeWithNoComments":"\n         if (str == null || searchStr == null) {\n             return false;\n         }\n        return contains(str.toUpperCase(), searchStr.toUpperCase());\n     }\n \n     ","SolutionWithNoComments":"\n         if (str == null || searchStr == null) {\n             return false;\n         }\n        int len = searchStr.length();\n        int max = str.length() - len;\n        for (int i = 0; i <= max; i++) {\n            if (str.regionMatches(true, i, searchStr, 0, len)) {\n                return true;\n            }\n        }\n        return false;\n     }\n \n     "},{"ids":203,"error":"java.lang.StringIndexOutOfBoundsException","source":"/src/java/org/apache/commons/lang/NumberUtils.java","code":"@@ -142,6 +142,9 @@ public static Number createNumber(String val) throws NumberFormatException {\n         if (val.length() == 0) {\n             throw new NumberFormatException(\"\\\"\\\" is not a valid number.\");\n         }\n         if (val.startsWith(\"--\")) {\n             // this is protection for poorness in java.lang.BigDecimal.\n             // it accepts this as a legal value, but it does not appear \n","solution":"@@ -142,6 +142,9 @@ public static Number createNumber(String val) throws NumberFormatException {\n         if (val.length() == 0) {\n             throw new NumberFormatException(\"\\\"\\\" is not a valid number.\");\n         }\n      if (val.length() == 1 && !Character.isDigit(val.charAt(0))) {\n          throw new NumberFormatException(val + \" is not a valid number.\");\n      }\n         if (val.startsWith(\"--\")) {\n             // this is protection for poorness in java.lang.BigDecimal.\n             // it accepts this as a legal value, but it does not appear \n","CodeWithNoComments":"\n         if (val.length() == 0) {\n             throw new NumberFormatException(\"\\\"\\\" is not a valid number.\");\n         }\n         if (val.startsWith(\"--\")) {\n                          ","SolutionWithNoComments":"\n         if (val.length() == 0) {\n             throw new NumberFormatException(\"\\\"\\\" is not a valid number.\");\n         }\n        if (val.length() == 1 && !Character.isDigit(val.charAt(0))) {\n            throw new NumberFormatException(val + \" is not a valid number.\");\n        }\n         if (val.startsWith(\"--\")) {\n                          "},{"ids":204,"error":"java.lang.StringIndexOutOfBoundsException","source":"/src/java/org/apache/commons/lang/WordUtils.java","code":"@@ -613,6 +613,9 @@ public static String abbreviate(String str, int lower, int upper, String appendT\n \n         // if the lower value is greater than the length of the string,\n         // set to the length of the string\n         // if the upper value is -1 (i.e. no limit) or is greater\n         // than the length of the string, set to the length of the string\n         if (upper == -1 || upper > str.length()) {\n","solution":"@@ -613,6 +613,9 @@ public static String abbreviate(String str, int lower, int upper, String appendT\n \n         // if the lower value is greater than the length of the string,\n         // set to the length of the string\n      if (lower > str.length()) {\n          lower = str.length();    \n      }\n         // if the upper value is -1 (i.e. no limit) or is greater\n         // than the length of the string, set to the length of the string\n         if (upper == -1 || upper > str.length()) {\n","CodeWithNoComments":"\n \n                                             if (upper == -1 || upper > str.length()) {\n","SolutionWithNoComments":"\n \n                          if (lower > str.length()) {\n            lower = str.length();    \n        }\n                           if (upper == -1 || upper > str.length()) {\n"},{"ids":205,"error":"java.lang.NullPointerException","source":"/src/java/org/apache/commons/lang/text/StrBuilder.java","code":"@@ -1183,6 +1183,9 @@ public StrBuilder appendFixedWidthPadLeft(Object obj, int width, char padChar) {\n         if (width > 0) {\n             ensureCapacity(size + width);\n             String str = (obj == null ? getNullText() : obj.toString());\n             int strLen = str.length();\n             if (strLen >= width) {\n                 str.getChars(strLen - width, strLen, buffer, size);\n@@ -1227,6 +1230,9 @@ public StrBuilder appendFixedWidthPadRight(Object obj, int width, char padChar)\n         if (width > 0) {\n             ensureCapacity(size + width);\n             String str = (obj == null ? getNullText() : obj.toString());\n             int strLen = str.length();\n             if (strLen >= width) {\n                 str.getChars(0, width, buffer, size);\n","solution":"@@ -1183,6 +1183,9 @@ public StrBuilder appendFixedWidthPadLeft(Object obj, int width, char padChar) {\n         if (width > 0) {\n             ensureCapacity(size + width);\n             String str = (obj == null ? getNullText() : obj.toString());\n          if (str == null) {\n              str = \"\";\n          }\n             int strLen = str.length();\n             if (strLen >= width) {\n                 str.getChars(strLen - width, strLen, buffer, size);\n@@ -1227,6 +1230,9 @@ public StrBuilder appendFixedWidthPadRight(Object obj, int width, char padChar)\n         if (width > 0) {\n             ensureCapacity(size + width);\n             String str = (obj == null ? getNullText() : obj.toString());\n          if (str == null) {\n              str = \"\";\n          }\n             int strLen = str.length();\n             if (strLen >= width) {\n                 str.getChars(0, width, buffer, size);\n","CodeWithNoComments":"\n         if (width > 0) {\n             ensureCapacity(size + width);\n             String str = (obj == null ? getNullText() : obj.toString());\n             int strLen = str.length();\n             if (strLen >= width) {\n                 str.getChars(strLen - width, strLen, buffer, size);\n\n         if (width > 0) {\n             ensureCapacity(size + width);\n             String str = (obj == null ? getNullText() : obj.toString());\n             int strLen = str.length();\n             if (strLen >= width) {\n                 str.getChars(0, width, buffer, size);\n","SolutionWithNoComments":"\n         if (width > 0) {\n             ensureCapacity(size + width);\n             String str = (obj == null ? getNullText() : obj.toString());\n            if (str == null) {\n                str = \"\";\n            }\n             int strLen = str.length();\n             if (strLen >= width) {\n                 str.getChars(strLen - width, strLen, buffer, size);\n\n         if (width > 0) {\n             ensureCapacity(size + width);\n             String str = (obj == null ? getNullText() : obj.toString());\n            if (str == null) {\n                str = \"\";\n            }\n             int strLen = str.length();\n             if (strLen >= width) {\n                 str.getChars(0, width, buffer, size);\n"},{"ids":206,"error":"junit.framework.AssertionFailedError","source":"/src/java/org/apache/commons/lang/builder/EqualsBuilder.java","code":"@@ -377,8 +377,12 @@ public EqualsBuilder append(Object lhs, Object rhs) {\n         }\n         Class lhsClass = lhs.getClass();\n         if (!lhsClass.isArray()) {\n                 // The simple case, not an array, just test the element\n                 isEquals = lhs.equals(rhs);\n         } else if (lhs.getClass() != rhs.getClass()) {\n             // Here when we compare different dimensions, for example: a boolean[][] to a boolean[] \n             this.setEquals(false);\n","solution":"@@ -377,8 +377,12 @@ public EqualsBuilder append(Object lhs, Object rhs) {\n         }\n         Class lhsClass = lhs.getClass();\n         if (!lhsClass.isArray()) {\n          if (lhs instanceof java.math.BigDecimal) {\n              isEquals = (((java.math.BigDecimal)lhs).compareTo(rhs) == 0);\n          } else {\n                 // The simple case, not an array, just test the element\n                 isEquals = lhs.equals(rhs);\n          }\n         } else if (lhs.getClass() != rhs.getClass()) {\n             // Here when we compare different dimensions, for example: a boolean[][] to a boolean[] \n             this.setEquals(false);\n","CodeWithNoComments":"\n         }\n         Class lhsClass = lhs.getClass();\n         if (!lhsClass.isArray()) {\n                                  isEquals = lhs.equals(rhs);\n         } else if (lhs.getClass() != rhs.getClass()) {\n                          this.setEquals(false);\n","SolutionWithNoComments":"\n         }\n         Class lhsClass = lhs.getClass();\n         if (!lhsClass.isArray()) {\n            if (lhs instanceof java.math.BigDecimal) {\n                isEquals = (((java.math.BigDecimal)lhs).compareTo(rhs) == 0);\n            } else {\n                                  isEquals = lhs.equals(rhs);\n            }\n         } else if (lhs.getClass() != rhs.getClass()) {\n                          this.setEquals(false);\n"},{"ids":207,"error":"junit.framework.ComparisonFailure","source":"/src/java/org/apache/commons/lang/StringEscapeUtils.java","code":"@@ -233,6 +233,10 @@ private static void escapeJavaStyleString(Writer out, String str, boolean escape\n                         out.write('\\\\');\n                         out.write('\\\\');\n                         break;\n                     default :\n                         out.write(ch);\n                         break;\n","solution":"@@ -233,6 +233,10 @@ private static void escapeJavaStyleString(Writer out, String str, boolean escape\n                         out.write('\\\\');\n                         out.write('\\\\');\n                         break;\n                  case '/':\n                      out.write('\\\\');\n                      out.write('/');\n                      break;\n                     default :\n                         out.write(ch);\n                         break;\n","CodeWithNoComments":"\n                         out.write('\\\\');\n                         out.write('\\\\');\n                         break;\n                     default :\n                         out.write(ch);\n                         break;\n","SolutionWithNoComments":"\n                         out.write('\\\\');\n                         out.write('\\\\');\n                         break;\n                    case '/':\n                        out.write('\\\\');\n                        out.write('/');\n                        break;\n                     default :\n                         out.write(ch);\n                         break;\n"},{"ids":208,"error":"junit.framework.AssertionFailedError","source":"/src/java/org/apache/commons/lang/time/DateUtils.java","code":"@@ -640,18 +640,18 @@ private static void modify(Calendar val, int field, boolean round) {\n         int millisecs = val.get(Calendar.MILLISECOND);\n         if (!round || millisecs < 500) {\n             time = time - millisecs;\n         if (field == Calendar.SECOND) {\n             done = true;\n          }\n         }\n \n         // truncate seconds\n         int seconds = val.get(Calendar.SECOND);\n         if (!done && (!round || seconds < 30)) {\n             time = time - (seconds * 1000L);\n         if (field == Calendar.MINUTE) {\n             done = true;\n          }\n         }\n \n         // truncate minutes\n","solution":"@@ -640,18 +640,18 @@ private static void modify(Calendar val, int field, boolean round) {\n         int millisecs = val.get(Calendar.MILLISECOND);\n         if (!round || millisecs < 500) {\n             time = time - millisecs;\n      }\n         if (field == Calendar.SECOND) {\n             done = true;\n         }\n \n         // truncate seconds\n         int seconds = val.get(Calendar.SECOND);\n         if (!done && (!round || seconds < 30)) {\n             time = time - (seconds * 1000L);\n      }\n         if (field == Calendar.MINUTE) {\n             done = true;\n         }\n \n         // truncate minutes\n","CodeWithNoComments":"\n         int millisecs = val.get(Calendar.MILLISECOND);\n         if (!round || millisecs < 500) {\n             time = time - millisecs;\n         if (field == Calendar.SECOND) {\n             done = true;\n            }\n         }\n \n                  int seconds = val.get(Calendar.SECOND);\n         if (!done && (!round || seconds < 30)) {\n             time = time - (seconds * 1000L);\n         if (field == Calendar.MINUTE) {\n             done = true;\n            }\n         }\n \n         ","SolutionWithNoComments":"\n         int millisecs = val.get(Calendar.MILLISECOND);\n         if (!round || millisecs < 500) {\n             time = time - millisecs;\n        }\n         if (field == Calendar.SECOND) {\n             done = true;\n         }\n \n                  int seconds = val.get(Calendar.SECOND);\n         if (!done && (!round || seconds < 30)) {\n             time = time - (seconds * 1000L);\n        }\n         if (field == Calendar.MINUTE) {\n             done = true;\n         }\n \n         "},{"ids":209,"error":"junit.framework.ComparisonFailure","source":"/src/java/org/apache/commons/lang/StringEscapeUtils.java","code":"@@ -83,7 +83,7 @@ public StringEscapeUtils() {\n      * @return String with escaped values, <code>null<\/code> if null string input\n      */\n     public static String escapeJava(String str) {\n      return escapeJavaStyleString(str, false);\n     }\n \n     /**\n@@ -99,7 +99,7 @@ public static String escapeJava(String str) {\n      * @throws IOException if error occurs on underlying Writer\n      */\n     public static void escapeJava(Writer out, String str) throws IOException {\n      escapeJavaStyleString(out, str, false);\n     }\n \n     /**\n@@ -124,7 +124,7 @@ public static void escapeJava(Writer out, String str) throws IOException {\n      * @return String with escaped values, <code>null<\/code> if null string input\n      */\n     public static String escapeJavaScript(String str) {\n      return escapeJavaStyleString(str, true);\n     }\n \n     /**\n@@ -140,7 +140,7 @@ public static String escapeJavaScript(String str) {\n      * @throws IOException if error occurs on underlying Writer\n      **/\n     public static void escapeJavaScript(Writer out, String str) throws IOException {\n      escapeJavaStyleString(out, str, true);\n     }\n \n     /**\n@@ -151,13 +151,13 @@ public static void escapeJavaScript(Writer out, String str) throws IOException {\n      * @param escapeForwardSlash TODO\n      * @return the escaped string\n      */\n  private static String escapeJavaStyleString(String str, boolean escapeSingleQuotes) {\n         if (str == null) {\n             return null;\n         }\n         try {\n             StringWriter writer = new StringWriter(str.length() * 2);\n          escapeJavaStyleString(writer, str, escapeSingleQuotes);\n             return writer.toString();\n         } catch (IOException ioe) {\n             // this should never ever happen while writing to a StringWriter\n@@ -175,7 +175,8 @@ private static String escapeJavaStyleString(String str, boolean escapeSingleQuot\n      * @param escapeForwardSlash TODO\n      * @throws IOException if an IOException occurs\n      */\n  private static void escapeJavaStyleString(Writer out, String str, boolean escapeSingleQuote) throws IOException {\n         if (out == null) {\n             throw new IllegalArgumentException(\"The Writer must not be null\");\n         }\n@@ -241,7 +242,9 @@ private static void escapeJavaStyleString(Writer out, String str, boolean escape\n                         out.write('\\\\');\n                         break;\n                     case '/' :\n                             out.write('\\\\');\n                         out.write('/');\n                         break;\n                     default :\n","solution":"@@ -83,7 +83,7 @@ public StringEscapeUtils() {\n      * @return String with escaped values, <code>null<\/code> if null string input\n      */\n     public static String escapeJava(String str) {\n      return escapeJavaStyleString(str, false, false);\n     }\n \n     /**\n@@ -99,7 +99,7 @@ public static String escapeJava(String str) {\n      * @throws IOException if error occurs on underlying Writer\n      */\n     public static void escapeJava(Writer out, String str) throws IOException {\n      escapeJavaStyleString(out, str, false, false);\n     }\n \n     /**\n@@ -124,7 +124,7 @@ public static void escapeJava(Writer out, String str) throws IOException {\n      * @return String with escaped values, <code>null<\/code> if null string input\n      */\n     public static String escapeJavaScript(String str) {\n      return escapeJavaStyleString(str, true, true);\n     }\n \n     /**\n@@ -140,7 +140,7 @@ public static String escapeJavaScript(String str) {\n      * @throws IOException if error occurs on underlying Writer\n      **/\n     public static void escapeJavaScript(Writer out, String str) throws IOException {\n      escapeJavaStyleString(out, str, true, true);\n     }\n \n     /**\n@@ -151,13 +151,13 @@ public static void escapeJavaScript(Writer out, String str) throws IOException {\n      * @param escapeForwardSlash TODO\n      * @return the escaped string\n      */\n  private static String escapeJavaStyleString(String str, boolean escapeSingleQuotes, boolean escapeForwardSlash) {\n         if (str == null) {\n             return null;\n         }\n         try {\n             StringWriter writer = new StringWriter(str.length() * 2);\n          escapeJavaStyleString(writer, str, escapeSingleQuotes, escapeForwardSlash);\n             return writer.toString();\n         } catch (IOException ioe) {\n             // this should never ever happen while writing to a StringWriter\n@@ -175,7 +175,8 @@ private static String escapeJavaStyleString(String str, boolean escapeSingleQuot\n      * @param escapeForwardSlash TODO\n      * @throws IOException if an IOException occurs\n      */\n  private static void escapeJavaStyleString(Writer out, String str, boolean escapeSingleQuote,\n          boolean escapeForwardSlash) throws IOException {\n         if (out == null) {\n             throw new IllegalArgumentException(\"The Writer must not be null\");\n         }\n@@ -241,7 +242,9 @@ private static void escapeJavaStyleString(Writer out, String str, boolean escape\n                         out.write('\\\\');\n                         break;\n                     case '/' :\n                      if (escapeForwardSlash) {\n                             out.write('\\\\');\n                      }\n                         out.write('/');\n                         break;\n                     default :\n","CodeWithNoComments":"\n     public static String escapeJava(String str) {\n        return escapeJavaStyleString(str, false);\n     }\n \n\n     public static void escapeJava(Writer out, String str) throws IOException {\n        escapeJavaStyleString(out, str, false);\n     }\n \n\n     public static String escapeJavaScript(String str) {\n        return escapeJavaStyleString(str, true);\n     }\n \n\n     public static void escapeJavaScript(Writer out, String str) throws IOException {\n        escapeJavaStyleString(out, str, true);\n     }\n \n\n    private static String escapeJavaStyleString(String str, boolean escapeSingleQuotes) {\n         if (str == null) {\n             return null;\n         }\n         try {\n             StringWriter writer = new StringWriter(str.length() * 2);\n            escapeJavaStyleString(writer, str, escapeSingleQuotes);\n             return writer.toString();\n         } catch (IOException ioe) {\n             \n    private static void escapeJavaStyleString(Writer out, String str, boolean escapeSingleQuote) throws IOException {\n         if (out == null) {\n             throw new IllegalArgumentException(\"The Writer must not be null\");\n         }\n\n                         out.write('\\\\');\n                         break;\n                     case '/' :\n                             out.write('\\\\');\n                         out.write('/');\n                         break;\n                     default :\n","SolutionWithNoComments":"\n     public static String escapeJava(String str) {\n        return escapeJavaStyleString(str, false, false);\n     }\n \n\n     public static void escapeJava(Writer out, String str) throws IOException {\n        escapeJavaStyleString(out, str, false, false);\n     }\n \n\n     public static String escapeJavaScript(String str) {\n        return escapeJavaStyleString(str, true, true);\n     }\n \n\n     public static void escapeJavaScript(Writer out, String str) throws IOException {\n        escapeJavaStyleString(out, str, true, true);\n     }\n \n    private static String escapeJavaStyleString(String str, boolean escapeSingleQuotes, boolean escapeForwardSlash) {\n         if (str == null) {\n             return null;\n         }\n         try {\n             StringWriter writer = new StringWriter(str.length() * 2);\n            escapeJavaStyleString(writer, str, escapeSingleQuotes, escapeForwardSlash);\n             return writer.toString();\n         } catch (IOException ioe) {\n             \n    private static void escapeJavaStyleString(Writer out, String str, boolean escapeSingleQuote,\n            boolean escapeForwardSlash) throws IOException {\n         if (out == null) {\n             throw new IllegalArgumentException(\"The Writer must not be null\");\n         }\n\n                         out.write('\\\\');\n                         break;\n                     case '/' :\n                        if (escapeForwardSlash) {\n                             out.write('\\\\');\n                        }\n                         out.write('/');\n                         break;\n                     default :\n"},{"ids":210,"error":"junit.framework.AssertionFailedError","source":"/src/java/org/apache/commons/lang/time/FastDateFormat.java","code":"@@ -282,16 +282,14 @@ public static synchronized FastDateFormat getDateInstance(int style, TimeZone ti\n             key = new Pair(key, timeZone);\n         }\n \n      if (locale != null) {\n          key = new Pair(key, locale);\n         }\n \n \n         FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n         if (format == null) {\n          if (locale == null) {\n              locale = Locale.getDefault();\n          }\n             try {\n                 SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateInstance(style, locale);\n                 String pattern = formatter.toPattern();\n@@ -462,15 +460,13 @@ public static synchronized FastDateFormat getDateTimeInstance(int dateStyle, int\n         if (timeZone != null) {\n             key = new Pair(key, timeZone);\n         }\n      if (locale != null) {\n          key = new Pair(key, locale);\n         }\n \n         FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key);\n         if (format == null) {\n          if (locale == null) {\n              locale = Locale.getDefault();\n          }\n             try {\n                 SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle,\n                         locale);\n","solution":"@@ -282,16 +282,14 @@ public static synchronized FastDateFormat getDateInstance(int style, TimeZone ti\n             key = new Pair(key, timeZone);\n         }\n \n      if (locale == null) {\n          locale = Locale.getDefault();\n         }\n \n      key = new Pair(key, locale);\n \n         FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n         if (format == null) {\n             try {\n                 SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateInstance(style, locale);\n                 String pattern = formatter.toPattern();\n@@ -462,15 +460,13 @@ public static synchronized FastDateFormat getDateTimeInstance(int dateStyle, int\n         if (timeZone != null) {\n             key = new Pair(key, timeZone);\n         }\n      if (locale == null) {\n          locale = Locale.getDefault();\n         }\n      key = new Pair(key, locale);\n \n         FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key);\n         if (format == null) {\n             try {\n                 SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle,\n                         locale);\n","CodeWithNoComments":"\n             key = new Pair(key, timeZone);\n         }\n \n        if (locale != null) {\n            key = new Pair(key, locale);\n         }\n \n \n         FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n         if (format == null) {\n            if (locale == null) {\n                locale = Locale.getDefault();\n            }\n             try {\n                 SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateInstance(style, locale);\n                 String pattern = formatter.toPattern();\n\n         if (timeZone != null) {\n             key = new Pair(key, timeZone);\n         }\n        if (locale != null) {\n            key = new Pair(key, locale);\n         }\n \n         FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key);\n         if (format == null) {\n            if (locale == null) {\n                locale = Locale.getDefault();\n            }\n             try {\n                 SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle,\n                         locale);\n","SolutionWithNoComments":"\n             key = new Pair(key, timeZone);\n         }\n \n        if (locale == null) {\n            locale = Locale.getDefault();\n         }\n \n        key = new Pair(key, locale);\n \n         FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n         if (format == null) {\n             try {\n                 SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateInstance(style, locale);\n                 String pattern = formatter.toPattern();\n\n         if (timeZone != null) {\n             key = new Pair(key, timeZone);\n         }\n        if (locale == null) {\n            locale = Locale.getDefault();\n         }\n        key = new Pair(key, locale);\n \n         FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key);\n         if (format == null) {\n             try {\n                 SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle,\n                         locale);\n"},{"ids":211,"error":"java.lang.StringIndexOutOfBoundsException","source":"/src/java/org/apache/commons/lang/BooleanUtils.java","code":"@@ -679,6 +679,7 @@ public static boolean toBoolean(String str) {\n                         (str.charAt(1) == 'E' || str.charAt(1) == 'e') &&\n                         (str.charAt(2) == 'S' || str.charAt(2) == 's');\n                 }\n             }\n             case 4: {\n                 char ch = str.charAt(0);\n","solution":"@@ -679,6 +679,7 @@ public static boolean toBoolean(String str) {\n                         (str.charAt(1) == 'E' || str.charAt(1) == 'e') &&\n                         (str.charAt(2) == 'S' || str.charAt(2) == 's');\n                 }\n              return false;\n             }\n             case 4: {\n                 char ch = str.charAt(0);\n","CodeWithNoComments":"\n                         (str.charAt(1) == 'E' || str.charAt(1) == 'e') &&\n                         (str.charAt(2) == 'S' || str.charAt(2) == 's');\n                 }\n             }\n             case 4: {\n                 char ch = str.charAt(0);\n","SolutionWithNoComments":"\n                         (str.charAt(1) == 'E' || str.charAt(1) == 'e') &&\n                         (str.charAt(2) == 'S' || str.charAt(2) == 's');\n                 }\n                return false;\n             }\n             case 4: {\n                 char ch = str.charAt(0);\n"},{"ids":212,"error":"junit.framework.AssertionFailedError","source":"/src/java/org/apache/commons/lang/math/Fraction.java","code":"@@ -463,6 +463,9 @@ public double doubleValue() {\n      * @return a new reduced fraction instance, or this if no simplification possible\n      */\n     public Fraction reduce() {\n         int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\n         if (gcd == 1) {\n             return this;\n","solution":"@@ -463,6 +463,9 @@ public double doubleValue() {\n      * @return a new reduced fraction instance, or this if no simplification possible\n      */\n     public Fraction reduce() {\n      if (numerator == 0) {\n          return equals(ZERO) ? this : ZERO;\n      }\n         int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\n         if (gcd == 1) {\n             return this;\n","CodeWithNoComments":"\n     public Fraction reduce() {\n         int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\n         if (gcd == 1) {\n             return this;\n","SolutionWithNoComments":"\n     public Fraction reduce() {\n        if (numerator == 0) {\n            return equals(ZERO) ? this : ZERO;\n        }\n         int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\n         if (gcd == 1) {\n             return this;\n"},{"ids":213,"error":"java.lang.IllegalArgumentException","source":"/src/java/org/apache/commons/lang/LocaleUtils.java","code":"@@ -111,6 +111,9 @@ public static Locale toLocale(String str) {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n             }\n             char ch3 = str.charAt(3);\n             char ch4 = str.charAt(4);\n             if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n","solution":"@@ -111,6 +111,9 @@ public static Locale toLocale(String str) {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n             }\n             char ch3 = str.charAt(3);\n          if (ch3 == '_') {\n              return new Locale(str.substring(0, 2), \"\", str.substring(4));\n          }\n             char ch4 = str.charAt(4);\n             if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n","CodeWithNoComments":"\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n             }\n             char ch3 = str.charAt(3);\n             char ch4 = str.charAt(4);\n             if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n","SolutionWithNoComments":"\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n             }\n             char ch3 = str.charAt(3);\n            if (ch3 == '_') {\n                return new Locale(str.substring(0, 2), \"\", str.substring(4));\n            }\n             char ch4 = str.charAt(4);\n             if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n"},{"ids":214,"error":"java.lang.NullPointerException","source":"/src/java/org/apache/commons/lang/LocaleUtils.java","code":"@@ -220,7 +220,7 @@ public static Set availableLocaleSet() {\n      * @return true if the locale is a known locale\n      */\n     public static boolean isAvailableLocale(Locale locale) {\n      return cAvailableLocaleSet.contains(locale);\n     }\n \n     //-----------------------------------------------------------------------\n","solution":"@@ -220,7 +220,7 @@ public static Set availableLocaleSet() {\n      * @return true if the locale is a known locale\n      */\n     public static boolean isAvailableLocale(Locale locale) {\n      return availableLocaleList().contains(locale);\n     }\n \n     //-----------------------------------------------------------------------\n","CodeWithNoComments":"\n     public static boolean isAvailableLocale(Locale locale) {\n        return cAvailableLocaleSet.contains(locale);\n     }\n \n","SolutionWithNoComments":"\n     public static boolean isAvailableLocale(Locale locale) {\n        return availableLocaleList().contains(locale);\n     }\n \n"},{"ids":215,"error":"java.lang.NumberFormatException","source":"/src/java/org/apache/commons/lang/math/NumberUtils.java","code":"@@ -451,8 +451,7 @@ public static Number createNumber(String str) throws NumberFormatException {\n                 case 'L' :\n                     if (dec == null\n                         && exp == null\n                      && isDigits(numeric.substring(1))\n                      && (numeric.charAt(0) == '-' || Character.isDigit(numeric.charAt(0)))) {\n                         try {\n                             return createLong(numeric);\n                         } catch (NumberFormatException nfe) {\n","solution":"@@ -451,8 +451,7 @@ public static Number createNumber(String str) throws NumberFormatException {\n                 case 'L' :\n                     if (dec == null\n                         && exp == null\n                      && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {\n                         try {\n                             return createLong(numeric);\n                         } catch (NumberFormatException nfe) {\n","CodeWithNoComments":"\n                 case 'L' :\n                     if (dec == null\n                         && exp == null\n                        && isDigits(numeric.substring(1))\n                        && (numeric.charAt(0) == '-' || Character.isDigit(numeric.charAt(0)))) {\n                         try {\n                             return createLong(numeric);\n                         } catch (NumberFormatException nfe) {\n","SolutionWithNoComments":"\n                 case 'L' :\n                     if (dec == null\n                         && exp == null\n                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {\n                         try {\n                             return createLong(numeric);\n                         } catch (NumberFormatException nfe) {\n"},{"ids":216,"error":"org.apache.commons.lang.SerializationException","source":"/src/java/org/apache/commons/lang/time/FastDateFormat.java","code":"@@ -1,152 +1,152 @@\n /*\n  * Licensed to the Apache Software Foundation (ASF) under one or more\n  * contributor license agreements.  See the NOTICE file distributed with\n  * this work for additional information regarding copyright ownership.\n  * The ASF licenses this file to You under the Apache License, Version 2.0\n  * (the \"License\"); you may not use this file except in compliance with\n  * the License.  You may obtain a copy of the License at\n  * \n  *      http://www.apache.org/licenses/LICENSE-2.0\n  * \n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n package org.apache.commons.lang.time;\n \n import java.io.IOException;\n import java.io.ObjectInputStream;\n \n import java.text.DateFormat;\n import java.text.DateFormatSymbols;\n import java.text.FieldPosition;\n import java.text.Format;\n import java.text.ParsePosition;\n import java.text.SimpleDateFormat;\n import java.util.ArrayList;\n import java.util.Calendar;\n import java.util.Date;\n import java.util.GregorianCalendar;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Locale;\n import java.util.Map;\n import java.util.TimeZone;\n \n import org.apache.commons.lang.Validate;\n \n /**\n  * <p>FastDateFormat is a fast and thread-safe version of\n  * {@link java.text.SimpleDateFormat}.<\/p>\n  * \n  * <p>This class can be used as a direct replacement to\n  * <code>SimpleDateFormat<\/code> in most formatting situations.\n  * This class is especially useful in multi-threaded server environments.\n  * <code>SimpleDateFormat<\/code> is not thread-safe in any JDK version,\n  * nor will it be as Sun have closed the bug/RFE.\n  * <\/p>\n  *\n  * <p>Only formatting is supported, but all patterns are compatible with\n  * SimpleDateFormat (except time zones - see below).<\/p>\n  *\n  * <p>Java 1.4 introduced a new pattern letter, <code>'Z'<\/code>, to represent\n  * time zones in RFC822 format (eg. <code>+0800<\/code> or <code>-1100<\/code>).\n  * This pattern letter can be used here (on all JDK versions).<\/p>\n  *\n  * <p>In addition, the pattern <code>'ZZ'<\/code> has been made to represent\n  * ISO8601 full format time zones (eg. <code>+08:00<\/code> or <code>-11:00<\/code>).\n  * This introduces a minor incompatibility with Java 1.4, but at a gain of\n  * useful functionality.<\/p>\n  *\n  * @author TeaTrove project\n  * @author Brian S O'Neill\n  * @author Sean Schofield\n  * @author Gary Gregory\n  * @author Stephen Colebourne\n  * @author Nikolay Metchev\n  * @since 2.0\n  * @version $Id$\n  */\n public class FastDateFormat extends Format {\n     // A lot of the speed in this class comes from caching, but some comes\n     // from the special int to StringBuffer conversion.\n     //\n     // The following produces a padded 2 digit number:\n     //   buffer.append((char)(value / 10 + '0'));\n     //   buffer.append((char)(value % 10 + '0'));\n     //\n     // Note that the fastest append to StringBuffer is a single char (used here).\n     // Note that Integer.toString() is not called, the conversion is simply\n     // taking the value and adding (mathematically) the ASCII value for '0'.\n     // So, don't change this code! It works and is very fast.\n     \n     /**\n      * Required for serialization support.\n      * \n      * @see java.io.Serializable\n      */\n     private static final long serialVersionUID = 1L;\n \n     /**\n      * FULL locale dependent date or time style.\n      */\n     public static final int FULL = DateFormat.FULL;\n     /**\n      * LONG locale dependent date or time style.\n      */\n     public static final int LONG = DateFormat.LONG;\n     /**\n      * MEDIUM locale dependent date or time style.\n      */\n     public static final int MEDIUM = DateFormat.MEDIUM;\n     /**\n      * SHORT locale dependent date or time style.\n      */\n     public static final int SHORT = DateFormat.SHORT;\n     \n     private static String cDefaultPattern;\n \n     private static Map cInstanceCache = new HashMap(7);\n     private static Map cDateInstanceCache = new HashMap(7);\n     private static Map cTimeInstanceCache = new HashMap(7);\n     private static Map cDateTimeInstanceCache = new HashMap(7);\n     private static Map cTimeZoneDisplayCache = new HashMap(7);\n \n     /**\n      * The pattern.\n      */\n     private final String mPattern;\n     /**\n      * The time zone.\n      */\n     private final TimeZone mTimeZone;\n     /**\n      * Whether the time zone overrides any on Calendars.\n      */\n     private final boolean mTimeZoneForced;\n     /**\n      * The locale.\n      */\n     private final Locale mLocale;\n     /**\n      * Whether the locale overrides the default.\n      */\n     private final boolean mLocaleForced;\n     /**\n      * The parsed rules.\n      */\n  private Rule[] mRules;\n     /**\n      * The estimated maximum length.\n      */\n  private int mMaxLengthEstimate;\n \n     //-----------------------------------------------------------------------\n     /**\n      * <p>Gets a formatter instance using the default pattern in the\n      * default locale.<\/p>\n      * \n      * @return a date/time formatter\n      */\n@@ -1016,37 +1016,41 @@ public int hashCode() {\n     public String toString() {\n         return \"FastDateFormat[\" + mPattern + \"]\";\n     }\n \n     // Serializing\n     //-----------------------------------------------------------------------\n     \n     // Rules\n     //-----------------------------------------------------------------------\n     /**\n      * <p>Inner class defining a rule.<\/p>\n      */\n     private interface Rule {\n         /**\n          * Returns the estimated lentgh of the result.\n          * \n          * @return the estimated length\n          */\n         int estimateLength();\n         \n         /**\n          * Appends the value of the specified calendar to the output buffer based on the rule implementation.\n          * \n          * @param buffer the output buffer\n          * @param calendar calendar to be appended\n          */\n         void appendTo(StringBuffer buffer, Calendar calendar);\n     }\n \n     /**\n      * <p>Inner class defining a numeric rule.<\/p>\n      */\n     private interface NumberRule extends Rule {\n         /**\n          * Appends the specified value to the output buffer based on the rule implementation.\n          * \n          * @param buffer the output buffer\n","solution":"@@ -1,152 +1,152 @@\n /*\n  * Licensed to the Apache Software Foundation (ASF) under one or more\n  * contributor license agreements.  See the NOTICE file distributed with\n  * this work for additional information regarding copyright ownership.\n  * The ASF licenses this file to You under the Apache License, Version 2.0\n  * (the \"License\"); you may not use this file except in compliance with\n  * the License.  You may obtain a copy of the License at\n  * \n  *      http://www.apache.org/licenses/LICENSE-2.0\n  * \n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n package org.apache.commons.lang.time;\n \n import java.io.IOException;\n import java.io.ObjectInputStream;\n \n import java.text.DateFormat;\n import java.text.DateFormatSymbols;\n import java.text.FieldPosition;\n import java.text.Format;\n import java.text.ParsePosition;\n import java.text.SimpleDateFormat;\n import java.util.ArrayList;\n import java.util.Calendar;\n import java.util.Date;\n import java.util.GregorianCalendar;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Locale;\n import java.util.Map;\n import java.util.TimeZone;\n \n import org.apache.commons.lang.Validate;\n \n /**\n  * <p>FastDateFormat is a fast and thread-safe version of\n  * {@link java.text.SimpleDateFormat}.<\/p>\n  * \n  * <p>This class can be used as a direct replacement to\n  * <code>SimpleDateFormat<\/code> in most formatting situations.\n  * This class is especially useful in multi-threaded server environments.\n  * <code>SimpleDateFormat<\/code> is not thread-safe in any JDK version,\n  * nor will it be as Sun have closed the bug/RFE.\n  * <\/p>\n  *\n  * <p>Only formatting is supported, but all patterns are compatible with\n  * SimpleDateFormat (except time zones - see below).<\/p>\n  *\n  * <p>Java 1.4 introduced a new pattern letter, <code>'Z'<\/code>, to represent\n  * time zones in RFC822 format (eg. <code>+0800<\/code> or <code>-1100<\/code>).\n  * This pattern letter can be used here (on all JDK versions).<\/p>\n  *\n  * <p>In addition, the pattern <code>'ZZ'<\/code> has been made to represent\n  * ISO8601 full format time zones (eg. <code>+08:00<\/code> or <code>-11:00<\/code>).\n  * This introduces a minor incompatibility with Java 1.4, but at a gain of\n  * useful functionality.<\/p>\n  *\n  * @author TeaTrove project\n  * @author Brian S O'Neill\n  * @author Sean Schofield\n  * @author Gary Gregory\n  * @author Stephen Colebourne\n  * @author Nikolay Metchev\n  * @since 2.0\n  * @version $Id$\n  */\n public class FastDateFormat extends Format {\n     // A lot of the speed in this class comes from caching, but some comes\n     // from the special int to StringBuffer conversion.\n     //\n     // The following produces a padded 2 digit number:\n     //   buffer.append((char)(value / 10 + '0'));\n     //   buffer.append((char)(value % 10 + '0'));\n     //\n     // Note that the fastest append to StringBuffer is a single char (used here).\n     // Note that Integer.toString() is not called, the conversion is simply\n     // taking the value and adding (mathematically) the ASCII value for '0'.\n     // So, don't change this code! It works and is very fast.\n     \n     /**\n      * Required for serialization support.\n      * \n      * @see java.io.Serializable\n      */\n     private static final long serialVersionUID = 1L;\n \n     /**\n      * FULL locale dependent date or time style.\n      */\n     public static final int FULL = DateFormat.FULL;\n     /**\n      * LONG locale dependent date or time style.\n      */\n     public static final int LONG = DateFormat.LONG;\n     /**\n      * MEDIUM locale dependent date or time style.\n      */\n     public static final int MEDIUM = DateFormat.MEDIUM;\n     /**\n      * SHORT locale dependent date or time style.\n      */\n     public static final int SHORT = DateFormat.SHORT;\n     \n     private static String cDefaultPattern;\n \n     private static Map cInstanceCache = new HashMap(7);\n     private static Map cDateInstanceCache = new HashMap(7);\n     private static Map cTimeInstanceCache = new HashMap(7);\n     private static Map cDateTimeInstanceCache = new HashMap(7);\n     private static Map cTimeZoneDisplayCache = new HashMap(7);\n \n     /**\n      * The pattern.\n      */\n     private final String mPattern;\n     /**\n      * The time zone.\n      */\n     private final TimeZone mTimeZone;\n     /**\n      * Whether the time zone overrides any on Calendars.\n      */\n     private final boolean mTimeZoneForced;\n     /**\n      * The locale.\n      */\n     private final Locale mLocale;\n     /**\n      * Whether the locale overrides the default.\n      */\n     private final boolean mLocaleForced;\n     /**\n      * The parsed rules.\n      */\n  private transient Rule[] mRules;\n     /**\n      * The estimated maximum length.\n      */\n  private transient int mMaxLengthEstimate;\n \n     //-----------------------------------------------------------------------\n     /**\n      * <p>Gets a formatter instance using the default pattern in the\n      * default locale.<\/p>\n      * \n      * @return a date/time formatter\n      */\n@@ -1016,37 +1016,41 @@ public int hashCode() {\n     public String toString() {\n         return \"FastDateFormat[\" + mPattern + \"]\";\n     }\n \n     // Serializing\n     //-----------------------------------------------------------------------\n  private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {\n      in.defaultReadObject();\n      init();\n  }\n     \n     // Rules\n     //-----------------------------------------------------------------------\n     /**\n      * <p>Inner class defining a rule.<\/p>\n      */\n     private interface Rule {\n         /**\n          * Returns the estimated lentgh of the result.\n          * \n          * @return the estimated length\n          */\n         int estimateLength();\n         \n         /**\n          * Appends the value of the specified calendar to the output buffer based on the rule implementation.\n          * \n          * @param buffer the output buffer\n          * @param calendar calendar to be appended\n          */\n         void appendTo(StringBuffer buffer, Calendar calendar);\n     }\n \n     /**\n      * <p>Inner class defining a numeric rule.<\/p>\n      */\n     private interface NumberRule extends Rule {\n         /**\n          * Appends the specified value to the output buffer based on the rule implementation.\n          * \n          * @param buffer the output buffer\n","CodeWithNoComments":"\n package org.apache.commons.lang.time;\n \n import java.io.IOException;\n import java.io.ObjectInputStream;\n \n import java.text.DateFormat;\n import java.text.DateFormatSymbols;\n import java.text.FieldPosition;\n import java.text.Format;\n import java.text.ParsePosition;\n import java.text.SimpleDateFormat;\n import java.util.ArrayList;\n import java.util.Calendar;\n import java.util.Date;\n import java.util.GregorianCalendar;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Locale;\n import java.util.Map;\n import java.util.TimeZone;\n \n import org.apache.commons.lang.Validate;\n \n public class FastDateFormat extends Format {\n                                                        \n     private static final long serialVersionUID = 1L;\n \n     public static final int FULL = DateFormat.FULL;\n     public static final int LONG = DateFormat.LONG;\n     public static final int MEDIUM = DateFormat.MEDIUM;\n     public static final int SHORT = DateFormat.SHORT;\n     \n     private static String cDefaultPattern;\n \n     private static Map cInstanceCache = new HashMap(7);\n     private static Map cDateInstanceCache = new HashMap(7);\n     private static Map cTimeInstanceCache = new HashMap(7);\n     private static Map cDateTimeInstanceCache = new HashMap(7);\n     private static Map cTimeZoneDisplayCache = new HashMap(7);\n \n     private final String mPattern;\n     private final TimeZone mTimeZone;\n     private final boolean mTimeZoneForced;\n     private final Locale mLocale;\n     private final boolean mLocaleForced;\n    private Rule[] mRules;\n    private int mMaxLengthEstimate;\n\n     public String toString() {\n         return \"FastDateFormat[\" + mPattern + \"]\";\n     }\n     private interface Rule {\n         int estimateLength();\n         void appendTo(StringBuffer buffer, Calendar calendar);\n     }\n \n     private interface NumberRule extends Rule {\n","SolutionWithNoComments":"\n package org.apache.commons.lang.time;\n \n import java.io.IOException;\n import java.io.ObjectInputStream;\n \n import java.text.DateFormat;\n import java.text.DateFormatSymbols;\n import java.text.FieldPosition;\n import java.text.Format;\n import java.text.ParsePosition;\n import java.text.SimpleDateFormat;\n import java.util.ArrayList;\n import java.util.Calendar;\n import java.util.Date;\n import java.util.GregorianCalendar;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Locale;\n import java.util.Map;\n import java.util.TimeZone;\n \n import org.apache.commons.lang.Validate;\n public class FastDateFormat extends Format {\n                                                            \n     private static final long serialVersionUID = 1L;\n \n     public static final int FULL = DateFormat.FULL;\n     public static final int LONG = DateFormat.LONG;\n     public static final int MEDIUM = DateFormat.MEDIUM;\n     public static final int SHORT = DateFormat.SHORT;\n     \n     private static String cDefaultPattern;\n \n     private static Map cInstanceCache = new HashMap(7);\n     private static Map cDateInstanceCache = new HashMap(7);\n     private static Map cTimeInstanceCache = new HashMap(7);\n     private static Map cDateTimeInstanceCache = new HashMap(7);\n     private static Map cTimeZoneDisplayCache = new HashMap(7);\n \n     private final String mPattern;\n     private final TimeZone mTimeZone;\n     private final boolean mTimeZoneForced;\n     private final Locale mLocale;\n     private final boolean mLocaleForced;\n    private transient Rule[] mRules;\n    private transient int mMaxLengthEstimate;\n\n     public String toString() {\n         return \"FastDateFormat[\" + mPattern + \"]\";\n     }\n \n              private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {\n        in.defaultReadObject();\n        init();\n    }\n     private interface Rule {\n         int estimateLength();\n         void appendTo(StringBuffer buffer, Calendar calendar);\n     }\n"},{"ids":217,"error":"junit.framework.AssertionFailedError","source":"/src/java/org/apache/commons/lang/enums/ValuedEnum.java","code":"@@ -180,6 +180,16 @@ public final int getValue() {\n      * @throws NullPointerException if other is <code>null<\/code>\n      */\n     public int compareTo(Object other) {\n         return iValue - ((ValuedEnum) other).iValue;\n     }\n \n@@ -189,9 +199,20 @@ public int compareTo(Object other) {\n      * @param other  the object to determine the value for\n      * @return the value\n      */\n             // ignore - should never happen\n             // ignore - should never happen\n             // ignore - should never happen\n \n     /**\n      * <p>Human readable description of this <code>Enum<\/code> item.<\/p>\n","solution":"@@ -180,6 +180,16 @@ public final int getValue() {\n      * @throws NullPointerException if other is <code>null<\/code>\n      */\n     public int compareTo(Object other) {\n      if (other == this) {\n          return 0;\n      }\n      if (other.getClass() != this.getClass()) {\n          if (other.getClass().getName().equals(this.getClass().getName())) {\n              return iValue - getValueInOtherClassLoader(other);\n          }\n          throw new ClassCastException(\n                  \"Different enum class '\" + ClassUtils.getShortClassName(other.getClass()) + \"'\");\n      }\n         return iValue - ((ValuedEnum) other).iValue;\n     }\n \n@@ -189,9 +199,20 @@ public int compareTo(Object other) {\n      * @param other  the object to determine the value for\n      * @return the value\n      */\n  private int getValueInOtherClassLoader(Object other) {\n      try {\n          Method mth = other.getClass().getMethod(\"getValue\", null);\n          Integer value = (Integer) mth.invoke(other, null);\n          return value.intValue();\n      } catch (NoSuchMethodException e) {\n             // ignore - should never happen\n      } catch (IllegalAccessException e) {\n             // ignore - should never happen\n      } catch (InvocationTargetException e) {\n             // ignore - should never happen\n      }\n      throw new IllegalStateException(\"This should not happen\");\n  }\n \n     /**\n      * <p>Human readable description of this <code>Enum<\/code> item.<\/p>\n","CodeWithNoComments":"\n     \n     public int compareTo(Object other) {\n         return iValue - ((ValuedEnum) other).iValue;\n     }\n \n\n","SolutionWithNoComments":"\n     public int compareTo(Object other) {\n        if (other == this) {\n            return 0;\n        }\n        if (other.getClass() != this.getClass()) {\n            if (other.getClass().getName().equals(this.getClass().getName())) {\n                return iValue - getValueInOtherClassLoader(other);\n            }\n            throw new ClassCastException(\n                    \"Different enum class '\" + ClassUtils.getShortClassName(other.getClass()) + \"'\");\n        }\n         return iValue - ((ValuedEnum) other).iValue;\n     }\n \n\n    private int getValueInOtherClassLoader(Object other) {\n        try {\n            Method mth = other.getClass().getMethod(\"getValue\", null);\n            Integer value = (Integer) mth.invoke(other, null);\n            return value.intValue();\n        } catch (NoSuchMethodException e) {\n                     } catch (IllegalAccessException e) {\n                     } catch (InvocationTargetException e) {\n                     }\n        throw new IllegalStateException(\"This should not happen\");\n    }\n"},{"ids":218,"error":"junit.framework.AssertionFailedError","source":"/src/java/org/apache/commons/lang/time/StopWatch.java","code":"@@ -115,7 +115,9 @@ public void stop() {\n         if(this.runningState != STATE_RUNNING && this.runningState != STATE_SUSPENDED) {\n             throw new IllegalStateException(\"Stopwatch is not running. \");\n         }\n             stopTime = System.currentTimeMillis();\n         this.runningState = STATE_STOPPED;\n     }\n \n","solution":"@@ -115,7 +115,9 @@ public void stop() {\n         if(this.runningState != STATE_RUNNING && this.runningState != STATE_SUSPENDED) {\n             throw new IllegalStateException(\"Stopwatch is not running. \");\n         }\n      if(this.runningState == STATE_RUNNING) {\n             stopTime = System.currentTimeMillis();\n      }\n         this.runningState = STATE_STOPPED;\n     }\n \n","CodeWithNoComments":"\n         if(this.runningState != STATE_RUNNING && this.runningState != STATE_SUSPENDED) {\n             throw new IllegalStateException(\"Stopwatch is not running. \");\n         }\n             stopTime = System.currentTimeMillis();\n         this.runningState = STATE_STOPPED;\n     }\n \n","SolutionWithNoComments":"\n         if(this.runningState != STATE_RUNNING && this.runningState != STATE_SUSPENDED) {\n             throw new IllegalStateException(\"Stopwatch is not running. \");\n         }\n        if(this.runningState == STATE_RUNNING) {\n             stopTime = System.currentTimeMillis();\n        }\n         this.runningState = STATE_STOPPED;\n     }\n \n"},{"ids":219,"error":"java.lang.ArrayIndexOutOfBoundsException","source":"/src/java/org/apache/commons/lang/text/StrBuilder.java","code":"@@ -881,7 +881,7 @@ public StrBuilder appendFixedWidthPadRight(Object obj, int width, char padChar)\n             String str = (obj == null ? getNullText() : obj.toString());\n             int strLen = str.length();\n             if (strLen >= width) {\n              str.getChars(0, strLen, buffer, size);\n             } else {\n                 int padLen = width - strLen;\n                 str.getChars(0, strLen, buffer, size);\n","solution":"@@ -881,7 +881,7 @@ public StrBuilder appendFixedWidthPadRight(Object obj, int width, char padChar)\n             String str = (obj == null ? getNullText() : obj.toString());\n             int strLen = str.length();\n             if (strLen >= width) {\n              str.getChars(0, width, buffer, size);\n             } else {\n                 int padLen = width - strLen;\n                 str.getChars(0, strLen, buffer, size);\n","CodeWithNoComments":"\n             String str = (obj == null ? getNullText() : obj.toString());\n             int strLen = str.length();\n             if (strLen >= width) {\n                str.getChars(0, strLen, buffer, size);\n             } else {\n                 int padLen = width - strLen;\n                 str.getChars(0, strLen, buffer, size);\n","SolutionWithNoComments":"\n             String str = (obj == null ? getNullText() : obj.toString());\n             int strLen = str.length();\n             if (strLen >= width) {\n                str.getChars(0, width, buffer, size);\n             } else {\n                 int padLen = width - strLen;\n                 str.getChars(0, strLen, buffer, size);\n"},{"ids":220,"error":"junit.framework.ComparisonFailure","source":"/src/java/org/apache/commons/lang/Entities.java","code":"@@ -847,6 +847,9 @@ public String unescape(String str) {\n                             } else {\n                                 entityValue = Integer.parseInt(entityName.substring(1));\n                             }\n                         } catch (NumberFormatException ex) {\n                             entityValue = -1;\n                         }\n@@ -917,12 +920,17 @@ public void unescape(Writer writer, String string) throws IOException {\n                                     case 'X' :\n                                     case 'x' : {\n                                         entityValue = Integer.parseInt(entityContent.substring(2), 16);\n                                     }\n                                     default : {\n                                         entityValue = Integer.parseInt(entityContent.substring(1), 10);\n                                     }\n                                 }\n                             } catch (NumberFormatException e) {\n                             }\n                         }\n                     } else { //escaped value content is an entity name\n","solution":"@@ -847,6 +847,9 @@ public String unescape(String str) {\n                             } else {\n                                 entityValue = Integer.parseInt(entityName.substring(1));\n                             }\n                          if (entityValue > 0xFFFF) {\n                              entityValue = -1;\n                          }\n                         } catch (NumberFormatException ex) {\n                             entityValue = -1;\n                         }\n@@ -917,12 +920,17 @@ public void unescape(Writer writer, String string) throws IOException {\n                                     case 'X' :\n                                     case 'x' : {\n                                         entityValue = Integer.parseInt(entityContent.substring(2), 16);\n                                      break;\n                                     }\n                                     default : {\n                                         entityValue = Integer.parseInt(entityContent.substring(1), 10);\n                                     }\n                                 }\n                              if (entityValue > 0xFFFF) {\n                                  entityValue = -1;\n                              }\n                             } catch (NumberFormatException e) {\n                              entityValue = -1;\n                             }\n                         }\n                     } else { //escaped value content is an entity name\n","CodeWithNoComments":"\n                             } else {\n                                 entityValue = Integer.parseInt(entityName.substring(1));\n                             }\n                         } catch (NumberFormatException ex) {\n                             entityValue = -1;\n                         }\n\n                                     case 'X' :\n                                     case 'x' : {\n                                         entityValue = Integer.parseInt(entityContent.substring(2), 16);\n                                     }\n                                     default : {\n                                         entityValue = Integer.parseInt(entityContent.substring(1), 10);\n                                     }\n                                 }\n                             } catch (NumberFormatException e) {\n                             }\n                         }\n                     } else { ","SolutionWithNoComments":"\n                             } else {\n                                 entityValue = Integer.parseInt(entityName.substring(1));\n                             }\n                            if (entityValue > 0xFFFF) {\n                                entityValue = -1;\n                            }\n                         } catch (NumberFormatException ex) {\n                             entityValue = -1;\n                         }\n\n                                     case 'X' :\n                                     case 'x' : {\n                                         entityValue = Integer.parseInt(entityContent.substring(2), 16);\n                                        break;\n                                     }\n                                     default : {\n                                         entityValue = Integer.parseInt(entityContent.substring(1), 10);\n                                     }\n                                 }\n                                if (entityValue > 0xFFFF) {\n                                    entityValue = -1;\n                                }\n                             } catch (NumberFormatException e) {\n                                entityValue = -1;\n                             }\n                         }\n                     } else { "},{"ids":221,"error":"junit.framework.AssertionFailedError","source":"/src/java/org/apache/commons/lang/text/StrBuilder.java","code":"@@ -1670,7 +1670,7 @@ public String midString(int index, int length) {\n      */\n     public boolean contains(char ch) {\n         char[] thisBuf = buffer;\n      for (int i = 0; i < thisBuf.length; i++) {\n             if (thisBuf[i] == ch) {\n                 return true;\n             }\n@@ -1727,7 +1727,7 @@ public int indexOf(char ch, int startIndex) {\n             return -1;\n         }\n         char[] thisBuf = buffer;\n      for (int i = startIndex; i < thisBuf.length; i++) {\n             if (thisBuf[i] == ch) {\n                 return i;\n             }\n","solution":"@@ -1670,7 +1670,7 @@ public String midString(int index, int length) {\n      */\n     public boolean contains(char ch) {\n         char[] thisBuf = buffer;\n      for (int i = 0; i < this.size; i++) {\n             if (thisBuf[i] == ch) {\n                 return true;\n             }\n@@ -1727,7 +1727,7 @@ public int indexOf(char ch, int startIndex) {\n             return -1;\n         }\n         char[] thisBuf = buffer;\n      for (int i = startIndex; i < size; i++) {\n             if (thisBuf[i] == ch) {\n                 return i;\n             }\n","CodeWithNoComments":"\n      \n     public boolean contains(char ch) {\n         char[] thisBuf = buffer;\n        for (int i = 0; i < thisBuf.length; i++) {\n             if (thisBuf[i] == ch) {\n                 return true;\n             }\n\n             return -1;\n         }\n         char[] thisBuf = buffer;\n        for (int i = startIndex; i < thisBuf.length; i++) {\n             if (thisBuf[i] == ch) {\n                 return i;\n             }\n","SolutionWithNoComments":"\n      \n     public boolean contains(char ch) {\n         char[] thisBuf = buffer;\n        for (int i = 0; i < this.size; i++) {\n             if (thisBuf[i] == ch) {\n                 return true;\n             }\n\n             return -1;\n         }\n         char[] thisBuf = buffer;\n        for (int i = startIndex; i < size; i++) {\n             if (thisBuf[i] == ch) {\n                 return i;\n             }\n"},{"ids":222,"error":"junit.framework.AssertionFailedError","source":"/src/java/org/apache/commons/lang/text/StrBuilder.java","code":"@@ -1773,7 +1773,7 @@ public int indexOf(String str, int startIndex) {\n             return -1;\n         }\n         char[] thisBuf = buffer;\n      int len = thisBuf.length - strLen;\n         outer:\n         for (int i = startIndex; i < len; i++) {\n             for (int j = 0; j < strLen; j++) {\n","solution":"@@ -1773,7 +1773,7 @@ public int indexOf(String str, int startIndex) {\n             return -1;\n         }\n         char[] thisBuf = buffer;\n      int len = size - strLen + 1;\n         outer:\n         for (int i = startIndex; i < len; i++) {\n             for (int j = 0; j < strLen; j++) {\n","CodeWithNoComments":"\n             return -1;\n         }\n         char[] thisBuf = buffer;\n        int len = thisBuf.length - strLen;\n         outer:\n         for (int i = startIndex; i < len; i++) {\n             for (int j = 0; j < strLen; j++) {\n","SolutionWithNoComments":"\n             return -1;\n         }\n         char[] thisBuf = buffer;\n        int len = size - strLen + 1;\n         outer:\n         for (int i = startIndex; i < len; i++) {\n             for (int j = 0; j < strLen; j++) {\n"},{"ids":223,"error":"junit.framework.ComparisonFailure","source":"/src/java/org/apache/commons/lang/time/DurationFormatUtils.java","code":"@@ -303,25 +303,20 @@ public static String formatPeriod(long startMillis, long endMillis, String forma\n             days -= 1;\n         }\n         while (days < 0) {\n          days += 31;\n //days += 31; // TODO: Need tests to show this is bad and the new code is good.\n // HEN: It's a tricky subject. Jan 15th to March 10th. If I count days-first it is \n // 1 month and 26 days, but if I count month-first then it is 1 month and 23 days.\n // Also it's contextual - if asked for no M in the format then I should probably \n // be doing no calculating here.\n             months -= 1;\n         }\n         while (months < 0) {\n             months += 12;\n             years -= 1;\n         }\n      milliseconds -= reduceAndCorrect(start, end, Calendar.MILLISECOND, milliseconds);\n      seconds -= reduceAndCorrect(start, end, Calendar.SECOND, seconds);\n      minutes -= reduceAndCorrect(start, end, Calendar.MINUTE, minutes);\n      hours -= reduceAndCorrect(start, end, Calendar.HOUR_OF_DAY, hours);\n      days -= reduceAndCorrect(start, end, Calendar.DAY_OF_MONTH, days);\n      months -= reduceAndCorrect(start, end, Calendar.MONTH, months);\n      years -= reduceAndCorrect(start, end, Calendar.YEAR, years);\n \n         // This next block of code adds in values that \n         // aren't requested. This allows the user to ask for the \n@@ -429,18 +424,6 @@ static String format(Token[] tokens, int years, int months, int days, int hours,\n         }\n         return buffer.toString();\n     }\n  static int reduceAndCorrect(Calendar start, Calendar end, int field, int difference) {\n      end.add( field, -1 * difference );\n      int endValue = end.get(field);\n      int startValue = start.get(field);\n      if (endValue < startValue) {\n          int newdiff = startValue - endValue;\n          end.add( field, newdiff );\n          return newdiff;\n      } else {\n          return 0;\n      }\n  }\n \n     static final Object y = \"y\";\n     static final Object M = \"M\";\n","solution":"@@ -303,25 +303,20 @@ public static String formatPeriod(long startMillis, long endMillis, String forma\n             days -= 1;\n         }\n         while (days < 0) {\n          end.add(Calendar.MONTH, -1);\n          days += end.getActualMaximum(Calendar.DAY_OF_MONTH);\n //days += 31; // TODO: Need tests to show this is bad and the new code is good.\n // HEN: It's a tricky subject. Jan 15th to March 10th. If I count days-first it is \n // 1 month and 26 days, but if I count month-first then it is 1 month and 23 days.\n // Also it's contextual - if asked for no M in the format then I should probably \n // be doing no calculating here.\n             months -= 1;\n          end.add(Calendar.MONTH, 1);\n         }\n         while (months < 0) {\n             months += 12;\n             years -= 1;\n         }\n \n         // This next block of code adds in values that \n         // aren't requested. This allows the user to ask for the \n@@ -429,18 +424,6 @@ static String format(Token[] tokens, int years, int months, int days, int hours,\n         }\n         return buffer.toString();\n     }\n \n     static final Object y = \"y\";\n     static final Object M = \"M\";\n","CodeWithNoComments":"\n             days -= 1;\n         }\n         while (days < 0) {\n            days += 31;\n                  months -= 1;\n         }\n         while (months < 0) {\n             months += 12;\n             years -= 1;\n         }\n        milliseconds -= reduceAndCorrect(start, end, Calendar.MILLISECOND, milliseconds);\n        seconds -= reduceAndCorrect(start, end, Calendar.SECOND, seconds);\n        minutes -= reduceAndCorrect(start, end, Calendar.MINUTE, minutes);\n        hours -= reduceAndCorrect(start, end, Calendar.HOUR_OF_DAY, hours);\n        days -= reduceAndCorrect(start, end, Calendar.DAY_OF_MONTH, days);\n        months -= reduceAndCorrect(start, end, Calendar.MONTH, months);\n        years -= reduceAndCorrect(start, end, Calendar.YEAR, years);\n \n                  \n         }\n         return buffer.toString();\n     }\n    static int reduceAndCorrect(Calendar start, Calendar end, int field, int difference) {\n        end.add( field, -1 * difference );\n        int endValue = end.get(field);\n        int startValue = start.get(field);\n        if (endValue < startValue) {\n            int newdiff = startValue - endValue;\n            end.add( field, newdiff );\n            return newdiff;\n        } else {\n            return 0;\n        }\n    }\n \n     static final Object y = \"y\";\n     static final Object M = \"M\";\n","SolutionWithNoComments":"\n             days -= 1;\n         }\n         while (days < 0) {\n            end.add(Calendar.MONTH, -1);\n            days += end.getActualMaximum(Calendar.DAY_OF_MONTH);\n                  months -= 1;\n            end.add(Calendar.MONTH, 1);\n         }\n         while (months < 0) {\n             months += 12;\n             years -= 1;\n         }\n \n                  \n         }\n         return buffer.toString();\n     }\n \n     static final Object y = \"y\";\n     static final Object M = \"M\";\n"},{"ids":224,"error":"junit.framework.AssertionFailedError","source":"/src/java/org/apache/commons/lang/time/DateUtils.java","code":"@@ -621,6 +621,9 @@ private static void modify(Calendar val, int field, boolean round) {\n             throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n         }\n         \n \n         // ----------------- Fix for LANG-59 ---------------------- START ---------------\n         // see http://issues.apache.org/jira/browse/LANG-59\n@@ -628,14 +631,39 @@ private static void modify(Calendar val, int field, boolean round) {\n         // Manually truncate milliseconds, seconds and minutes, rather than using\n         // Calendar methods.\n \n \n         // truncate milliseconds\n \n         // truncate seconds\n \n         // truncate minutes\n \n         // reset time\n         // ----------------- Fix for LANG-59 ----------------------- END ----------------\n \n         boolean roundUp = false;\n@@ -706,7 +734,9 @@ private static void modify(Calendar val, int field, boolean round) {\n                 roundUp = offset > ((max - min) / 2);\n             }\n             //We need to remove this field\n                 val.set(fields[i][0], val.get(fields[i][0]) - offset);\n         }\n         throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n \n","solution":"@@ -621,6 +621,9 @@ private static void modify(Calendar val, int field, boolean round) {\n             throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n         }\n         \n      if (field == Calendar.MILLISECOND) {\n          return;\n      }\n \n         // ----------------- Fix for LANG-59 ---------------------- START ---------------\n         // see http://issues.apache.org/jira/browse/LANG-59\n@@ -628,14 +631,39 @@ private static void modify(Calendar val, int field, boolean round) {\n         // Manually truncate milliseconds, seconds and minutes, rather than using\n         // Calendar methods.\n \n      Date date = val.getTime();\n      long time = date.getTime();\n      boolean done = false;\n \n         // truncate milliseconds\n      int millisecs = val.get(Calendar.MILLISECOND);\n      if (!round || millisecs < 500) {\n          time = time - millisecs;\n          if (field == Calendar.SECOND) {\n              done = true;\n          }\n      }\n \n         // truncate seconds\n      int seconds = val.get(Calendar.SECOND);\n      if (!done && (!round || seconds < 30)) {\n          time = time - (seconds * 1000L);\n          if (field == Calendar.MINUTE) {\n              done = true;\n          }\n      }\n \n         // truncate minutes\n      int minutes = val.get(Calendar.MINUTE);\n      if (!done && (!round || minutes < 30)) {\n          time = time - (minutes * 60000L);\n      }\n \n         // reset time\n      if (date.getTime() != time) {\n          date.setTime(time);\n          val.setTime(date);\n      }\n         // ----------------- Fix for LANG-59 ----------------------- END ----------------\n \n         boolean roundUp = false;\n@@ -706,7 +734,9 @@ private static void modify(Calendar val, int field, boolean round) {\n                 roundUp = offset > ((max - min) / 2);\n             }\n             //We need to remove this field\n          if (offset != 0) {\n                 val.set(fields[i][0], val.get(fields[i][0]) - offset);\n          }\n         }\n         throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n \n","CodeWithNoComments":"\n             throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n         }\n         \n \n                  \n                   \n \n          \n          \n          \n                   \n         boolean roundUp = false;\n\n                 roundUp = offset > ((max - min) / 2);\n             }\n                              val.set(fields[i][0], val.get(fields[i][0]) - offset);\n         }\n         throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n \n","SolutionWithNoComments":"\n             throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n         }\n         \n        if (field == Calendar.MILLISECOND) {\n            return;\n        }\n \n                  \n                   \n        Date date = val.getTime();\n        long time = date.getTime();\n        boolean done = false;\n \n                 int millisecs = val.get(Calendar.MILLISECOND);\n        if (!round || millisecs < 500) {\n            time = time - millisecs;\n            if (field == Calendar.SECOND) {\n                done = true;\n            }\n        }\n \n                 int seconds = val.get(Calendar.SECOND);\n        if (!done && (!round || seconds < 30)) {\n            time = time - (seconds * 1000L);\n            if (field == Calendar.MINUTE) {\n                done = true;\n            }\n        }\n \n                 int minutes = val.get(Calendar.MINUTE);\n        if (!done && (!round || minutes < 30)) {\n            time = time - (minutes * 60000L);\n        }\n \n                 if (date.getTime() != time) {\n            date.setTime(time);\n            val.setTime(date);\n        }\n          \n         boolean roundUp = false;\n\n                 roundUp = offset > ((max - min) / 2);\n             }\n                         if (offset != 0) {\n                 val.set(fields[i][0], val.get(fields[i][0]) - offset);\n            }\n         }\n         throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n \n"},{"ids":225,"error":"junit.framework.AssertionFailedError","source":"/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java","code":"@@ -265,7 +265,7 @@ private double innerCumulativeProbability(int x0, int x1, int dx) {\n      * size {@code n}, the mean is {@code n * m / N}.\n      */\n     public double getNumericalMean() {\n      return (double) (getSampleSize() * getNumberOfSuccesses()) / (double) getPopulationSize();\n     }\n \n     /**\n","solution":"@@ -265,7 +265,7 @@ private double innerCumulativeProbability(int x0, int x1, int dx) {\n      * size {@code n}, the mean is {@code n * m / N}.\n      */\n     public double getNumericalMean() {\n      return getSampleSize() * (getNumberOfSuccesses() / (double) getPopulationSize());\n     }\n \n     /**\n","CodeWithNoComments":"\n   \n     public double getNumericalMean() {\n        return (double) (getSampleSize() * getNumberOfSuccesses()) / (double) getPopulationSize();\n     }\n \n","SolutionWithNoComments":"\n    \n     public double getNumericalMean() {\n        return getSampleSize() * (getNumberOfSuccesses() / (double) getPopulationSize());\n     }\n \n"},{"ids":226,"error":"org.apache.commons.math3.fraction.FractionConversionException","source":"/src/main/java/org/apache/commons/math3/fraction/BigFraction.java","code":"@@ -303,6 +303,9 @@ private BigFraction(final double value, final double epsilon,\n             if ((p2 > overflow) || (q2 > overflow)) {\n                 // in maxDenominator mode, if the last fraction was very close to the actual value\n                 // q2 may overflow in the next iteration; in this case return the last one.\n                 throw new FractionConversionException(value, p2, q2);\n             }\n \n/src/main/java/org/apache/commons/math3/fraction/Fraction.java @@ -212,6 +212,9 @@ private Fraction(double value, double epsilon, int maxDenominator, int maxIterat\n             if ((FastMath.abs(p2) > overflow) || (FastMath.abs(q2) > overflow)) {\n                 // in maxDenominator mode, if the last fraction was very close to the actual value\n                 // q2 may overflow in the next iteration; in this case return the last one.\n                 throw new FractionConversionException(value, p2, q2);\n             }\n \n","solution":"@@ -303,6 +303,9 @@ private BigFraction(final double value, final double epsilon,\n             if ((p2 > overflow) || (q2 > overflow)) {\n                 // in maxDenominator mode, if the last fraction was very close to the actual value\n                 // q2 may overflow in the next iteration; in this case return the last one.\n              if (epsilon == 0.0 && FastMath.abs(q1) < maxDenominator) {\n                  break;\n              }\n                 throw new FractionConversionException(value, p2, q2);\n             }\n \n/src/main/java/org/apache/commons/math3/fraction/Fraction.java @@ -212,6 +212,9 @@ private Fraction(double value, double epsilon, int maxDenominator, int maxIterat\n             if ((FastMath.abs(p2) > overflow) || (FastMath.abs(q2) > overflow)) {\n                 // in maxDenominator mode, if the last fraction was very close to the actual value\n                 // q2 may overflow in the next iteration; in this case return the last one.\n              if (epsilon == 0.0 && FastMath.abs(q1) < maxDenominator) {\n                  break;\n              }\n                 throw new FractionConversionException(value, p2, q2);\n             }\n \n","CodeWithNoComments":"\n             if ((p2 > overflow) || (q2 > overflow)) {\n                                                   throw new FractionConversionException(value, p2, q2);\n             }\n \n\n             if ((FastMath.abs(p2) > overflow) || (FastMath.abs(q2) > overflow)) {\n                                                   throw new FractionConversionException(value, p2, q2);\n             }\n \n","SolutionWithNoComments":"\n             if ((p2 > overflow) || (q2 > overflow)) {\n                                                  if (epsilon == 0.0 && FastMath.abs(q1) < maxDenominator) {\n                    break;\n                }\n                 throw new FractionConversionException(value, p2, q2);\n             }\n \n\n             if ((FastMath.abs(p2) > overflow) || (FastMath.abs(q2) > overflow)) {\n                                                  if (epsilon == 0.0 && FastMath.abs(q1) < maxDenominator) {\n                    break;\n                }\n                 throw new FractionConversionException(value, p2, q2);\n             }\n \n"},{"ids":227,"error":"java.lang.ArrayIndexOutOfBoundsException","source":"/src/main/java/org/apache/commons/math3/util/MathArrays.java","code":"@@ -818,7 +818,10 @@ public static double linearCombination(final double[] a, final double[] b)\n             throw new DimensionMismatchException(len, b.length);\n         }\n \n             // Revert to scalar multiplication.\n \n         final double[] prodHigh = new double[len];\n         double prodLowSum = 0;\n","solution":"@@ -818,7 +818,10 @@ public static double linearCombination(final double[] a, final double[] b)\n             throw new DimensionMismatchException(len, b.length);\n         }\n \n      if (len == 1) {\n             // Revert to scalar multiplication.\n          return a[0] * b[0];\n      }\n \n         final double[] prodHigh = new double[len];\n         double prodLowSum = 0;\n","CodeWithNoComments":"\n             throw new DimensionMismatchException(len, b.length);\n         }\n \n              \n         final double[] prodHigh = new double[len];\n         double prodLowSum = 0;\n","SolutionWithNoComments":"\n             throw new DimensionMismatchException(len, b.length);\n         }\n \n        if (len == 1) {\n                         return a[0] * b[0];\n        }\n \n         final double[] prodHigh = new double[len];\n         double prodLowSum = 0;\n"},{"ids":228,"error":"junit.framework.AssertionFailedError","source":"/src/main/java/org/apache/commons/math3/complex/Complex.java","code":"@@ -302,7 +302,7 @@ public Complex reciprocal() {\n         }\n \n         if (real == 0.0 && imaginary == 0.0) {\n          return NaN;\n         }\n \n         if (isInfinite) {\n","solution":"@@ -302,7 +302,7 @@ public Complex reciprocal() {\n         }\n \n         if (real == 0.0 && imaginary == 0.0) {\n          return INF;\n         }\n \n         if (isInfinite) {\n","CodeWithNoComments":"\n         }\n \n         if (real == 0.0 && imaginary == 0.0) {\n            return NaN;\n         }\n \n         if (isInfinite) {\n","SolutionWithNoComments":"\n         }\n \n         if (real == 0.0 && imaginary == 0.0) {\n            return INF;\n         }\n \n         if (isInfinite) {\n"},{"ids":229,"error":"java.lang.ArrayStoreException","source":"/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java","code":"@@ -178,13 +178,13 @@ public T sample() {\n      * @throws NotStrictlyPositiveException if {@code sampleSize} is not\n      * positive.\n      */\n  public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n         if (sampleSize <= 0) {\n             throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n                     sampleSize);\n         }\n \n      final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n         for (int i = 0; i < sampleSize; i++) {\n             out[i] = sample();\n","solution":"@@ -178,13 +178,13 @@ public T sample() {\n      * @throws NotStrictlyPositiveException if {@code sampleSize} is not\n      * positive.\n      */\n  public Object[] sample(int sampleSize) throws NotStrictlyPositiveException {\n         if (sampleSize <= 0) {\n             throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n                     sampleSize);\n         }\n \n      final Object[] out = new Object[sampleSize];\n \n         for (int i = 0; i < sampleSize; i++) {\n             out[i] = sample();\n","CodeWithNoComments":"\n         if (sampleSize <= 0) {\n             throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n                     sampleSize);\n         }\n \n        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n         for (int i = 0; i < sampleSize; i++) {\n             out[i] = sample();\n","SolutionWithNoComments":"\n  \n    public Object[] sample(int sampleSize) throws NotStrictlyPositiveException {\n         if (sampleSize <= 0) {\n             throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n                     sampleSize);\n         }\n \n        final Object[] out = new Object[sampleSize];\n \n         for (int i = 0; i < sampleSize; i++) {\n             out[i] = sample();\n"},{"ids":230,"error":"junit.framework.AssertionFailedError","source":"/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java","code":"@@ -180,7 +180,7 @@ public double density(final double[] vals) throws DimensionMismatchException {\n             throw new DimensionMismatchException(vals.length, dim);\n         }\n \n      return FastMath.pow(2 * FastMath.PI, -dim / 2) *\n             FastMath.pow(covarianceMatrixDeterminant, -0.5) *\n             getExponentTerm(vals);\n     }\n","solution":"@@ -180,7 +180,7 @@ public double density(final double[] vals) throws DimensionMismatchException {\n             throw new DimensionMismatchException(vals.length, dim);\n         }\n \n      return FastMath.pow(2 * FastMath.PI, -0.5 * dim) *\n             FastMath.pow(covarianceMatrixDeterminant, -0.5) *\n             getExponentTerm(vals);\n     }\n","CodeWithNoComments":"\n             throw new DimensionMismatchException(vals.length, dim);\n         }\n \n        return FastMath.pow(2 * FastMath.PI, -dim / 2) *\n             FastMath.pow(covarianceMatrixDeterminant, -0.5) *\n             getExponentTerm(vals);\n     }\n","SolutionWithNoComments":"\n             throw new DimensionMismatchException(vals.length, dim);\n         }\n \n        return FastMath.pow(2 * FastMath.PI, -0.5 * dim) *\n             FastMath.pow(covarianceMatrixDeterminant, -0.5) *\n             getExponentTerm(vals);\n     }\n"},{"ids":231,"error":"junit.framework.AssertionFailedError","source":"/src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java","code":"@@ -48,7 +48,7 @@ protected BaseOptimizer(ConvergenceChecker<PAIR> checker) {\n         this.checker = checker;\n \n         evaluations = new Incrementor(0, new MaxEvalCallback());\n      iterations = new Incrementor(0, new MaxIterCallback());\n     }\n \n     /**\n/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer.java @@ -211,16 +211,15 @@ protected PointValuePair doOptimize() {\n         }\n \n         PointValuePair current = null;\n      int iter = 0;\n         int maxEval = getMaxEvaluations();\n         while (true) {\n          ++iter;\n \n             final double objective = computeObjectiveValue(point);\n             PointValuePair previous = current;\n             current = new PointValuePair(point, objective);\n             if (previous != null) {\n              if (checker.converged(iter, previous, current)) {\n                     // We have found an optimum.\n                     return current;\n                 }\n@@ -274,7 +273,7 @@ protected PointValuePair doOptimize() {\n             steepestDescent = newSteepestDescent;\n \n             // Compute conjugate search direction.\n          if (iter % n == 0 ||\n                 beta < 0) {\n                 // Break conjugation: reset search direction.\n                 searchDirection = steepestDescent.clone();\n/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java @@ -385,6 +385,7 @@ protected PointValuePair doOptimize() {\n \n         generationLoop:\n         for (iterations = 1; iterations <= maxIterations; iterations++) {\n \n             // Generate and evaluate lambda offspring\n             final RealMatrix arz = randn1(dimension, lambda);\n/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer.java @@ -188,9 +188,8 @@ protected PointValuePair doOptimize() {\n         double[] x = guess;\n         double fVal = computeObjectiveValue(x);\n         double[] x1 = x.clone();\n      int iter = 0;\n         while (true) {\n          ++iter;\n \n             double fX = fVal;\n             double fX2 = 0;\n@@ -224,7 +223,7 @@ protected PointValuePair doOptimize() {\n             final PointValuePair current = new PointValuePair(x, fVal);\n             if (!stop) { // User-defined stopping criteria.\n                 if (checker != null) {\n                  stop = checker.converged(iter, previous, current);\n                 }\n             }\n             if (stop) {\n/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizer.java @@ -155,7 +155,7 @@ public int compare(final PointValuePair o1,\n         int iteration = 0;\n         final ConvergenceChecker<PointValuePair> checker = getConvergenceChecker();\n         while (true) {\n          if (iteration > 0) {\n                 boolean converged = true;\n                 for (int i = 0; i < simplex.getSize(); i++) {\n                     PointValuePair prev = previous[i];\n@@ -172,7 +172,7 @@ public int compare(final PointValuePair o1,\n             previous = simplex.getPoints();\n             simplex.iterate(evalFunc, comparator);\n \n\t\t++iteration;\n         }\n     }\n \n/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer.java @@ -103,9 +103,8 @@ public PointVectorValuePair doOptimize() {\n \n         // iterate until convergence is reached\n         PointVectorValuePair current = null;\n      int iter = 0;\n         for (boolean converged = false; !converged;) {\n          ++iter;\n \n             // evaluate the objective function and its jacobian\n             PointVectorValuePair previous = current;\n@@ -157,7 +156,7 @@ public PointVectorValuePair doOptimize() {\n \n             // Check convergence.\n             if (previous != null) {\n              converged = checker.converged(iter, previous, current);\n                 if (converged) {\n                     setCost(computeCost(currentResiduals));\n                     return current;\n/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java @@ -319,10 +319,10 @@ protected PointVectorValuePair doOptimize() {\n         // Outer loop.\n         lmPar = 0;\n         boolean firstIteration = true;\n      int iter = 0;\n         final ConvergenceChecker<PointVectorValuePair> checker = getConvergenceChecker();\n         while (true) {\n          ++iter;\n\n             final PointVectorValuePair previous = current;\n \n             // QR decomposition of the jacobian matrix\n@@ -486,7 +486,7 @@ protected PointVectorValuePair doOptimize() {\n                     // tests for convergence.\n                     if (checker != null) {\n                         // we use the vectorial convergence checker\n                      if (checker.converged(iter, previous, current)) {\n                             setCost(currentCost);\n                             return current;\n                         }\n","solution":"@@ -48,7 +48,7 @@ protected BaseOptimizer(ConvergenceChecker<PAIR> checker) {\n         this.checker = checker;\n \n         evaluations = new Incrementor(0, new MaxEvalCallback());\n      iterations = new Incrementor(Integer.MAX_VALUE, new MaxIterCallback());\n     }\n \n     /**\n/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer.java @@ -211,16 +211,15 @@ protected PointValuePair doOptimize() {\n         }\n \n         PointValuePair current = null;\n         int maxEval = getMaxEvaluations();\n         while (true) {\n          incrementIterationCount();\n \n             final double objective = computeObjectiveValue(point);\n             PointValuePair previous = current;\n             current = new PointValuePair(point, objective);\n             if (previous != null) {\n              if (checker.converged(getIterations(), previous, current)) {\n                     // We have found an optimum.\n                     return current;\n                 }\n@@ -274,7 +273,7 @@ protected PointValuePair doOptimize() {\n             steepestDescent = newSteepestDescent;\n \n             // Compute conjugate search direction.\n          if (getIterations() % n == 0 ||\n                 beta < 0) {\n                 // Break conjugation: reset search direction.\n                 searchDirection = steepestDescent.clone();\n/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java @@ -385,6 +385,7 @@ protected PointValuePair doOptimize() {\n \n         generationLoop:\n         for (iterations = 1; iterations <= maxIterations; iterations++) {\n          incrementIterationCount();\n \n             // Generate and evaluate lambda offspring\n             final RealMatrix arz = randn1(dimension, lambda);\n/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer.java @@ -188,9 +188,8 @@ protected PointValuePair doOptimize() {\n         double[] x = guess;\n         double fVal = computeObjectiveValue(x);\n         double[] x1 = x.clone();\n         while (true) {\n          incrementIterationCount();\n \n             double fX = fVal;\n             double fX2 = 0;\n@@ -224,7 +223,7 @@ protected PointValuePair doOptimize() {\n             final PointValuePair current = new PointValuePair(x, fVal);\n             if (!stop) { // User-defined stopping criteria.\n                 if (checker != null) {\n                  stop = checker.converged(getIterations(), previous, current);\n                 }\n             }\n             if (stop) {\n/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizer.java @@ -155,7 +155,7 @@ public int compare(final PointValuePair o1,\n         int iteration = 0;\n         final ConvergenceChecker<PointValuePair> checker = getConvergenceChecker();\n         while (true) {\n          if (getIterations() > 0) {\n                 boolean converged = true;\n                 for (int i = 0; i < simplex.getSize(); i++) {\n                     PointValuePair prev = previous[i];\n@@ -172,7 +172,7 @@ public int compare(final PointValuePair o1,\n             previous = simplex.getPoints();\n             simplex.iterate(evalFunc, comparator);\n \n          incrementIterationCount();\n         }\n     }\n \n/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer.java @@ -103,9 +103,8 @@ public PointVectorValuePair doOptimize() {\n \n         // iterate until convergence is reached\n         PointVectorValuePair current = null;\n         for (boolean converged = false; !converged;) {\n          incrementIterationCount();\n \n             // evaluate the objective function and its jacobian\n             PointVectorValuePair previous = current;\n@@ -157,7 +156,7 @@ public PointVectorValuePair doOptimize() {\n \n             // Check convergence.\n             if (previous != null) {\n              converged = checker.converged(getIterations(), previous, current);\n                 if (converged) {\n                     setCost(computeCost(currentResiduals));\n                     return current;\n/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java @@ -319,10 +319,10 @@ protected PointVectorValuePair doOptimize() {\n         // Outer loop.\n         lmPar = 0;\n         boolean firstIteration = true;\n         final ConvergenceChecker<PointVectorValuePair> checker = getConvergenceChecker();\n         while (true) {\n          incrementIterationCount();\n\n             final PointVectorValuePair previous = current;\n \n             // QR decomposition of the jacobian matrix\n@@ -486,7 +486,7 @@ protected PointVectorValuePair doOptimize() {\n                     // tests for convergence.\n                     if (checker != null) {\n                         // we use the vectorial convergence checker\n                      if (checker.converged(getIterations(), previous, current)) {\n                             setCost(currentCost);\n                             return current;\n                         }\n","CodeWithNoComments":"\n         this.checker = checker;\n \n         evaluations = new Incrementor(0, new MaxEvalCallback());\n        iterations = new Incrementor(0, new MaxIterCallback());\n     }\n \n\n         }\n \n         PointValuePair current = null;\n        int iter = 0;\n         int maxEval = getMaxEvaluations();\n         while (true) {\n            ++iter;\n \n             final double objective = computeObjectiveValue(point);\n             PointValuePair previous = current;\n             current = new PointValuePair(point, objective);\n             if (previous != null) {\n                if (checker.converged(iter, previous, current)) {\n                                          return current;\n                 }\n\n             steepestDescent = newSteepestDescent;\n \n                         if (iter % n == 0 ||\n                 beta < 0) {\n                                  searchDirection = steepestDescent.clone();\n\n \n         generationLoop:\n         for (iterations = 1; iterations <= maxIterations; iterations++) {\n \n                          final RealMatrix arz = randn1(dimension, lambda);\n\n         double[] x = guess;\n         double fVal = computeObjectiveValue(x);\n         double[] x1 = x.clone();\n        int iter = 0;\n         while (true) {\n            ++iter;\n \n             double fX = fVal;\n             double fX2 = 0;\n\n             final PointValuePair current = new PointValuePair(x, fVal);\n             if (!stop) {                  if (checker != null) {\n                    stop = checker.converged(iter, previous, current);\n                 }\n             }\n             if (stop) {\n\n         int iteration = 0;\n         final ConvergenceChecker<PointValuePair> checker = getConvergenceChecker();\n         while (true) {\n            if (iteration > 0) {\n                 boolean converged = true;\n                 for (int i = 0; i < simplex.getSize(); i++) {\n                     PointValuePair prev = previous[i];\n\n             previous = simplex.getPoints();\n             simplex.iterate(evalFunc, comparator);\n \n-\t\t\t++iteration;\n         }\n     }\n \n\n \n                  PointVectorValuePair current = null;\n        int iter = 0;\n         for (boolean converged = false; !converged;) {\n            ++iter;\n \n                          PointVectorValuePair previous = current;\n\n \n                          if (previous != null) {\n                converged = checker.converged(iter, previous, current);\n                 if (converged) {\n                     setCost(computeCost(currentResiduals));\n                     return current;\n\n                  lmPar = 0;\n         boolean firstIteration = true;\n        int iter = 0;\n         final ConvergenceChecker<PointVectorValuePair> checker = getConvergenceChecker();\n         while (true) {\n            ++iter;\n+\n             final PointVectorValuePair previous = current;\n \n             \n                                          if (checker != null) {\n                                                 if (checker.converged(iter, previous, current)) {\n                             setCost(currentCost);\n                             return current;\n                         }\n","SolutionWithNoComments":"\n         this.checker = checker;\n \n         evaluations = new Incrementor(0, new MaxEvalCallback());\n        iterations = new Incrementor(Integer.MAX_VALUE, new MaxIterCallback());\n     }\n \n\n         }\n \n         PointValuePair current = null;\n         int maxEval = getMaxEvaluations();\n         while (true) {\n            incrementIterationCount();\n \n             final double objective = computeObjectiveValue(point);\n             PointValuePair previous = current;\n             current = new PointValuePair(point, objective);\n             if (previous != null) {\n                if (checker.converged(getIterations(), previous, current)) {\n                                          return current;\n                 }\n\n             steepestDescent = newSteepestDescent;\n \n                         if (getIterations() % n == 0 ||\n                 beta < 0) {\n                                  searchDirection = steepestDescent.clone();\n\n \n         generationLoop:\n         for (iterations = 1; iterations <= maxIterations; iterations++) {\n            incrementIterationCount();\n \n                          final RealMatrix arz = randn1(dimension, lambda);\n\n         double[] x = guess;\n         double fVal = computeObjectiveValue(x);\n         double[] x1 = x.clone();\n         while (true) {\n            incrementIterationCount();\n \n             double fX = fVal;\n             double fX2 = 0;\n\n             final PointValuePair current = new PointValuePair(x, fVal);\n             if (!stop) {                  if (checker != null) {\n                    stop = checker.converged(getIterations(), previous, current);\n                 }\n             }\n             if (stop) {\n\n         int iteration = 0;\n         final ConvergenceChecker<PointValuePair> checker = getConvergenceChecker();\n         while (true) {\n            if (getIterations() > 0) {\n                 boolean converged = true;\n                 for (int i = 0; i < simplex.getSize(); i++) {\n                     PointValuePair prev = previous[i];\n\n             previous = simplex.getPoints();\n             simplex.iterate(evalFunc, comparator);\n \n-\t\t\t++iteration;\n            incrementIterationCount();\n         }\n     }\n \n\n \n                  PointVectorValuePair current = null;\n         for (boolean converged = false; !converged;) {\n            incrementIterationCount();\n \n                          PointVectorValuePair previous = current;\n\n \n                          if (previous != null) {\n                converged = checker.converged(getIterations(), previous, current);\n                 if (converged) {\n                     setCost(computeCost(currentResiduals));\n                     return current;\n\n                  lmPar = 0;\n         boolean firstIteration = true;\n         final ConvergenceChecker<PointVectorValuePair> checker = getConvergenceChecker();\n         while (true) {\n            incrementIterationCount();\n+\n             final PointVectorValuePair previous = current;\n \n             \n                                          if (checker != null) {\n                                                 if (checker.converged(getIterations(), previous, current)) {\n                             setCost(currentCost);\n                             return current;\n                         }\n"},{"ids":232,"error":"junit.framework.AssertionFailedError","source":"/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java","code":"@@ -1416,6 +1416,7 @@ public void atan2(final double[] y, final int yOffset,\n         }\n \n         // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly\n \n     }\n \n","solution":"@@ -1416,6 +1416,7 @@ public void atan2(final double[] y, final int yOffset,\n         }\n \n         // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly\n      result[resultOffset] = FastMath.atan2(y[yOffset], x[xOffset]);\n \n     }\n \n","CodeWithNoComments":"\n         }\n \n          \n     }\n \n","SolutionWithNoComments":"\n         }\n \n                 result[resultOffset] = FastMath.atan2(y[yOffset], x[xOffset]);\n \n     }\n \n"},{"ids":233,"error":"junit.framework.AssertionFailedError","source":"/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java","code":"@@ -343,8 +343,10 @@ public int compare(EventState es0, EventState es1) {\n                 final double[] eventY = interpolator.getInterpolatedState().clone();\n \n                 // advance all event states to current time\n              currentEvent.stepAccepted(eventT, eventY);\n              isLastStep = currentEvent.stop();\n \n                 // handle the first part of the step, up to the event\n                 for (final StepHandler handler : stepHandlers) {\n@@ -354,22 +356,19 @@ public int compare(EventState es0, EventState es1) {\n                 if (isLastStep) {\n                     // the event asked to stop integration\n                     System.arraycopy(eventY, 0, y, 0, y.length);\n                  for (final EventState remaining : occuringEvents) {\n                      remaining.stepAccepted(eventT, eventY);\n                  }\n                     return eventT;\n                 }\n \n              boolean needReset = currentEvent.reset(eventT, eventY);\n                 if (needReset) {\n                     // some event handler has triggered changes that\n                     // invalidate the derivatives, we need to recompute them\n                     System.arraycopy(eventY, 0, y, 0, y.length);\n                     computeDerivatives(eventT, y, yDot);\n                     resetOccurred = true;\n                  for (final EventState remaining : occuringEvents) {\n                      remaining.stepAccepted(eventT, eventY);\n                  }\n                     return eventT;\n                 }\n \n","solution":"@@ -343,8 +343,10 @@ public int compare(EventState es0, EventState es1) {\n                 final double[] eventY = interpolator.getInterpolatedState().clone();\n \n                 // advance all event states to current time\n              for (final EventState state : eventsStates) {\n                  state.stepAccepted(eventT, eventY);\n                  isLastStep = isLastStep || state.stop();\n              }\n \n                 // handle the first part of the step, up to the event\n                 for (final StepHandler handler : stepHandlers) {\n@@ -354,22 +356,19 @@ public int compare(EventState es0, EventState es1) {\n                 if (isLastStep) {\n                     // the event asked to stop integration\n                     System.arraycopy(eventY, 0, y, 0, y.length);\n                     return eventT;\n                 }\n \n              boolean needReset = false;\n              for (final EventState state : eventsStates) {\n                  needReset =  needReset || state.reset(eventT, eventY);\n              }\n                 if (needReset) {\n                     // some event handler has triggered changes that\n                     // invalidate the derivatives, we need to recompute them\n                     System.arraycopy(eventY, 0, y, 0, y.length);\n                     computeDerivatives(eventT, y, yDot);\n                     resetOccurred = true;\n                     return eventT;\n                 }\n \n","CodeWithNoComments":"\n                 final double[] eventY = interpolator.getInterpolatedState().clone();\n \n                                 currentEvent.stepAccepted(eventT, eventY);\n                isLastStep = currentEvent.stop();\n \n                                  for (final StepHandler handler : stepHandlers) {\n\n                 if (isLastStep) {\n                                          System.arraycopy(eventY, 0, y, 0, y.length);\n                    for (final EventState remaining : occuringEvents) {\n                        remaining.stepAccepted(eventT, eventY);\n                    }\n                     return eventT;\n                 }\n \n                boolean needReset = currentEvent.reset(eventT, eventY);\n                 if (needReset) {\n                                                               System.arraycopy(eventY, 0, y, 0, y.length);\n                     computeDerivatives(eventT, y, yDot);\n                     resetOccurred = true;\n                    for (final EventState remaining : occuringEvents) {\n                        remaining.stepAccepted(eventT, eventY);\n                    }\n                     return eventT;\n                 }\n \n","SolutionWithNoComments":"\n                 final double[] eventY = interpolator.getInterpolatedState().clone();\n \n                                 for (final EventState state : eventsStates) {\n                    state.stepAccepted(eventT, eventY);\n                    isLastStep = isLastStep || state.stop();\n                }\n \n                                  for (final StepHandler handler : stepHandlers) {\n\n                 if (isLastStep) {\n                                          System.arraycopy(eventY, 0, y, 0, y.length);\n                     return eventT;\n                 }\n \n                boolean needReset = false;\n                for (final EventState state : eventsStates) {\n                    needReset =  needReset || state.reset(eventT, eventY);\n                }\n                 if (needReset) {\n                                                               System.arraycopy(eventY, 0, y, 0, y.length);\n                     computeDerivatives(eventT, y, yDot);\n                     resetOccurred = true;\n                     return eventT;\n                 }\n \n"},{"ids":234,"error":"junit.framework.AssertionFailedError","source":"/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java","code":"@@ -16,6 +16,7 @@\n  */\n package org.apache.commons.math3.random;\n \n import java.io.Serializable;\n \n import org.apache.commons.math3.exception.NotStrictlyPositiveException;\n import org.apache.commons.math3.util.FastMath;\n@@ -26,8 +27,10 @@\n  * @since 2.0\n  */\n public abstract class BitsStreamGenerator\n  implements RandomGenerator {\n     /** Serializable version identifier */\n     /** Next gaussian. */\n     private double nextGaussian;\n \n","solution":"@@ -16,6 +16,7 @@\n  */\n package org.apache.commons.math3.random;\n \n import java.io.Serializable;\n \n import org.apache.commons.math3.exception.NotStrictlyPositiveException;\n import org.apache.commons.math3.util.FastMath;\n@@ -26,8 +27,10 @@\n  * @since 2.0\n  */\n public abstract class BitsStreamGenerator\n  implements RandomGenerator,\n             Serializable {\n     /** Serializable version identifier */\n  private static final long serialVersionUID = 20130104L;\n     /** Next gaussian. */\n     private double nextGaussian;\n \n","CodeWithNoComments":"\n package org.apache.commons.math3.random;\n \n import java.io.Serializable;\n \n import org.apache.commons.math3.exception.NotStrictlyPositiveException;\n import org.apache.commons.math3.util.FastMath;\n\n    implements RandomGenerator {\n     private double nextGaussian;\n \n","SolutionWithNoComments":"\n  \n package org.apache.commons.math3.random;\n \n import java.io.Serializable;\n \n import org.apache.commons.math3.exception.NotStrictlyPositiveException;\n import org.apache.commons.math3.util.FastMath;\n\n public abstract class BitsStreamGenerator\n    implements RandomGenerator,\n               Serializable {\n     \n    private static final long serialVersionUID = 20130104L;\n          private double nextGaussian;\n \n"},{"ids":235,"error":"junit.framework.AssertionFailedError","source":"/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java","code":"@@ -84,7 +84,8 @@ public void reset(final Vector3D p1, final Vector3D p2) throws MathIllegalArgume\n      * @return a new instance, with reversed direction\n      */\n     public Line revert() {\n      final Line reverted = new Line(zero, zero.subtract(direction));\n         return reverted;\n     }\n \n","solution":"@@ -84,7 +84,8 @@ public void reset(final Vector3D p1, final Vector3D p2) throws MathIllegalArgume\n      * @return a new instance, with reversed direction\n      */\n     public Line revert() {\n      final Line reverted = new Line(this);\n      reverted.direction = reverted.direction.negate();\n         return reverted;\n     }\n \n","CodeWithNoComments":"\n        final Line reverted = new Line(zero, zero.subtract(direction));\n         return reverted;\n     }\n \n","SolutionWithNoComments":"\n    \n     public Line revert() {\n        final Line reverted = new Line(this);\n        reverted.direction = reverted.direction.negate();\n         return reverted;\n     }\n \n"},{"ids":236,"error":"java.lang.NullPointerException","source":"/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java","code":"@@ -111,6 +111,9 @@ public Vector3D intersection(final SubLine subLine, final boolean includeEndPoin\n \n         // compute the intersection on infinite line\n         Vector3D v1D = line.intersection(subLine.line);\n \n         // check location of point with respect to first sub-line\n         Location loc1 = remainingRegion.checkPoint(line.toSubSpace(v1D));\n/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java @@ -115,6 +115,9 @@ public Vector2D intersection(final SubLine subLine, final boolean includeEndPoin\n \n         // compute the intersection on infinite line\n         Vector2D v2D = line1.intersection(line2);\n \n         // check location of point with respect to first sub-line\n         Location loc1 = getRemainingRegion().checkPoint(line1.toSubSpace(v2D));\n","solution":"@@ -111,6 +111,9 @@ public Vector3D intersection(final SubLine subLine, final boolean includeEndPoin\n \n         // compute the intersection on infinite line\n         Vector3D v1D = line.intersection(subLine.line);\n      if (v1D == null) {\n          return null;\n      }\n \n         // check location of point with respect to first sub-line\n         Location loc1 = remainingRegion.checkPoint(line.toSubSpace(v1D));\n/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java @@ -115,6 +115,9 @@ public Vector2D intersection(final SubLine subLine, final boolean includeEndPoin\n \n         // compute the intersection on infinite line\n         Vector2D v2D = line1.intersection(line2);\n      if (v2D == null) {\n          return null;\n      }\n \n         // check location of point with respect to first sub-line\n         Location loc1 = getRemainingRegion().checkPoint(line1.toSubSpace(v2D));\n","CodeWithNoComments":"\n \n                  Vector3D v1D = line.intersection(subLine.line);\n \n                  Location loc1 = remainingRegion.checkPoint(line.toSubSpace(v1D));\n\n \n                  Vector2D v2D = line1.intersection(line2);\n \n                  Location loc1 = getRemainingRegion().checkPoint(line1.toSubSpace(v2D));\n","SolutionWithNoComments":"\n \n                  Vector3D v1D = line.intersection(subLine.line);\n        if (v1D == null) {\n            return null;\n        }\n \n                  Location loc1 = remainingRegion.checkPoint(line.toSubSpace(v1D));\n\n \n                  Vector2D v2D = line1.intersection(line2);\n        if (v2D == null) {\n            return null;\n        }\n \n                  Location loc1 = getRemainingRegion().checkPoint(line1.toSubSpace(v2D));\n"},{"ids":237,"error":"java.lang.OutOfMemoryError","source":"/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java","code":"@@ -559,7 +559,16 @@ protected void setUp() {\n      * @return the square-root of the weight matrix.\n      */\n     private RealMatrix squareRoot(RealMatrix m) {\n             final EigenDecomposition dec = new EigenDecomposition(m);\n             return dec.getSquareRoot();\n     }\n }\n","solution":"@@ -559,7 +559,16 @@ protected void setUp() {\n      * @return the square-root of the weight matrix.\n      */\n     private RealMatrix squareRoot(RealMatrix m) {\n      if (m instanceof DiagonalMatrix) {\n          final int dim = m.getRowDimension();\n          final RealMatrix sqrtM = new DiagonalMatrix(dim);\n          for (int i = 0; i < dim; i++) {\n             sqrtM.setEntry(i, i, FastMath.sqrt(m.getEntry(i, i)));\n          }\n          return sqrtM;\n      } else {\n             final EigenDecomposition dec = new EigenDecomposition(m);\n             return dec.getSquareRoot();\n      }\n     }\n }\n","CodeWithNoComments":"\n     \n     private RealMatrix squareRoot(RealMatrix m) {\n             final EigenDecomposition dec = new EigenDecomposition(m);\n             return dec.getSquareRoot();\n     }\n }\n","SolutionWithNoComments":"\n  \n     private RealMatrix squareRoot(RealMatrix m) {\n        if (m instanceof DiagonalMatrix) {\n            final int dim = m.getRowDimension();\n            final RealMatrix sqrtM = new DiagonalMatrix(dim);\n            for (int i = 0; i < dim; i++) {\n               sqrtM.setEntry(i, i, FastMath.sqrt(m.getEntry(i, i)));\n            }\n            return sqrtM;\n        } else {\n             final EigenDecomposition dec = new EigenDecomposition(m);\n             return dec.getSquareRoot();\n        }\n     }\n }\n"},{"ids":238,"error":"java.lang.OutOfMemoryError","source":"/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/Weight.java","code":"@@ -40,10 +40,7 @@\n      */\n     public Weight(double[] weight) {\n         final int dim = weight.length;\n      weightMatrix = org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(dim, dim);\n      for (int i = 0; i < dim; i++) {\n          weightMatrix.setEntry(i, i, weight[i]);\n      }\n     }\n \n     /**\n/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java @@ -264,7 +264,16 @@ private void parseOptimizationData(OptimizationData... optData) {\n      * @return the square-root of the weight matrix.\n      */\n     private RealMatrix squareRoot(RealMatrix m) {\n             final EigenDecomposition dec = new EigenDecomposition(m);\n             return dec.getSquareRoot();\n     }\n }\n","solution":"@@ -40,10 +40,7 @@\n      */\n     public Weight(double[] weight) {\n         final int dim = weight.length;\n      weightMatrix = new DiagonalMatrix(weight);\n     }\n \n     /**\n/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java @@ -264,7 +264,16 @@ private void parseOptimizationData(OptimizationData... optData) {\n      * @return the square-root of the weight matrix.\n      */\n     private RealMatrix squareRoot(RealMatrix m) {\n      if (m instanceof DiagonalMatrix) {\n          final int dim = m.getRowDimension();\n          final RealMatrix sqrtM = new DiagonalMatrix(dim);\n          for (int i = 0; i < dim; i++) {\n              sqrtM.setEntry(i, i, FastMath.sqrt(m.getEntry(i, i)));\n          }\n          return sqrtM;\n      } else {\n             final EigenDecomposition dec = new EigenDecomposition(m);\n             return dec.getSquareRoot();\n      }\n     }\n }\n","CodeWithNoComments":"\n      \n     public Weight(double[] weight) {\n         final int dim = weight.length;\n        weightMatrix = org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(dim, dim);\n        for (int i = 0; i < dim; i++) {\n            weightMatrix.setEntry(i, i, weight[i]);\n        }\n     }\n \n\n    \n     private RealMatrix squareRoot(RealMatrix m) {\n             final EigenDecomposition dec = new EigenDecomposition(m);\n             return dec.getSquareRoot();\n     }\n }\n","SolutionWithNoComments":"\n      \n     public Weight(double[] weight) {\n         final int dim = weight.length;\n        weightMatrix = new DiagonalMatrix(weight);\n     }\n \n\n  \n     private RealMatrix squareRoot(RealMatrix m) {\n        if (m instanceof DiagonalMatrix) {\n            final int dim = m.getRowDimension();\n            final RealMatrix sqrtM = new DiagonalMatrix(dim);\n            for (int i = 0; i < dim; i++) {\n                sqrtM.setEntry(i, i, FastMath.sqrt(m.getEntry(i, i)));\n            }\n            return sqrtM;\n        } else {\n             final EigenDecomposition dec = new EigenDecomposition(m);\n             return dec.getSquareRoot();\n        }\n     }\n }\n"},{"ids":239,"error":"junit.framework.AssertionFailedError","source":"/src/main/java/org/apache/commons/math3/util/FastMath.java","code":"@@ -310,6 +310,7 @@\n     /** 2^52 - double numbers this large must be integral (no fraction) or NaN or Infinite */\n     private static final double TWO_POWER_52 = 4503599627370496.0;\n     /** 2^53 - double numbers this large must be even. */\n \n     /** Constant: {@value}. */\n     private static final double F_1_3 = 1d / 3d;\n@@ -1538,7 +1539,7 @@ public static double pow(double x, double y) {\n         /* Handle special case x<0 */\n         if (x < 0) {\n             // y is an even integer in this case\n          if (y >= TWO_POWER_52 || y <= -TWO_POWER_52) {\n                 return pow(-x, y);\n             }\n \n","solution":"@@ -310,6 +310,7 @@\n     /** 2^52 - double numbers this large must be integral (no fraction) or NaN or Infinite */\n     private static final double TWO_POWER_52 = 4503599627370496.0;\n     /** 2^53 - double numbers this large must be even. */\n  private static final double TWO_POWER_53 = 2 * TWO_POWER_52;\n \n     /** Constant: {@value}. */\n     private static final double F_1_3 = 1d / 3d;\n@@ -1538,7 +1539,7 @@ public static double pow(double x, double y) {\n         /* Handle special case x<0 */\n         if (x < 0) {\n             // y is an even integer in this case\n          if (y >= TWO_POWER_53 || y <= -TWO_POWER_53) {\n                 return pow(-x, y);\n             }\n \n","CodeWithNoComments":"\n     private static final double TWO_POWER_52 = 4503599627370496.0;\n \n     private static final double F_1_3 = 1d / 3d;\n\n         if (x < 0) {\n                         if (y >= TWO_POWER_52 || y <= -TWO_POWER_52) {\n                 return pow(-x, y);\n             }\n \n","SolutionWithNoComments":"\n     private static final double TWO_POWER_52 = 4503599627370496.0;\n    private static final double TWO_POWER_53 = 2 * TWO_POWER_52;\n \n     private static final double F_1_3 = 1d / 3d;\n\n         if (x < 0) {\n                         if (y >= TWO_POWER_53 || y <= -TWO_POWER_53) {\n                 return pow(-x, y);\n             }\n \n"},{"ids":240,"error":"junit.framework.AssertionFailedError","source":"/src/main/java/org/apache/commons/math3/dfp/Dfp.java","code":"@@ -1600,7 +1600,11 @@ public Dfp multiply(final Dfp x) {\n      * @return product of this and x\n      */\n     public Dfp multiply(final int x) {\n             return multiplyFast(x);\n     }\n \n     /** Multiply this by a single digit 0&lt;=x&lt;radix.\n","solution":"@@ -1600,7 +1600,11 @@ public Dfp multiply(final Dfp x) {\n      * @return product of this and x\n      */\n     public Dfp multiply(final int x) {\n      if (x >= 0 && x < RADIX) {\n             return multiplyFast(x);\n      } else {\n          return multiply(newInstance(x));\n      }\n     }\n \n     /** Multiply this by a single digit 0&lt;=x&lt;radix.\n","CodeWithNoComments":"\n             return multiplyFast(x);\n     }\n \n","SolutionWithNoComments":"\n  \n     public Dfp multiply(final int x) {\n        if (x >= 0 && x < RADIX) {\n             return multiplyFast(x);\n        } else {\n            return multiply(newInstance(x));\n        }\n     }\n \n"},{"ids":241,"error":"junit.framework.AssertionFailedError","source":"/src/main/java/org/apache/commons/math3/distribution/FDistribution.java","code":"@@ -272,7 +272,7 @@ public double getSupportUpperBound() {\n \n     /** {@inheritDoc} */\n     public boolean isSupportLowerBoundInclusive() {\n      return true;\n     }\n \n     /** {@inheritDoc} */\n/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java @@ -181,7 +181,7 @@ public boolean isSupportLowerBoundInclusive() {\n \n     /** {@inheritDoc} */\n     public boolean isSupportUpperBoundInclusive() {\n      return false;\n     }\n \n     /**\n","solution":"@@ -272,7 +272,7 @@ public double getSupportUpperBound() {\n \n     /** {@inheritDoc} */\n     public boolean isSupportLowerBoundInclusive() {\n      return false;\n     }\n \n     /** {@inheritDoc} */\n/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java @@ -181,7 +181,7 @@ public boolean isSupportLowerBoundInclusive() {\n \n     /** {@inheritDoc} */\n     public boolean isSupportUpperBoundInclusive() {\n      return true;\n     }\n \n     /**\n","CodeWithNoComments":"\n \n     public boolean isSupportLowerBoundInclusive() {\n        return true;\n     }\n \n\n \n     public boolean isSupportUpperBoundInclusive() {\n        return false;\n     }\n \n","SolutionWithNoComments":"\n \n     public boolean isSupportLowerBoundInclusive() {\n        return false;\n     }\n \n\n \n     public boolean isSupportUpperBoundInclusive() {\n        return true;\n     }\n \n"},{"ids":242,"error":"junit.framework.AssertionFailedError","source":"/src/main/java/org/apache/commons/math3/util/FastMath.java","code":"@@ -79,6 +79,7 @@\n  */\n public class FastMath {\n     /** StrictMath.log(Double.MAX_VALUE): {@value} */\n \n     /** Archimede's constant PI, ratio of circle circumference to diameter. */\n     public static final double PI = 105414357.0 / 33554432.0 + 1.984187159361080883e-9;\n@@ -391,12 +392,21 @@ public static double cosh(double x) {\n       // exp(-z) can be ignored in comparison with exp(z)\n \n       if (x > 20) {\n               // Avoid overflow (MATH-905).\n               return 0.5 * exp(x);\n           }\n    if (x < -20) {\n               // Avoid overflow (MATH-905).\n               return 0.5 * exp(-x);\n       }\n \n       final double hiPrec[] = new double[2];\n@@ -452,12 +462,21 @@ public static double sinh(double x) {\n       // exp(-z) can be ignored in comparison with exp(z)\n \n       if (x > 20) {\n               // Avoid overflow (MATH-905).\n               return 0.5 * exp(x);\n           }\n    if (x < -20) {\n               // Avoid overflow (MATH-905).\n               return -0.5 * exp(-x);\n       }\n \n       if (x == 0) {\n","solution":"@@ -79,6 +79,7 @@\n  */\n public class FastMath {\n     /** StrictMath.log(Double.MAX_VALUE): {@value} */\n  private static final double LOG_MAX_VALUE = StrictMath.log(Double.MAX_VALUE);\n \n     /** Archimede's constant PI, ratio of circle circumference to diameter. */\n     public static final double PI = 105414357.0 / 33554432.0 + 1.984187159361080883e-9;\n@@ -391,12 +392,21 @@ public static double cosh(double x) {\n       // exp(-z) can be ignored in comparison with exp(z)\n \n       if (x > 20) {\n        if (x >= LOG_MAX_VALUE) {\n               // Avoid overflow (MATH-905).\n            final double t = exp(0.5 * x);\n            return (0.5 * t) * t;\n        } else {\n               return 0.5 * exp(x);\n           }\n    } else if (x < -20) {\n        if (x <= -LOG_MAX_VALUE) {\n               // Avoid overflow (MATH-905).\n            final double t = exp(-0.5 * x);\n            return (0.5 * t) * t;\n        } else {\n               return 0.5 * exp(-x);\n        }\n       }\n \n       final double hiPrec[] = new double[2];\n@@ -452,12 +462,21 @@ public static double sinh(double x) {\n       // exp(-z) can be ignored in comparison with exp(z)\n \n       if (x > 20) {\n        if (x >= LOG_MAX_VALUE) {\n               // Avoid overflow (MATH-905).\n            final double t = exp(0.5 * x);\n            return (0.5 * t) * t;\n        } else {\n               return 0.5 * exp(x);\n           }\n    } else if (x < -20) {\n        if (x <= -LOG_MAX_VALUE) {\n               // Avoid overflow (MATH-905).\n            final double t = exp(-0.5 * x);\n            return (-0.5 * t) * t;\n        } else {\n               return -0.5 * exp(-x);\n        }\n       }\n \n       if (x == 0) {\n","CodeWithNoComments":"\n  \n public class FastMath {\n     public static final double PI = 105414357.0 / 33554432.0 + 1.984187159361080883e-9;\n\n        \n       if (x > 20) {\n                              return 0.5 * exp(x);\n           }\n      if (x < -20) {\n                              return 0.5 * exp(-x);\n       }\n \n       final double hiPrec[] = new double[2];\n\n        \n       if (x > 20) {\n                              return 0.5 * exp(x);\n           }\n      if (x < -20) {\n                              return -0.5 * exp(-x);\n       }\n \n       if (x == 0) {\n","SolutionWithNoComments":"\n  \n public class FastMath {\n    private static final double LOG_MAX_VALUE = StrictMath.log(Double.MAX_VALUE);\n \n     public static final double PI = 105414357.0 / 33554432.0 + 1.984187159361080883e-9;\n\n        \n       if (x > 20) {\n          if (x >= LOG_MAX_VALUE) {\n                             final double t = exp(0.5 * x);\n              return (0.5 * t) * t;\n          } else {\n               return 0.5 * exp(x);\n           }\n      } else if (x < -20) {\n          if (x <= -LOG_MAX_VALUE) {\n                             final double t = exp(-0.5 * x);\n              return (0.5 * t) * t;\n          } else {\n               return 0.5 * exp(-x);\n          }\n       }\n \n       final double hiPrec[] = new double[2];\n\n        \n       if (x > 20) {\n          if (x >= LOG_MAX_VALUE) {\n                             final double t = exp(0.5 * x);\n              return (0.5 * t) * t;\n          } else {\n               return 0.5 * exp(x);\n           }\n      } else if (x < -20) {\n          if (x <= -LOG_MAX_VALUE) {\n                             final double t = exp(-0.5 * x);\n              return (-0.5 * t) * t;\n          } else {\n               return -0.5 * exp(-x);\n          }\n       }\n \n       if (x == 0) {\n"},{"ids":243,"error":"junit.framework.AssertionFailedError","source":"/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java","code":"@@ -929,7 +929,7 @@ public FitnessFunction() {\n             double[] res = new double[x.length];\n             for (int i = 0; i < x.length; i++) {\n                 double diff = boundaries[1][i] - boundaries[0][i];\n              res[i] = (x[i] - boundaries[0][i]) / diff;\n             }\n             return res;\n         }\n@@ -955,7 +955,7 @@ public FitnessFunction() {\n             double[] res = new double[x.length];\n             for (int i = 0; i < x.length; i++) {\n                 double diff = boundaries[1][i] - boundaries[0][i];\n              res[i] = diff * x[i] + boundaries[0][i];\n             }\n             return res;\n         }\n@@ -987,12 +987,14 @@ public boolean isFeasible(final double[] x) {\n                 return true;\n             }\n \n \n             for (int i = 0; i < x.length; i++) {\n              if (x[i] < 0) {\n                     return false;\n                 }\n              if (x[i] > 1.0) {\n                     return false;\n                 }\n             }\n","solution":"@@ -929,7 +929,7 @@ public FitnessFunction() {\n             double[] res = new double[x.length];\n             for (int i = 0; i < x.length; i++) {\n                 double diff = boundaries[1][i] - boundaries[0][i];\n              res[i] = x[i] / diff;\n             }\n             return res;\n         }\n@@ -955,7 +955,7 @@ public FitnessFunction() {\n             double[] res = new double[x.length];\n             for (int i = 0; i < x.length; i++) {\n                 double diff = boundaries[1][i] - boundaries[0][i];\n              res[i] = diff * x[i];\n             }\n             return res;\n         }\n@@ -987,12 +987,14 @@ public boolean isFeasible(final double[] x) {\n                 return true;\n             }\n \n          final double[] bLoEnc = encode(boundaries[0]);\n          final double[] bHiEnc = encode(boundaries[1]);\n \n             for (int i = 0; i < x.length; i++) {\n              if (x[i] < bLoEnc[i]) {\n                     return false;\n                 }\n              if (x[i] > bHiEnc[i]) {\n                     return false;\n                 }\n             }\n","CodeWithNoComments":"\n             double[] res = new double[x.length];\n             for (int i = 0; i < x.length; i++) {\n                 double diff = boundaries[1][i] - boundaries[0][i];\n                res[i] = (x[i] - boundaries[0][i]) / diff;\n             }\n             return res;\n         }\n\n             double[] res = new double[x.length];\n             for (int i = 0; i < x.length; i++) {\n                 double diff = boundaries[1][i] - boundaries[0][i];\n                res[i] = diff * x[i] + boundaries[0][i];\n             }\n             return res;\n         }\n\n                 return true;\n             }\n \n \n             for (int i = 0; i < x.length; i++) {\n                if (x[i] < 0) {\n                     return false;\n                 }\n                if (x[i] > 1.0) {\n                     return false;\n                 }\n             }\n","SolutionWithNoComments":"\n             double[] res = new double[x.length];\n             for (int i = 0; i < x.length; i++) {\n                 double diff = boundaries[1][i] - boundaries[0][i];\n                res[i] = x[i] / diff;\n             }\n             return res;\n         }\n\n             double[] res = new double[x.length];\n             for (int i = 0; i < x.length; i++) {\n                 double diff = boundaries[1][i] - boundaries[0][i];\n                res[i] = diff * x[i];\n             }\n             return res;\n         }\n\n                 return true;\n             }\n \n            final double[] bLoEnc = encode(boundaries[0]);\n            final double[] bHiEnc = encode(boundaries[1]);\n \n             for (int i = 0; i < x.length; i++) {\n                if (x[i] < bLoEnc[i]) {\n                     return false;\n                 }\n                if (x[i] > bHiEnc[i]) {\n                     return false;\n                 }\n             }\n"},{"ids":244,"error":"junit.framework.AssertionFailedError","source":"/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java","code":"@@ -918,7 +918,8 @@ public FitnessFunction() {\n          * @return the original objective variables, possibly repaired.\n          */\n         public double[] repairAndDecode(final double[] x) {\n          return\n                 decode(x);\n         }\n \n","solution":"@@ -918,7 +918,8 @@ public FitnessFunction() {\n          * @return the original objective variables, possibly repaired.\n          */\n         public double[] repairAndDecode(final double[] x) {\n          return boundaries != null && isRepairMode ?\n              decode(repair(x)) :\n                 decode(x);\n         }\n \n","CodeWithNoComments":"\n       \n         public double[] repairAndDecode(final double[] x) {\n            return\n                 decode(x);\n         }\n \n","SolutionWithNoComments":"\n      \n         public double[] repairAndDecode(final double[] x) {\n            return boundaries != null && isRepairMode ?\n                decode(repair(x)) :\n                 decode(x);\n         }\n \n"},{"ids":245,"error":"java.lang.Exception","source":"/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java","code":"@@ -537,6 +537,19 @@ private void checkParameters() {\n                 boundaries[1] = uB;\n \n                 // Abort early if the normalization will overflow (cf. \"encode\" method).\n\n             }\n         } else {\n             // Convert API to internal handling of boundaries.\n","solution":"@@ -537,6 +537,19 @@ private void checkParameters() {\n                 boundaries[1] = uB;\n \n                 // Abort early if the normalization will overflow (cf. \"encode\" method).\n              for (int i = 0; i < lB.length; i++) {\n                  if (Double.isInfinite(boundaries[1][i] - boundaries[0][i])) {\n                      final double max = Double.MAX_VALUE + boundaries[0][i];\n                      final NumberIsTooLargeException e\n                          = new NumberIsTooLargeException(boundaries[1][i],\n                                                          max,\n                                                          true);\n                      e.getContext().addMessage(LocalizedFormats.OVERFLOW);\n                      e.getContext().addMessage(LocalizedFormats.INDEX, i);\n\n                      throw e;\n                  }\n              }\n             }\n         } else {\n             // Convert API to internal handling of boundaries.\n","CodeWithNoComments":"\n                 boundaries[1] = uB;\n \n                 +\n             }\n         } else {\n             ","SolutionWithNoComments":"\n                 boundaries[1] = uB;\n \n                                 for (int i = 0; i < lB.length; i++) {\n                    if (Double.isInfinite(boundaries[1][i] - boundaries[0][i])) {\n                        final double max = Double.MAX_VALUE + boundaries[0][i];\n                        final NumberIsTooLargeException e\n                            = new NumberIsTooLargeException(boundaries[1][i],\n                                                            max,\n                                                            true);\n                        e.getContext().addMessage(LocalizedFormats.OVERFLOW);\n                        e.getContext().addMessage(LocalizedFormats.INDEX, i);\n+\n                        throw e;\n                    }\n                }\n             }\n         } else {\n             "},{"ids":246,"error":"junit.framework.AssertionFailedError","source":"/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java","code":"@@ -148,6 +148,7 @@ protected UnivariatePointValuePair doOptimize() {\n         UnivariatePointValuePair current\n             = new UnivariatePointValuePair(x, isMinim ? fx : -fx);\n         // Best point encountered so far (which is the initial guess).\n \n         int iter = 0;\n         while (true) {\n@@ -231,10 +232,15 @@ protected UnivariatePointValuePair doOptimize() {\n                 // User-defined convergence checker.\n                 previous = current;\n                 current = new UnivariatePointValuePair(u, isMinim ? fu : -fu);\n \n                 if (checker != null) {\n                     if (checker.converged(iter, previous, current)) {\n                      return best(current, previous, isMinim);\n                     }\n                 }\n \n@@ -271,9 +277,10 @@ protected UnivariatePointValuePair doOptimize() {\n                     }\n                 }\n             } else { // Default termination (Brent's criterion).\n              return\n                             best(current,\n                                  previous,\n                             isMinim);\n             }\n             ++iter;\n","solution":"@@ -148,6 +148,7 @@ protected UnivariatePointValuePair doOptimize() {\n         UnivariatePointValuePair current\n             = new UnivariatePointValuePair(x, isMinim ? fx : -fx);\n         // Best point encountered so far (which is the initial guess).\n      UnivariatePointValuePair best = current;\n \n         int iter = 0;\n         while (true) {\n@@ -231,10 +232,15 @@ protected UnivariatePointValuePair doOptimize() {\n                 // User-defined convergence checker.\n                 previous = current;\n                 current = new UnivariatePointValuePair(u, isMinim ? fu : -fu);\n              best = best(best,\n                          best(current,\n                               previous,\n                               isMinim),\n                          isMinim);\n \n                 if (checker != null) {\n                     if (checker.converged(iter, previous, current)) {\n                      return best;\n                     }\n                 }\n \n@@ -271,9 +277,10 @@ protected UnivariatePointValuePair doOptimize() {\n                     }\n                 }\n             } else { // Default termination (Brent's criterion).\n              return best(best,\n                             best(current,\n                                  previous,\n                               isMinim),\n                             isMinim);\n             }\n             ++iter;\n","CodeWithNoComments":"\n         UnivariatePointValuePair current\n             = new UnivariatePointValuePair(x, isMinim ? fx : -fx);\n          \n         int iter = 0;\n         while (true) {\n\n                                  previous = current;\n                 current = new UnivariatePointValuePair(u, isMinim ? fu : -fu);\n \n                 if (checker != null) {\n                     if (checker.converged(iter, previous, current)) {\n                        return best(current, previous, isMinim);\n                     }\n                 }\n \n\n                     }\n                 }\n             } else {                 return\n                             best(current,\n                                  previous,\n                             isMinim);\n             }\n             ++iter;\n","SolutionWithNoComments":"\n         UnivariatePointValuePair current\n             = new UnivariatePointValuePair(x, isMinim ? fx : -fx);\n                 UnivariatePointValuePair best = current;\n \n         int iter = 0;\n         while (true) {\n\n                                  previous = current;\n                 current = new UnivariatePointValuePair(u, isMinim ? fu : -fu);\n                best = best(best,\n                            best(current,\n                                 previous,\n                                 isMinim),\n                            isMinim);\n \n                 if (checker != null) {\n                     if (checker.converged(iter, previous, current)) {\n                        return best;\n                     }\n                 }\n \n\n                     }\n                 }\n             } else {                 return best(best,\n                             best(current,\n                                  previous,\n                                 isMinim),\n                             isMinim);\n             }\n             ++iter;\n"},{"ids":247,"error":"junit.framework.AssertionFailedError","source":"/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java","code":"@@ -66,7 +66,6 @@ public RectangularCholeskyDecomposition(RealMatrix matrix, double small)\n         final double[][] c = matrix.getData();\n         final double[][] b = new double[order][order];\n \n      int[] swap  = new int[order];\n         int[] index = new int[order];\n         for (int i = 0; i < order; ++i) {\n             index[i] = i;\n@@ -76,21 +75,24 @@ public RectangularCholeskyDecomposition(RealMatrix matrix, double small)\n         for (boolean loop = true; loop;) {\n \n             // find maximal diagonal element\n          swap[r] = r;\n             for (int i = r + 1; i < order; ++i) {\n                 int ii  = index[i];\n              int isi = index[swap[i]];\n              if (c[ii][ii] > c[isi][isi]) {\n                  swap[r] = i;\n                 }\n             }\n \n \n             // swap elements\n          if (swap[r] != r) {\n              int tmp = index[r];\n              index[r] = index[swap[r]];\n              index[swap[r]] = tmp;\n             }\n \n             // check diagonal element\n@@ -121,11 +123,12 @@ public RectangularCholeskyDecomposition(RealMatrix matrix, double small)\n                 final double sqrt = FastMath.sqrt(c[ir][ir]);\n                 b[r][r] = sqrt;\n                 final double inverse  = 1 / sqrt;\n                 for (int i = r + 1; i < order; ++i) {\n                     final int ii = index[i];\n                     final double e = inverse * c[ii][ir];\n                     b[i][r] = e;\n                  c[ii][ii] -= e * e;\n                     for (int j = r + 1; j < i; ++j) {\n                         final int ij = index[j];\n                         final double f = c[ii][ij] - e * b[j][r];\n","solution":"@@ -66,7 +66,6 @@ public RectangularCholeskyDecomposition(RealMatrix matrix, double small)\n         final double[][] c = matrix.getData();\n         final double[][] b = new double[order][order];\n \n         int[] index = new int[order];\n         for (int i = 0; i < order; ++i) {\n             index[i] = i;\n@@ -76,21 +75,24 @@ public RectangularCholeskyDecomposition(RealMatrix matrix, double small)\n         for (boolean loop = true; loop;) {\n \n             // find maximal diagonal element\n          int swapR = r;\n             for (int i = r + 1; i < order; ++i) {\n                 int ii  = index[i];\n              int isr = index[swapR];\n              if (c[ii][ii] > c[isr][isr]) {\n                  swapR = i;\n                 }\n             }\n \n \n             // swap elements\n          if (swapR != r) {\n              final int tmpIndex    = index[r];\n              index[r]              = index[swapR];\n              index[swapR]          = tmpIndex;\n              final double[] tmpRow = b[r];\n              b[r]                  = b[swapR];\n              b[swapR]              = tmpRow;\n             }\n \n             // check diagonal element\n@@ -121,11 +123,12 @@ public RectangularCholeskyDecomposition(RealMatrix matrix, double small)\n                 final double sqrt = FastMath.sqrt(c[ir][ir]);\n                 b[r][r] = sqrt;\n                 final double inverse  = 1 / sqrt;\n              final double inverse2 = 1 / c[ir][ir];\n                 for (int i = r + 1; i < order; ++i) {\n                     final int ii = index[i];\n                     final double e = inverse * c[ii][ir];\n                     b[i][r] = e;\n                  c[ii][ii] -= c[ii][ir] * c[ii][ir] * inverse2;\n                     for (int j = r + 1; j < i; ++j) {\n                         final int ij = index[j];\n                         final double f = c[ii][ij] - e * b[j][r];\n","CodeWithNoComments":"\n         final double[][] c = matrix.getData();\n         final double[][] b = new double[order][order];\n \n        int[] swap  = new int[order];\n         int[] index = new int[order];\n         for (int i = 0; i < order; ++i) {\n             index[i] = i;\n\n         for (boolean loop = true; loop;) {\n \n                         swap[r] = r;\n             for (int i = r + 1; i < order; ++i) {\n                 int ii  = index[i];\n                int isi = index[swap[i]];\n                if (c[ii][ii] > c[isi][isi]) {\n                    swap[r] = i;\n                 }\n             }\n \n \n                         if (swap[r] != r) {\n                int tmp = index[r];\n                index[r] = index[swap[r]];\n                index[swap[r]] = tmp;\n             }\n \n             \n                 final double sqrt = FastMath.sqrt(c[ir][ir]);\n                 b[r][r] = sqrt;\n                 final double inverse  = 1 / sqrt;\n                 for (int i = r + 1; i < order; ++i) {\n                     final int ii = index[i];\n                     final double e = inverse * c[ii][ir];\n                     b[i][r] = e;\n                    c[ii][ii] -= e * e;\n                     for (int j = r + 1; j < i; ++j) {\n                         final int ij = index[j];\n                         final double f = c[ii][ij] - e * b[j][r];\n","SolutionWithNoComments":"\n         final double[][] c = matrix.getData();\n         final double[][] b = new double[order][order];\n \n         int[] index = new int[order];\n         for (int i = 0; i < order; ++i) {\n             index[i] = i;\n\n         for (boolean loop = true; loop;) {\n \n                         int swapR = r;\n             for (int i = r + 1; i < order; ++i) {\n                 int ii  = index[i];\n                int isr = index[swapR];\n                if (c[ii][ii] > c[isr][isr]) {\n                    swapR = i;\n                 }\n             }\n \n \n                         if (swapR != r) {\n                final int tmpIndex    = index[r];\n                index[r]              = index[swapR];\n                index[swapR]          = tmpIndex;\n                final double[] tmpRow = b[r];\n                b[r]                  = b[swapR];\n                b[swapR]              = tmpRow;\n             }\n \n             \n                 final double sqrt = FastMath.sqrt(c[ir][ir]);\n                 b[r][r] = sqrt;\n                 final double inverse  = 1 / sqrt;\n                final double inverse2 = 1 / c[ir][ir];\n                 for (int i = r + 1; i < order; ++i) {\n                     final int ii = index[i];\n                     final double e = inverse * c[ii][ir];\n                     b[i][r] = e;\n                    c[ii][ii] -= c[ii][ir] * c[ii][ir] * inverse2;\n                     for (int j = r + 1; j < i; ++j) {\n                         final int ij = index[j];\n                         final double f = c[ii][ij] - e * b[j][r];\n"},{"ids":248,"error":"junit.framework.AssertionFailedError","source":"/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java","code":"@@ -227,7 +227,7 @@ protected UnivariatePointValuePair doOptimize() {\n \n                 if (checker != null) {\n                     if (checker.converged(iter, previous, current)) {\n                      return current;\n                     }\n                 }\n \n@@ -264,7 +264,7 @@ protected UnivariatePointValuePair doOptimize() {\n                     }\n                 }\n             } else { // Default termination (Brent's criterion).\n              return current;\n             }\n             ++iter;\n         }\n","solution":"@@ -227,7 +227,7 @@ protected UnivariatePointValuePair doOptimize() {\n \n                 if (checker != null) {\n                     if (checker.converged(iter, previous, current)) {\n                      return best(current, previous, isMinim);\n                     }\n                 }\n \n@@ -264,7 +264,7 @@ protected UnivariatePointValuePair doOptimize() {\n                     }\n                 }\n             } else { // Default termination (Brent's criterion).\n              return best(current, previous, isMinim);\n             }\n             ++iter;\n         }\n","CodeWithNoComments":"\n \n                 if (checker != null) {\n                     if (checker.converged(iter, previous, current)) {\n                        return current;\n                     }\n                 }\n \n\n                     }\n                 }\n             } else {                 return current;\n             }\n             ++iter;\n         }\n","SolutionWithNoComments":"\n \n                 if (checker != null) {\n                     if (checker.converged(iter, previous, current)) {\n                        return best(current, previous, isMinim);\n                     }\n                 }\n \n\n                     }\n                 }\n             } else {                 return best(current, previous, isMinim);\n             }\n             ++iter;\n         }\n"},{"ids":249,"error":"junit.framework.AssertionFailedError","source":"/src/main/java/org/apache/commons/math3/stat/inference/MannWhitneyUTest.java","code":"@@ -170,7 +170,7 @@ private double calculateAsymptoticPValue(final double Umin,\n                                              final int n2)\n         throws ConvergenceException, MaxCountExceededException {\n \n      final int n1n2prod = n1 * n2;\n \n         // http://en.wikipedia.org/wiki/Mann%E2%80%93Whitney_U#Normal_approximation\n         final double EU = n1n2prod / 2.0;\n","solution":"@@ -170,7 +170,7 @@ private double calculateAsymptoticPValue(final double Umin,\n                                              final int n2)\n         throws ConvergenceException, MaxCountExceededException {\n \n      final double n1n2prod = n1 * n2;\n \n         // http://en.wikipedia.org/wiki/Mann%E2%80%93Whitney_U#Normal_approximation\n         final double EU = n1n2prod / 2.0;\n","CodeWithNoComments":"\n                                              final int n2)\n         throws ConvergenceException, MaxCountExceededException {\n \n        final int n1n2prod = n1 * n2;\n \n                  final double EU = n1n2prod / 2.0;\n","SolutionWithNoComments":"\n                                              final int n2)\n         throws ConvergenceException, MaxCountExceededException {\n \n        final double n1n2prod = n1 * n2;\n \n                  final double EU = n1n2prod / 2.0;\n"},{"ids":250,"error":"junit.framework.AssertionFailedError","source":"/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java","code":"@@ -320,8 +320,11 @@ private void guessAOmega() {\n                 }\n                 a = 0.5 * (yMax - yMin);\n             } else {\n                     // In some ill-conditioned cases (cf. MATH-844), the guesser\n                     // procedure cannot produce sensible results.\n \n                 a = FastMath.sqrt(c1 / c2);\n                 omega = FastMath.sqrt(c2 / c3);\n","solution":"@@ -320,8 +320,11 @@ private void guessAOmega() {\n                 }\n                 a = 0.5 * (yMax - yMin);\n             } else {\n              if (c2 == 0) {\n                     // In some ill-conditioned cases (cf. MATH-844), the guesser\n                     // procedure cannot produce sensible results.\n                  throw new MathIllegalStateException(LocalizedFormats.ZERO_DENOMINATOR);\n              }\n \n                 a = FastMath.sqrt(c1 / c2);\n                 omega = FastMath.sqrt(c2 / c3);\n","CodeWithNoComments":"\n                 }\n                 a = 0.5 * (yMax - yMin);\n             } else {\n                                           \n                 a = FastMath.sqrt(c1 / c2);\n                 omega = FastMath.sqrt(c2 / c3);\n","SolutionWithNoComments":"\n                 }\n                 a = 0.5 * (yMax - yMin);\n             } else {\n                if (c2 == 0) {\n                                                              throw new MathIllegalStateException(LocalizedFormats.ZERO_DENOMINATOR);\n                }\n \n                 a = FastMath.sqrt(c1 / c2);\n                 omega = FastMath.sqrt(c2 / c3);\n"},{"ids":251,"error":"junit.framework.AssertionFailedError","source":"/src/main/java/org/apache/commons/math3/fraction/Fraction.java","code":"@@ -178,7 +178,7 @@ private Fraction(double value, double epsilon, int maxDenominator, int maxIterat\n         long overflow = Integer.MAX_VALUE;\n         double r0 = value;\n         long a0 = (long)FastMath.floor(r0);\n      if (a0 > overflow) {\n             throw new FractionConversionException(value, a0, 1l);\n         }\n \n@@ -206,7 +206,7 @@ private Fraction(double value, double epsilon, int maxDenominator, int maxIterat\n             long a1 = (long)FastMath.floor(r1);\n             p2 = (a1 * p1) + p0;\n             q2 = (a1 * q1) + q0;\n          if ((p2 > overflow) || (q2 > overflow)) {\n                 throw new FractionConversionException(value, p2, q2);\n             }\n \n","solution":"@@ -178,7 +178,7 @@ private Fraction(double value, double epsilon, int maxDenominator, int maxIterat\n         long overflow = Integer.MAX_VALUE;\n         double r0 = value;\n         long a0 = (long)FastMath.floor(r0);\n      if (FastMath.abs(a0) > overflow) {\n             throw new FractionConversionException(value, a0, 1l);\n         }\n \n@@ -206,7 +206,7 @@ private Fraction(double value, double epsilon, int maxDenominator, int maxIterat\n             long a1 = (long)FastMath.floor(r1);\n             p2 = (a1 * p1) + p0;\n             q2 = (a1 * q1) + q0;\n          if ((FastMath.abs(p2) > overflow) || (FastMath.abs(q2) > overflow)) {\n                 throw new FractionConversionException(value, p2, q2);\n             }\n \n","CodeWithNoComments":"\n         long overflow = Integer.MAX_VALUE;\n         double r0 = value;\n         long a0 = (long)FastMath.floor(r0);\n        if (a0 > overflow) {\n             throw new FractionConversionException(value, a0, 1l);\n         }\n \n\n             long a1 = (long)FastMath.floor(r1);\n             p2 = (a1 * p1) + p0;\n             q2 = (a1 * q1) + q0;\n            if ((p2 > overflow) || (q2 > overflow)) {\n                 throw new FractionConversionException(value, p2, q2);\n             }\n \n","SolutionWithNoComments":"\n         long overflow = Integer.MAX_VALUE;\n         double r0 = value;\n         long a0 = (long)FastMath.floor(r0);\n        if (FastMath.abs(a0) > overflow) {\n             throw new FractionConversionException(value, a0, 1l);\n         }\n \n\n             long a1 = (long)FastMath.floor(r1);\n             p2 = (a1 * p1) + p0;\n             q2 = (a1 * q1) + q0;\n            if ((FastMath.abs(p2) > overflow) || (FastMath.abs(q2) > overflow)) {\n                 throw new FractionConversionException(value, p2, q2);\n             }\n \n"},{"ids":252,"error":"junit.framework.AssertionFailedError","source":"/src/main/java/org/apache/commons/math3/fraction/Fraction.java","code":"@@ -594,7 +594,7 @@ public Fraction divide(final int i) {\n      * @return the fraction percentage as a <tt>double<\/tt>.\n      */\n     public double percentageValue() {\n      return multiply(100).doubleValue();\n     }\n \n     /**\n","solution":"@@ -594,7 +594,7 @@ public Fraction divide(final int i) {\n      * @return the fraction percentage as a <tt>double<\/tt>.\n      */\n     public double percentageValue() {\n      return 100 * doubleValue();\n     }\n \n     /**\n","CodeWithNoComments":"\n    \n     public double percentageValue() {\n        return multiply(100).doubleValue();\n     }\n \n","SolutionWithNoComments":"\n     \n     public double percentageValue() {\n        return 100 * doubleValue();\n     }\n \n"},{"ids":253,"error":"junit.framework.AssertionFailedError","source":"/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java","code":"@@ -346,10 +346,9 @@ public OpenMapRealVector ebeDivide(RealVector v) {\n          * this only. Indeed, if this[i] = 0d and v[i] = 0d, then\n          * this[i] / v[i] = NaN, and not 0d.\n          */\n      Iterator iter = entries.iterator();\n      while (iter.hasNext()) {\n          iter.advance();\n          res.setEntry(iter.key(), iter.value() / v.getEntry(iter.key()));\n         }\n         return res;\n     }\n@@ -371,6 +370,18 @@ public OpenMapRealVector ebeMultiply(RealVector v) {\n          *\n          * These special cases are handled below.\n          */\n         return res;\n     }\n \n","solution":"@@ -346,10 +346,9 @@ public OpenMapRealVector ebeDivide(RealVector v) {\n          * this only. Indeed, if this[i] = 0d and v[i] = 0d, then\n          * this[i] / v[i] = NaN, and not 0d.\n          */\n      final int n = getDimension();\n      for (int i = 0; i < n; i++) {\n          res.setEntry(i, this.getEntry(i) / v.getEntry(i));\n         }\n         return res;\n     }\n@@ -371,6 +370,18 @@ public OpenMapRealVector ebeMultiply(RealVector v) {\n          *\n          * These special cases are handled below.\n          */\n      if (v.isNaN() || v.isInfinite()) {\n          final int n = getDimension();\n          for (int i = 0; i < n; i++) {\n              final double y = v.getEntry(i);\n              if (Double.isNaN(y)) {\n                  res.setEntry(i, Double.NaN);\n              } else if (Double.isInfinite(y)) {\n                  final double x = this.getEntry(i);\n                  res.setEntry(i, x * y);\n              }\n          }\n      }\n         return res;\n     }\n \n","CodeWithNoComments":"\n  \n        Iterator iter = entries.iterator();\n        while (iter.hasNext()) {\n            iter.advance();\n            res.setEntry(iter.key(), iter.value() / v.getEntry(iter.key()));\n         }\n         return res;\n     }\n\n      \n         return res;\n     }\n \n","SolutionWithNoComments":"\n      \n        final int n = getDimension();\n        for (int i = 0; i < n; i++) {\n            res.setEntry(i, this.getEntry(i) / v.getEntry(i));\n         }\n         return res;\n     }\n\n      \n        if (v.isNaN() || v.isInfinite()) {\n            final int n = getDimension();\n            for (int i = 0; i < n; i++) {\n                final double y = v.getEntry(i);\n                if (Double.isNaN(y)) {\n                    res.setEntry(i, Double.NaN);\n                } else if (Double.isInfinite(y)) {\n                    final double x = this.getEntry(i);\n                    res.setEntry(i, x * y);\n                }\n            }\n        }\n         return res;\n     }\n \n"},{"ids":254,"error":"org.apache.commons.math3.exception.MaxCountExceededException","source":"/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java","code":"@@ -116,6 +116,7 @@ private Integer getPivotRow(SimplexTableau tableau, final int col) {\n             // there's a degeneracy as indicated by a tie in the minimum ratio test\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n                     for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n                         int column = i + tableau.getArtificialVariableOffset();\n@@ -125,6 +126,7 @@ private Integer getPivotRow(SimplexTableau tableau, final int col) {\n                         }\n                     }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n             //    take the row for which the corresponding basic variable has the smallest index\n@@ -135,6 +137,7 @@ private Integer getPivotRow(SimplexTableau tableau, final int col) {\n             // Additional heuristic: if we did not get a solution after half of maxIterations\n             //                       revert to the simple case of just returning the top-most row\n             // This heuristic is based on empirical data gathered while investigating MATH-828.\n                 Integer minRow = null;\n                 int minIndex = tableau.getWidth();\n                 for (Integer row : minRatioPositions) {\n@@ -149,6 +152,7 @@ private Integer getPivotRow(SimplexTableau tableau, final int col) {\n                     }\n                 }\n                 return minRow;\n         }\n         return minRatioPositions.get(0);\n     }\n","solution":"@@ -116,6 +116,7 @@ private Integer getPivotRow(SimplexTableau tableau, final int col) {\n             // there's a degeneracy as indicated by a tie in the minimum ratio test\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n          if (tableau.getNumArtificialVariables() > 0) {\n                 for (Integer row : minRatioPositions) {\n                     for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n                         int column = i + tableau.getArtificialVariableOffset();\n@@ -125,6 +126,7 @@ private Integer getPivotRow(SimplexTableau tableau, final int col) {\n                         }\n                     }\n                 }\n          }\n \n             // 2. apply Bland's rule to prevent cycling:\n             //    take the row for which the corresponding basic variable has the smallest index\n@@ -135,6 +137,7 @@ private Integer getPivotRow(SimplexTableau tableau, final int col) {\n             // Additional heuristic: if we did not get a solution after half of maxIterations\n             //                       revert to the simple case of just returning the top-most row\n             // This heuristic is based on empirical data gathered while investigating MATH-828.\n          if (getIterations() < getMaxIterations() / 2) {\n                 Integer minRow = null;\n                 int minIndex = tableau.getWidth();\n                 for (Integer row : minRatioPositions) {\n@@ -149,6 +152,7 @@ private Integer getPivotRow(SimplexTableau tableau, final int col) {\n                     }\n                 }\n                 return minRow;\n          }\n         }\n         return minRatioPositions.get(0);\n     }\n","CodeWithNoComments":"\n              \n                              for (Integer row : minRatioPositions) {\n                     for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n                         int column = i + tableau.getArtificialVariableOffset();\n\n                         }\n                     }\n                 }\n \n                          \n                                                        Integer minRow = null;\n                 int minIndex = tableau.getWidth();\n                 for (Integer row : minRatioPositions) {\n\n                     }\n                 }\n                 return minRow;\n         }\n         return minRatioPositions.get(0);\n     }\n","SolutionWithNoComments":"\n              \n                         if (tableau.getNumArtificialVariables() > 0) {\n                 for (Integer row : minRatioPositions) {\n                     for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n                         int column = i + tableau.getArtificialVariableOffset();\n\n                         }\n                     }\n                 }\n            }\n \n                          \n                                                   if (getIterations() < getMaxIterations() / 2) {\n                 Integer minRow = null;\n                 int minIndex = tableau.getWidth();\n                 for (Integer row : minRatioPositions) {\n\n                     }\n                 }\n                 return minRow;\n            }\n         }\n         return minRatioPositions.get(0);\n     }\n"},{"ids":255,"error":"org.apache.commons.math3.exception.ConvergenceException","source":"/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java","code":"@@ -131,8 +131,6 @@ public double evaluate(double x, double epsilon, int maxIterations) {\n \n         int n = 1;\n         double dPrev = 0.0;\n      double p0 = 1.0;\n      double q1 = 1.0;\n         double cPrev = hPrev;\n         double hN = hPrev;\n \n@@ -140,34 +138,18 @@ public double evaluate(double x, double epsilon, int maxIterations) {\n             final double a = getA(n, x);\n             final double b = getB(n, x);\n \n          double cN = a * hPrev + b * p0;\n          double q2 = a * q1 + b * dPrev;\n          if (Double.isInfinite(cN) || Double.isInfinite(q2)) {\n              double scaleFactor = 1d;\n              double lastScaleFactor = 1d;\n              final int maxPower = 5;\n              final double scale = FastMath.max(a,b);\n              if (scale <= 0) {  // Can't scale\n                  throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n              }\n              for (int i = 0; i < maxPower; i++) {\n                  lastScaleFactor = scaleFactor;\n                  scaleFactor *= scale;\n                  if (a != 0.0 && a > b) {\n                      cN = hPrev / lastScaleFactor + (b / scaleFactor * p0);\n                      q2 = q1 / lastScaleFactor + (b / scaleFactor * dPrev);\n                  } else if (b != 0) {\n                      cN = (a / scaleFactor * hPrev) + p0 / lastScaleFactor;\n                      q2 = (a / scaleFactor * q1) + dPrev / lastScaleFactor;\n                  }\n                  if (!(Double.isInfinite(cN) || Double.isInfinite(q2))) {\n                      break;\n                  }\n              }\n             }\n \n          final double deltaN = cN / q2 / cPrev;\n          hN = cPrev * deltaN;\n \n             if (Double.isInfinite(hN)) {\n                 throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,\n@@ -182,11 +164,9 @@ public double evaluate(double x, double epsilon, int maxIterations) {\n                 break;\n             }\n \n          dPrev = q1;\n          cPrev = cN / q2;\n          p0 = hPrev;\n          hPrev = cN;\n          q1 = q2;\n             n++;\n         }\n \n","solution":"@@ -131,8 +131,6 @@ public double evaluate(double x, double epsilon, int maxIterations) {\n \n         int n = 1;\n         double dPrev = 0.0;\n         double cPrev = hPrev;\n         double hN = hPrev;\n \n@@ -140,34 +138,18 @@ public double evaluate(double x, double epsilon, int maxIterations) {\n             final double a = getA(n, x);\n             final double b = getB(n, x);\n \n          double dN = a + b * dPrev;\n          if (Precision.equals(dN, 0.0, small)) {\n              dN = small;\n          }\n          double cN = a + b / cPrev;\n          if (Precision.equals(cN, 0.0, small)) {\n              cN = small;\n             }\n \n          dN = 1 / dN;\n          final double deltaN = cN * dN;\n          hN = hPrev * deltaN;\n \n             if (Double.isInfinite(hN)) {\n                 throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,\n@@ -182,11 +164,9 @@ public double evaluate(double x, double epsilon, int maxIterations) {\n                 break;\n             }\n \n          dPrev = dN;\n          cPrev = cN;\n          hPrev = hN;\n             n++;\n         }\n \n","CodeWithNoComments":"\n \n         int n = 1;\n         double dPrev = 0.0;\n        double p0 = 1.0;\n        double q1 = 1.0;\n         double cPrev = hPrev;\n         double hN = hPrev;\n \n\n             final double a = getA(n, x);\n             final double b = getB(n, x);\n \n            double cN = a * hPrev + b * p0;\n            double q2 = a * q1 + b * dPrev;\n            if (Double.isInfinite(cN) || Double.isInfinite(q2)) {\n                double scaleFactor = 1d;\n                double lastScaleFactor = 1d;\n                final int maxPower = 5;\n                final double scale = FastMath.max(a,b);\n                if (scale <= 0) {                      throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n                }\n                for (int i = 0; i < maxPower; i++) {\n                    lastScaleFactor = scaleFactor;\n                    scaleFactor *= scale;\n                    if (a != 0.0 && a > b) {\n                        cN = hPrev / lastScaleFactor + (b / scaleFactor * p0);\n                        q2 = q1 / lastScaleFactor + (b / scaleFactor * dPrev);\n                    } else if (b != 0) {\n                        cN = (a / scaleFactor * hPrev) + p0 / lastScaleFactor;\n                        q2 = (a / scaleFactor * q1) + dPrev / lastScaleFactor;\n                    }\n                    if (!(Double.isInfinite(cN) || Double.isInfinite(q2))) {\n                        break;\n                    }\n                }\n             }\n \n            final double deltaN = cN / q2 / cPrev;\n            hN = cPrev * deltaN;\n \n             if (Double.isInfinite(hN)) {\n                 throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,\n\n                 break;\n             }\n \n            dPrev = q1;\n            cPrev = cN / q2;\n            p0 = hPrev;\n            hPrev = cN;\n            q1 = q2;\n             n++;\n         }\n \n","SolutionWithNoComments":"\n \n         int n = 1;\n         double dPrev = 0.0;\n         double cPrev = hPrev;\n         double hN = hPrev;\n \n\n             final double a = getA(n, x);\n             final double b = getB(n, x);\n \n            double dN = a + b * dPrev;\n            if (Precision.equals(dN, 0.0, small)) {\n                dN = small;\n            }\n            double cN = a + b / cPrev;\n            if (Precision.equals(cN, 0.0, small)) {\n                cN = small;\n             }\n \n            dN = 1 / dN;\n            final double deltaN = cN * dN;\n            hN = hPrev * deltaN;\n \n             if (Double.isInfinite(hN)) {\n                 throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,\n\n                 break;\n             }\n \n            dPrev = dN;\n            cPrev = cN;\n            hPrev = hN;\n             n++;\n         }\n \n"},{"ids":256,"error":"java.lang.ClassCastException","source":"/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java","code":"@@ -133,7 +133,7 @@ protected void computeGeometricalProperties() {\n \n         if (v.length == 0) {\n             final BSPTree<Euclidean2D> tree = getTree(false);\n          if ((Boolean) tree.getAttribute()) {\n                 // the instance covers the whole space\n                 setSize(Double.POSITIVE_INFINITY);\n                 setBarycenter(Vector2D.NaN);\n","solution":"@@ -133,7 +133,7 @@ protected void computeGeometricalProperties() {\n \n         if (v.length == 0) {\n             final BSPTree<Euclidean2D> tree = getTree(false);\n          if (tree.getCut() == null && (Boolean) tree.getAttribute()) {\n                 // the instance covers the whole space\n                 setSize(Double.POSITIVE_INFINITY);\n                 setBarycenter(Vector2D.NaN);\n","CodeWithNoComments":"\n \n         if (v.length == 0) {\n             final BSPTree<Euclidean2D> tree = getTree(false);\n            if ((Boolean) tree.getAttribute()) {\n                                  setSize(Double.POSITIVE_INFINITY);\n                 setBarycenter(Vector2D.NaN);\n","SolutionWithNoComments":"\n \n         if (v.length == 0) {\n             final BSPTree<Euclidean2D> tree = getTree(false);\n            if (tree.getCut() == null && (Boolean) tree.getAttribute()) {\n                                  setSize(Double.POSITIVE_INFINITY);\n                 setBarycenter(Vector2D.NaN);\n"},{"ids":257,"error":"junit.framework.AssertionFailedError","source":"/src/main/java/org/apache/commons/math3/genetics/ElitisticListPopulation.java","code":"@@ -48,7 +48,7 @@ public ElitisticListPopulation(final List<Chromosome> chromosomes,\n                                    final int populationLimit,\n                                    final double elitismRate) {\n         super(chromosomes, populationLimit);\n      this.elitismRate = elitismRate;\n     }\n \n     /**\n@@ -62,7 +62,7 @@ public ElitisticListPopulation(final List<Chromosome> chromosomes,\n      */\n     public ElitisticListPopulation(final int populationLimit, final double elitismRate) {\n         super(populationLimit);\n      this.elitismRate = elitismRate;\n     }\n \n     /**\n","solution":"@@ -48,7 +48,7 @@ public ElitisticListPopulation(final List<Chromosome> chromosomes,\n                                    final int populationLimit,\n                                    final double elitismRate) {\n         super(chromosomes, populationLimit);\n      setElitismRate(elitismRate);\n     }\n \n     /**\n@@ -62,7 +62,7 @@ public ElitisticListPopulation(final List<Chromosome> chromosomes,\n      */\n     public ElitisticListPopulation(final int populationLimit, final double elitismRate) {\n         super(populationLimit);\n      setElitismRate(elitismRate);\n     }\n \n     /**\n","CodeWithNoComments":"\n                                    final int populationLimit,\n                                    final double elitismRate) {\n         super(chromosomes, populationLimit);\n        this.elitismRate = elitismRate;\n     }\n \n\n     public ElitisticListPopulation(final int populationLimit, final double elitismRate) {\n         super(populationLimit);\n        this.elitismRate = elitismRate;\n     }\n \n","SolutionWithNoComments":"\n                                    final int populationLimit,\n                                    final double elitismRate) {\n         super(chromosomes, populationLimit);\n        setElitismRate(elitismRate);\n     }\n \n\n     public ElitisticListPopulation(final int populationLimit, final double elitismRate) {\n         super(populationLimit);\n        setElitismRate(elitismRate);\n     }\n \n"},{"ids":258,"error":"junit.framework.AssertionFailedError","source":"/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java","code":"@@ -335,7 +335,7 @@ protected void dropPhase1Objective() {\n         // positive cost non-artificial variables\n         for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {\n             final double entry = tableau.getEntry(0, i);\n          if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n                 columnsToDrop.add(i);\n             }\n         }\n","solution":"@@ -335,7 +335,7 @@ protected void dropPhase1Objective() {\n         // positive cost non-artificial variables\n         for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {\n             final double entry = tableau.getEntry(0, i);\n          if (Precision.compareTo(entry, 0d, epsilon) > 0) {\n                 columnsToDrop.add(i);\n             }\n         }\n","CodeWithNoComments":"\n                  for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {\n             final double entry = tableau.getEntry(0, i);\n            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n                 columnsToDrop.add(i);\n             }\n         }\n","SolutionWithNoComments":"\n                  for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {\n             final double entry = tableau.getEntry(0, i);\n            if (Precision.compareTo(entry, 0d, epsilon) > 0) {\n                 columnsToDrop.add(i);\n             }\n         }\n"},{"ids":259,"error":"junit.framework.AssertionFailedError","source":"/src/main/java/org/apache/commons/math/complex/Complex.java","code":"@@ -1015,9 +1015,15 @@ public Complex sqrt1z() {\n      * @since 1.2\n      */\n     public Complex tan() {\n      if (isNaN) {\n             return NaN;\n         }\n \n         double real2 = 2.0 * real;\n         double imaginary2 = 2.0 * imaginary;\n@@ -1060,9 +1066,15 @@ public Complex tan() {\n      * @since 1.2\n      */\n     public Complex tanh() {\n      if (isNaN) {\n             return NaN;\n         }\n         double real2 = 2.0 * real;\n         double imaginary2 = 2.0 * imaginary;\n         double d = FastMath.cosh(real2) + FastMath.cos(imaginary2);\n","solution":"@@ -1015,9 +1015,15 @@ public Complex sqrt1z() {\n      * @since 1.2\n      */\n     public Complex tan() {\n      if (isNaN || Double.isInfinite(real)) {\n             return NaN;\n         }\n      if (imaginary > 20.0) {\n          return createComplex(0.0, 1.0);\n      }\n      if (imaginary < -20.0) {\n          return createComplex(0.0, -1.0);\n      }\n \n         double real2 = 2.0 * real;\n         double imaginary2 = 2.0 * imaginary;\n@@ -1060,9 +1066,15 @@ public Complex tan() {\n      * @since 1.2\n      */\n     public Complex tanh() {\n      if (isNaN || Double.isInfinite(imaginary)) {\n             return NaN;\n         }\n      if (real > 20.0) {\n          return createComplex(1.0, 0.0);\n      }\n      if (real < -20.0) {\n          return createComplex(-1.0, 0.0);\n      }\n         double real2 = 2.0 * real;\n         double imaginary2 = 2.0 * imaginary;\n         double d = FastMath.cosh(real2) + FastMath.cos(imaginary2);\n","CodeWithNoComments":"\n     \n     public Complex tan() {\n        if (isNaN) {\n             return NaN;\n         }\n \n         double real2 = 2.0 * real;\n         double imaginary2 = 2.0 * imaginary;\n\n  \n     public Complex tanh() {\n        if (isNaN) {\n             return NaN;\n         }\n         double real2 = 2.0 * real;\n         double imaginary2 = 2.0 * imaginary;\n         double d = FastMath.cosh(real2) + FastMath.cos(imaginary2);\n","SolutionWithNoComments":"\n  \n     public Complex tan() {\n        if (isNaN || Double.isInfinite(real)) {\n             return NaN;\n         }\n        if (imaginary > 20.0) {\n            return createComplex(0.0, 1.0);\n        }\n        if (imaginary < -20.0) {\n            return createComplex(0.0, -1.0);\n        }\n \n         double real2 = 2.0 * real;\n         double imaginary2 = 2.0 * imaginary;\n\n   \n     public Complex tanh() {\n        if (isNaN || Double.isInfinite(imaginary)) {\n             return NaN;\n         }\n        if (real > 20.0) {\n            return createComplex(1.0, 0.0);\n        }\n        if (real < -20.0) {\n            return createComplex(-1.0, 0.0);\n        }\n         double real2 = 2.0 * real;\n         double imaginary2 = 2.0 * imaginary;\n         double d = FastMath.cosh(real2) + FastMath.cos(imaginary2);\n"},{"ids":260,"error":"junit.framework.AssertionFailedError","source":"/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java","code":"@@ -206,6 +206,6 @@ public String toString() {\n      * @return chromosome iterator\n      */\n     public Iterator<Chromosome> iterator() {\n      return chromosomes.iterator();\n     }\n }\n","solution":"@@ -206,6 +206,6 @@ public String toString() {\n      * @return chromosome iterator\n      */\n     public Iterator<Chromosome> iterator() {\n      return getChromosomes().iterator();\n     }\n }\n","CodeWithNoComments":"\n   \n     public Iterator<Chromosome> iterator() {\n        return chromosomes.iterator();\n     }\n }\n","SolutionWithNoComments":"\n   \n     public Iterator<Chromosome> iterator() {\n        return getChromosomes().iterator();\n     }\n }\n"},{"ids":261,"error":"org.apache.commons.math.exception.TooManyEvaluationsException","source":"/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java","code":"@@ -232,10 +232,16 @@ protected double doSolve() {\n             double targetY;\n             if (agingA >= MAXIMAL_AGING) {\n                 // we keep updating the high bracket, try to compensate this\n              targetY = -REDUCTION_FACTOR * yB;\n             } else if (agingB >= MAXIMAL_AGING) {\n                 // we keep updating the low bracket, try to compensate this\n              targetY = -REDUCTION_FACTOR * yA;\n             } else {\n                 // bracketing is balanced, try to find the root itself\n                 targetY = 0;\n","solution":"@@ -232,10 +232,16 @@ protected double doSolve() {\n             double targetY;\n             if (agingA >= MAXIMAL_AGING) {\n                 // we keep updating the high bracket, try to compensate this\n              final int p = agingA - MAXIMAL_AGING;\n              final double weightA = (1 << p) - 1;\n              final double weightB = p + 1;\n              targetY = (weightA * yA - weightB * REDUCTION_FACTOR * yB) / (weightA + weightB);\n             } else if (agingB >= MAXIMAL_AGING) {\n                 // we keep updating the low bracket, try to compensate this\n              final int p = agingB - MAXIMAL_AGING;\n              final double weightA = p + 1;\n              final double weightB = (1 << p) - 1;\n              targetY = (weightB * yB - weightA * REDUCTION_FACTOR * yA) / (weightA + weightB);\n             } else {\n                 // bracketing is balanced, try to find the root itself\n                 targetY = 0;\n","CodeWithNoComments":"\n             double targetY;\n             if (agingA >= MAXIMAL_AGING) {\n                                 targetY = -REDUCTION_FACTOR * yB;\n             } else if (agingB >= MAXIMAL_AGING) {\n                                 targetY = -REDUCTION_FACTOR * yA;\n             } else {\n                                  targetY = 0;\n","SolutionWithNoComments":"\n             double targetY;\n             if (agingA >= MAXIMAL_AGING) {\n                                 final int p = agingA - MAXIMAL_AGING;\n                final double weightA = (1 << p) - 1;\n                final double weightB = p + 1;\n                targetY = (weightA * yA - weightB * REDUCTION_FACTOR * yB) / (weightA + weightB);\n             } else if (agingB >= MAXIMAL_AGING) {\n                                 final int p = agingB - MAXIMAL_AGING;\n                final double weightA = p + 1;\n                final double weightB = (1 << p) - 1;\n                targetY = (weightB * yB - weightA * REDUCTION_FACTOR * yA) / (weightA + weightB);\n             } else {\n                                  targetY = 0;\n"},{"ids":262,"error":"org.apache.commons.math.optimization.direct.BOBYQAOptimizer$PathIsExploredException","source":"/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java","code":"@@ -1657,10 +1657,10 @@ private void prelim(double[] lowerBound,\n                     final int tmp2 = jpt;\n                     jpt = ipt - n;\n                     ipt = tmp2;\n                  throw new PathIsExploredException(); // XXX\n                 }\n              final int iptMinus1 = ipt;\n              final int jptMinus1 = jpt;\n                 interpolationPoints.setEntry(nfm, iptMinus1, interpolationPoints.getEntry(ipt, iptMinus1));\n                 interpolationPoints.setEntry(nfm, jptMinus1, interpolationPoints.getEntry(jpt, jptMinus1));\n             }\n@@ -1749,7 +1749,7 @@ private void prelim(double[] lowerBound,\n                 final int ih = ipt * (ipt - 1) / 2 + jpt - 1;\n                 final double tmp = interpolationPoints.getEntry(nfm, ipt - 1) * interpolationPoints.getEntry(nfm, jpt - 1);\n                 modelSecondDerivativesValues.setEntry(ih, (fbeg - fAtInterpolationPoints.getEntry(ipt) - fAtInterpolationPoints.getEntry(jpt) + f) / tmp);\n              throw new PathIsExploredException(); \n             }\n         } while (getEvaluations() < npt);\n     } // prelim\n","solution":"@@ -1657,10 +1657,10 @@ private void prelim(double[] lowerBound,\n                     final int tmp2 = jpt;\n                     jpt = ipt - n;\n                     ipt = tmp2;\n                 }\n              final int iptMinus1 = ipt - 1;\n              final int jptMinus1 = jpt - 1;\n                 interpolationPoints.setEntry(nfm, iptMinus1, interpolationPoints.getEntry(ipt, iptMinus1));\n                 interpolationPoints.setEntry(nfm, jptMinus1, interpolationPoints.getEntry(jpt, jptMinus1));\n             }\n@@ -1749,7 +1749,7 @@ private void prelim(double[] lowerBound,\n                 final int ih = ipt * (ipt - 1) / 2 + jpt - 1;\n                 final double tmp = interpolationPoints.getEntry(nfm, ipt - 1) * interpolationPoints.getEntry(nfm, jpt - 1);\n                 modelSecondDerivativesValues.setEntry(ih, (fbeg - fAtInterpolationPoints.getEntry(ipt) - fAtInterpolationPoints.getEntry(jpt) + f) / tmp);\n             }\n         } while (getEvaluations() < npt);\n     } // prelim\n","CodeWithNoComments":"\n                     final int tmp2 = jpt;\n                     jpt = ipt - n;\n                     ipt = tmp2;\n                    throw new PathIsExploredException(); +                 }\n                final int iptMinus1 = ipt;\n                final int jptMinus1 = jpt;\n                 interpolationPoints.setEntry(nfm, iptMinus1, interpolationPoints.getEntry(ipt, iptMinus1));\n                 interpolationPoints.setEntry(nfm, jptMinus1, interpolationPoints.getEntry(jpt, jptMinus1));\n             }\n\n                 final int ih = ipt * (ipt - 1) / 2 + jpt - 1;\n                 final double tmp = interpolationPoints.getEntry(nfm, ipt - 1) * interpolationPoints.getEntry(nfm, jpt - 1);\n                 modelSecondDerivativesValues.setEntry(ih, (fbeg - fAtInterpolationPoints.getEntry(ipt) - fAtInterpolationPoints.getEntry(jpt) + f) / tmp);\n                throw new PathIsExploredException(); +             }\n         } while (getEvaluations() < npt);\n     } ","SolutionWithNoComments":"\n                     final int tmp2 = jpt;\n                     jpt = ipt - n;\n                     ipt = tmp2;\n+                 }\n                final int iptMinus1 = ipt - 1;\n                final int jptMinus1 = jpt - 1;\n                 interpolationPoints.setEntry(nfm, iptMinus1, interpolationPoints.getEntry(ipt, iptMinus1));\n                 interpolationPoints.setEntry(nfm, jptMinus1, interpolationPoints.getEntry(jpt, jptMinus1));\n             }\n\n                 final int ih = ipt * (ipt - 1) / 2 + jpt - 1;\n                 final double tmp = interpolationPoints.getEntry(nfm, ipt - 1) * interpolationPoints.getEntry(nfm, jpt - 1);\n                 modelSecondDerivativesValues.setEntry(ih, (fbeg - fAtInterpolationPoints.getEntry(ipt) - fAtInterpolationPoints.getEntry(jpt) + f) / tmp);\n+             }\n         } while (getEvaluations() < npt);\n     } "},{"ids":263,"error":"junit.framework.AssertionFailedError","source":"/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java","code":"@@ -247,6 +247,15 @@ public void integrate(final ExpandableStatefulODE equations, final double t)\n         }\n \n         stepSize = hNew;\n \n         // next stages\n         for (int k = 1; k < stages; ++k) {\n","solution":"@@ -247,6 +247,15 @@ public void integrate(final ExpandableStatefulODE equations, final double t)\n         }\n \n         stepSize = hNew;\n      if (forward) {\n          if (stepStart + stepSize >= t) {\n              stepSize = t - stepStart;\n          }\n      } else {\n          if (stepStart + stepSize <= t) {\n              stepSize = t - stepStart;\n          }\n      }\n \n         // next stages\n         for (int k = 1; k < stages; ++k) {\n","CodeWithNoComments":"\n         }\n \n         stepSize = hNew;\n \n                  for (int k = 1; k < stages; ++k) {\n","SolutionWithNoComments":"\n         }\n \n         stepSize = hNew;\n        if (forward) {\n            if (stepStart + stepSize >= t) {\n                stepSize = t - stepStart;\n            }\n        } else {\n            if (stepStart + stepSize <= t) {\n                stepSize = t - stepStart;\n            }\n        }\n \n                  for (int k = 1; k < stages; ++k) {\n"},{"ids":264,"error":"junit.framework.AssertionFailedError","source":"/src/main/java/org/apache/commons/math/fraction/BigFraction.java","code":"@@ -683,8 +683,14 @@ public BigFraction divide(final BigFraction fraction) {\n     @Override\n     public double doubleValue() {\n         double result = numerator.doubleValue() / denominator.doubleValue();\n             // Numerator and/or denominator must be out of range:\n             // Calculate how far to shift them to put them in range.\n         return result;\n     }\n \n@@ -730,8 +736,14 @@ public boolean equals(final Object other) {\n     @Override\n     public float floatValue() {\n         float result = numerator.floatValue() / denominator.floatValue();\n             // Numerator and/or denominator must be out of range:\n             // Calculate how far to shift them to put them in range.\n         return result;\n     }\n \n","solution":"@@ -683,8 +683,14 @@ public BigFraction divide(final BigFraction fraction) {\n     @Override\n     public double doubleValue() {\n         double result = numerator.doubleValue() / denominator.doubleValue();\n      if (Double.isNaN(result)) {\n             // Numerator and/or denominator must be out of range:\n             // Calculate how far to shift them to put them in range.\n          int shift = Math.max(numerator.bitLength(),\n                               denominator.bitLength()) - Double.MAX_EXPONENT;\n          result = numerator.shiftRight(shift).doubleValue() /\n              denominator.shiftRight(shift).doubleValue();\n      }\n         return result;\n     }\n \n@@ -730,8 +736,14 @@ public boolean equals(final Object other) {\n     @Override\n     public float floatValue() {\n         float result = numerator.floatValue() / denominator.floatValue();\n      if (Double.isNaN(result)) {\n             // Numerator and/or denominator must be out of range:\n             // Calculate how far to shift them to put them in range.\n          int shift = Math.max(numerator.bitLength(),\n                               denominator.bitLength()) - Float.MAX_EXPONENT;\n          result = numerator.shiftRight(shift).floatValue() /\n              denominator.shiftRight(shift).floatValue();\n      }\n         return result;\n     }\n \n","CodeWithNoComments":"\n     @Override\n     public double doubleValue() {\n         double result = numerator.doubleValue() / denominator.doubleValue();\n                                   return result;\n     }\n \n\n     @Override\n     public float floatValue() {\n         float result = numerator.floatValue() / denominator.floatValue();\n                                   return result;\n     }\n \n","SolutionWithNoComments":"\n     @Override\n     public double doubleValue() {\n         double result = numerator.doubleValue() / denominator.doubleValue();\n        if (Double.isNaN(result)) {\n                                      int shift = Math.max(numerator.bitLength(),\n                                 denominator.bitLength()) - Double.MAX_EXPONENT;\n            result = numerator.shiftRight(shift).doubleValue() /\n                denominator.shiftRight(shift).doubleValue();\n        }\n         return result;\n     }\n \n\n     @Override\n     public float floatValue() {\n         float result = numerator.floatValue() / denominator.floatValue();\n        if (Double.isNaN(result)) {\n                                      int shift = Math.max(numerator.bitLength(),\n                                 denominator.bitLength()) - Float.MAX_EXPONENT;\n            result = numerator.shiftRight(shift).floatValue() /\n                denominator.shiftRight(shift).floatValue();\n        }\n         return result;\n     }\n \n"},{"ids":265,"error":"junit.framework.AssertionFailedError","source":"/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java","code":"@@ -407,10 +407,12 @@ protected RealPointValuePair getSolution() {\n             continue;\n           }\n           Integer basicRow = getBasicRow(colIndex);\n               // if the basic row is found to be the objective function row\n               // set the coefficient to 0 -> this case handles unconstrained \n               // variables that are still part of the objective function\n        if (basicRows.contains(basicRow)) {\n               // if multiple variables can take a given value\n               // then we choose the first and set the rest equal to 0\n               coefficients[i] = 0 - (restrictToNonNegative ? 0 : mostNegative);\n","solution":"@@ -407,10 +407,12 @@ protected RealPointValuePair getSolution() {\n             continue;\n           }\n           Integer basicRow = getBasicRow(colIndex);\n        if (basicRow != null && basicRow == 0) {\n               // if the basic row is found to be the objective function row\n               // set the coefficient to 0 -> this case handles unconstrained \n               // variables that are still part of the objective function\n            coefficients[i] = 0;\n        } else if (basicRows.contains(basicRow)) {\n               // if multiple variables can take a given value\n               // then we choose the first and set the rest equal to 0\n               coefficients[i] = 0 - (restrictToNonNegative ? 0 : mostNegative);\n","CodeWithNoComments":"\n             continue;\n           }\n           Integer basicRow = getBasicRow(colIndex);\n                                                       if (basicRows.contains(basicRow)) {\n                                             coefficients[i] = 0 - (restrictToNonNegative ? 0 : mostNegative);\n","SolutionWithNoComments":"\n             continue;\n           }\n           Integer basicRow = getBasicRow(colIndex);\n          if (basicRow != null && basicRow == 0) {\n                                                           coefficients[i] = 0;\n          } else if (basicRows.contains(basicRow)) {\n                                             coefficients[i] = 0 - (restrictToNonNegative ? 0 : mostNegative);\n"},{"ids":266,"error":"junit.framework.AssertionFailedError","source":"/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java","code":"@@ -517,7 +517,7 @@ public double evaluate(final double[] values, final double[] weights,\n                 }\n \n                 double sumWts = 0;\n              for (int i = 0; i < weights.length; i++) {\n                     sumWts += weights[i];\n                 }\n \n","solution":"@@ -517,7 +517,7 @@ public double evaluate(final double[] values, final double[] weights,\n                 }\n \n                 double sumWts = 0;\n              for (int i = begin; i < begin + length; i++) {\n                     sumWts += weights[i];\n                 }\n \n","CodeWithNoComments":"\n                 }\n \n                 double sumWts = 0;\n                for (int i = 0; i < weights.length; i++) {\n                     sumWts += weights[i];\n                 }\n \n","SolutionWithNoComments":"\n                 }\n \n                 double sumWts = 0;\n                for (int i = begin; i < begin + length; i++) {\n                     sumWts += weights[i];\n                 }\n \n"},{"ids":267,"error":"junit.framework.AssertionFailedError","source":"/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java","code":"@@ -277,7 +277,6 @@ protected double acceptStep(final AbstractStepInterpolator interpolator,\n \n             double previousT = interpolator.getGlobalPreviousTime();\n             final double currentT = interpolator.getGlobalCurrentTime();\n          resetOccurred = false;\n \n             // initialize the events states if needed\n             if (! statesInitialized) {\n@@ -331,6 +330,9 @@ public int compare(EventState es0, EventState es1) {\n                 if (isLastStep) {\n                     // the event asked to stop integration\n                     System.arraycopy(eventY, 0, y, 0, y.length);\n                     return eventT;\n                 }\n \n@@ -340,6 +342,9 @@ public int compare(EventState es0, EventState es1) {\n                     System.arraycopy(eventY, 0, y, 0, y.length);\n                     computeDerivatives(eventT, y, yDot);\n                     resetOccurred = true;\n                     return eventT;\n                 }\n \n","solution":"@@ -277,7 +277,6 @@ protected double acceptStep(final AbstractStepInterpolator interpolator,\n \n             double previousT = interpolator.getGlobalPreviousTime();\n             final double currentT = interpolator.getGlobalCurrentTime();\n \n             // initialize the events states if needed\n             if (! statesInitialized) {\n@@ -331,6 +330,9 @@ public int compare(EventState es0, EventState es1) {\n                 if (isLastStep) {\n                     // the event asked to stop integration\n                     System.arraycopy(eventY, 0, y, 0, y.length);\n                  for (final EventState remaining : occuringEvents) {\n                      remaining.stepAccepted(eventT, eventY);\n                  }\n                     return eventT;\n                 }\n \n@@ -340,6 +342,9 @@ public int compare(EventState es0, EventState es1) {\n                     System.arraycopy(eventY, 0, y, 0, y.length);\n                     computeDerivatives(eventT, y, yDot);\n                     resetOccurred = true;\n                  for (final EventState remaining : occuringEvents) {\n                      remaining.stepAccepted(eventT, eventY);\n                  }\n                     return eventT;\n                 }\n \n","CodeWithNoComments":"\n \n             double previousT = interpolator.getGlobalPreviousTime();\n             final double currentT = interpolator.getGlobalCurrentTime();\n            resetOccurred = false;\n \n                          if (! statesInitialized) {\n\n                 if (isLastStep) {\n                                          System.arraycopy(eventY, 0, y, 0, y.length);\n                     return eventT;\n                 }\n \n\n                     System.arraycopy(eventY, 0, y, 0, y.length);\n                     computeDerivatives(eventT, y, yDot);\n                     resetOccurred = true;\n                     return eventT;\n                 }\n \n","SolutionWithNoComments":"\n \n             double previousT = interpolator.getGlobalPreviousTime();\n             final double currentT = interpolator.getGlobalCurrentTime();\n \n                          if (! statesInitialized) {\n\n                 if (isLastStep) {\n                                          System.arraycopy(eventY, 0, y, 0, y.length);\n                    for (final EventState remaining : occuringEvents) {\n                        remaining.stepAccepted(eventT, eventY);\n                    }\n                     return eventT;\n                 }\n \n\n                     System.arraycopy(eventY, 0, y, 0, y.length);\n                     computeDerivatives(eventT, y, yDot);\n                     resetOccurred = true;\n                    for (final EventState remaining : occuringEvents) {\n                        remaining.stepAccepted(eventT, eventY);\n                    }\n                     return eventT;\n                 }\n \n"},{"ids":268,"error":"junit.framework.AssertionFailedError","source":"/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java","code":"@@ -155,13 +155,13 @@ public void addValue(double value) {\n         secondMoment.increment(value);\n         // If mean, variance or geomean have been overridden,\n         // need to increment these\n      if (!(meanImpl instanceof Mean)) {\n             meanImpl.increment(value);\n         }\n      if (!(varianceImpl instanceof Variance)) {\n             varianceImpl.increment(value);\n         }\n      if (!(geoMeanImpl instanceof GeometricMean)) {\n             geoMeanImpl.increment(value);\n         }\n         n++;\n","solution":"@@ -155,13 +155,13 @@ public void addValue(double value) {\n         secondMoment.increment(value);\n         // If mean, variance or geomean have been overridden,\n         // need to increment these\n      if (meanImpl != mean) {\n             meanImpl.increment(value);\n         }\n      if (varianceImpl != variance) {\n             varianceImpl.increment(value);\n         }\n      if (geoMeanImpl != geoMean) {\n             geoMeanImpl.increment(value);\n         }\n         n++;\n","CodeWithNoComments":"\n         secondMoment.increment(value);\n                          if (!(meanImpl instanceof Mean)) {\n             meanImpl.increment(value);\n         }\n        if (!(varianceImpl instanceof Variance)) {\n             varianceImpl.increment(value);\n         }\n        if (!(geoMeanImpl instanceof GeometricMean)) {\n             geoMeanImpl.increment(value);\n         }\n         n++;\n","SolutionWithNoComments":"\n         secondMoment.increment(value);\n                          if (meanImpl != mean) {\n             meanImpl.increment(value);\n         }\n        if (varianceImpl != variance) {\n             varianceImpl.increment(value);\n         }\n        if (geoMeanImpl != geoMean) {\n             geoMeanImpl.increment(value);\n         }\n         n++;\n"},{"ids":269,"error":"junit.framework.AssertionFailedError","source":"/src/main/java/org/apache/commons/math/complex/Complex.java","code":"@@ -1,87 +1,88 @@\n /*\n  * Licensed to the Apache Software Foundation (ASF) under one or more\n  * contributor license agreements.  See the NOTICE file distributed with\n  * this work for additional information regarding copyright ownership.\n  * The ASF licenses this file to You under the Apache License, Version 2.0\n  * (the \"License\"); you may not use this file except in compliance with\n  * the License.  You may obtain a copy of the License at\n  *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n \n package org.apache.commons.math.complex;\n \n import java.io.Serializable;\n import java.util.ArrayList;\n import java.util.List;\n \n import org.apache.commons.math.FieldElement;\n import org.apache.commons.math.exception.NullArgumentException;\n import org.apache.commons.math.exception.NotPositiveException;\n import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.util.MathUtils;\n import org.apache.commons.math.util.FastMath;\n \n /**\n  * Representation of a Complex number, i.e. a number which has both a\n  * real and imaginary part.\n  * <br/>\n  * Implementations of arithmetic operations handle {@code NaN} and\n  * infinite values according to the rules for {@link java.lang.Double}, i.e.\n  * {@link #equals} is an equivalence relation for all instances that have\n  * a {@code NaN} in either real or imaginary part, e.g. the following are\n  * considered equal:\n  * <ul>\n  *  <li>{@code 1 + NaNi}<\/li>\n  *  <li>{@code NaN + i}<\/li>\n  *  <li>{@code NaN + NaNi}<\/li>\n  * <\/ul>\n  * Note that this is in contradiction with the IEEE-754 standard for floating\n  * point numbers (according to which the test {@code x == x} must fail if\n  * {@code x} is {@code NaN}). The method\n  * {@link MathUtils#equals(double,double,int) equals for primitive double} in\n  * {@link MathUtils} conforms with IEEE-754 while this class conforms with\n  * the standard behavior for Java object types.\n  * <br/>\n  * Implements Serializable since 2.0\n  *\n  * @version $Id$\n  */\n public class Complex implements FieldElement<Complex>, Serializable  {\n     /** The square root of -1. A number representing \"0.0 + 1.0i\" */\n     public static final Complex I = new Complex(0.0, 1.0);\n     // CHECKSTYLE: stop ConstantName\n     /** A complex number representing \"NaN + NaNi\" */\n     public static final Complex NaN = new Complex(Double.NaN, Double.NaN);\n     // CHECKSTYLE: resume ConstantName\n     /** A complex number representing \"+INF + INFi\" */\n     public static final Complex INF = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);\n     /** A complex number representing \"1.0 + 0.0i\" */\n     public static final Complex ONE = new Complex(1.0, 0.0);\n     /** A complex number representing \"0.0 + 0.0i\" */\n     public static final Complex ZERO = new Complex(0.0, 0.0);\n \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6195664516687396620L;\n \n     /** The imaginary part. */\n     private final double imaginary;\n     /** The real part. */\n     private final double real;\n     /** Record whether this complex number is equal to NaN. */\n     private final transient boolean isNaN;\n     /** Record whether this complex number is infinite. */\n     private final transient boolean isInfinite;\n     /** Record whether this complex number is zero. */\n \n     /**\n      * Create a complex number given only the real part.\n      *\n      * @param real Real part.\n      */\n@@ -98,17 +99,18 @@ public Complex(double real) {\n     public Complex(double real, double imaginary) {\n         this.real = real;\n         this.imaginary = imaginary;\n \n         isNaN = Double.isNaN(real) || Double.isNaN(imaginary);\n         isInfinite = !isNaN &&\n             (Double.isInfinite(real) || Double.isInfinite(imaginary));\n     }\n \n     /**\n      * Return the absolute value of this complex number.\n      * Returns {@code NaN} if either real or imaginary part is {@code NaN}\n      * and {@code Double.POSITIVE_INFINITY} if neither part is {@code NaN},\n      * but at least one part is infinite.\n      *\n      * @return the absolute value.\n      */\n@@ -249,60 +251,60 @@ public Complex conjugate() {\n     public Complex divide(Complex divisor)\n         throws NullArgumentException {\n         MathUtils.checkNotNull(divisor);\n         if (isNaN || divisor.isNaN) {\n             return NaN;\n         }\n \n      if (divisor.getReal() == 0.0 && divisor.getImaginary() == 0.0) {\n          return NaN;\n         }\n \n         if (divisor.isInfinite() && !isInfinite()) {\n             return ZERO;\n         }\n \n         final double c = divisor.getReal();\n         final double d = divisor.getImaginary();\n \n         if (FastMath.abs(c) < FastMath.abs(d)) {\n             double q = c / d;\n             double denominator = c * q + d;\n             return createComplex((real * q + imaginary) / denominator,\n                 (imaginary * q - real) / denominator);\n         } else {\n             double q = d / c;\n             double denominator = d * q + c;\n             return createComplex((imaginary * q + real) / denominator,\n                 (imaginary - real * q) / denominator);\n         }\n     }\n \n     /**\n      * Returns a {@code Complex} whose value is {@code (this / divisor)},\n      * with {@code divisor} interpreted as a real number.\n      *\n      * @param  divisor Value by which this {@code Complex} is to be divided.\n      * @return {@code this / divisor}.\n      * @see #divide(Complex)\n      */\n     public Complex divide(double divisor) {\n         if (isNaN || Double.isNaN(divisor)) {\n             return NaN;\n         }\n         if (divisor == 0d) {\n          return NaN;\n         }\n         if (Double.isInfinite(divisor)) {\n             return !isInfinite() ? ZERO : NaN;\n         }\n         return createComplex(real / divisor,\n                              imaginary  / divisor);\n     }\n \n     /**\n      * Test for the equality of two Complex objects.\n      * If both the real and imaginary parts of two complex numbers\n      * are exactly the same, and neither is {@code Double.NaN}, the two\n      * Complex objects are considered to be equal.\n      * All {@code NaN} values are considered to be equal - i.e, if either\n      * (or both) real and imaginary parts of the complex number are equal\n","solution":"@@ -1,87 +1,88 @@\n /*\n  * Licensed to the Apache Software Foundation (ASF) under one or more\n  * contributor license agreements.  See the NOTICE file distributed with\n  * this work for additional information regarding copyright ownership.\n  * The ASF licenses this file to You under the Apache License, Version 2.0\n  * (the \"License\"); you may not use this file except in compliance with\n  * the License.  You may obtain a copy of the License at\n  *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n \n package org.apache.commons.math.complex;\n \n import java.io.Serializable;\n import java.util.ArrayList;\n import java.util.List;\n \n import org.apache.commons.math.FieldElement;\n import org.apache.commons.math.exception.NullArgumentException;\n import org.apache.commons.math.exception.NotPositiveException;\n import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.util.MathUtils;\n import org.apache.commons.math.util.FastMath;\n \n /**\n  * Representation of a Complex number, i.e. a number which has both a\n  * real and imaginary part.\n  * <br/>\n  * Implementations of arithmetic operations handle {@code NaN} and\n  * infinite values according to the rules for {@link java.lang.Double}, i.e.\n  * {@link #equals} is an equivalence relation for all instances that have\n  * a {@code NaN} in either real or imaginary part, e.g. the following are\n  * considered equal:\n  * <ul>\n  *  <li>{@code 1 + NaNi}<\/li>\n  *  <li>{@code NaN + i}<\/li>\n  *  <li>{@code NaN + NaNi}<\/li>\n  * <\/ul>\n  * Note that this is in contradiction with the IEEE-754 standard for floating\n  * point numbers (according to which the test {@code x == x} must fail if\n  * {@code x} is {@code NaN}). The method\n  * {@link MathUtils#equals(double,double,int) equals for primitive double} in\n  * {@link MathUtils} conforms with IEEE-754 while this class conforms with\n  * the standard behavior for Java object types.\n  * <br/>\n  * Implements Serializable since 2.0\n  *\n  * @version $Id$\n  */\n public class Complex implements FieldElement<Complex>, Serializable  {\n     /** The square root of -1. A number representing \"0.0 + 1.0i\" */\n     public static final Complex I = new Complex(0.0, 1.0);\n     // CHECKSTYLE: stop ConstantName\n     /** A complex number representing \"NaN + NaNi\" */\n     public static final Complex NaN = new Complex(Double.NaN, Double.NaN);\n     // CHECKSTYLE: resume ConstantName\n     /** A complex number representing \"+INF + INFi\" */\n     public static final Complex INF = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);\n     /** A complex number representing \"1.0 + 0.0i\" */\n     public static final Complex ONE = new Complex(1.0, 0.0);\n     /** A complex number representing \"0.0 + 0.0i\" */\n     public static final Complex ZERO = new Complex(0.0, 0.0);\n \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6195664516687396620L;\n \n     /** The imaginary part. */\n     private final double imaginary;\n     /** The real part. */\n     private final double real;\n     /** Record whether this complex number is equal to NaN. */\n     private final transient boolean isNaN;\n     /** Record whether this complex number is infinite. */\n     private final transient boolean isInfinite;\n     /** Record whether this complex number is zero. */\n  private final transient boolean isZero;\n \n     /**\n      * Create a complex number given only the real part.\n      *\n      * @param real Real part.\n      */\n@@ -98,17 +99,18 @@ public Complex(double real) {\n     public Complex(double real, double imaginary) {\n         this.real = real;\n         this.imaginary = imaginary;\n \n         isNaN = Double.isNaN(real) || Double.isNaN(imaginary);\n         isInfinite = !isNaN &&\n             (Double.isInfinite(real) || Double.isInfinite(imaginary));\n      isZero = real == 0 && imaginary == 0;\n     }\n \n     /**\n      * Return the absolute value of this complex number.\n      * Returns {@code NaN} if either real or imaginary part is {@code NaN}\n      * and {@code Double.POSITIVE_INFINITY} if neither part is {@code NaN},\n      * but at least one part is infinite.\n      *\n      * @return the absolute value.\n      */\n@@ -249,60 +251,60 @@ public Complex conjugate() {\n     public Complex divide(Complex divisor)\n         throws NullArgumentException {\n         MathUtils.checkNotNull(divisor);\n         if (isNaN || divisor.isNaN) {\n             return NaN;\n         }\n \n      if (divisor.isZero) {\n          return isZero ? NaN : INF;\n         }\n \n         if (divisor.isInfinite() && !isInfinite()) {\n             return ZERO;\n         }\n \n         final double c = divisor.getReal();\n         final double d = divisor.getImaginary();\n \n         if (FastMath.abs(c) < FastMath.abs(d)) {\n             double q = c / d;\n             double denominator = c * q + d;\n             return createComplex((real * q + imaginary) / denominator,\n                 (imaginary * q - real) / denominator);\n         } else {\n             double q = d / c;\n             double denominator = d * q + c;\n             return createComplex((imaginary * q + real) / denominator,\n                 (imaginary - real * q) / denominator);\n         }\n     }\n \n     /**\n      * Returns a {@code Complex} whose value is {@code (this / divisor)},\n      * with {@code divisor} interpreted as a real number.\n      *\n      * @param  divisor Value by which this {@code Complex} is to be divided.\n      * @return {@code this / divisor}.\n      * @see #divide(Complex)\n      */\n     public Complex divide(double divisor) {\n         if (isNaN || Double.isNaN(divisor)) {\n             return NaN;\n         }\n         if (divisor == 0d) {\n          return isZero ? NaN : INF;\n         }\n         if (Double.isInfinite(divisor)) {\n             return !isInfinite() ? ZERO : NaN;\n         }\n         return createComplex(real / divisor,\n                              imaginary  / divisor);\n     }\n \n     /**\n      * Test for the equality of two Complex objects.\n      * If both the real and imaginary parts of two complex numbers\n      * are exactly the same, and neither is {@code Double.NaN}, the two\n      * Complex objects are considered to be equal.\n      * All {@code NaN} values are considered to be equal - i.e, if either\n      * (or both) real and imaginary parts of the complex number are equal\n","CodeWithNoComments":"\n package org.apache.commons.math.complex;\n \n import java.io.Serializable;\n import java.util.ArrayList;\n import java.util.List;\n \n import org.apache.commons.math.FieldElement;\n import org.apache.commons.math.exception.NullArgumentException;\n import org.apache.commons.math.exception.NotPositiveException;\n import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.util.MathUtils;\n import org.apache.commons.math.util.FastMath;\n \n public class Complex implements FieldElement<Complex>, Serializable  {\n     public static final Complex I = new Complex(0.0, 1.0);\n     public static final Complex NaN = new Complex(Double.NaN, Double.NaN);\n     public static final Complex INF = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);\n     public static final Complex ONE = new Complex(1.0, 0.0);\n     public static final Complex ZERO = new Complex(0.0, 0.0);\n     private static final long serialVersionUID = -6195664516687396620L;\n     private final double imaginary;\n     private final double real;\n     private final transient boolean isNaN;\n     private final transient boolean isInfinite;\n     public Complex(double real, double imaginary) {\n         this.real = real;\n         this.imaginary = imaginary;\n \n         isNaN = Double.isNaN(real) || Double.isNaN(imaginary);\n         isInfinite = !isNaN &&\n             (Double.isInfinite(real) || Double.isInfinite(imaginary));\n     }\n     public Complex divide(Complex divisor)\n         throws NullArgumentException {\n         MathUtils.checkNotNull(divisor);\n         if (isNaN || divisor.isNaN) {\n             return NaN;\n         }\n \n        if (divisor.getReal() == 0.0 && divisor.getImaginary() == 0.0) {\n            return NaN;\n         }\n \n         if (divisor.isInfinite() && !isInfinite()) {\n             return ZERO;\n         }\n \n         final double c = divisor.getReal();\n         final double d = divisor.getImaginary();\n \n         if (FastMath.abs(c) < FastMath.abs(d)) {\n             double q = c / d;\n             double denominator = c * q + d;\n             return createComplex((real * q + imaginary) / denominator,\n                 (imaginary * q - real) / denominator);\n         } else {\n             double q = d / c;\n             double denominator = d * q + c;\n             return createComplex((imaginary * q + real) / denominator,\n                 (imaginary - real * q) / denominator);\n         }\n     }\n      public Complex divide(double divisor) {\n         if (isNaN || Double.isNaN(divisor)) {\n             return NaN;\n         }\n         if (divisor == 0d) {\n            return NaN;\n         }\n         if (Double.isInfinite(divisor)) {\n             return !isInfinite() ? ZERO : NaN;\n         }\n         return createComplex(real / divisor,\n                              imaginary  / divisor);\n     }\n ","SolutionWithNoComments":"\n package org.apache.commons.math.complex;\n \n import java.io.Serializable;\n import java.util.ArrayList;\n import java.util.List;\n \n import org.apache.commons.math.FieldElement;\n import org.apache.commons.math.exception.NullArgumentException;\n import org.apache.commons.math.exception.NotPositiveException;\n import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.util.MathUtils;\n import org.apache.commons.math.util.FastMath;\n  public class Complex implements FieldElement<Complex>, Serializable  {\n     public static final Complex I = new Complex(0.0, 1.0);\n     public static final Complex NaN = new Complex(Double.NaN, Double.NaN);\n     public static final Complex INF = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);\n     public static final Complex ONE = new Complex(1.0, 0.0);\n     public static final Complex ZERO = new Complex(0.0, 0.0);\n \n     private static final long serialVersionUID = -6195664516687396620L;\n \n     private final double imaginary;\n     private final double real;\n     private final transient boolean isNaN;\n     private final transient boolean isInfinite;\n    private final transient boolean isZero;\n     public Complex(double real, double imaginary) {\n         this.real = real;\n         this.imaginary = imaginary;\n \n         isNaN = Double.isNaN(real) || Double.isNaN(imaginary);\n         isInfinite = !isNaN &&\n             (Double.isInfinite(real) || Double.isInfinite(imaginary));\n        isZero = real == 0 && imaginary == 0;\n     }\n \n     public Complex divide(Complex divisor)\n         throws NullArgumentException {\n         MathUtils.checkNotNull(divisor);\n         if (isNaN || divisor.isNaN) {\n             return NaN;\n         }\n \n        if (divisor.isZero) {\n            return isZero ? NaN : INF;\n         }\n \n         if (divisor.isInfinite() && !isInfinite()) {\n             return ZERO;\n         }\n \n         final double c = divisor.getReal();\n         final double d = divisor.getImaginary();\n \n         if (FastMath.abs(c) < FastMath.abs(d)) {\n             double q = c / d;\n             double denominator = c * q + d;\n             return createComplex((real * q + imaginary) / denominator,\n                 (imaginary * q - real) / denominator);\n         } else {\n             double q = d / c;\n             double denominator = d * q + c;\n             return createComplex((imaginary * q + real) / denominator,\n                 (imaginary - real * q) / denominator);\n         }\n     }\n      public Complex divide(double divisor) {\n         if (isNaN || Double.isNaN(divisor)) {\n             return NaN;\n         }\n         if (divisor == 0d) {\n            return isZero ? NaN : INF;\n         }\n         if (Double.isInfinite(divisor)) {\n             return !isInfinite() ? ZERO : NaN;\n         }\n         return createComplex(real / divisor,\n                              imaginary  / divisor);\n     }\n "},{"ids":270,"error":"java.lang.Exception","source":"/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java","code":"@@ -186,6 +186,9 @@ protected final double doSolve() {\n                 case REGULA_FALSI:\n                     // Detect early that algorithm is stuck, instead of waiting\n                     // for the maximum number of iterations to be exceeded.\n                     break;\n                 default:\n                     // Should never happen.\n","solution":"@@ -186,6 +186,9 @@ protected final double doSolve() {\n                 case REGULA_FALSI:\n                     // Detect early that algorithm is stuck, instead of waiting\n                     // for the maximum number of iterations to be exceeded.\n                  if (x == x1) {\n                      throw new ConvergenceException();\n                  }\n                     break;\n                 default:\n                     // Should never happen.\n","CodeWithNoComments":"\n                 case REGULA_FALSI:\n                                                               break;\n                 default:\n                     ","SolutionWithNoComments":"\n                 case REGULA_FALSI:\n                                                              if (x == x1) {\n                        throw new ConvergenceException();\n                    }\n                     break;\n                 default:\n                     "},{"ids":271,"error":"junit.framework.AssertionFailedError","source":"/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java","code":"@@ -184,10 +184,6 @@ protected final double doSolve() {\n                     break;\n                 case REGULA_FALSI:\n                     // Nothing.\n                  if (x == x1) {\n                      x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n                      f0 = computeObjectiveValue(x0);\n                  }\n                     break;\n                 default:\n                     // Should never happen.\n","solution":"@@ -184,10 +184,6 @@ protected final double doSolve() {\n                     break;\n                 case REGULA_FALSI:\n                     // Nothing.\n                     break;\n                 default:\n                     // Should never happen.\n","CodeWithNoComments":"\n                     break;\n                 case REGULA_FALSI:\n                                         if (x == x1) {\n                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n                        f0 = computeObjectiveValue(x0);\n                    }\n                     break;\n                 default:\n                     ","SolutionWithNoComments":"\n                     break;\n                 case REGULA_FALSI:\n                                          break;\n                 default:\n                     "},{"ids":272,"error":"org.apache.commons.math.MathRuntimeException$6","source":"/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java","code":"@@ -342,7 +342,7 @@ public double dotProduct(RealVector v) {\n     public OpenMapRealVector ebeDivide(RealVector v) {\n         checkVectorDimensions(v.getDimension());\n         OpenMapRealVector res = new OpenMapRealVector(this);\n      Iterator iter = res.entries.iterator();\n         while (iter.hasNext()) {\n             iter.advance();\n             res.setEntry(iter.key(), iter.value() / v.getEntry(iter.key()));\n@@ -355,7 +355,7 @@ public OpenMapRealVector ebeDivide(RealVector v) {\n     public OpenMapRealVector ebeDivide(double[] v) {\n         checkVectorDimensions(v.length);\n         OpenMapRealVector res = new OpenMapRealVector(this);\n      Iterator iter = res.entries.iterator();\n         while (iter.hasNext()) {\n             iter.advance();\n             res.setEntry(iter.key(), iter.value() / v[iter.key()]);\n@@ -367,7 +367,7 @@ public OpenMapRealVector ebeDivide(double[] v) {\n     public OpenMapRealVector ebeMultiply(RealVector v) {\n         checkVectorDimensions(v.getDimension());\n         OpenMapRealVector res = new OpenMapRealVector(this);\n      Iterator iter = res.entries.iterator();\n         while (iter.hasNext()) {\n             iter.advance();\n             res.setEntry(iter.key(), iter.value() * v.getEntry(iter.key()));\n@@ -380,7 +380,7 @@ public OpenMapRealVector ebeMultiply(RealVector v) {\n     public OpenMapRealVector ebeMultiply(double[] v) {\n         checkVectorDimensions(v.length);\n         OpenMapRealVector res = new OpenMapRealVector(this);\n      Iterator iter = res.entries.iterator();\n         while (iter.hasNext()) {\n             iter.advance();\n             res.setEntry(iter.key(), iter.value() * v[iter.key()]);\n","solution":"@@ -342,7 +342,7 @@ public double dotProduct(RealVector v) {\n     public OpenMapRealVector ebeDivide(RealVector v) {\n         checkVectorDimensions(v.getDimension());\n         OpenMapRealVector res = new OpenMapRealVector(this);\n      Iterator iter = entries.iterator();\n         while (iter.hasNext()) {\n             iter.advance();\n             res.setEntry(iter.key(), iter.value() / v.getEntry(iter.key()));\n@@ -355,7 +355,7 @@ public OpenMapRealVector ebeDivide(RealVector v) {\n     public OpenMapRealVector ebeDivide(double[] v) {\n         checkVectorDimensions(v.length);\n         OpenMapRealVector res = new OpenMapRealVector(this);\n      Iterator iter = entries.iterator();\n         while (iter.hasNext()) {\n             iter.advance();\n             res.setEntry(iter.key(), iter.value() / v[iter.key()]);\n@@ -367,7 +367,7 @@ public OpenMapRealVector ebeDivide(double[] v) {\n     public OpenMapRealVector ebeMultiply(RealVector v) {\n         checkVectorDimensions(v.getDimension());\n         OpenMapRealVector res = new OpenMapRealVector(this);\n      Iterator iter = entries.iterator();\n         while (iter.hasNext()) {\n             iter.advance();\n             res.setEntry(iter.key(), iter.value() * v.getEntry(iter.key()));\n@@ -380,7 +380,7 @@ public OpenMapRealVector ebeMultiply(RealVector v) {\n     public OpenMapRealVector ebeMultiply(double[] v) {\n         checkVectorDimensions(v.length);\n         OpenMapRealVector res = new OpenMapRealVector(this);\n      Iterator iter = entries.iterator();\n         while (iter.hasNext()) {\n             iter.advance();\n             res.setEntry(iter.key(), iter.value() * v[iter.key()]);\n","CodeWithNoComments":"\n     public OpenMapRealVector ebeDivide(RealVector v) {\n         checkVectorDimensions(v.getDimension());\n         OpenMapRealVector res = new OpenMapRealVector(this);\n        Iterator iter = res.entries.iterator();\n         while (iter.hasNext()) {\n             iter.advance();\n             res.setEntry(iter.key(), iter.value() / v.getEntry(iter.key()));\n\n     public OpenMapRealVector ebeDivide(double[] v) {\n         checkVectorDimensions(v.length);\n         OpenMapRealVector res = new OpenMapRealVector(this);\n        Iterator iter = res.entries.iterator();\n         while (iter.hasNext()) {\n             iter.advance();\n             res.setEntry(iter.key(), iter.value() / v[iter.key()]);\n\n     public OpenMapRealVector ebeMultiply(RealVector v) {\n         checkVectorDimensions(v.getDimension());\n         OpenMapRealVector res = new OpenMapRealVector(this);\n        Iterator iter = res.entries.iterator();\n         while (iter.hasNext()) {\n             iter.advance();\n             res.setEntry(iter.key(), iter.value() * v.getEntry(iter.key()));\n\n     public OpenMapRealVector ebeMultiply(double[] v) {\n         checkVectorDimensions(v.length);\n         OpenMapRealVector res = new OpenMapRealVector(this);\n        Iterator iter = res.entries.iterator();\n         while (iter.hasNext()) {\n             iter.advance();\n             res.setEntry(iter.key(), iter.value() * v[iter.key()]);\n","SolutionWithNoComments":"\n     public OpenMapRealVector ebeDivide(RealVector v) {\n         checkVectorDimensions(v.getDimension());\n         OpenMapRealVector res = new OpenMapRealVector(this);\n        Iterator iter = entries.iterator();\n         while (iter.hasNext()) {\n             iter.advance();\n             res.setEntry(iter.key(), iter.value() / v.getEntry(iter.key()));\n\n     public OpenMapRealVector ebeDivide(double[] v) {\n         checkVectorDimensions(v.length);\n         OpenMapRealVector res = new OpenMapRealVector(this);\n        Iterator iter = entries.iterator();\n         while (iter.hasNext()) {\n             iter.advance();\n             res.setEntry(iter.key(), iter.value() / v[iter.key()]);\n\n     public OpenMapRealVector ebeMultiply(RealVector v) {\n         checkVectorDimensions(v.getDimension());\n         OpenMapRealVector res = new OpenMapRealVector(this);\n        Iterator iter = entries.iterator();\n         while (iter.hasNext()) {\n             iter.advance();\n             res.setEntry(iter.key(), iter.value() * v.getEntry(iter.key()));\n\n     public OpenMapRealVector ebeMultiply(double[] v) {\n         checkVectorDimensions(v.length);\n         OpenMapRealVector res = new OpenMapRealVector(this);\n        Iterator iter = entries.iterator();\n         while (iter.hasNext()) {\n             iter.advance();\n             res.setEntry(iter.key(), iter.value() * v[iter.key()]);\n"},{"ids":273,"error":"junit.framework.AssertionFailedError","source":"/src/main/java/org/apache/commons/math/complex/Complex.java","code":"@@ -257,7 +257,7 @@ public Complex divide(Complex divisor)\n \n         if (divisor.isZero) {\n             // return isZero ? NaN : INF; // See MATH-657\n          return isZero ? NaN : INF;\n         }\n \n         if (divisor.isInfinite() && !isInfinite()) {\n@@ -294,7 +294,7 @@ public Complex divide(double divisor) {\n         }\n         if (divisor == 0d) {\n             // return isZero ? NaN : INF; // See MATH-657\n          return isZero ? NaN : INF;\n         }\n         if (Double.isInfinite(divisor)) {\n             return !isInfinite() ? ZERO : NaN;\n","solution":"@@ -257,7 +257,7 @@ public Complex divide(Complex divisor)\n \n         if (divisor.isZero) {\n             // return isZero ? NaN : INF; // See MATH-657\n          return NaN;\n         }\n \n         if (divisor.isInfinite() && !isInfinite()) {\n@@ -294,7 +294,7 @@ public Complex divide(double divisor) {\n         }\n         if (divisor == 0d) {\n             // return isZero ? NaN : INF; // See MATH-657\n          return NaN;\n         }\n         if (Double.isInfinite(divisor)) {\n             return !isInfinite() ? ZERO : NaN;\n","CodeWithNoComments":"\n \n         if (divisor.isZero) {\n                         return isZero ? NaN : INF;\n         }\n \n         if (divisor.isInfinite() && !isInfinite()) {\n\n         }\n         if (divisor == 0d) {\n                         return isZero ? NaN : INF;\n         }\n         if (Double.isInfinite(divisor)) {\n             return !isInfinite() ? ZERO : NaN;\n","SolutionWithNoComments":"\n \n         if (divisor.isZero) {\n                         return NaN;\n         }\n \n         if (divisor.isInfinite() && !isInfinite()) {\n\n         }\n         if (divisor == 0d) {\n                         return NaN;\n         }\n         if (Double.isInfinite(divisor)) {\n             return !isInfinite() ? ZERO : NaN;\n"},{"ids":274,"error":"junit.framework.AssertionFailedError","source":"/src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java","code":"@@ -47,6 +47,11 @@\n      */\n     public OpenMapRealMatrix(int rowDimension, int columnDimension) {\n         super(rowDimension, columnDimension);\n         this.rows = rowDimension;\n         this.columns = columnDimension;\n         this.entries = new OpenIntToDoubleHashMap(0.0);\n","solution":"@@ -47,6 +47,11 @@\n      */\n     public OpenMapRealMatrix(int rowDimension, int columnDimension) {\n         super(rowDimension, columnDimension);\n      long lRow = (long) rowDimension;\n      long lCol = (long) columnDimension;\n      if (lRow * lCol >= (long) Integer.MAX_VALUE) {\n          throw new NumberIsTooLargeException(lRow * lCol, Integer.MAX_VALUE, false);\n      }\n         this.rows = rowDimension;\n         this.columns = columnDimension;\n         this.entries = new OpenIntToDoubleHashMap(0.0);\n","CodeWithNoComments":"\n      \n     public OpenMapRealMatrix(int rowDimension, int columnDimension) {\n         super(rowDimension, columnDimension);\n         this.rows = rowDimension;\n         this.columns = columnDimension;\n         this.entries = new OpenIntToDoubleHashMap(0.0);\n","SolutionWithNoComments":"\n      \n     public OpenMapRealMatrix(int rowDimension, int columnDimension) {\n         super(rowDimension, columnDimension);\n        long lRow = (long) rowDimension;\n        long lCol = (long) columnDimension;\n        if (lRow * lCol >= (long) Integer.MAX_VALUE) {\n            throw new NumberIsTooLargeException(lRow * lCol, Integer.MAX_VALUE, false);\n        }\n         this.rows = rowDimension;\n         this.columns = columnDimension;\n         this.entries = new OpenIntToDoubleHashMap(0.0);\n"},{"ids":275,"error":"org.apache.commons.math.exception.TooManyEvaluationsException","source":"/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java","code":"@@ -182,10 +182,19 @@ protected final double doSolve() {\n                 case PEGASUS:\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                         // Update formula cannot make any progress: Update the\n                         // search interval.\n                 default:\n                     // Should never happen.\n                 }\n             }\n             // Update from [x0, x1] to [x0, x].\n","solution":"@@ -182,10 +182,19 @@ protected final double doSolve() {\n                 case PEGASUS:\n                     f0 *= f1 / (f1 + fx);\n                     break;\n              case REGULA_FALSI:\n                  if (x == x1) {\n                      final double delta = FastMath.max(rtol * FastMath.abs(x1),\n                                                        atol);\n                         // Update formula cannot make any progress: Update the\n                         // search interval.\n                      x0 = 0.5 * (x0 + x1 - delta);\n                      f0 = computeObjectiveValue(x0);\n                  }\n                  break;\n                 default:\n                     // Should never happen.\n                  throw new MathInternalError();\n                 }\n             }\n             // Update from [x0, x1] to [x0, x].\n","CodeWithNoComments":"\n                 case PEGASUS:\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                                                                   default:\n                                      }\n             }\n             ","SolutionWithNoComments":"\n                 case PEGASUS:\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                case REGULA_FALSI:\n                    if (x == x1) {\n                        final double delta = FastMath.max(rtol * FastMath.abs(x1),\n                                                          atol);\n                                                                          x0 = 0.5 * (x0 + x1 - delta);\n                        f0 = computeObjectiveValue(x0);\n                    }\n                    break;\n                 default:\n                                         throw new MathInternalError();\n                 }\n             }\n             "},{"ids":276,"error":"org.apache.commons.math.exception.NotStrictlyPositiveException","source":"/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java","code":"@@ -118,7 +118,7 @@ public double value(double x, double[] p) {\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n      return fit(new Gaussian.Parametric(), guess);\n     }\n \n     /**\n","solution":"@@ -118,7 +118,7 @@ public double value(double x, double[] p) {\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n      return fit(guess);\n     }\n \n     /**\n","CodeWithNoComments":"\n      \n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n        return fit(new Gaussian.Parametric(), guess);\n     }\n \n","SolutionWithNoComments":"\n      \n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n        return fit(guess);\n     }\n \n"},{"ids":277,"error":"junit.framework.AssertionFailedError","source":"/src/main/java/org/apache/commons/math/util/FastMath.java","code":"@@ -3479,7 +3479,7 @@ public static long max(final long a, final long b) {\n      * @return b if a is lesser or equal to b, a otherwise\n      */\n     public static float max(final float a, final float b) {\n      return (a <= b) ? b : (Float.isNaN(a + b) ? Float.NaN : b);\n     }\n \n     /** Compute the maximum of two values\n","solution":"@@ -3479,7 +3479,7 @@ public static long max(final long a, final long b) {\n      * @return b if a is lesser or equal to b, a otherwise\n      */\n     public static float max(final float a, final float b) {\n      return (a <= b) ? b : (Float.isNaN(a + b) ? Float.NaN : a);\n     }\n \n     /** Compute the maximum of two values\n","CodeWithNoComments":"\n     public static float max(final float a, final float b) {\n        return (a <= b) ? b : (Float.isNaN(a + b) ? Float.NaN : b);\n     }\n \n","SolutionWithNoComments":"\n      \n     public static float max(final float a, final float b) {\n        return (a <= b) ? b : (Float.isNaN(a + b) ? Float.NaN : a);\n     }\n \n"},{"ids":278,"error":"junit.framework.AssertionFailedError","source":"/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java","code":"@@ -172,7 +172,7 @@ public KMeansPlusPlusClusterer(final Random random, final EmptyClusterStrategy e\n         while (resultSet.size() < k) {\n             // For each data point x, compute D(x), the distance between x and\n             // the nearest center that has already been chosen.\n          int sum = 0;\n             for (int i = 0; i < pointSet.size(); i++) {\n                 final T p = pointSet.get(i);\n                 final Cluster<T> nearest = getNearestCluster(resultSet, p);\n","solution":"@@ -172,7 +172,7 @@ public KMeansPlusPlusClusterer(final Random random, final EmptyClusterStrategy e\n         while (resultSet.size() < k) {\n             // For each data point x, compute D(x), the distance between x and\n             // the nearest center that has already been chosen.\n          double sum = 0;\n             for (int i = 0; i < pointSet.size(); i++) {\n                 final T p = pointSet.get(i);\n                 final Cluster<T> nearest = getNearestCluster(resultSet, p);\n","CodeWithNoComments":"\n         while (resultSet.size() < k) {\n                                      int sum = 0;\n             for (int i = 0; i < pointSet.size(); i++) {\n                 final T p = pointSet.get(i);\n                 final Cluster<T> nearest = getNearestCluster(resultSet, p);\n","SolutionWithNoComments":"\n         while (resultSet.size() < k) {\n                                      double sum = 0;\n             for (int i = 0; i < pointSet.size(); i++) {\n                 final T p = pointSet.get(i);\n                 final Cluster<T> nearest = getNearestCluster(resultSet, p);\n"},{"ids":279,"error":"junit.framework.AssertionFailedError","source":"/src/main/java/org/apache/commons/math/complex/Complex.java","code":"@@ -150,6 +150,9 @@ public double abs() {\n     public Complex add(Complex rhs)\n         throws NullArgumentException {\n         MathUtils.checkNotNull(rhs);\n         return createComplex(real + rhs.getReal(),\n             imaginary + rhs.getImaginary());\n     }\n","solution":"@@ -150,6 +150,9 @@ public double abs() {\n     public Complex add(Complex rhs)\n         throws NullArgumentException {\n         MathUtils.checkNotNull(rhs);\n      if (isNaN || rhs.isNaN) {\n          return NaN;\n      }\n         return createComplex(real + rhs.getReal(),\n             imaginary + rhs.getImaginary());\n     }\n","CodeWithNoComments":"\n     public Complex add(Complex rhs)\n         throws NullArgumentException {\n         MathUtils.checkNotNull(rhs);\n         return createComplex(real + rhs.getReal(),\n             imaginary + rhs.getImaginary());\n     }\n","SolutionWithNoComments":"\n     public Complex add(Complex rhs)\n         throws NullArgumentException {\n         MathUtils.checkNotNull(rhs);\n        if (isNaN || rhs.isNaN) {\n            return NaN;\n        }\n         return createComplex(real + rhs.getReal(),\n             imaginary + rhs.getImaginary());\n     }\n"},{"ids":280,"error":"org.apache.commons.math.MathRuntimeException$4","source":"/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java","code":"@@ -19,7 +19,7 @@\n import java.io.Serializable;\n \n import org.apache.commons.math.MathException;\n import org.apache.commons.math.MathRuntimeException;\n import org.apache.commons.math.exception.NotStrictlyPositiveException;\n import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.special.Gamma;\n import org.apache.commons.math.util.MathUtils;\n@@ -91,7 +91,7 @@ public PoissonDistributionImpl(double p) {\n      */\n     public PoissonDistributionImpl(double p, double epsilon, int maxIterations) {\n         if (p <= 0) {\n          throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN, p);\n         }\n         mean = p;\n         normal = new NormalDistributionImpl(p, FastMath.sqrt(p));\n","solution":"@@ -19,7 +19,7 @@\n import java.io.Serializable;\n \n import org.apache.commons.math.MathException;\n import org.apache.commons.math.exception.NotStrictlyPositiveException;\n import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.special.Gamma;\n import org.apache.commons.math.util.MathUtils;\n@@ -91,7 +91,7 @@ public PoissonDistributionImpl(double p) {\n      */\n     public PoissonDistributionImpl(double p, double epsilon, int maxIterations) {\n         if (p <= 0) {\n          throw new NotStrictlyPositiveException(LocalizedFormats.MEAN, p);\n         }\n         mean = p;\n         normal = new NormalDistributionImpl(p, FastMath.sqrt(p));\n","CodeWithNoComments":"\n import java.io.Serializable;\n \n import org.apache.commons.math.MathException;\n import org.apache.commons.math.MathRuntimeException;\n import org.apache.commons.math.exception.NotStrictlyPositiveException;\n import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.special.Gamma;\n import org.apache.commons.math.util.MathUtils;\n\n      \n     public PoissonDistributionImpl(double p, double epsilon, int maxIterations) {\n         if (p <= 0) {\n            throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN, p);\n         }\n         mean = p;\n         normal = new NormalDistributionImpl(p, FastMath.sqrt(p));\n","SolutionWithNoComments":"\n import java.io.Serializable;\n \n import org.apache.commons.math.MathException;\n import org.apache.commons.math.exception.NotStrictlyPositiveException;\n import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.special.Gamma;\n import org.apache.commons.math.util.MathUtils;\n\n      \n     public PoissonDistributionImpl(double p, double epsilon, int maxIterations) {\n         if (p <= 0) {\n            throw new NotStrictlyPositiveException(LocalizedFormats.MEAN, p);\n         }\n         mean = p;\n         normal = new NormalDistributionImpl(p, FastMath.sqrt(p));\n"},{"ids":281,"error":"junit.framework.AssertionFailedError","source":"/src/main/java/org/apache/commons/math/geometry/Vector3D.java","code":"@@ -456,9 +456,21 @@ public static double dotProduct(Vector3D v1, Vector3D v2) {\n    */\n   public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n \n \n       // rescale both vectors without losing precision,\n       // to ensure their norm are the same order of magnitude\n \n       // we reduce cancellation errors by preconditioning,\n       // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n@@ -467,10 +479,15 @@ public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n       // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n \n       // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n \n \n       // compute cross product from v3 and v2 instead of v1 and v2\n    return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);\n \n   }\n \n","solution":"@@ -456,9 +456,21 @@ public static double dotProduct(Vector3D v1, Vector3D v2) {\n    */\n   public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n \n    final double n1 = v1.getNormSq();\n    final double n2 = v2.getNormSq();\n    if ((n1 * n2) < MathUtils.SAFE_MIN) {\n        return ZERO;\n    }\n \n       // rescale both vectors without losing precision,\n       // to ensure their norm are the same order of magnitude\n    final int deltaExp = (FastMath.getExponent(n1) - FastMath.getExponent(n2)) / 4;\n    final double x1    = FastMath.scalb(v1.x, -deltaExp);\n    final double y1    = FastMath.scalb(v1.y, -deltaExp);\n    final double z1    = FastMath.scalb(v1.z, -deltaExp);\n    final double x2    = FastMath.scalb(v2.x,  deltaExp);\n    final double y2    = FastMath.scalb(v2.y,  deltaExp);\n    final double z2    = FastMath.scalb(v2.z,  deltaExp);\n \n       // we reduce cancellation errors by preconditioning,\n       // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n@@ -467,10 +479,15 @@ public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n       // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n \n       // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n    final double ratio = (x1 * x2 + y1 * y2 + z1 * z2) / FastMath.scalb(n2, 2 * deltaExp);\n    final double rho   = FastMath.rint(256 * ratio) / 256;\n \n    final double x3 = x1 - rho * x2;\n    final double y3 = y1 - rho * y2;\n    final double z3 = z1 - rho * z2;\n \n       // compute cross product from v3 and v2 instead of v1 and v2\n    return new Vector3D(y3 * z2 - z3 * y2, z3 * x2 - x3 * z2, x3 * y2 - y3 * x2);\n \n   }\n \n","CodeWithNoComments":"\n    \n   public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n \n \n               \n              \n        \n        \n \n             return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);\n \n   }\n \n","SolutionWithNoComments":"\n    \n   public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n \n      final double n1 = v1.getNormSq();\n      final double n2 = v2.getNormSq();\n      if ((n1 * n2) < MathUtils.SAFE_MIN) {\n          return ZERO;\n      }\n \n                    final int deltaExp = (FastMath.getExponent(n1) - FastMath.getExponent(n2)) / 4;\n      final double x1    = FastMath.scalb(v1.x, -deltaExp);\n      final double y1    = FastMath.scalb(v1.y, -deltaExp);\n      final double z1    = FastMath.scalb(v1.z, -deltaExp);\n      final double x2    = FastMath.scalb(v2.x,  deltaExp);\n      final double y2    = FastMath.scalb(v2.y,  deltaExp);\n      final double z2    = FastMath.scalb(v2.z,  deltaExp);\n \n              \n        \n             final double ratio = (x1 * x2 + y1 * y2 + z1 * z2) / FastMath.scalb(n2, 2 * deltaExp);\n      final double rho   = FastMath.rint(256 * ratio) / 256;\n \n      final double x3 = x1 - rho * x2;\n      final double y3 = y1 - rho * y2;\n      final double z3 = z1 - rho * z2;\n \n             return new Vector3D(y3 * z2 - z3 * y2, z3 * x2 - x3 * z2, x3 * y2 - y3 * x2);\n \n   }\n \n"},{"ids":282,"error":"org.apache.commons.math.ConvergenceException","source":"/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java","code":"@@ -123,18 +123,11 @@ public double density(double x) {\n      */\n     public double cumulativeProbability(double x) throws MathException {\n         final double dev = x - mean;\n      try {\n         return 0.5 * (1.0 + Erf.erf((dev) /\n                     (standardDeviation * FastMath.sqrt(2.0))));\n      } catch (MaxIterationsExceededException ex) {\n          if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38\n              return 0;\n          } else if (x > (mean + 20 * standardDeviation)) {\n              return 1;\n          } else {\n              throw ex;\n          }\n      }\n     }\n \n     /**\n","solution":"@@ -123,18 +123,11 @@ public double density(double x) {\n      */\n     public double cumulativeProbability(double x) throws MathException {\n         final double dev = x - mean;\n      if (FastMath.abs(dev) > 40 * standardDeviation) { \n          return dev < 0 ? 0.0d : 1.0d;\n      }\n         return 0.5 * (1.0 + Erf.erf((dev) /\n                     (standardDeviation * FastMath.sqrt(2.0))));\n     }\n \n     /**\n","CodeWithNoComments":"\n      \n     public double cumulativeProbability(double x) throws MathException {\n         final double dev = x - mean;\n        try {\n         return 0.5 * (1.0 + Erf.erf((dev) /\n                     (standardDeviation * FastMath.sqrt(2.0))));\n        } catch (MaxIterationsExceededException ex) {\n            if (x < (mean - 20 * standardDeviation)) {                 return 0;\n            } else if (x > (mean + 20 * standardDeviation)) {\n                return 1;\n            } else {\n                throw ex;\n            }\n        }\n     }\n \n","SolutionWithNoComments":"\n      \n     public double cumulativeProbability(double x) throws MathException {\n         final double dev = x - mean;\n        if (FastMath.abs(dev) > 40 * standardDeviation) { \n            return dev < 0 ? 0.0d : 1.0d;\n        }\n         return 0.5 * (1.0 + Erf.erf((dev) /\n                     (standardDeviation * FastMath.sqrt(2.0))));\n     }\n \n"},{"ids":283,"error":"junit.framework.AssertionFailedError","source":"/src/main/java/org/apache/commons/math/dfp/Dfp.java","code":"@@ -270,6 +270,9 @@ protected Dfp(final DfpField field, double x) {\n             // Zero or sub-normal\n             if (x == 0) {\n                 // make sure 0 has the right sign\n                 return;\n             }\n \n@@ -2316,7 +2319,10 @@ public double toDouble() {\n \n         Dfp y = this;\n         boolean negate = false;\n      if (lessThan(getZero())) {\n             y = negate();\n             negate = true;\n         }\n","solution":"@@ -270,6 +270,9 @@ protected Dfp(final DfpField field, double x) {\n             // Zero or sub-normal\n             if (x == 0) {\n                 // make sure 0 has the right sign\n              if ((bits & 0x8000000000000000L) != 0) {\n                  sign = -1;\n              }\n                 return;\n             }\n \n@@ -2316,7 +2319,10 @@ public double toDouble() {\n \n         Dfp y = this;\n         boolean negate = false;\n      int cmp0 = compare(this, getZero());\n      if (cmp0 == 0) {\n          return sign < 0 ? -0.0 : +0.0;\n      } else if (cmp0 < 0) {\n             y = negate();\n             negate = true;\n         }\n","CodeWithNoComments":"\n                          if (x == 0) {\n                                  return;\n             }\n \n\n \n         Dfp y = this;\n         boolean negate = false;\n        if (lessThan(getZero())) {\n             y = negate();\n             negate = true;\n         }\n","SolutionWithNoComments":"\n                          if (x == 0) {\n                                 if ((bits & 0x8000000000000000L) != 0) {\n                    sign = -1;\n                }\n                 return;\n             }\n \n\n \n         Dfp y = this;\n         boolean negate = false;\n        int cmp0 = compare(this, getZero());\n        if (cmp0 == 0) {\n            return sign < 0 ? -0.0 : +0.0;\n        } else if (cmp0 < 0) {\n             y = negate();\n             negate = true;\n         }\n"},{"ids":284,"error":"junit.framework.AssertionFailedError","source":"/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java","code":"@@ -234,13 +234,7 @@ public int getDimension() {\n             indices[i] = idx;\n         }\n \n      int idx = 1;\n      while (count < index) {\n          count += idx;\n          ++idx;\n      }\n      --idx;\n      indices[last] = idx;\n \n         return indices;\n     }\n","solution":"@@ -234,13 +234,7 @@ public int getDimension() {\n             indices[i] = idx;\n         }\n \n      indices[last] = index - count;\n \n         return indices;\n     }\n","CodeWithNoComments":"\n             indices[i] = idx;\n         }\n \n        int idx = 1;\n        while (count < index) {\n            count += idx;\n            ++idx;\n        }\n        --idx;\n        indices[last] = idx;\n \n         return indices;\n     }\n","SolutionWithNoComments":"\n             indices[i] = idx;\n         }\n \n        indices[last] = index - count;\n \n         return indices;\n     }\n"},{"ids":285,"error":"junit.framework.AssertionFailedError","source":"/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java","code":"@@ -341,7 +341,8 @@ public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {\n   Vector3D k     = v1Su1.crossProduct(v2Su2);\n   Vector3D u3    = u1.crossProduct(u2);\n   double c       = k.dotProduct(u3);\nif (c == 0) {\n     // the (q1, q2, q3) vector is close to the (u1, u2) plane\n     // we try other vectors\n     Vector3D v3 = Vector3D.crossProduct(v1, v2);\n@@ -350,13 +351,13 @@ public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {\n     Vector3D u2Prime = u1.crossProduct(u3);\n     c = k.dotProduct(u2Prime);\n \n  if (c == 0) {\n       // the (q1, q2, q3) vector is also close to the (u1, u3) plane,\n       // it is almost aligned with u1: we try (u2, u3) and (v2, v3)\n       k = v2Su2.crossProduct(v3Su3);;\n       c = k.dotProduct(u2.crossProduct(u3));;\n \n    if (c == 0) {\n         // the (q1, q2, q3) vector is aligned with everything\n         // this is really the identity rotation\n         q0 = 1.0;\n","solution":"@@ -341,7 +341,8 @@ public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {\n   Vector3D k     = v1Su1.crossProduct(v2Su2);\n   Vector3D u3    = u1.crossProduct(u2);\n   double c       = k.dotProduct(u3);\nfinal double inPlaneThreshold = 0.001;\nif (c <= inPlaneThreshold * k.getNorm() * u3.getNorm()) {\n     // the (q1, q2, q3) vector is close to the (u1, u2) plane\n     // we try other vectors\n     Vector3D v3 = Vector3D.crossProduct(v1, v2);\n@@ -350,13 +351,13 @@ public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {\n     Vector3D u2Prime = u1.crossProduct(u3);\n     c = k.dotProduct(u2Prime);\n \n  if (c <= inPlaneThreshold * k.getNorm() * u2Prime.getNorm()) {\n       // the (q1, q2, q3) vector is also close to the (u1, u3) plane,\n       // it is almost aligned with u1: we try (u2, u3) and (v2, v3)\n       k = v2Su2.crossProduct(v3Su3);;\n       c = k.dotProduct(u2.crossProduct(u3));;\n \n    if (c <= 0) {\n         // the (q1, q2, q3) vector is aligned with everything\n         // this is really the identity rotation\n         q0 = 1.0;\n","CodeWithNoComments":"\n   Vector3D k     = v1Su1.crossProduct(v2Su2);\n   Vector3D u3    = u1.crossProduct(u2);\n   double c       = k.dotProduct(u3);\n  if (c == 0) {\n               Vector3D v3 = Vector3D.crossProduct(v1, v2);\n\n     Vector3D u2Prime = u1.crossProduct(u3);\n     c = k.dotProduct(u2Prime);\n \n    if (c == 0) {\n                     k = v2Su2.crossProduct(v3Su3);;\n       c = k.dotProduct(u2.crossProduct(u3));;\n \n      if (c == 0) {\n                           q0 = 1.0;\n","SolutionWithNoComments":"\n   Vector3D k     = v1Su1.crossProduct(v2Su2);\n   Vector3D u3    = u1.crossProduct(u2);\n   double c       = k.dotProduct(u3);\n  final double inPlaneThreshold = 0.001;\n  if (c <= inPlaneThreshold * k.getNorm() * u3.getNorm()) {\n               Vector3D v3 = Vector3D.crossProduct(v1, v2);\n\n     Vector3D u2Prime = u1.crossProduct(u3);\n     c = k.dotProduct(u2Prime);\n \n    if (c <= inPlaneThreshold * k.getNorm() * u2Prime.getNorm()) {\n                     k = v2Su2.crossProduct(v3Su3);;\n       c = k.dotProduct(u2.crossProduct(u3));;\n \n      if (c <= 0) {\n                           q0 = 1.0;\n"},{"ids":286,"error":"junit.framework.AssertionFailedError","source":"/src/main/java/org/apache/commons/math/util/MathUtils.java","code":"@@ -414,7 +414,7 @@ public static double cosh(double x) {\n      * @return {@code true} if the values are equal.\n      */\n     public static boolean equals(double x, double y) {\n      return (Double.isNaN(x) && Double.isNaN(y)) || x == y;\n     }\n \n     /**\n","solution":"@@ -414,7 +414,7 @@ public static double cosh(double x) {\n      * @return {@code true} if the values are equal.\n      */\n     public static boolean equals(double x, double y) {\n      return equals(x, y, 1);\n     }\n \n     /**\n","CodeWithNoComments":"\n     \n     public static boolean equals(double x, double y) {\n        return (Double.isNaN(x) && Double.isNaN(y)) || x == y;\n     }\n \n","SolutionWithNoComments":"\n     \n     public static boolean equals(double x, double y) {\n        return equals(x, y, 1);\n     }\n \n"},{"ids":287,"error":"junit.framework.AssertionFailedError","source":"/src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java","code":"@@ -143,7 +143,7 @@ public UnivariateRealPointValuePair optimize(final FUNC f,\n                                                  final GoalType goal,\n                                                  final double min, final double max)\n         throws FunctionEvaluationException {\n      return optimize(f, goal, min, max, 0);\n     }\n \n     /** {@inheritDoc} */\n@@ -157,9 +157,8 @@ public UnivariateRealPointValuePair optimize(final FUNC f, final GoalType goal,\n         // Multi-start loop.\n         for (int i = 0; i < starts; ++i) {\n             try {\n              final double bound1 = (i == 0) ? min : min + generator.nextDouble() * (max - min);\n              final double bound2 = (i == 0) ? max : min + generator.nextDouble() * (max - min);\n              optima[i] = optimizer.optimize(f, goal, FastMath.min(bound1, bound2), FastMath.max(bound1, bound2));\n             } catch (FunctionEvaluationException fee) {\n                 optima[i] = null;\n             } catch (ConvergenceException ce) {\n","solution":"@@ -143,7 +143,7 @@ public UnivariateRealPointValuePair optimize(final FUNC f,\n                                                  final GoalType goal,\n                                                  final double min, final double max)\n         throws FunctionEvaluationException {\n      return optimize(f, goal, min, max, min + 0.5 * (max - min));\n     }\n \n     /** {@inheritDoc} */\n@@ -157,9 +157,8 @@ public UnivariateRealPointValuePair optimize(final FUNC f, final GoalType goal,\n         // Multi-start loop.\n         for (int i = 0; i < starts; ++i) {\n             try {\n              final double s = (i == 0) ? startValue : min + generator.nextDouble() * (max - min);\n              optima[i] = optimizer.optimize(f, goal, min, max, s);\n             } catch (FunctionEvaluationException fee) {\n                 optima[i] = null;\n             } catch (ConvergenceException ce) {\n","CodeWithNoComments":"\n                                                  final GoalType goal,\n                                                  final double min, final double max)\n         throws FunctionEvaluationException {\n        return optimize(f, goal, min, max, 0);\n     }\n \n\n                  for (int i = 0; i < starts; ++i) {\n             try {\n                final double bound1 = (i == 0) ? min : min + generator.nextDouble() * (max - min);\n                final double bound2 = (i == 0) ? max : min + generator.nextDouble() * (max - min);\n                optima[i] = optimizer.optimize(f, goal, FastMath.min(bound1, bound2), FastMath.max(bound1, bound2));\n             } catch (FunctionEvaluationException fee) {\n                 optima[i] = null;\n             } catch (ConvergenceException ce) {\n","SolutionWithNoComments":"\n                                                  final GoalType goal,\n                                                  final double min, final double max)\n         throws FunctionEvaluationException {\n        return optimize(f, goal, min, max, min + 0.5 * (max - min));\n     }\n \n\n                  for (int i = 0; i < starts; ++i) {\n             try {\n                final double s = (i == 0) ? startValue : min + generator.nextDouble() * (max - min);\n                optima[i] = optimizer.optimize(f, goal, min, max, s);\n             } catch (FunctionEvaluationException fee) {\n                 optima[i] = null;\n             } catch (ConvergenceException ce) {\n"},{"ids":288,"error":"junit.framework.AssertionFailedError","source":"/src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java","code":"@@ -41,10 +41,10 @@\n      * Construct a solver.\n      */\n     public BrentOptimizer() {\n      setMaxEvaluations(Integer.MAX_VALUE);\n         setMaximalIterationCount(100);\n      setAbsoluteAccuracy(1E-10);\n      setRelativeAccuracy(1.0e-14);\n     }\n \n     /**\n@@ -54,17 +54,10 @@ public BrentOptimizer() {\n      */\n     protected double doOptimize()\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n      throw new UnsupportedOperationException();\n  }\n  public double optimize(final UnivariateRealFunction f, final GoalType goalType, final double min, final double max, final double startValue) throws MaxIterationsExceededException, FunctionEvaluationException {\n      clearResult();\n         return localMin(getGoalType() == GoalType.MINIMIZE,\n                      f, goalType, min, startValue, max,\n                         getRelativeAccuracy(), getAbsoluteAccuracy());\n     }\n  public double optimize(final UnivariateRealFunction f, final GoalType goalType, final double min, final double max) throws MaxIterationsExceededException, FunctionEvaluationException {\n      return optimize(f, goalType, min, max, min + GOLDEN_SECTION * (max - min));\n  }\n \n     /**\n      * Find the minimum of the function within the interval {@code (lo, hi)}.\n@@ -91,8 +84,6 @@ public double optimize(final UnivariateRealFunction f, final GoalType goalType,\n      * the function.\n      */\n     private double localMin(boolean isMinim,\n                          UnivariateRealFunction f,\n                          GoalType goalType,\n                             double lo, double mid, double hi,\n                             double eps, double t)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n@@ -116,15 +107,14 @@ private double localMin(boolean isMinim,\n         double w = x;\n         double d = 0;\n         double e = 0;\n      double fx = computeObjectiveValue(f, x);\n      if (goalType == GoalType.MAXIMIZE) {\n             fx = -fx;\n         }\n         double fv = fx;\n         double fw = fx;\n \n      int count = 0;\n      while (count < maximalIterationCount) {\n             double m = 0.5 * (a + b);\n             final double tol1 = eps * Math.abs(x) + t;\n             final double tol2 = 2 * tol1;\n@@ -197,8 +187,8 @@ private double localMin(boolean isMinim,\n                     u = x + d;\n                 }\n \n              double fu = computeObjectiveValue(f, u);\n              if (goalType == GoalType.MAXIMIZE) {\n                     fu = -fu;\n                 }\n \n@@ -235,11 +225,10 @@ private double localMin(boolean isMinim,\n                     }\n                 }\n             } else { // termination\n              setResult(x, (goalType == GoalType.MAXIMIZE) ? -fx : fx, count);\n                 return x;\n             }\n          ++count;\n         }\n      throw new MaxIterationsExceededException(maximalIterationCount);\n     }\n }\n","solution":"@@ -41,10 +41,10 @@\n      * Construct a solver.\n      */\n     public BrentOptimizer() {\n      setMaxEvaluations(1000);\n         setMaximalIterationCount(100);\n      setAbsoluteAccuracy(1e-11);\n      setRelativeAccuracy(1e-9);\n     }\n \n     /**\n@@ -54,17 +54,10 @@ public BrentOptimizer() {\n      */\n     protected double doOptimize()\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n         return localMin(getGoalType() == GoalType.MINIMIZE,\n                      getMin(), getStartValue(), getMax(),\n                         getRelativeAccuracy(), getAbsoluteAccuracy());\n     }\n \n     /**\n      * Find the minimum of the function within the interval {@code (lo, hi)}.\n@@ -91,8 +84,6 @@ public double optimize(final UnivariateRealFunction f, final GoalType goalType,\n      * the function.\n      */\n     private double localMin(boolean isMinim,\n                             double lo, double mid, double hi,\n                             double eps, double t)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n@@ -116,15 +107,14 @@ private double localMin(boolean isMinim,\n         double w = x;\n         double d = 0;\n         double e = 0;\n      double fx = computeObjectiveValue(x);\n      if (!isMinim) {\n             fx = -fx;\n         }\n         double fv = fx;\n         double fw = fx;\n \n      while (true) {\n             double m = 0.5 * (a + b);\n             final double tol1 = eps * Math.abs(x) + t;\n             final double tol2 = 2 * tol1;\n@@ -197,8 +187,8 @@ private double localMin(boolean isMinim,\n                     u = x + d;\n                 }\n \n              double fu = computeObjectiveValue(u);\n              if (!isMinim) {\n                     fu = -fu;\n                 }\n \n@@ -235,11 +225,10 @@ private double localMin(boolean isMinim,\n                     }\n                 }\n             } else { // termination\n              setFunctionValue(isMinim ? fx : -fx);\n                 return x;\n             }\n          incrementIterationsCounter();\n         }\n     }\n }\n","CodeWithNoComments":"\n   \n     public BrentOptimizer() {\n        setMaxEvaluations(Integer.MAX_VALUE);\n         setMaximalIterationCount(100);\n        setAbsoluteAccuracy(1E-10);\n        setRelativeAccuracy(1.0e-14);\n     }\n \n\n     protected double doOptimize()\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n        throw new UnsupportedOperationException();\n    }\n    public double optimize(final UnivariateRealFunction f, final GoalType goalType, final double min, final double max, final double startValue) throws MaxIterationsExceededException, FunctionEvaluationException {\n        clearResult();\n         return localMin(getGoalType() == GoalType.MINIMIZE,\n                        f, goalType, min, startValue, max,\n                         getRelativeAccuracy(), getAbsoluteAccuracy());\n     }\n    public double optimize(final UnivariateRealFunction f, final GoalType goalType, final double min, final double max) throws MaxIterationsExceededException, FunctionEvaluationException {\n        return optimize(f, goalType, min, max, min + GOLDEN_SECTION * (max - min));\n    }\n \n     \n\n                            UnivariateRealFunction f,\n                            GoalType goalType,\n                             double lo, double mid, double hi,\n                             double eps, double t)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n\n         double w = x;\n         double d = 0;\n         double e = 0;\n        double fx = computeObjectiveValue(f, x);\n        if (goalType == GoalType.MAXIMIZE) {\n             fx = -fx;\n         }\n         double fv = fx;\n         double fw = fx;\n \n        int count = 0;\n        while (count < maximalIterationCount) {\n             double m = 0.5 * (a + b);\n             final double tol1 = eps * Math.abs(x) + t;\n             final double tol2 = 2 * tol1;\n\n                     u = x + d;\n                 }\n \n                double fu = computeObjectiveValue(f, u);\n                if (goalType == GoalType.MAXIMIZE) {\n                     fu = -fu;\n                 }\n \n\n                     }\n                 }\n             } else {                 setResult(x, (goalType == GoalType.MAXIMIZE) ? -fx : fx, count);\n                 return x;\n             }\n            ++count;\n         }\n        throw new MaxIterationsExceededException(maximalIterationCount);\n     }\n }\n","SolutionWithNoComments":"\n     public BrentOptimizer() {\n        setMaxEvaluations(1000);\n         setMaximalIterationCount(100);\n        setAbsoluteAccuracy(1e-11);\n        setRelativeAccuracy(1e-9);\n     }\n \n\n     protected double doOptimize()\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n         return localMin(getGoalType() == GoalType.MINIMIZE,\n                        getMin(), getStartValue(), getMax(),\n                         getRelativeAccuracy(), getAbsoluteAccuracy());\n     }\n \n\n                             double lo, double mid, double hi,\n                             double eps, double t)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n\n         double w = x;\n         double d = 0;\n         double e = 0;\n        double fx = computeObjectiveValue(x);\n        if (!isMinim) {\n             fx = -fx;\n         }\n         double fv = fx;\n         double fw = fx;\n \n        while (true) {\n             double m = 0.5 * (a + b);\n             final double tol1 = eps * Math.abs(x) + t;\n             final double tol2 = 2 * tol1;\n\n                     u = x + d;\n                 }\n \n                double fu = computeObjectiveValue(u);\n                if (!isMinim) {\n                     fu = -fu;\n                 }\n \n\n                     }\n                 }\n             } else {                 setFunctionValue(isMinim ? fx : -fx);\n                 return x;\n             }\n            incrementIterationsCounter();\n         }\n     }\n }\n"},{"ids":289,"error":"junit.framework.AssertionFailedError","source":"/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java","code":"@@ -239,30 +239,25 @@ protected void updateResidualsAndCost()\n     public double getRMS() {\n      double criterion = 0;\n      for (int i = 0; i < rows; ++i) {\n          final double residual = residuals[i];\n          criterion += residual * residual * residualsWeights[i];\n      }\n      return Math.sqrt(criterion / rows);\n     }\n \n     /**\n      * Get a Chi-Square-like value assuming the N residuals follow N\n      * distinct normal distributions centered on 0 and whose variances are\n      * the reciprocal of the weights.\n      * @return chi-square value\n      */\n     public double getChiSquare() {\n         double chiSquare = 0;\n         for (int i = 0; i < rows; ++i) {\n             final double residual = residuals[i];\n          chiSquare += residual * residual / residualsWeights[i];\n         }\n         return chiSquare;\n     }\n \n     /**\n      * Get the covariance matrix of optimized parameters.\n      * @return covariance matrix\n      * @exception FunctionEvaluationException if the function jacobian cannot\n      * be evaluated\n      * @exception OptimizationException if the covariance matrix\n","solution":"@@ -239,30 +239,25 @@ protected void updateResidualsAndCost()\n     public double getRMS() {\n      return Math.sqrt(getChiSquare() / rows);\n     }\n \n     /**\n      * Get a Chi-Square-like value assuming the N residuals follow N\n      * distinct normal distributions centered on 0 and whose variances are\n      * the reciprocal of the weights.\n      * @return chi-square value\n      */\n     public double getChiSquare() {\n         double chiSquare = 0;\n         for (int i = 0; i < rows; ++i) {\n             final double residual = residuals[i];\n          chiSquare += residual * residual * residualsWeights[i];\n         }\n         return chiSquare;\n     }\n \n     /**\n      * Get the covariance matrix of optimized parameters.\n      * @return covariance matrix\n      * @exception FunctionEvaluationException if the function jacobian cannot\n      * be evaluated\n      * @exception OptimizationException if the covariance matrix\n","CodeWithNoComments":"\n     public double getRMS() {\n        double criterion = 0;\n        for (int i = 0; i < rows; ++i) {\n            final double residual = residuals[i];\n            criterion += residual * residual * residualsWeights[i];\n        }\n        return Math.sqrt(criterion / rows);\n     }\n     public double getChiSquare() {\n         double chiSquare = 0;\n         for (int i = 0; i < rows; ++i) {\n             final double residual = residuals[i];\n            chiSquare += residual * residual / residualsWeights[i];\n         }\n         return chiSquare;\n     }\n","SolutionWithNoComments":"\n     public double getRMS() {\n        return Math.sqrt(getChiSquare() / rows);\n     }\n     public double getChiSquare() {\n         double chiSquare = 0;\n         for (int i = 0; i < rows; ++i) {\n             final double residual = residuals[i];\n            chiSquare += residual * residual * residualsWeights[i];\n         }\n         return chiSquare;\n     }\n"},{"ids":290,"error":"junit.framework.AssertionFailedError","source":"/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java","code":"@@ -255,6 +255,8 @@ protected VectorialPointValuePair doOptimize()\n         double[] diag    = new double[cols];\n         double[] oldX    = new double[cols];\n         double[] oldRes  = new double[rows];\n         double[] work1   = new double[cols];\n         double[] work2   = new double[cols];\n         double[] work3   = new double[cols];\n@@ -267,6 +269,9 @@ protected VectorialPointValuePair doOptimize()\n         boolean firstIteration = true;\n         VectorialPointValuePair current = new VectorialPointValuePair(point, objective);\n         while (true) {\n             incrementIterationsCounter();\n \n             // compute the Q.R. decomposition of the jacobian matrix\n@@ -275,7 +280,7 @@ protected VectorialPointValuePair doOptimize()\n             qrDecomposition();\n \n             // compute Qt.res\n          qTy(residuals);\n             // now we don't need Q anymore,\n             // so let jacobian contain the R matrix with its diagonal elements\n             for (int k = 0; k < solvedCols; ++k) {\n@@ -313,7 +318,7 @@ protected VectorialPointValuePair doOptimize()\n                     if (s != 0) {\n                         double sum = 0;\n                         for (int i = 0; i <= j; ++i) {\n                          sum += jacobian[i][pj] * residuals[i];\n                         }\n                         maxCosine = Math.max(maxCosine, Math.abs(sum) / (s * cost));\n                     }\n@@ -321,6 +326,8 @@ protected VectorialPointValuePair doOptimize()\n             }\n             if (maxCosine <= orthoTolerance) {\n                 // convergence has been reached\n                 return current;\n             }\n \n@@ -341,9 +348,12 @@ protected VectorialPointValuePair doOptimize()\n                 double[] tmpVec = residuals;\n                 residuals = oldRes;\n                 oldRes    = tmpVec;\n \n                 // determine the Levenberg-Marquardt parameter\n              determineLMParameter(oldRes, delta, diag, work1, work2, work3);\n \n                 // compute the new point and the norm of the evolution direction\n                 double lmNorm = 0;\n@@ -362,7 +372,6 @@ protected VectorialPointValuePair doOptimize()\n \n                 // evaluate the function at x + p and calculate its norm\n                 updateResidualsAndCost();\n              current = new VectorialPointValuePair(point, objective);\n \n                 // compute the scaled actual reduction\n                 double actRed = -1.0;\n@@ -418,9 +427,15 @@ protected VectorialPointValuePair doOptimize()\n                         xNorm    += xK * xK;\n                     }\n                     xNorm = Math.sqrt(xNorm);\n \n                     // tests for convergence.\n                     // we use the vectorial convergence checker\n                 } else {\n                     // failed iteration, reset the previous values\n                     cost = previousCost;\n@@ -431,6 +446,9 @@ protected VectorialPointValuePair doOptimize()\n                     tmpVec    = residuals;\n                     residuals = oldRes;\n                     oldRes    = tmpVec;\n                 }\n                 if (checker==null) {\n                 \tif (((Math.abs(actRed) <= costRelativeTolerance) &&\n@@ -439,10 +457,6 @@ protected VectorialPointValuePair doOptimize()\n                        (delta <= parRelativeTolerance * xNorm)) {\n                        return current;\n                    }\n              } else {\n                  if (checker.converged(getIterations(), previous, current)) {\n                      return current;\n                  }\n                 }\n                 // tests for termination and stringent tolerances\n                 // (2.2204e-16 is the machine epsilon for IEEE754)\n","solution":"@@ -255,6 +255,8 @@ protected VectorialPointValuePair doOptimize()\n         double[] diag    = new double[cols];\n         double[] oldX    = new double[cols];\n         double[] oldRes  = new double[rows];\n      double[] oldObj  = new double[rows];\n      double[] qtf     = new double[rows];\n         double[] work1   = new double[cols];\n         double[] work2   = new double[cols];\n         double[] work3   = new double[cols];\n@@ -267,6 +269,9 @@ protected VectorialPointValuePair doOptimize()\n         boolean firstIteration = true;\n         VectorialPointValuePair current = new VectorialPointValuePair(point, objective);\n         while (true) {\n          for (int i=0;i<rows;i++) {\n              qtf[i]=residuals[i];\n          }\n             incrementIterationsCounter();\n \n             // compute the Q.R. decomposition of the jacobian matrix\n@@ -275,7 +280,7 @@ protected VectorialPointValuePair doOptimize()\n             qrDecomposition();\n \n             // compute Qt.res\n          qTy(qtf);\n             // now we don't need Q anymore,\n             // so let jacobian contain the R matrix with its diagonal elements\n             for (int k = 0; k < solvedCols; ++k) {\n@@ -313,7 +318,7 @@ protected VectorialPointValuePair doOptimize()\n                     if (s != 0) {\n                         double sum = 0;\n                         for (int i = 0; i <= j; ++i) {\n                          sum += jacobian[i][pj] * qtf[i];\n                         }\n                         maxCosine = Math.max(maxCosine, Math.abs(sum) / (s * cost));\n                     }\n@@ -321,6 +326,8 @@ protected VectorialPointValuePair doOptimize()\n             }\n             if (maxCosine <= orthoTolerance) {\n                 // convergence has been reached\n          \tupdateResidualsAndCost();\n          \tcurrent = new VectorialPointValuePair(point, objective);\n                 return current;\n             }\n \n@@ -341,9 +348,12 @@ protected VectorialPointValuePair doOptimize()\n                 double[] tmpVec = residuals;\n                 residuals = oldRes;\n                 oldRes    = tmpVec;\n              tmpVec    = objective;\n              objective = oldObj;\n              oldObj    = tmpVec;\n \n                 // determine the Levenberg-Marquardt parameter\n              determineLMParameter(qtf, delta, diag, work1, work2, work3);\n \n                 // compute the new point and the norm of the evolution direction\n                 double lmNorm = 0;\n@@ -362,7 +372,6 @@ protected VectorialPointValuePair doOptimize()\n \n                 // evaluate the function at x + p and calculate its norm\n                 updateResidualsAndCost();\n \n                 // compute the scaled actual reduction\n                 double actRed = -1.0;\n@@ -418,9 +427,15 @@ protected VectorialPointValuePair doOptimize()\n                         xNorm    += xK * xK;\n                     }\n                     xNorm = Math.sqrt(xNorm);\n                  current = new VectorialPointValuePair(point, objective);\n \n                     // tests for convergence.\n                  if (checker != null) {\n                     // we use the vectorial convergence checker\n                  \tif (checker.converged(getIterations(), previous, current)) {\n                  \t\treturn current;\n                  \t}\n                  }\n                 } else {\n                     // failed iteration, reset the previous values\n                     cost = previousCost;\n@@ -431,6 +446,9 @@ protected VectorialPointValuePair doOptimize()\n                     tmpVec    = residuals;\n                     residuals = oldRes;\n                     oldRes    = tmpVec;\n                  tmpVec    = objective;\n                  objective = oldObj;\n                  oldObj    = tmpVec;\n                 }\n                 if (checker==null) {\n                 \tif (((Math.abs(actRed) <= costRelativeTolerance) &&\n@@ -439,10 +457,6 @@ protected VectorialPointValuePair doOptimize()\n                        (delta <= parRelativeTolerance * xNorm)) {\n                        return current;\n                    }\n                 }\n                 // tests for termination and stringent tolerances\n                 // (2.2204e-16 is the machine epsilon for IEEE754)\n","CodeWithNoComments":"\n         double[] diag    = new double[cols];\n         double[] oldX    = new double[cols];\n         double[] oldRes  = new double[rows];\n         double[] work1   = new double[cols];\n         double[] work2   = new double[cols];\n         double[] work3   = new double[cols];\n\n         boolean firstIteration = true;\n         VectorialPointValuePair current = new VectorialPointValuePair(point, objective);\n         while (true) {\n             incrementIterationsCounter();\n \n             \n             qrDecomposition();\n \n                         qTy(residuals);\n                                       for (int k = 0; k < solvedCols; ++k) {\n\n                     if (s != 0) {\n                         double sum = 0;\n                         for (int i = 0; i <= j; ++i) {\n                            sum += jacobian[i][pj] * residuals[i];\n                         }\n                         maxCosine = Math.max(maxCosine, Math.abs(sum) / (s * cost));\n                     }\n\n             }\n             if (maxCosine <= orthoTolerance) {\n                                  return current;\n             }\n \n\n                 double[] tmpVec = residuals;\n                 residuals = oldRes;\n                 oldRes    = tmpVec;\n \n                                 determineLMParameter(oldRes, delta, diag, work1, work2, work3);\n \n                                  double lmNorm = 0;\n\n \n                                  updateResidualsAndCost();\n                current = new VectorialPointValuePair(point, objective);\n \n                                  double actRed = -1.0;\n\n                         xNorm    += xK * xK;\n                     }\n                     xNorm = Math.sqrt(xNorm);\n \n                                                           } else {\n                                          cost = previousCost;\n\n                     tmpVec    = residuals;\n                     residuals = oldRes;\n                     oldRes    = tmpVec;\n                 }\n                 if (checker==null) {\n                 \tif (((Math.abs(actRed) <= costRelativeTolerance) &&\n\n                        (delta <= parRelativeTolerance * xNorm)) {\n                        return current;\n                    }\n                } else {\n                    if (checker.converged(getIterations(), previous, current)) {\n                        return current;\n                    }\n                 }\n                                  ","SolutionWithNoComments":"\n         double[] diag    = new double[cols];\n         double[] oldX    = new double[cols];\n         double[] oldRes  = new double[rows];\n        double[] oldObj  = new double[rows];\n        double[] qtf     = new double[rows];\n         double[] work1   = new double[cols];\n         double[] work2   = new double[cols];\n         double[] work3   = new double[cols];\n\n         boolean firstIteration = true;\n         VectorialPointValuePair current = new VectorialPointValuePair(point, objective);\n         while (true) {\n            for (int i=0;i<rows;i++) {\n                qtf[i]=residuals[i];\n            }\n             incrementIterationsCounter();\n \n             \n             qrDecomposition();\n \n                         qTy(qtf);\n                                       for (int k = 0; k < solvedCols; ++k) {\n\n                     if (s != 0) {\n                         double sum = 0;\n                         for (int i = 0; i <= j; ++i) {\n                            sum += jacobian[i][pj] * qtf[i];\n                         }\n                         maxCosine = Math.max(maxCosine, Math.abs(sum) / (s * cost));\n                     }\n\n             }\n             if (maxCosine <= orthoTolerance) {\n                             \tupdateResidualsAndCost();\n            \tcurrent = new VectorialPointValuePair(point, objective);\n                 return current;\n             }\n \n\n                 double[] tmpVec = residuals;\n                 residuals = oldRes;\n                 oldRes    = tmpVec;\n                tmpVec    = objective;\n                objective = oldObj;\n                oldObj    = tmpVec;\n \n                                 determineLMParameter(qtf, delta, diag, work1, work2, work3);\n \n                                  double lmNorm = 0;\n\n \n                                  updateResidualsAndCost();\n \n                                  double actRed = -1.0;\n\n                         xNorm    += xK * xK;\n                     }\n                     xNorm = Math.sqrt(xNorm);\n                    current = new VectorialPointValuePair(point, objective);\n \n                                         if (checker != null) {\n                                         \tif (checker.converged(getIterations(), previous, current)) {\n                    \t\treturn current;\n                    \t}\n                    }\n                 } else {\n                                          cost = previousCost;\n\n                     tmpVec    = residuals;\n                     residuals = oldRes;\n                     oldRes    = tmpVec;\n                    tmpVec    = objective;\n                    objective = oldObj;\n                    oldObj    = tmpVec;\n                 }\n                 if (checker==null) {\n                 \tif (((Math.abs(actRed) <= costRelativeTolerance) &&\n\n                        (delta <= parRelativeTolerance * xNorm)) {\n                        return current;\n                    }\n                 }\n                                  "},{"ids":291,"error":"java.lang.NullPointerException","source":"/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java","code":"@@ -69,7 +69,7 @@ public double solve(double min, double max)\n     /** {@inheritDoc} */\n     public double solve(final UnivariateRealFunction f, double min, double max, double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n      return solve(min, max);\n     }\n \n     /** {@inheritDoc} */\n","solution":"@@ -69,7 +69,7 @@ public double solve(double min, double max)\n     /** {@inheritDoc} */\n     public double solve(final UnivariateRealFunction f, double min, double max, double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n      return solve(f, min, max);\n     }\n \n     /** {@inheritDoc} */\n","CodeWithNoComments":"\n     public double solve(final UnivariateRealFunction f, double min, double max, double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n        return solve(min, max);\n     }\n \n","SolutionWithNoComments":"\n     public double solve(final UnivariateRealFunction f, double min, double max, double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n        return solve(f, min, max);\n     }\n \n"},{"ids":292,"error":"junit.framework.AssertionFailedError","source":"/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java","code":"@@ -163,6 +163,7 @@ public LevenbergMarquardtOptimizer() {\n         setMaxIterations(1000);\n \n         // default values for the tuning parameters\n         setInitialStepBoundFactor(100.0);\n         setCostRelativeTolerance(1.0e-10);\n         setParRelativeTolerance(1.0e-10);\n@@ -244,11 +245,13 @@ protected VectorialPointValuePair doOptimize()\n         // outer loop\n         lmPar = 0;\n         boolean firstIteration = true;\n         while (true) {\n \n             incrementIterationsCounter();\n \n             // compute the Q.R. decomposition of the jacobian matrix\n             updateJacobian();\n             qrDecomposition();\n \n@@ -300,7 +303,7 @@ protected VectorialPointValuePair doOptimize()\n             }\n             if (maxCosine <= orthoTolerance) {\n                 // convergence has been reached\n              return new VectorialPointValuePair(point, objective);\n             }\n \n             // rescale if necessary\n@@ -342,6 +345,7 @@ protected VectorialPointValuePair doOptimize()\n \n                 // evaluate the function at x + p and calculate its norm\n                 updateResidualsAndCost();\n \n                 // compute the scaled actual reduction\n                 double actRed = -1.0;\n@@ -410,14 +414,20 @@ protected VectorialPointValuePair doOptimize()\n                 }\n \n                 // tests for convergence.\n                     // we use the vectorial convergence checker\n                     // we use the Levenberg-Marquardt specific convergence parameters\n                     if (((Math.abs(actRed) <= costRelativeTolerance) &&\n                          (preRed <= costRelativeTolerance) &&\n                          (ratio <= 2.0)) ||\n                         (delta <= parRelativeTolerance * xNorm)) {\n                      return new VectorialPointValuePair(point, objective);\n                     }\n \n                 // tests for termination and stringent tolerances\n                 // (2.2204e-16 is the machine epsilon for IEEE754)\n","solution":"@@ -163,6 +163,7 @@ public LevenbergMarquardtOptimizer() {\n         setMaxIterations(1000);\n \n         // default values for the tuning parameters\n      setConvergenceChecker(null);\n         setInitialStepBoundFactor(100.0);\n         setCostRelativeTolerance(1.0e-10);\n         setParRelativeTolerance(1.0e-10);\n@@ -244,11 +245,13 @@ protected VectorialPointValuePair doOptimize()\n         // outer loop\n         lmPar = 0;\n         boolean firstIteration = true;\n      VectorialPointValuePair current = new VectorialPointValuePair(point, objective);\n         while (true) {\n \n             incrementIterationsCounter();\n \n             // compute the Q.R. decomposition of the jacobian matrix\n          VectorialPointValuePair previous = current;\n             updateJacobian();\n             qrDecomposition();\n \n@@ -300,7 +303,7 @@ protected VectorialPointValuePair doOptimize()\n             }\n             if (maxCosine <= orthoTolerance) {\n                 // convergence has been reached\n              return current;\n             }\n \n             // rescale if necessary\n@@ -342,6 +345,7 @@ protected VectorialPointValuePair doOptimize()\n \n                 // evaluate the function at x + p and calculate its norm\n                 updateResidualsAndCost();\n              current = new VectorialPointValuePair(point, objective);\n \n                 // compute the scaled actual reduction\n                 double actRed = -1.0;\n@@ -410,14 +414,20 @@ protected VectorialPointValuePair doOptimize()\n                 }\n \n                 // tests for convergence.\n              if (checker != null) {\n                     // we use the vectorial convergence checker\n                  if (checker.converged(getIterations(), previous, current)) {\n                      return current;                        \n                  }\n              } else {\n                     // we use the Levenberg-Marquardt specific convergence parameters\n                     if (((Math.abs(actRed) <= costRelativeTolerance) &&\n                          (preRed <= costRelativeTolerance) &&\n                          (ratio <= 2.0)) ||\n                         (delta <= parRelativeTolerance * xNorm)) {\n                      return current;\n                     }\n              }\n \n                 // tests for termination and stringent tolerances\n                 // (2.2204e-16 is the machine epsilon for IEEE754)\n","CodeWithNoComments":"\n         setMaxIterations(1000);\n \n                  setInitialStepBoundFactor(100.0);\n         setCostRelativeTolerance(1.0e-10);\n         setParRelativeTolerance(1.0e-10);\n\n                  lmPar = 0;\n         boolean firstIteration = true;\n         while (true) {\n \n             incrementIterationsCounter();\n \n                          updateJacobian();\n             qrDecomposition();\n \n\n             }\n             if (maxCosine <= orthoTolerance) {\n                                 return new VectorialPointValuePair(point, objective);\n             }\n \n             \n \n                                  updateResidualsAndCost();\n \n                                  double actRed = -1.0;\n\n                 }\n \n                                                                                if (((Math.abs(actRed) <= costRelativeTolerance) &&\n                          (preRed <= costRelativeTolerance) &&\n                          (ratio <= 2.0)) ||\n                         (delta <= parRelativeTolerance * xNorm)) {\n                        return new VectorialPointValuePair(point, objective);\n                     }\n \n                                  ","SolutionWithNoComments":"\n         setMaxIterations(1000);\n \n                 setConvergenceChecker(null);\n         setInitialStepBoundFactor(100.0);\n         setCostRelativeTolerance(1.0e-10);\n         setParRelativeTolerance(1.0e-10);\n\n                  lmPar = 0;\n         boolean firstIteration = true;\n        VectorialPointValuePair current = new VectorialPointValuePair(point, objective);\n         while (true) {\n \n             incrementIterationsCounter();\n \n                         VectorialPointValuePair previous = current;\n             updateJacobian();\n             qrDecomposition();\n \n\n             }\n             if (maxCosine <= orthoTolerance) {\n                                 return current;\n             }\n \n             \n \n                                  updateResidualsAndCost();\n                current = new VectorialPointValuePair(point, objective);\n \n                                  double actRed = -1.0;\n\n                 }\n \n                                 if (checker != null) {\n                                         if (checker.converged(getIterations(), previous, current)) {\n                        return current;                        \n                    }\n                } else {\n                                          if (((Math.abs(actRed) <= costRelativeTolerance) &&\n                          (preRed <= costRelativeTolerance) &&\n                          (ratio <= 2.0)) ||\n                         (delta <= parRelativeTolerance * xNorm)) {\n                        return current;\n                     }\n                }\n \n                                  "},{"ids":293,"error":"junit.framework.AssertionFailedError","source":"/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java","code":"@@ -168,7 +168,7 @@ public RealMatrix getCorrelationPValues() throws MathException {\n                 } else {\n                     double r = correlationMatrix.getEntry(i, j);\n                     double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r)));\n                  out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t));\n                 }\n             }\n         }\n","solution":"@@ -168,7 +168,7 @@ public RealMatrix getCorrelationPValues() throws MathException {\n                 } else {\n                     double r = correlationMatrix.getEntry(i, j);\n                     double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r)));\n                  out[i][j] = 2 * tDistribution.cumulativeProbability(-t);\n                 }\n             }\n         }\n","CodeWithNoComments":"\n                 } else {\n                     double r = correlationMatrix.getEntry(i, j);\n                     double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r)));\n                    out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t));\n                 }\n             }\n         }\n","SolutionWithNoComments":"\n                 } else {\n                     double r = correlationMatrix.getEntry(i, j);\n                     double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r)));\n                    out[i][j] = 2 * tDistribution.cumulativeProbability(-t);\n                 }\n             }\n         }\n"},{"ids":294,"error":"junit.framework.AssertionFailedError","source":"/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java","code":"@@ -297,6 +297,10 @@ public double integrate(final FirstOrderDifferentialEquations equations,\n                   // it is so small (much probably exactly 0 due to limited accuracy)\n                   // that the code above would fail handling it.\n                   // So we set up an artificial 0 size step by copying states\n                   loop     = false;\n               } else {\n                   // reject the step to match exactly the next switch time\n/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java @@ -177,6 +177,9 @@ public double integrate(final FirstOrderDifferentialEquations equations,\n                 // it is so small (much probably exactly 0 due to limited accuracy)\n                 // that the code above would fail handling it.\n                 // So we set up an artificial 0 size step by copying states\n                 loop     = false;\n             } else {\n                 // reject the step to match exactly the next switch time\n","solution":"@@ -297,6 +297,10 @@ public double integrate(final FirstOrderDifferentialEquations equations,\n                   // it is so small (much probably exactly 0 due to limited accuracy)\n                   // that the code above would fail handling it.\n                   // So we set up an artificial 0 size step by copying states\n                interpolator.storeTime(stepStart);\n                System.arraycopy(y, 0, yTmp, 0, y0.length);\n                hNew     = 0;\n                stepSize = 0;\n                   loop     = false;\n               } else {\n                   // reject the step to match exactly the next switch time\n/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java @@ -177,6 +177,9 @@ public double integrate(final FirstOrderDifferentialEquations equations,\n                 // it is so small (much probably exactly 0 due to limited accuracy)\n                 // that the code above would fail handling it.\n                 // So we set up an artificial 0 size step by copying states\n              interpolator.storeTime(stepStart);\n              System.arraycopy(y, 0, yTmp, 0, y0.length);\n              stepSize = 0;\n                 loop     = false;\n             } else {\n                 // reject the step to match exactly the next switch time\n","CodeWithNoComments":"\n                                                                            loop     = false;\n               } else {\n\n                                                                    loop     = false;\n             } else {\n                 ","SolutionWithNoComments":"\n                                                                           interpolator.storeTime(stepStart);\n                  System.arraycopy(y, 0, yTmp, 0, y0.length);\n                  hNew     = 0;\n                  stepSize = 0;\n                   loop     = false;\n               } else {\n\n                                                                   interpolator.storeTime(stepStart);\n                System.arraycopy(y, 0, yTmp, 0, y0.length);\n                stepSize = 0;\n                 loop     = false;\n             } else {\n                 "},{"ids":295,"error":"junit.framework.AssertionFailedError","source":"/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java","code":"@@ -112,7 +112,7 @@ public double solve(final UnivariateRealFunction f,\n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n         if (Math.abs(yMin) <= functionValueAccuracy) {\n          setResult(yMin, 0);\n             return result;\n         }\n \n@@ -124,7 +124,7 @@ public double solve(final UnivariateRealFunction f,\n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n         if (Math.abs(yMax) <= functionValueAccuracy) {\n          setResult(yMax, 0);\n             return result;\n         }\n \n","solution":"@@ -112,7 +112,7 @@ public double solve(final UnivariateRealFunction f,\n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n         if (Math.abs(yMin) <= functionValueAccuracy) {\n          setResult(min, 0);\n             return result;\n         }\n \n@@ -124,7 +124,7 @@ public double solve(final UnivariateRealFunction f,\n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n         if (Math.abs(yMax) <= functionValueAccuracy) {\n          setResult(max, 0);\n             return result;\n         }\n \n","CodeWithNoComments":"\n                  double yMin = f.value(min);\n         if (Math.abs(yMin) <= functionValueAccuracy) {\n            setResult(yMin, 0);\n             return result;\n         }\n \n\n                  double yMax = f.value(max);\n         if (Math.abs(yMax) <= functionValueAccuracy) {\n            setResult(yMax, 0);\n             return result;\n         }\n \n","SolutionWithNoComments":"\n                  double yMin = f.value(min);\n         if (Math.abs(yMin) <= functionValueAccuracy) {\n            setResult(min, 0);\n             return result;\n         }\n \n\n                  double yMax = f.value(max);\n         if (Math.abs(yMax) <= functionValueAccuracy) {\n            setResult(max, 0);\n             return result;\n         }\n \n"},{"ids":296,"error":"junit.framework.AssertionFailedError","source":"/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java","code":"@@ -89,12 +89,12 @@ public MultiStartUnivariateRealOptimizer(final UnivariateRealOptimizer optimizer\n \n     /** {@inheritDoc} */\n     public double getFunctionValue() {\n      return optimizer.getFunctionValue();\n     }\n \n     /** {@inheritDoc} */\n     public double getResult() {\n      return optimizer.getResult();\n     }\n \n     /** {@inheritDoc} */\n","solution":"@@ -89,12 +89,12 @@ public MultiStartUnivariateRealOptimizer(final UnivariateRealOptimizer optimizer\n \n     /** {@inheritDoc} */\n     public double getFunctionValue() {\n      return optimaValues[0];\n     }\n \n     /** {@inheritDoc} */\n     public double getResult() {\n      return optima[0];\n     }\n \n     /** {@inheritDoc} */\n","CodeWithNoComments":"\n \n     \n     public double getFunctionValue() {\n        return optimizer.getFunctionValue();\n     }\n \n     \n     public double getResult() {\n        return optimizer.getResult();\n     }\n \n     \n","SolutionWithNoComments":"\n \n     \n     public double getFunctionValue() {\n        return optimaValues[0];\n     }\n \n     \n     public double getResult() {\n        return optima[0];\n     }\n \n     \n"},{"ids":297,"error":"junit.framework.AssertionFailedError","source":"/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java","code":"@@ -133,6 +133,10 @@ public double solve(final UnivariateRealFunction f,\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n \n         // full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n","solution":"@@ -133,6 +133,10 @@ public double solve(final UnivariateRealFunction f,\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n      if (yMin * yMax > 0) {\n          throw MathRuntimeException.createIllegalArgumentException(\n                NON_BRACKETING_MESSAGE, min, max, yMin, yMax);\n      }\n \n         // full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n","CodeWithNoComments":"\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n \n                  return solve(f, min, yMin, max, yMax, initial, yInitial);\n","SolutionWithNoComments":"\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n        if (yMin * yMax > 0) {\n            throw MathRuntimeException.createIllegalArgumentException(\n                  NON_BRACKETING_MESSAGE, min, max, yMin, yMax);\n        }\n \n                  return solve(f, min, yMin, max, yMax, initial, yInitial);\n"},{"ids":298,"error":"junit.framework.AssertionFailedError","source":"/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java","code":"@@ -242,12 +242,15 @@ public double integrate(final FirstOrderDifferentialEquations equations,\n         }\n \n         if (firstTime) {\n        final double[] scale;\n           if (vecAbsoluteTolerance == null) {\n            scale = new double[y0.length];\n            java.util.Arrays.fill(scale, scalAbsoluteTolerance);\n             } else {\n            scale = vecAbsoluteTolerance;\n             }\n           hNew = initializeStep(equations, forward, getOrder(), scale,\n                                 stepStart, y, yDotK[0], yTmp, yDotK[1]);\n","solution":"@@ -242,12 +242,15 @@ public double integrate(final FirstOrderDifferentialEquations equations,\n         }\n \n         if (firstTime) {\n        final double[] scale = new double[y0.length];\n           if (vecAbsoluteTolerance == null) {\n            for (int i = 0; i < scale.length; ++i) {\n              scale[i] = scalAbsoluteTolerance + scalRelativeTolerance * Math.abs(y[i]);\n            }\n             } else {\n            for (int i = 0; i < scale.length; ++i) {\n              scale[i] = vecAbsoluteTolerance[i] + vecRelativeTolerance[i] * Math.abs(y[i]);\n            }\n             }\n           hNew = initializeStep(equations, forward, getOrder(), scale,\n                                 stepStart, y, yDotK[0], yTmp, yDotK[1]);\n","CodeWithNoComments":"\n         }\n \n         if (firstTime) {\n          final double[] scale;\n           if (vecAbsoluteTolerance == null) {\n              scale = new double[y0.length];\n              java.util.Arrays.fill(scale, scalAbsoluteTolerance);\n             } else {\n              scale = vecAbsoluteTolerance;\n             }\n           hNew = initializeStep(equations, forward, getOrder(), scale,\n                                 stepStart, y, yDotK[0], yTmp, yDotK[1]);\n","SolutionWithNoComments":"\n         }\n \n         if (firstTime) {\n          final double[] scale = new double[y0.length];\n           if (vecAbsoluteTolerance == null) {\n              for (int i = 0; i < scale.length; ++i) {\n                scale[i] = scalAbsoluteTolerance + scalRelativeTolerance * Math.abs(y[i]);\n              }\n             } else {\n              for (int i = 0; i < scale.length; ++i) {\n                scale[i] = vecAbsoluteTolerance[i] + vecRelativeTolerance[i] * Math.abs(y[i]);\n              }\n             }\n           hNew = initializeStep(equations, forward, getOrder(), scale,\n                                 stepStart, y, yDotK[0], yTmp, yDotK[1]);\n"},{"ids":299,"error":"junit.framework.AssertionFailedError","source":"/src/main/java/org/apache/commons/math/stat/Frequency.java","code":"@@ -300,7 +300,7 @@ public long getCount(char v) {\n      */\n     @Deprecated\n     public double getPct(Object v) {\n      return getCumPct((Comparable<?>) v);\n     }\n \n     /**\n","solution":"@@ -300,7 +300,7 @@ public long getCount(char v) {\n      */\n     @Deprecated\n     public double getPct(Object v) {\n      return getPct((Comparable<?>) v);\n     }\n \n     /**\n","CodeWithNoComments":"\n      \n     @Deprecated\n     public double getPct(Object v) {\n        return getCumPct((Comparable<?>) v);\n     }\n \n","SolutionWithNoComments":"\n      \n     @Deprecated\n     public double getPct(Object v) {\n        return getPct((Comparable<?>) v);\n     }\n \n"},{"ids":300,"error":"junit.framework.AssertionFailedError","source":"/src/main/java/org/apache/commons/math/linear/ArrayRealVector.java","code":"@@ -718,7 +718,7 @@ public double getL1Norm() {\n     public double getLInfNorm() {\n         double max = 0;\n         for (double a : data) {\n          max += Math.max(max, Math.abs(a));\n         }\n         return max;\n     }\n/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java @@ -495,15 +495,6 @@ public double getL1Distance(double[] v) throws IllegalArgumentException {\n         return max;\n     }\n \n  public double getLInfNorm() {\n      double max = 0;\n      Iterator iter = entries.iterator();\n      while (iter.hasNext()) {\n          iter.advance();\n          max += iter.value();\n      }\n      return max;\n  }\n     /**\n      * Optimized method to compute LInfDistance.\n      * @param v The vector to compute from\n","solution":"@@ -718,7 +718,7 @@ public double getL1Norm() {\n     public double getLInfNorm() {\n         double max = 0;\n         for (double a : data) {\n          max = Math.max(max, Math.abs(a));\n         }\n         return max;\n     }\n/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java @@ -495,15 +495,6 @@ public double getL1Distance(double[] v) throws IllegalArgumentException {\n         return max;\n     }\n \n     /**\n      * Optimized method to compute LInfDistance.\n      * @param v The vector to compute from\n","CodeWithNoComments":"\n     public double getLInfNorm() {\n         double max = 0;\n         for (double a : data) {\n            max += Math.max(max, Math.abs(a));\n         }\n         return max;\n     }\n\n         return max;\n     }\n \n    public double getLInfNorm() {\n        double max = 0;\n        Iterator iter = entries.iterator();\n        while (iter.hasNext()) {\n            iter.advance();\n            max += iter.value();\n        }\n        return max;\n    }\n","SolutionWithNoComments":"\n     public double getLInfNorm() {\n         double max = 0;\n         for (double a : data) {\n            max = Math.max(max, Math.abs(a));\n         }\n         return max;\n     }\n\n         return max;\n     }\n"},{"ids":301,"error":"junit.framework.AssertionFailedError","source":"/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java","code":"@@ -79,7 +79,7 @@ private Integer getPivotRow(final int col, final SimplexTableau tableau) {\n         for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n             final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n             final double entry = tableau.getEntry(i, col);\n          if (MathUtils.compareTo(entry, 0, epsilon) >= 0) {\n                 final double ratio = rhs / entry;\n                 if (ratio < minRatio) {\n                     minRatio = ratio;\n","solution":"@@ -79,7 +79,7 @@ private Integer getPivotRow(final int col, final SimplexTableau tableau) {\n         for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n             final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n             final double entry = tableau.getEntry(i, col);\n          if (MathUtils.compareTo(entry, 0, epsilon) > 0) {\n                 final double ratio = rhs / entry;\n                 if (ratio < minRatio) {\n                     minRatio = ratio;\n","CodeWithNoComments":"\n         for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n             final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n             final double entry = tableau.getEntry(i, col);\n            if (MathUtils.compareTo(entry, 0, epsilon) >= 0) {\n                 final double ratio = rhs / entry;\n                 if (ratio < minRatio) {\n                     minRatio = ratio;\n","SolutionWithNoComments":"\n         for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n             final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n             final double entry = tableau.getEntry(i, col);\n            if (MathUtils.compareTo(entry, 0, epsilon) > 0) {\n                 final double ratio = rhs / entry;\n                 if (ratio < minRatio) {\n                     minRatio = ratio;\n"},{"ids":302,"error":"junit.framework.AssertionFailedError","source":"/src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java","code":"@@ -159,24 +159,27 @@ public RealMatrix getU()\n             if (m >= n) {\n                 // the tridiagonal matrix is Bt.B, where B is upper bidiagonal\n                 final RealMatrix e =\n                  eigenDecomposition.getV().getSubMatrix(0, p - 1, 0, p - 1);\n                 final double[][] eData = e.getData();\n                 final double[][] wData = new double[m][p];\n                 double[] ei1 = eData[0];\n              for (int i = 0; i < p - 1; ++i) {\n                     // compute W = B.E.S^(-1) where E is the eigenvectors matrix\n                     final double mi = mainBidiagonal[i];\n                     final double[] ei0 = ei1;\n                     final double[] wi  = wData[i];\n                         ei1 = eData[i + 1];\n                         final double si = secondaryBidiagonal[i];\n                         for (int j = 0; j < p; ++j) {\n                             wi[j] = (mi * ei0[j] + si * ei1[j]) / singularValues[j];\n                         }\n              }\n                         for (int j = 0; j < p; ++j) {\n                          wData[p - 1][j] = ei1[j] * mainBidiagonal[p - 1] / singularValues[j];\n                         }\n \n                 for (int i = p; i < m; ++i) {\n                     wData[i] = new double[p];\n@@ -245,23 +248,26 @@ public RealMatrix getV()\n                 // the tridiagonal matrix is B.Bt, where B is lower bidiagonal\n                 // compute W = Bt.E.S^(-1) where E is the eigenvectors matrix\n                 final RealMatrix e =\n                  eigenDecomposition.getV().getSubMatrix(0, p - 1, 0, p - 1);\n                 final double[][] eData = e.getData();\n                 final double[][] wData = new double[n][p];\n                 double[] ei1 = eData[0];\n              for (int i = 0; i < p - 1; ++i) {\n                     final double mi = mainBidiagonal[i];\n                     final double[] ei0 = ei1;\n                     final double[] wi  = wData[i];\n                         ei1 = eData[i + 1];\n                         final double si = secondaryBidiagonal[i];\n                         for (int j = 0; j < p; ++j) {\n                             wi[j] = (mi * ei0[j] + si * ei1[j]) / singularValues[j];\n                         }\n              }\n                         for (int j = 0; j < p; ++j) {\n                          wData[p - 1][j] = ei1[j] * mainBidiagonal[p - 1] / singularValues[j];\n                         }\n                 for (int i = p; i < n; ++i) {\n                     wData[i] = new double[p];\n                 }\n","solution":"@@ -159,24 +159,27 @@ public RealMatrix getU()\n             if (m >= n) {\n                 // the tridiagonal matrix is Bt.B, where B is upper bidiagonal\n                 final RealMatrix e =\n                  eigenDecomposition.getV().getSubMatrix(0, n - 1, 0, p - 1);\n                 final double[][] eData = e.getData();\n                 final double[][] wData = new double[m][p];\n                 double[] ei1 = eData[0];\n              for (int i = 0; i < p; ++i) {\n                     // compute W = B.E.S^(-1) where E is the eigenvectors matrix\n                     final double mi = mainBidiagonal[i];\n                     final double[] ei0 = ei1;\n                     final double[] wi  = wData[i];\n                  if (i < n - 1) {\n                         ei1 = eData[i + 1];\n                         final double si = secondaryBidiagonal[i];\n                         for (int j = 0; j < p; ++j) {\n                             wi[j] = (mi * ei0[j] + si * ei1[j]) / singularValues[j];\n                         }\n                  } else {\n                         for (int j = 0; j < p; ++j) {\n                          wi[j] = mi * ei0[j] / singularValues[j];\n                         }\n                  }\n              }\n \n                 for (int i = p; i < m; ++i) {\n                     wData[i] = new double[p];\n@@ -245,23 +248,26 @@ public RealMatrix getV()\n                 // the tridiagonal matrix is B.Bt, where B is lower bidiagonal\n                 // compute W = Bt.E.S^(-1) where E is the eigenvectors matrix\n                 final RealMatrix e =\n                  eigenDecomposition.getV().getSubMatrix(0, m - 1, 0, p - 1);\n                 final double[][] eData = e.getData();\n                 final double[][] wData = new double[n][p];\n                 double[] ei1 = eData[0];\n              for (int i = 0; i < p; ++i) {\n                     final double mi = mainBidiagonal[i];\n                     final double[] ei0 = ei1;\n                     final double[] wi  = wData[i];\n                  if (i < m - 1) {\n                         ei1 = eData[i + 1];\n                         final double si = secondaryBidiagonal[i];\n                         for (int j = 0; j < p; ++j) {\n                             wi[j] = (mi * ei0[j] + si * ei1[j]) / singularValues[j];\n                         }\n                  } else {\n                         for (int j = 0; j < p; ++j) {\n                          wi[j] = mi * ei0[j] / singularValues[j];\n                         }\n                  }\n              }\n                 for (int i = p; i < n; ++i) {\n                     wData[i] = new double[p];\n                 }\n","CodeWithNoComments":"\n             if (m >= n) {\n                                  final RealMatrix e =\n                    eigenDecomposition.getV().getSubMatrix(0, p - 1, 0, p - 1);\n                 final double[][] eData = e.getData();\n                 final double[][] wData = new double[m][p];\n                 double[] ei1 = eData[0];\n                for (int i = 0; i < p - 1; ++i) {\n                                          final double mi = mainBidiagonal[i];\n                     final double[] ei0 = ei1;\n                     final double[] wi  = wData[i];\n                         ei1 = eData[i + 1];\n                         final double si = secondaryBidiagonal[i];\n                         for (int j = 0; j < p; ++j) {\n                             wi[j] = (mi * ei0[j] + si * ei1[j]) / singularValues[j];\n                         }\n                }\n                         for (int j = 0; j < p; ++j) {\n                            wData[p - 1][j] = ei1[j] * mainBidiagonal[p - 1] / singularValues[j];\n                         }\n \n                 for (int i = p; i < m; ++i) {\n                     wData[i] = new double[p];\n\n                                                   final RealMatrix e =\n                    eigenDecomposition.getV().getSubMatrix(0, p - 1, 0, p - 1);\n                 final double[][] eData = e.getData();\n                 final double[][] wData = new double[n][p];\n                 double[] ei1 = eData[0];\n                for (int i = 0; i < p - 1; ++i) {\n                     final double mi = mainBidiagonal[i];\n                     final double[] ei0 = ei1;\n                     final double[] wi  = wData[i];\n                         ei1 = eData[i + 1];\n                         final double si = secondaryBidiagonal[i];\n                         for (int j = 0; j < p; ++j) {\n                             wi[j] = (mi * ei0[j] + si * ei1[j]) / singularValues[j];\n                         }\n                }\n                         for (int j = 0; j < p; ++j) {\n                            wData[p - 1][j] = ei1[j] * mainBidiagonal[p - 1] / singularValues[j];\n                         }\n                 for (int i = p; i < n; ++i) {\n                     wData[i] = new double[p];\n                 }\n","SolutionWithNoComments":"\n             if (m >= n) {\n                                  final RealMatrix e =\n                    eigenDecomposition.getV().getSubMatrix(0, n - 1, 0, p - 1);\n                 final double[][] eData = e.getData();\n                 final double[][] wData = new double[m][p];\n                 double[] ei1 = eData[0];\n                for (int i = 0; i < p; ++i) {\n                                          final double mi = mainBidiagonal[i];\n                     final double[] ei0 = ei1;\n                     final double[] wi  = wData[i];\n                    if (i < n - 1) {\n                         ei1 = eData[i + 1];\n                         final double si = secondaryBidiagonal[i];\n                         for (int j = 0; j < p; ++j) {\n                             wi[j] = (mi * ei0[j] + si * ei1[j]) / singularValues[j];\n                         }\n                    } else {\n                         for (int j = 0; j < p; ++j) {\n                            wi[j] = mi * ei0[j] / singularValues[j];\n                         }\n                    }\n                }\n \n                 for (int i = p; i < m; ++i) {\n                     wData[i] = new double[p];\n\n                                                   final RealMatrix e =\n                    eigenDecomposition.getV().getSubMatrix(0, m - 1, 0, p - 1);\n                 final double[][] eData = e.getData();\n                 final double[][] wData = new double[n][p];\n                 double[] ei1 = eData[0];\n                for (int i = 0; i < p; ++i) {\n                     final double mi = mainBidiagonal[i];\n                     final double[] ei0 = ei1;\n                     final double[] wi  = wData[i];\n                    if (i < m - 1) {\n                         ei1 = eData[i + 1];\n                         final double si = secondaryBidiagonal[i];\n                         for (int j = 0; j < p; ++j) {\n                             wi[j] = (mi * ei0[j] + si * ei1[j]) / singularValues[j];\n                         }\n                    } else {\n                         for (int j = 0; j < p; ++j) {\n                            wi[j] = mi * ei0[j] / singularValues[j];\n                         }\n                    }\n                }\n                 for (int i = p; i < n; ++i) {\n                     wData[i] = new double[p];\n                 }\n"},{"ids":303,"error":"junit.framework.AssertionFailedError","source":"/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java","code":"@@ -61,6 +61,7 @@ public MultiDirectional(final double khi, final double gamma) {\n     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n \n         while (true) {\n \n             incrementIterationsCounter();\n@@ -89,8 +90,16 @@ protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n             if (comparator.compare(contracted, best) < 0) {\n                 // accept the contracted simplex\n \n             // check convergence\n                 return;\n             }\n \n","solution":"@@ -61,6 +61,7 @@ public MultiDirectional(final double khi, final double gamma) {\n     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n \n      final RealConvergenceChecker checker = getConvergenceChecker();\n         while (true) {\n \n             incrementIterationsCounter();\n@@ -89,8 +90,16 @@ protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n             if (comparator.compare(contracted, best) < 0) {\n                 // accept the contracted simplex\n              return;\n          }\n \n             // check convergence\n          final int iter = getIterations();\n          boolean converged = true;\n          for (int i = 0; i < simplex.length; ++i) {\n              converged &= checker.converged(iter, original[i], simplex[i]);\n          }\n          if (converged) {\n                 return;\n             }\n \n","CodeWithNoComments":"\n     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n \n         while (true) {\n \n             incrementIterationsCounter();\n\n             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n             if (comparator.compare(contracted, best) < 0) {\n                  \n                              return;\n             }\n \n","SolutionWithNoComments":"\n     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n \n        final RealConvergenceChecker checker = getConvergenceChecker();\n         while (true) {\n \n             incrementIterationsCounter();\n\n             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n             if (comparator.compare(contracted, best) < 0) {\n                                 return;\n            }\n \n                         final int iter = getIterations();\n            boolean converged = true;\n            for (int i = 0; i < simplex.length; ++i) {\n                converged &= checker.converged(iter, original[i], simplex[i]);\n            }\n            if (converged) {\n                 return;\n             }\n \n"},{"ids":304,"error":"java.lang.ArrayIndexOutOfBoundsException","source":"/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java","code":"@@ -600,6 +600,7 @@ private void computeGershgorinCircles() {\n         lowerSpectra = Math.min(lowerSpectra, lower);\n         final double upper = dCurrent + eCurrent;\n         work[upperStart + m - 1] = upper;\n         minPivot = MathUtils.SAFE_MIN * Math.max(1.0, eMax * eMax);\n \n     }\n@@ -902,8 +903,8 @@ private void processGeneralBlock(final int n)\n                     diagMax    = work[4 * i0];\n                     offDiagMin = work[4 * i0 + 2];\n                     double previousEMin = work[4 * i0 + 3];\n                  for (int i = 4 * i0; i < 4 * n0 - 11; i += 4) {\n                      if ((work[i + 3] <= TOLERANCE_2 * work[i]) &&\n                             (work[i + 2] <= TOLERANCE_2 * sigma)) {\n                             // insert a split\n                             work[i + 2]  = -sigma;\n@@ -1540,7 +1541,7 @@ private void computeShiftIncrement(final int start, final int end, final int def\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n                 // approximate contribution to norm squared from i < nn-2.\n              if (end - start > 2) {\n                     b2 = work[nn - 13] / work[nn - 15];\n                     a2 = a2 + b2;\n                     for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n","solution":"@@ -600,6 +600,7 @@ private void computeGershgorinCircles() {\n         lowerSpectra = Math.min(lowerSpectra, lower);\n         final double upper = dCurrent + eCurrent;\n         work[upperStart + m - 1] = upper;\n      upperSpectra = Math.max(upperSpectra, upper);\n         minPivot = MathUtils.SAFE_MIN * Math.max(1.0, eMax * eMax);\n \n     }\n@@ -902,8 +903,8 @@ private void processGeneralBlock(final int n)\n                     diagMax    = work[4 * i0];\n                     offDiagMin = work[4 * i0 + 2];\n                     double previousEMin = work[4 * i0 + 3];\n                  for (int i = 4 * i0; i < 4 * n0 - 16; i += 4) {\n                      if ((work[i + 3] <= TOLERANCE_2 * work[i]) ||\n                             (work[i + 2] <= TOLERANCE_2 * sigma)) {\n                             // insert a split\n                             work[i + 2]  = -sigma;\n@@ -1540,7 +1541,7 @@ private void computeShiftIncrement(final int start, final int end, final int def\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n                 // approximate contribution to norm squared from i < nn-2.\n              if (end - start > 3) {\n                     b2 = work[nn - 13] / work[nn - 15];\n                     a2 = a2 + b2;\n                     for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n","CodeWithNoComments":"\n         lowerSpectra = Math.min(lowerSpectra, lower);\n         final double upper = dCurrent + eCurrent;\n         work[upperStart + m - 1] = upper;\n         minPivot = MathUtils.SAFE_MIN * Math.max(1.0, eMax * eMax);\n \n     }\n\n                     diagMax    = work[4 * i0];\n                     offDiagMin = work[4 * i0 + 2];\n                     double previousEMin = work[4 * i0 + 3];\n                    for (int i = 4 * i0; i < 4 * n0 - 11; i += 4) {\n                        if ((work[i + 3] <= TOLERANCE_2 * work[i]) &&\n                             (work[i + 2] <= TOLERANCE_2 * sigma)) {\n                                                          work[i + 2]  = -sigma;\n\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n                                 if (end - start > 2) {\n                     b2 = work[nn - 13] / work[nn - 15];\n                     a2 = a2 + b2;\n                     for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n","SolutionWithNoComments":"\n         lowerSpectra = Math.min(lowerSpectra, lower);\n         final double upper = dCurrent + eCurrent;\n         work[upperStart + m - 1] = upper;\n        upperSpectra = Math.max(upperSpectra, upper);\n         minPivot = MathUtils.SAFE_MIN * Math.max(1.0, eMax * eMax);\n \n     }\n\n                     diagMax    = work[4 * i0];\n                     offDiagMin = work[4 * i0 + 2];\n                     double previousEMin = work[4 * i0 + 3];\n                    for (int i = 4 * i0; i < 4 * n0 - 16; i += 4) {\n                        if ((work[i + 3] <= TOLERANCE_2 * work[i]) ||\n                             (work[i + 2] <= TOLERANCE_2 * sigma)) {\n                                                          work[i + 2]  = -sigma;\n\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n                                 if (end - start > 3) {\n                     b2 = work[nn - 13] / work[nn - 15];\n                     a2 = a2 + b2;\n                     for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n"},{"ids":305,"error":"junit.framework.AssertionFailedError","source":"/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java","code":"@@ -1132,7 +1132,7 @@ private int goodStep(final int start, final int end) {\n     private boolean flipIfWarranted(final int n, final int step) {\n         if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {\n             // flip array\n          int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n                 for (int k = 0; k < 4; k += step) {\n                     final double tmp = work[i + k];\n","solution":"@@ -1132,7 +1132,7 @@ private int goodStep(final int start, final int end) {\n     private boolean flipIfWarranted(final int n, final int step) {\n         if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {\n             // flip array\n          int j = 4 * (n - 1);\n             for (int i = 0; i < j; i += 4) {\n                 for (int k = 0; k < 4; k += step) {\n                     final double tmp = work[i + k];\n","CodeWithNoComments":"\n     private boolean flipIfWarranted(final int n, final int step) {\n         if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {\n                         int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n                 for (int k = 0; k < 4; k += step) {\n                     final double tmp = work[i + k];\n","SolutionWithNoComments":"\n     private boolean flipIfWarranted(final int n, final int step) {\n         if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {\n                         int j = 4 * (n - 1);\n             for (int i = 0; i < j; i += 4) {\n                 for (int k = 0; k < 4; k += step) {\n                     final double tmp = work[i + k];\n"},{"ids":306,"error":"org.apache.commons.math.MathRuntimeException$4","source":"/src/main/java/org/apache/commons/math/ode/events/EventState.java","code":"@@ -188,6 +188,7 @@ public boolean evaluateStep(final StepInterpolator interpolator)\n                 if (g0Positive ^ (gb >= 0)) {\n                     // there is a sign change: an event is expected during this step\n \n                         // this is a corner case:\n                         // - there was an event near ta,\n                         // - there is another event between ta and tb\n@@ -195,7 +196,17 @@ public boolean evaluateStep(final StepInterpolator interpolator)\n                         // this implies that the real sign of ga is the same as gb, so we need to slightly\n                         // shift ta to make sure ga and gb get opposite signs and the solver won't complain\n                         // about bracketing\n                             // this should never happen\n                          \n                     // variation direction, with respect to the integration direction\n                     increasing = gb >= ga;\n","solution":"@@ -188,6 +188,7 @@ public boolean evaluateStep(final StepInterpolator interpolator)\n                 if (g0Positive ^ (gb >= 0)) {\n                     // there is a sign change: an event is expected during this step\n \n                  if (ga * gb > 0) {\n                         // this is a corner case:\n                         // - there was an event near ta,\n                         // - there is another event between ta and tb\n@@ -195,7 +196,17 @@ public boolean evaluateStep(final StepInterpolator interpolator)\n                         // this implies that the real sign of ga is the same as gb, so we need to slightly\n                         // shift ta to make sure ga and gb get opposite signs and the solver won't complain\n                         // about bracketing\n                      final double epsilon = (forward ? 0.25 : -0.25) * convergence;\n                      for (int k = 0; (k < 4) && (ga * gb > 0); ++k) {\n                          ta += epsilon;\n                          interpolator.setInterpolatedTime(ta);\n                          ga = handler.g(ta, interpolator.getInterpolatedState());\n                      }\n                      if (ga * gb > 0) {\n                             // this should never happen\n                          throw MathRuntimeException.createInternalError(null);\n                      }\n                  }\n                          \n                     // variation direction, with respect to the integration direction\n                     increasing = gb >= ga;\n","CodeWithNoComments":"\n                 if (g0Positive ^ (gb >= 0)) {\n                      \n                                                                           \n                                                                                                                                  \n                                          increasing = gb >= ga;\n","SolutionWithNoComments":"\n                 if (g0Positive ^ (gb >= 0)) {\n                      \n                    if (ga * gb > 0) {\n                                                                           \n                                                                                                   final double epsilon = (forward ? 0.25 : -0.25) * convergence;\n                        for (int k = 0; (k < 4) && (ga * gb > 0); ++k) {\n                            ta += epsilon;\n                            interpolator.setInterpolatedTime(ta);\n                            ga = handler.g(ta, interpolator.getInterpolatedState());\n                        }\n                        if (ga * gb > 0) {\n                                                         throw MathRuntimeException.createInternalError(null);\n                        }\n                    }\n                          \n                                          increasing = gb >= ga;\n"},{"ids":307,"error":"junit.framework.AssertionFailedError","source":"/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java","code":"@@ -289,7 +289,7 @@ private Integer getBasicRowForSolution(final int col) {\n      */\n     private Integer getBasicRow(final int col, boolean ignoreObjectiveRows) {\n         Integer row = null;\n      int start = getNumObjectiveFunctions();\n         for (int i = start; i < getHeight(); i++) {\n             if (MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) {\n                 row = i;\n@@ -338,11 +338,11 @@ private void copyArray(final double[] src, final double[] dest,\n      */\n     protected RealPointValuePair getSolution() {\n       double[] coefficients = new double[getOriginalNumDecisionVariables()];\n    Integer negativeVarBasicRow = getBasicRow(getNegativeDecisionVariableOffset());\n       double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());\n       Set<Integer> basicRows = new HashSet<Integer>();\n       for (int i = 0; i < coefficients.length; i++) {\n        Integer basicRow = getBasicRow(getNumObjectiveFunctions() + i);\n           if (basicRows.contains(basicRow)) {\n               // if multiple variables can take a given value \n               // then we choose the first and set the rest equal to 0\n","solution":"@@ -289,7 +289,7 @@ private Integer getBasicRowForSolution(final int col) {\n      */\n     private Integer getBasicRow(final int col, boolean ignoreObjectiveRows) {\n         Integer row = null;\n      int start = ignoreObjectiveRows ? getNumObjectiveFunctions() : 0;\n         for (int i = start; i < getHeight(); i++) {\n             if (MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) {\n                 row = i;\n@@ -338,11 +338,11 @@ private void copyArray(final double[] src, final double[] dest,\n      */\n     protected RealPointValuePair getSolution() {\n       double[] coefficients = new double[getOriginalNumDecisionVariables()];\n    Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset());\n       double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());\n       Set<Integer> basicRows = new HashSet<Integer>();\n       for (int i = 0; i < coefficients.length; i++) {\n        Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i);\n           if (basicRows.contains(basicRow)) {\n               // if multiple variables can take a given value \n               // then we choose the first and set the rest equal to 0\n","CodeWithNoComments":"\n      \n     private Integer getBasicRow(final int col, boolean ignoreObjectiveRows) {\n         Integer row = null;\n        int start = getNumObjectiveFunctions();\n         for (int i = start; i < getHeight(); i++) {\n             if (MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) {\n                 row = i;\n\n      \n     protected RealPointValuePair getSolution() {\n       double[] coefficients = new double[getOriginalNumDecisionVariables()];\n      Integer negativeVarBasicRow = getBasicRow(getNegativeDecisionVariableOffset());\n       double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());\n       Set<Integer> basicRows = new HashSet<Integer>();\n       for (int i = 0; i < coefficients.length; i++) {\n          Integer basicRow = getBasicRow(getNumObjectiveFunctions() + i);\n           if (basicRows.contains(basicRow)) {\n                              ","SolutionWithNoComments":"\n      \n     private Integer getBasicRow(final int col, boolean ignoreObjectiveRows) {\n         Integer row = null;\n        int start = ignoreObjectiveRows ? getNumObjectiveFunctions() : 0;\n         for (int i = start; i < getHeight(); i++) {\n             if (MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) {\n                 row = i;\n\n      \n     protected RealPointValuePair getSolution() {\n       double[] coefficients = new double[getOriginalNumDecisionVariables()];\n      Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset());\n       double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());\n       Set<Integer> basicRows = new HashSet<Integer>();\n       for (int i = 0; i < coefficients.length; i++) {\n          Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i);\n           if (basicRows.contains(basicRow)) {\n                              "},{"ids":308,"error":"java.lang.NullPointerException","source":"/src/main/java/org/apache/commons/math/util/MathUtils.java","code":"@@ -1621,9 +1621,9 @@ public static double distance(double[] p1, double[] p2) {\n      * @return the L<sub>2<\/sub> distance between the two points\n      */\n     public static double distance(int[] p1, int[] p2) {\n    int sum = 0;\n       for (int i = 0; i < p1.length; i++) {\n        final int dp = p1[i] - p2[i];\n           sum += dp * dp;\n       }\n       return Math.sqrt(sum);\n","solution":"@@ -1621,9 +1621,9 @@ public static double distance(double[] p1, double[] p2) {\n      * @return the L<sub>2<\/sub> distance between the two points\n      */\n     public static double distance(int[] p1, int[] p2) {\n    double sum = 0;\n       for (int i = 0; i < p1.length; i++) {\n        final double dp = p1[i] - p2[i];\n           sum += dp * dp;\n       }\n       return Math.sqrt(sum);\n","CodeWithNoComments":"\n    \n     public static double distance(int[] p1, int[] p2) {\n      int sum = 0;\n       for (int i = 0; i < p1.length; i++) {\n          final int dp = p1[i] - p2[i];\n           sum += dp * dp;\n       }\n       return Math.sqrt(sum);\n","SolutionWithNoComments":"\n   \n     public static double distance(int[] p1, int[] p2) {\n      double sum = 0;\n       for (int i = 0; i < p1.length; i++) {\n          final double dp = p1[i] - p2[i];\n           sum += dp * dp;\n       }\n       return Math.sqrt(sum);\n"},{"ids":309,"error":"org.apache.commons.math.MathException","source":"/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java","code":"@@ -195,7 +195,7 @@ public static double solve(UnivariateRealFunction f, double x0, double x1,\n         } while ((fa * fb > 0.0) && (numIterations < maximumIterations) && \n                 ((a > lowerBound) || (b < upperBound)));\n    \n      if (fa * fb >= 0.0 ) {\n             throw new ConvergenceException(\n                       \"number of iterations={0}, maximum iterations={1}, \" +\n                       \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" +\n","solution":"@@ -195,7 +195,7 @@ public static double solve(UnivariateRealFunction f, double x0, double x1,\n         } while ((fa * fb > 0.0) && (numIterations < maximumIterations) && \n                 ((a > lowerBound) || (b < upperBound)));\n    \n      if (fa * fb > 0.0 ) {\n             throw new ConvergenceException(\n                       \"number of iterations={0}, maximum iterations={1}, \" +\n                       \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" +\n","CodeWithNoComments":"\n         } while ((fa * fb > 0.0) && (numIterations < maximumIterations) && \n                 ((a > lowerBound) || (b < upperBound)));\n    \n        if (fa * fb >= 0.0 ) {\n             throw new ConvergenceException(\n                       \"number of iterations={0}, maximum iterations={1}, \" +\n                       \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" +\n","SolutionWithNoComments":"\n         } while ((fa * fb > 0.0) && (numIterations < maximumIterations) && \n                 ((a > lowerBound) || (b < upperBound)));\n    \n        if (fa * fb > 0.0 ) {\n             throw new ConvergenceException(\n                       \"number of iterations={0}, maximum iterations={1}, \" +\n                       \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" +\n"},{"ids":310,"error":"java.lang.ClassCastException","source":"/src/java/org/apache/commons/math/stat/Frequency.java","code":"@@ -107,7 +107,11 @@ public String toString() {\n      */\n     @Deprecated\n     public void addValue(Object v) {\n             addValue((Comparable<?>) v);            \n     }\n     \n     /**\n","solution":"@@ -107,7 +107,11 @@ public String toString() {\n      */\n     @Deprecated\n     public void addValue(Object v) {\n      if (v instanceof Comparable<?>){\n             addValue((Comparable<?>) v);            \n      } else {\n          throw new IllegalArgumentException(\"Object must implement Comparable\");\n      }\n     }\n     \n     /**\n","CodeWithNoComments":"\n      \n     @Deprecated\n     public void addValue(Object v) {\n             addValue((Comparable<?>) v);            \n     }\n     \n","SolutionWithNoComments":"\n      \n     @Deprecated\n     public void addValue(Object v) {\n        if (v instanceof Comparable<?>){\n             addValue((Comparable<?>) v);            \n        } else {\n            throw new IllegalArgumentException(\"Object must implement Comparable\");\n        }\n     }\n     \n"},{"ids":311,"error":"junit.framework.AssertionFailedError","source":"/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java","code":"@@ -272,12 +272,10 @@ protected static double getInvertedCoeffiecientSum(final RealVector coefficients\n     private Integer getBasicRow(final int col) {\n         Integer row = null;\n         for (int i = getNumObjectiveFunctions(); i < getHeight(); i++) {\n          if (!MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {\n              if (row == null) {\n                 row = i;\n              } else {\n                 return null;\n              }\n             }\n         }\n         return row;\n","solution":"@@ -272,12 +272,10 @@ protected static double getInvertedCoeffiecientSum(final RealVector coefficients\n     private Integer getBasicRow(final int col) {\n         Integer row = null;\n         for (int i = getNumObjectiveFunctions(); i < getHeight(); i++) {\n          if (MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) {\n                 row = i;\n          } else if (!MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {\n                 return null;\n             }\n         }\n         return row;\n","CodeWithNoComments":"\n     private Integer getBasicRow(final int col) {\n         Integer row = null;\n         for (int i = getNumObjectiveFunctions(); i < getHeight(); i++) {\n            if (!MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {\n                if (row == null) {\n                 row = i;\n                } else {\n                 return null;\n                }\n             }\n         }\n         return row;\n","SolutionWithNoComments":"\n     private Integer getBasicRow(final int col) {\n         Integer row = null;\n         for (int i = getNumObjectiveFunctions(); i < getHeight(); i++) {\n            if (MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) {\n                 row = i;\n            } else if (!MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {\n                 return null;\n             }\n         }\n         return row;\n"},{"ids":312,"error":"junit.framework.AssertionFailedError","source":"/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java","code":"@@ -111,9 +111,6 @@ public CholeskyDecompositionImpl(final RealMatrix matrix,\n \n             final double[] lI = lTData[i];\n \n          if (lTData[i][i] < absolutePositivityThreshold) {\n              throw new NotPositiveDefiniteMatrixException();\n          }\n             // check off-diagonal elements (and reset them to 0)\n             for (int j = i + 1; j < order; ++j) {\n                 final double[] lJ = lTData[j];\n@@ -134,6 +131,9 @@ public CholeskyDecompositionImpl(final RealMatrix matrix,\n             final double[] ltI = lTData[i];\n \n             // check diagonal element\n \n             ltI[i] = Math.sqrt(ltI[i]);\n             final double inverse = 1.0 / ltI[i];\n","solution":"@@ -111,9 +111,6 @@ public CholeskyDecompositionImpl(final RealMatrix matrix,\n \n             final double[] lI = lTData[i];\n \n             // check off-diagonal elements (and reset them to 0)\n             for (int j = i + 1; j < order; ++j) {\n                 final double[] lJ = lTData[j];\n@@ -134,6 +131,9 @@ public CholeskyDecompositionImpl(final RealMatrix matrix,\n             final double[] ltI = lTData[i];\n \n             // check diagonal element\n          if (ltI[i] < absolutePositivityThreshold) {\n              throw new NotPositiveDefiniteMatrixException();\n          }\n \n             ltI[i] = Math.sqrt(ltI[i]);\n             final double inverse = 1.0 / ltI[i];\n","CodeWithNoComments":"\n \n             final double[] lI = lTData[i];\n \n            if (lTData[i][i] < absolutePositivityThreshold) {\n                throw new NotPositiveDefiniteMatrixException();\n            }\n                          for (int j = i + 1; j < order; ++j) {\n                 final double[] lJ = lTData[j];\n\n             final double[] ltI = lTData[i];\n \n              \n             ltI[i] = Math.sqrt(ltI[i]);\n             final double inverse = 1.0 / ltI[i];\n","SolutionWithNoComments":"\n \n             final double[] lI = lTData[i];\n \n                          for (int j = i + 1; j < order; ++j) {\n                 final double[] lJ = lTData[j];\n\n             final double[] ltI = lTData[i];\n \n                         if (ltI[i] < absolutePositivityThreshold) {\n                throw new NotPositiveDefiniteMatrixException();\n            }\n \n             ltI[i] = Math.sqrt(ltI[i]);\n             final double inverse = 1.0 / ltI[i];\n"},{"ids":313,"error":"junit.framework.AssertionFailedError","source":"/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java","code":"@@ -326,19 +326,18 @@ protected RealPointValuePair getSolution() {\n         Integer basicRow =\n             getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());\n         double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());\n         for (int i = 0; i < coefficients.length; i++) {\n             basicRow = getBasicRow(getNumObjectiveFunctions() + i);\n                 // if multiple variables can take a given value \n                 // then we choose the first and set the rest equal to 0\n                 coefficients[i] =\n                     (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -\n                     (restrictToNonNegative ? 0 : mostNegative);\n          if (basicRow != null) {\n              for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {\n                  if (tableau.getEntry(basicRow, j) == 1) {\n                       coefficients[i] = 0;\n                  }\n              }\n             }\n         }\n         return new RealPointValuePair(coefficients, f.getValue(coefficients));\n","solution":"@@ -326,19 +326,18 @@ protected RealPointValuePair getSolution() {\n         Integer basicRow =\n             getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());\n         double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());\n      Set<Integer> basicRows = new HashSet<Integer>();\n         for (int i = 0; i < coefficients.length; i++) {\n             basicRow = getBasicRow(getNumObjectiveFunctions() + i);\n          if (basicRows.contains(basicRow)) {\n                 // if multiple variables can take a given value \n                 // then we choose the first and set the rest equal to 0\n              coefficients[i] = 0;\n          } else {\n              basicRows.add(basicRow);\n                 coefficients[i] =\n                     (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -\n                     (restrictToNonNegative ? 0 : mostNegative);\n             }\n         }\n         return new RealPointValuePair(coefficients, f.getValue(coefficients));\n","CodeWithNoComments":"\n         Integer basicRow =\n             getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());\n         double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());\n         for (int i = 0; i < coefficients.length; i++) {\n             basicRow = getBasicRow(getNumObjectiveFunctions() + i);\n                                                   coefficients[i] =\n                     (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -\n                     (restrictToNonNegative ? 0 : mostNegative);\n            if (basicRow != null) {\n                for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {\n                    if (tableau.getEntry(basicRow, j) == 1) {\n                         coefficients[i] = 0;\n                    }\n                }\n             }\n         }\n         return new RealPointValuePair(coefficients, f.getValue(coefficients));\n","SolutionWithNoComments":"\n         Integer basicRow =\n             getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());\n         double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());\n        Set<Integer> basicRows = new HashSet<Integer>();\n         for (int i = 0; i < coefficients.length; i++) {\n             basicRow = getBasicRow(getNumObjectiveFunctions() + i);\n            if (basicRows.contains(basicRow)) {\n                                                  coefficients[i] = 0;\n            } else {\n                basicRows.add(basicRow);\n                 coefficients[i] =\n                     (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -\n                     (restrictToNonNegative ? 0 : mostNegative);\n             }\n         }\n         return new RealPointValuePair(coefficients, f.getValue(coefficients));\n"},{"ids":314,"error":"junit.framework.AssertionFailedError","source":"/src/java/org/apache/commons/math/fraction/Fraction.java","code":"@@ -256,8 +256,8 @@ public Fraction abs() {\n      *         than <tt>object<\/tt>, 0 if they are equal.\n      */\n     public int compareTo(Fraction object) {\n      double nOd = doubleValue();\n      double dOn = object.doubleValue();\n         return (nOd < dOn) ? -1 : ((nOd > dOn) ? +1 : 0);\n     }\n     \n","solution":"@@ -256,8 +256,8 @@ public Fraction abs() {\n      *         than <tt>object<\/tt>, 0 if they are equal.\n      */\n     public int compareTo(Fraction object) {\n      long nOd = ((long) numerator) * object.denominator;\n      long dOn = ((long) denominator) * object.numerator;\n         return (nOd < dOn) ? -1 : ((nOd > dOn) ? +1 : 0);\n     }\n     \n","CodeWithNoComments":"\n        double nOd = doubleValue();\n        double dOn = object.doubleValue();\n         return (nOd < dOn) ? -1 : ((nOd > dOn) ? +1 : 0);\n     }\n     \n","SolutionWithNoComments":"\n        long nOd = ((long) numerator) * object.denominator;\n        long dOn = ((long) denominator) * object.numerator;\n         return (nOd < dOn) ? -1 : ((nOd > dOn) ? +1 : 0);\n     }\n     \n"},{"ids":315,"error":"junit.framework.AssertionFailedError","source":"/src/java/org/apache/commons/math/util/MathUtils.java","code":"@@ -342,8 +342,10 @@ public static boolean equals(double[] x, double[] y) {\n      * @throws IllegalArgumentException if n < 0\n      */\n     public static long factorial(final int n) {\n      long result = Math.round(factorialDouble(n));\n      if (result == Long.MAX_VALUE) {\n             throw new ArithmeticException(\n                     \"factorial value is too large to fit in a long\");\n         }\n@@ -374,6 +376,9 @@ public static double factorialDouble(final int n) {\n         if (n < 0) {\n             throw new IllegalArgumentException(\"must have n >= 0 for n!\");\n         }\n         return Math.floor(Math.exp(factorialLog(n)) + 0.5);\n     }\n \n@@ -394,6 +399,9 @@ public static double factorialLog(final int n) {\n         if (n < 0) {\n             throw new IllegalArgumentException(\"must have n > 0 for n!\");\n         }\n         double logSum = 0;\n         for (int i = 2; i <= n; i++) {\n             logSum += Math.log((double)i);\n","solution":"@@ -342,8 +342,10 @@ public static boolean equals(double[] x, double[] y) {\n      * @throws IllegalArgumentException if n < 0\n      */\n     public static long factorial(final int n) {\n      if (n < 0) {\n          throw new IllegalArgumentException(\"must have n >= 0 for n!\");\n      }\n      if (n > 20) {\n             throw new ArithmeticException(\n                     \"factorial value is too large to fit in a long\");\n         }\n@@ -374,6 +376,9 @@ public static double factorialDouble(final int n) {\n         if (n < 0) {\n             throw new IllegalArgumentException(\"must have n >= 0 for n!\");\n         }\n      if (n < 21) {\n          return factorial(n);\n      }\n         return Math.floor(Math.exp(factorialLog(n)) + 0.5);\n     }\n \n@@ -394,6 +399,9 @@ public static double factorialLog(final int n) {\n         if (n < 0) {\n             throw new IllegalArgumentException(\"must have n > 0 for n!\");\n         }\n      if (n < 21) {\n          return Math.log(factorial(n));\n      }\n         double logSum = 0;\n         for (int i = 2; i <= n; i++) {\n             logSum += Math.log((double)i);\n","CodeWithNoComments":"\n   \n     public static long factorial(final int n) {\n        long result = Math.round(factorialDouble(n));\n        if (result == Long.MAX_VALUE) {\n             throw new ArithmeticException(\n                     \"factorial value is too large to fit in a long\");\n         }\n\n         if (n < 0) {\n             throw new IllegalArgumentException(\"must have n >= 0 for n!\");\n         }\n         return Math.floor(Math.exp(factorialLog(n)) + 0.5);\n     }\n \n\n         if (n < 0) {\n             throw new IllegalArgumentException(\"must have n > 0 for n!\");\n         }\n         double logSum = 0;\n         for (int i = 2; i <= n; i++) {\n             logSum += Math.log((double)i);\n","SolutionWithNoComments":"\n   \n     public static long factorial(final int n) {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"must have n >= 0 for n!\");\n        }\n        if (n > 20) {\n             throw new ArithmeticException(\n                     \"factorial value is too large to fit in a long\");\n         }\n\n         if (n < 0) {\n             throw new IllegalArgumentException(\"must have n >= 0 for n!\");\n         }\n        if (n < 21) {\n            return factorial(n);\n        }\n         return Math.floor(Math.exp(factorialLog(n)) + 0.5);\n     }\n \n\n         if (n < 0) {\n             throw new IllegalArgumentException(\"must have n > 0 for n!\");\n         }\n        if (n < 21) {\n            return Math.log(factorial(n));\n        }\n         double logSum = 0;\n         for (int i = 2; i <= n; i++) {\n             logSum += Math.log((double)i);\n"},{"ids":316,"error":"java.lang.IllegalArgumentException","source":"/src/java/org/apache/commons/math/distribution/FDistributionImpl.java","code":"@@ -141,10 +141,12 @@ protected double getDomainUpperBound(double p) {\n      * @return initial domain value\n      */\n     protected double getInitialDomain(double p) {\n      double ret;\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n             ret = d / (d - 2.0);\n         return ret;\n     }\n     \n","solution":"@@ -141,10 +141,12 @@ protected double getDomainUpperBound(double p) {\n      * @return initial domain value\n      */\n     protected double getInitialDomain(double p) {\n      double ret = 1.0;\n         double d = getDenominatorDegreesOfFreedom();\n      if (d > 2.0) {\n             // use mean\n             ret = d / (d - 2.0);\n      }\n         return ret;\n     }\n     \n","CodeWithNoComments":"\n \n     protected double getInitialDomain(double p) {\n        double ret;\n         double d = getDenominatorDegreesOfFreedom();\n                          ret = d / (d - 2.0);\n         return ret;\n     }\n     \n","SolutionWithNoComments":"\n        double ret = 1.0;\n         double d = getDenominatorDegreesOfFreedom();\n        if (d > 2.0) {\n                          ret = d / (d - 2.0);\n        }\n         return ret;\n     }\n     \n"},{"ids":317,"error":"junit.framework.AssertionFailedError","source":"/src/java/org/apache/commons/math/util/MathUtils.java","code":"@@ -409,7 +409,7 @@ public static double factorialLog(final int n) {\n      * @since 1.1\n      */\n     public static int gcd(int u, int v) {\n      if (u * v == 0) {\n             return (Math.abs(u) + Math.abs(v));\n         }\n         // keep u and v negative, as negative integers range down to\n","solution":"@@ -409,7 +409,7 @@ public static double factorialLog(final int n) {\n      * @since 1.1\n      */\n     public static int gcd(int u, int v) {\n      if ((u == 0) || (v == 0)) {\n             return (Math.abs(u) + Math.abs(v));\n         }\n         // keep u and v negative, as negative integers range down to\n","CodeWithNoComments":"\n   \n     public static int gcd(int u, int v) {\n        if (u * v == 0) {\n             return (Math.abs(u) + Math.abs(v));\n         }\n         ","SolutionWithNoComments":"\n    \n     public static int gcd(int u, int v) {\n        if ((u == 0) || (v == 0)) {\n             return (Math.abs(u) + Math.abs(v));\n         }\n         "},{"ids":318,"error":"java.lang.IllegalArgumentException","source":"/src/java/org/apache/commons/math/stat/Frequency.java","code":"@@ -107,6 +107,8 @@ public String toString() {\n      */\n     @Deprecated\n     public void addValue(Object v) {\n     \n     /**\n      * Adds 1 to the frequency count for v.\n@@ -118,6 +120,7 @@ public void addValue(Object v) {\n      * @param v the value to add.\n      * @throws IllegalArgumentException if <code>v<\/code> is not comparable with previous entries\n      */\n         Object obj = v;\n         if (v instanceof Integer) {\n            obj = Long.valueOf(((Integer) v).longValue());\n","solution":"@@ -107,6 +107,8 @@ public String toString() {\n      */\n     @Deprecated\n     public void addValue(Object v) {\n      addValue((Comparable<?>) v);\n  }\n     \n     /**\n      * Adds 1 to the frequency count for v.\n@@ -118,6 +120,7 @@ public void addValue(Object v) {\n      * @param v the value to add.\n      * @throws IllegalArgumentException if <code>v<\/code> is not comparable with previous entries\n      */\n  public void addValue(Comparable<?>v){\n         Object obj = v;\n         if (v instanceof Integer) {\n            obj = Long.valueOf(((Integer) v).longValue());\n","CodeWithNoComments":"\n      \n     @Deprecated\n     public void addValue(Object v) {\n         Object obj = v;\n         if (v instanceof Integer) {\n            obj = Long.valueOf(((Integer) v).longValue());\n","SolutionWithNoComments":"\n      \n     @Deprecated\n     public void addValue(Object v) {\n        addValue((Comparable<?>) v);\n    }\n    public void addValue(Comparable<?>v){\n         Object obj = v;\n         if (v instanceof Integer) {\n            obj = Long.valueOf(((Integer) v).longValue());\n"},{"ids":319,"error":"junit.framework.AssertionFailedError","source":"/src/java/org/apache/commons/math/complex/Complex.java","code":"@@ -255,7 +255,7 @@ public boolean equals(Object other) {\n                 if (rhs.isNaN()) {\n                     ret = this.isNaN();\n                 } else {\n                  ret = (Double.doubleToRawLongBits(real) == Double.doubleToRawLongBits(rhs.getReal())) && (Double.doubleToRawLongBits(imaginary) == Double.doubleToRawLongBits(rhs.getImaginary())); \n                 }\n             } catch (ClassCastException ex) {\n                 // ignore exception\n","solution":"@@ -255,7 +255,7 @@ public boolean equals(Object other) {\n                 if (rhs.isNaN()) {\n                     ret = this.isNaN();\n                 } else {\n                  ret = (real == rhs.real) && (imaginary == rhs.imaginary); \n                 }\n             } catch (ClassCastException ex) {\n                 // ignore exception\n","CodeWithNoComments":"\n                 if (rhs.isNaN()) {\n                     ret = this.isNaN();\n                 } else {\n                    ret = (Double.doubleToRawLongBits(real) == Double.doubleToRawLongBits(rhs.getReal())) && (Double.doubleToRawLongBits(imaginary) == Double.doubleToRawLongBits(rhs.getImaginary())); \n                 }\n             } catch (ClassCastException ex) {\n                 ","SolutionWithNoComments":"\n                 if (rhs.isNaN()) {\n                     ret = this.isNaN();\n                 } else {\n                    ret = (real == rhs.real) && (imaginary == rhs.imaginary); \n                 }\n             } catch (ClassCastException ex) {\n                 "},{"ids":320,"error":"junit.framework.AssertionFailedError","source":"/src/java/org/apache/commons/math/util/MathUtils.java","code":"@@ -181,30 +181,43 @@ public static long binomialCoefficient(final int n, final int k) {\n         if ((k == 1) || (k == n - 1)) {\n             return n;\n         }\n      long result = Math.round(binomialCoefficientDouble(n, k));\n      if (result == Long.MAX_VALUE) {\n          throw new ArithmeticException(\n              \"result too large to represent in a long integer\");\n      }\n         // Use symmetry for large k\n         \n         // We use the formula\n         // (n choose k) = n! / (n-k)! / k!\n         // (n choose k) == ((n-k+1)*...*n) / (1*...*k)\n         // which could be written\n         // (n choose k) == (n-1 choose k-1) * n / k\n             // For n <= 61, the naive implementation cannot overflow.\n             // For n > 61 but n <= 66, the result cannot overflow,\n             // but we must take care not to overflow intermediate values.\n                 // We know that (result * i) is divisible by j,\n                 // but (result * i) may overflow, so we split j:\n                 // Filter out the gcd, d, so j/d and i/d are integer.\n                 // result is divisible by (j/d) because (j/d)\n                 // is relative prime to (i/d) and is a divisor of\n                 // result * (i/d).\n             // For n > 66, a result overflow might occur, so we check\n             // the multiplication, taking care to not overflow\n             // unnecessary.\n         return result;\n     }\n \n@@ -231,9 +244,33 @@ public static long binomialCoefficient(final int n, final int k) {\n      * @throws IllegalArgumentException if preconditions are not met.\n      */\n     public static double binomialCoefficientDouble(final int n, final int k) {\n         \n   \n      return Math.floor(Math.exp(binomialCoefficientLog(n, k)) + 0.5);\n     }\n     \n     /**\n@@ -274,11 +311,17 @@ public static double binomialCoefficientLog(final int n, final int k) {\n          * For values small enough to do exact integer computation,\n          * return the log of the exact value \n          */\n         \n         /*\n          * Return the log of binomialCoefficientDouble for values that will not\n          * overflow binomialCoefficientDouble\n          */\n         \n         /*\n          * Sum logs for values that could overflow\n","solution":"@@ -181,30 +181,43 @@ public static long binomialCoefficient(final int n, final int k) {\n         if ((k == 1) || (k == n - 1)) {\n             return n;\n         }\n         // Use symmetry for large k\n      if (k > n / 2)\n          return binomialCoefficient(n, n - k);\n         \n         // We use the formula\n         // (n choose k) = n! / (n-k)! / k!\n         // (n choose k) == ((n-k+1)*...*n) / (1*...*k)\n         // which could be written\n         // (n choose k) == (n-1 choose k-1) * n / k\n      long result = 1;\n      if (n <= 61) {\n             // For n <= 61, the naive implementation cannot overflow.\n          for (int j = 1, i = n - k + 1; j <= k; i++, j++) {\n              result = result * i / j;\n          }\n      } else if (n <= 66) {\n             // For n > 61 but n <= 66, the result cannot overflow,\n             // but we must take care not to overflow intermediate values.\n          for (int j = 1, i = n - k + 1; j <= k; i++, j++) {\n                 // We know that (result * i) is divisible by j,\n                 // but (result * i) may overflow, so we split j:\n                 // Filter out the gcd, d, so j/d and i/d are integer.\n                 // result is divisible by (j/d) because (j/d)\n                 // is relative prime to (i/d) and is a divisor of\n                 // result * (i/d).\n              long d = gcd(i, j);\n              result = (result / (j / d)) * (i / d);\n          }\n      } else {\n             // For n > 66, a result overflow might occur, so we check\n             // the multiplication, taking care to not overflow\n             // unnecessary.\n          for (int j = 1, i = n - k + 1; j <= k; i++, j++) {\n              long d = gcd(i, j);\n              result = mulAndCheck((result / (j / d)), (i / d));\n          }\n      }\n         return result;\n     }\n \n@@ -231,9 +244,33 @@ public static long binomialCoefficient(final int n, final int k) {\n      * @throws IllegalArgumentException if preconditions are not met.\n      */\n     public static double binomialCoefficientDouble(final int n, final int k) {\n      if (n < k) {\n          throw new IllegalArgumentException(\n              \"must have n >= k for binomial coefficient (n,k)\");\n      }\n      if (n < 0) {\n          throw new IllegalArgumentException(\n              \"must have n >= 0 for binomial coefficient (n,k)\");\n      }\n      if ((n == k) || (k == 0)) {\n          return 1d;\n      }\n      if ((k == 1) || (k == n - 1)) {\n          return n;\n      }\n      if (k > n/2) {\n          return binomialCoefficientDouble(n, n - k);\n      }\n      if (n < 67) {\n          return binomialCoefficient(n,k);\n      }\n         \n      double result = 1d;\n      for (int i = 1; i <= k; i++) {\n           result *= (double)(n - k + i) / (double)i;\n      }\n   \n      return Math.floor(result + 0.5);\n     }\n     \n     /**\n@@ -274,11 +311,17 @@ public static double binomialCoefficientLog(final int n, final int k) {\n          * For values small enough to do exact integer computation,\n          * return the log of the exact value \n          */\n      if (n < 67) {  \n          return Math.log(binomialCoefficient(n,k));\n      }\n         \n         /*\n          * Return the log of binomialCoefficientDouble for values that will not\n          * overflow binomialCoefficientDouble\n          */\n      if (n < 1030) { \n          return Math.log(binomialCoefficientDouble(n, k));\n      } \n         \n         /*\n          * Sum logs for values that could overflow\n","CodeWithNoComments":"\n         if ((k == 1) || (k == n - 1)) {\n             return n;\n         }\n        long result = Math.round(binomialCoefficientDouble(n, k));\n        if (result == Long.MAX_VALUE) {\n            throw new ArithmeticException(\n                \"result too large to represent in a long integer\");\n        }\n                  \n                                                                                                                                                                                                                                          return result;\n     }\n \n\n  \n     public static double binomialCoefficientDouble(final int n, final int k) {\n         \n   \n        return Math.floor(Math.exp(binomialCoefficientLog(n, k)) + 0.5);\n     }\n     \n","SolutionWithNoComments":"\n         if ((k == 1) || (k == n - 1)) {\n             return n;\n         }\n                 if (k > n / 2)\n            return binomialCoefficient(n, n - k);\n         \n                                                     long result = 1;\n        if (n <= 61) {\n                         for (int j = 1, i = n - k + 1; j <= k; i++, j++) {\n                result = result * i / j;\n            }\n        } else if (n <= 66) {\n                                      for (int j = 1, i = n - k + 1; j <= k; i++, j++) {\n                                                                                                                      long d = gcd(i, j);\n                result = (result / (j / d)) * (i / d);\n            }\n        } else {\n                                                   for (int j = 1, i = n - k + 1; j <= k; i++, j++) {\n                long d = gcd(i, j);\n                result = mulAndCheck((result / (j / d)), (i / d));\n            }\n        }\n         return result;\n     }\n \n\n  \n     public static double binomialCoefficientDouble(final int n, final int k) {\n        if (n < k) {\n            throw new IllegalArgumentException(\n                \"must have n >= k for binomial coefficient (n,k)\");\n        }\n        if (n < 0) {\n            throw new IllegalArgumentException(\n                \"must have n >= 0 for binomial coefficient (n,k)\");\n        }\n        if ((n == k) || (k == 0)) {\n            return 1d;\n        }\n        if ((k == 1) || (k == n - 1)) {\n            return n;\n        }\n        if (k > n/2) {\n            return binomialCoefficientDouble(n, n - k);\n        }\n        if (n < 67) {\n            return binomialCoefficient(n,k);\n        }\n         \n        double result = 1d;\n        for (int i = 1; i <= k; i++) {\n             result *= (double)(n - k + i) / (double)i;\n        }\n   \n        return Math.floor(result + 0.5);\n     }\n     \n\n      \n        if (n < 67) {  \n            return Math.log(binomialCoefficient(n,k));\n        }\n        if (n < 1030) { \n            return Math.log(binomialCoefficientDouble(n, k));\n        } \n"},{"ids":321,"error":"java.lang.ArrayIndexOutOfBoundsException","source":"/src/java/org/apache/commons/math/linear/BigMatrixImpl.java","code":"@@ -988,7 +988,7 @@ public BigDecimal getTrace() throws IllegalArgumentException {\n         }\n         final int nRows = this.getRowDimension();\n         final int nCols = this.getColumnDimension();\n      final BigDecimal[] out = new BigDecimal[v.length];\n         for (int row = 0; row < nRows; row++) {\n             BigDecimal sum = ZERO;\n             for (int i = 0; i < nCols; i++) {\n/src/java/org/apache/commons/math/linear/RealMatrixImpl.java @@ -776,7 +776,7 @@ public double getTrace() throws IllegalArgumentException {\n         if (v.length != nCols) {\n             throw new IllegalArgumentException(\"vector has wrong length\");\n         }\n      final double[] out = new double[v.length];\n         for (int row = 0; row < nRows; row++) {\n             final double[] dataRow = data[row];\n             double sum = 0;\n","solution":"@@ -988,7 +988,7 @@ public BigDecimal getTrace() throws IllegalArgumentException {\n         }\n         final int nRows = this.getRowDimension();\n         final int nCols = this.getColumnDimension();\n      final BigDecimal[] out = new BigDecimal[nRows];\n         for (int row = 0; row < nRows; row++) {\n             BigDecimal sum = ZERO;\n             for (int i = 0; i < nCols; i++) {\n/src/java/org/apache/commons/math/linear/RealMatrixImpl.java @@ -776,7 +776,7 @@ public double getTrace() throws IllegalArgumentException {\n         if (v.length != nCols) {\n             throw new IllegalArgumentException(\"vector has wrong length\");\n         }\n      final double[] out = new double[nRows];\n         for (int row = 0; row < nRows; row++) {\n             final double[] dataRow = data[row];\n             double sum = 0;\n","CodeWithNoComments":"\n         }\n         final int nRows = this.getRowDimension();\n         final int nCols = this.getColumnDimension();\n        final BigDecimal[] out = new BigDecimal[v.length];\n         for (int row = 0; row < nRows; row++) {\n             BigDecimal sum = ZERO;\n             for (int i = 0; i < nCols; i++) {\n\n         if (v.length != nCols) {\n             throw new IllegalArgumentException(\"vector has wrong length\");\n         }\n        final double[] out = new double[v.length];\n         for (int row = 0; row < nRows; row++) {\n             final double[] dataRow = data[row];\n             double sum = 0;\n","SolutionWithNoComments":"\n         }\n         final int nRows = this.getRowDimension();\n         final int nCols = this.getColumnDimension();\n        final BigDecimal[] out = new BigDecimal[nRows];\n         for (int row = 0; row < nRows; row++) {\n             BigDecimal sum = ZERO;\n             for (int i = 0; i < nCols; i++) {\n\n         if (v.length != nCols) {\n             throw new IllegalArgumentException(\"vector has wrong length\");\n         }\n        final double[] out = new double[nRows];\n         for (int row = 0; row < nRows; row++) {\n             final double[] dataRow = data[row];\n             double sum = 0;\n"},{"ids":322,"error":"java.lang.StringIndexOutOfBoundsException","source":"/src/java/org/apache/commons/math/complex/ComplexFormat.java","code":"@@ -374,7 +374,8 @@ public Complex parse(String source, ParsePosition pos) {\n         int n = getImaginaryCharacter().length();\n         startIndex = pos.getIndex();\n         int endIndex = startIndex + n;\n      if (\n             source.substring(startIndex, endIndex).compareTo(\n             getImaginaryCharacter()) != 0) {\n             // set index back to initial, error index should be the start index\n","solution":"@@ -374,7 +374,8 @@ public Complex parse(String source, ParsePosition pos) {\n         int n = getImaginaryCharacter().length();\n         startIndex = pos.getIndex();\n         int endIndex = startIndex + n;\n      if ((startIndex >= source.length()) ||\n          (endIndex > source.length()) ||\n             source.substring(startIndex, endIndex).compareTo(\n             getImaginaryCharacter()) != 0) {\n             // set index back to initial, error index should be the start index\n","CodeWithNoComments":"\n         int n = getImaginaryCharacter().length();\n         startIndex = pos.getIndex();\n         int endIndex = startIndex + n;\n        if (\n             source.substring(startIndex, endIndex).compareTo(\n             getImaginaryCharacter()) != 0) {\n             ","SolutionWithNoComments":"\n         int n = getImaginaryCharacter().length();\n         startIndex = pos.getIndex();\n         int endIndex = startIndex + n;\n        if ((startIndex >= source.length()) ||\n            (endIndex > source.length()) ||\n             source.substring(startIndex, endIndex).compareTo(\n             getImaginaryCharacter()) != 0) {\n             "},{"ids":323,"error":"junit.framework.AssertionFailedError","source":"/src/java/org/apache/commons/math/stat/regression/SimpleRegression.java","code":"@@ -261,7 +261,7 @@ public double getSlope() {\n      * @return sum of squared errors associated with the regression model\n      */\n     public double getSumSquaredErrors() {\n      return sumYY - sumXY * sumXY / sumXX;\n     }\n \n     /**\n","solution":"@@ -261,7 +261,7 @@ public double getSlope() {\n      * @return sum of squared errors associated with the regression model\n      */\n     public double getSumSquaredErrors() {\n      return Math.max(0d, sumYY - sumXY * sumXY / sumXX);\n     }\n \n     /**\n","CodeWithNoComments":"\n      \n     public double getSumSquaredErrors() {\n        return sumYY - sumXY * sumXY / sumXX;\n     }\n \n","SolutionWithNoComments":"\n     public double getSumSquaredErrors() {\n        return Math.max(0d, sumYY - sumXY * sumXY / sumXX);\n     }\n \n"},{"ids":324,"error":"junit.framework.AssertionFailedError","source":"/src/java/org/apache/commons/math/special/Gamma.java","code":"@@ -34,7 +34,7 @@\n     private static final long serialVersionUID = -6587513359895466954L;\n \n     /** Maximum allowed numerical error. */\n  private static final double DEFAULT_EPSILON = 10e-9;\n \n     /** Lanczos coefficients */\n     private static double[] lanczos =\n","solution":"@@ -34,7 +34,7 @@\n     private static final long serialVersionUID = -6587513359895466954L;\n \n     /** Maximum allowed numerical error. */\n  private static final double DEFAULT_EPSILON = 10e-15;\n \n     /** Lanczos coefficients */\n     private static double[] lanczos =\n","CodeWithNoComments":"\n     private static final long serialVersionUID = -6587513359895466954L;\n \n    private static final double DEFAULT_EPSILON = 10e-9;\n \n     private static double[] lanczos =\n","SolutionWithNoComments":"\n     private static final long serialVersionUID = -6587513359895466954L;\n \n    private static final double DEFAULT_EPSILON = 10e-15;\n \n     private static double[] lanczos =\n"},{"ids":325,"error":"java.lang.IllegalArgumentException","source":"/src/java/org/apache/commons/math/analysis/BrentSolver.java","code":"@@ -135,17 +135,31 @@ public double solve(double min, double max) throws MaxIterationsExceededExceptio\n         \n         // Verify bracketing\n         double sign = yMin * yMax;\n      if (sign >= 0) {\n             // check if either value is close to a zero\n                 // neither value is close to zero and min and max do not bracket root.\n                 throw new IllegalArgumentException\n                 (\"Function values at endpoints do not have different signs.\" +\n                         \"  Endpoints: [\" + min + \",\" + max + \"]\" + \n                         \"  Values: [\" + yMin + \",\" + yMax + \"]\");\n      } else {\n             // solve using only the first endpoint as initial guess\n             ret = solve(min, yMin, max, yMax, min, yMin);\n             // either min or max is a root\n         }\n \n         return ret;\n","solution":"@@ -135,17 +135,31 @@ public double solve(double min, double max) throws MaxIterationsExceededExceptio\n         \n         // Verify bracketing\n         double sign = yMin * yMax;\n      if (sign > 0) {\n             // check if either value is close to a zero\n          if (Math.abs(yMin) <= functionValueAccuracy) {\n              setResult(min, 0);\n              ret = min;\n          } else if (Math.abs(yMax) <= functionValueAccuracy) {\n              setResult(max, 0);\n              ret = max;\n          } else {\n                 // neither value is close to zero and min and max do not bracket root.\n                 throw new IllegalArgumentException\n                 (\"Function values at endpoints do not have different signs.\" +\n                         \"  Endpoints: [\" + min + \",\" + max + \"]\" + \n                         \"  Values: [\" + yMin + \",\" + yMax + \"]\");\n          }\n      } else if (sign < 0){\n             // solve using only the first endpoint as initial guess\n             ret = solve(min, yMin, max, yMax, min, yMin);\n      } else {\n             // either min or max is a root\n          if (yMin == 0.0) {\n              ret = min;\n          } else {\n              ret = max;\n          }\n         }\n \n         return ret;\n","CodeWithNoComments":"\n         \n                  double sign = yMin * yMax;\n        if (sign >= 0) {\n                                               throw new IllegalArgumentException\n                 (\"Function values at endpoints do not have different signs.\" +\n                         \"  Endpoints: [\" + min + \",\" + max + \"]\" + \n                         \"  Values: [\" + yMin + \",\" + yMax + \"]\");\n        } else {\n                          ret = solve(min, yMin, max, yMax, min, yMin);\n                      }\n \n         return ret;\n","SolutionWithNoComments":"\n         \n                  double sign = yMin * yMax;\n        if (sign > 0) {\n                         if (Math.abs(yMin) <= functionValueAccuracy) {\n                setResult(min, 0);\n                ret = min;\n            } else if (Math.abs(yMax) <= functionValueAccuracy) {\n                setResult(max, 0);\n                ret = max;\n            } else {\n                                  throw new IllegalArgumentException\n                 (\"Function values at endpoints do not have different signs.\" +\n                         \"  Endpoints: [\" + min + \",\" + max + \"]\" + \n                         \"  Values: [\" + yMin + \",\" + yMax + \"]\");\n            }\n        } else if (sign < 0){\n                          ret = solve(min, yMin, max, yMax, min, yMin);\n        } else {\n                         if (yMin == 0.0) {\n                ret = min;\n            } else {\n                ret = max;\n            }\n         }\n \n         return ret;\n"},{"ids":326,"error":"java.lang.ArrayIndexOutOfBoundsException","source":"/src/java/org/apache/commons/math/estimation/AbstractEstimator.java","code":"@@ -163,7 +163,7 @@ public double getChiSquare(EstimationProblem problem) {\n \n         // compute transpose(J).J, avoiding building big intermediate matrices\n         final int rows = problem.getMeasurements().length;\n      final int cols = problem.getAllParameters().length;\n         final int max  = cols * rows;\n         double[][] jTj = new double[cols][cols];\n         for (int i = 0; i < cols; ++i) {\n@@ -199,12 +199,12 @@ public double getChiSquare(EstimationProblem problem) {\n     public double[] guessParametersErrors(EstimationProblem problem)\n       throws EstimationException {\n         int m = problem.getMeasurements().length;\n      int p = problem.getAllParameters().length;\n         if (m <= p) {\n             throw new EstimationException(\"no degrees of freedom ({0} measurements, {1} parameters)\",\n                                           new Object[] { new Integer(m), new Integer(p)});\n         }\n      double[] errors = new double[problem.getAllParameters().length];\n         final double c = Math.sqrt(getChiSquare(problem) / (m - p));\n         double[][] covar = getCovariances(problem);\n         for (int i = 0; i < errors.length; ++i) {\n","solution":"@@ -163,7 +163,7 @@ public double getChiSquare(EstimationProblem problem) {\n \n         // compute transpose(J).J, avoiding building big intermediate matrices\n         final int rows = problem.getMeasurements().length;\n      final int cols = problem.getUnboundParameters().length;\n         final int max  = cols * rows;\n         double[][] jTj = new double[cols][cols];\n         for (int i = 0; i < cols; ++i) {\n@@ -199,12 +199,12 @@ public double getChiSquare(EstimationProblem problem) {\n     public double[] guessParametersErrors(EstimationProblem problem)\n       throws EstimationException {\n         int m = problem.getMeasurements().length;\n      int p = problem.getUnboundParameters().length;\n         if (m <= p) {\n             throw new EstimationException(\"no degrees of freedom ({0} measurements, {1} parameters)\",\n                                           new Object[] { new Integer(m), new Integer(p)});\n         }\n      double[] errors = new double[problem.getUnboundParameters().length];\n         final double c = Math.sqrt(getChiSquare(problem) / (m - p));\n         double[][] covar = getCovariances(problem);\n         for (int i = 0; i < errors.length; ++i) {\n","CodeWithNoComments":"\n \n                  final int rows = problem.getMeasurements().length;\n        final int cols = problem.getAllParameters().length;\n         final int max  = cols * rows;\n         double[][] jTj = new double[cols][cols];\n         for (int i = 0; i < cols; ++i) {\n\n     public double[] guessParametersErrors(EstimationProblem problem)\n       throws EstimationException {\n         int m = problem.getMeasurements().length;\n        int p = problem.getAllParameters().length;\n         if (m <= p) {\n             throw new EstimationException(\"no degrees of freedom ({0} measurements, {1} parameters)\",\n                                           new Object[] { new Integer(m), new Integer(p)});\n         }\n        double[] errors = new double[problem.getAllParameters().length];\n         final double c = Math.sqrt(getChiSquare(problem) / (m - p));\n         double[][] covar = getCovariances(problem);\n         for (int i = 0; i < errors.length; ++i) {\n","SolutionWithNoComments":"\n \n                  final int rows = problem.getMeasurements().length;\n        final int cols = problem.getUnboundParameters().length;\n         final int max  = cols * rows;\n         double[][] jTj = new double[cols][cols];\n         for (int i = 0; i < cols; ++i) {\n\n     public double[] guessParametersErrors(EstimationProblem problem)\n       throws EstimationException {\n         int m = problem.getMeasurements().length;\n        int p = problem.getUnboundParameters().length;\n         if (m <= p) {\n             throw new EstimationException(\"no degrees of freedom ({0} measurements, {1} parameters)\",\n                                           new Object[] { new Integer(m), new Integer(p)});\n         }\n        double[] errors = new double[problem.getUnboundParameters().length];\n         final double c = Math.sqrt(getChiSquare(problem) / (m - p));\n         double[][] covar = getCovariances(problem);\n         for (int i = 0; i < errors.length; ++i) {\n"},{"ids":327,"error":"org.apache.commons.math.MaxIterationsExceededException","source":"/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java","code":"@@ -106,8 +106,18 @@ public void setStandardDeviation(double sd) {\n      * convergence exception is caught and 0 or 1 is returned.\n      */\n     public double cumulativeProbability(double x) throws MathException {\n             return 0.5 * (1.0 + Erf.erf((x - mean) /\n                     (standardDeviation * Math.sqrt(2.0))));\n     }\n     \n     /**\n","solution":"@@ -106,8 +106,18 @@ public void setStandardDeviation(double sd) {\n      * convergence exception is caught and 0 or 1 is returned.\n      */\n     public double cumulativeProbability(double x) throws MathException {\n      try {\n             return 0.5 * (1.0 + Erf.erf((x - mean) /\n                     (standardDeviation * Math.sqrt(2.0))));\n      } catch (MaxIterationsExceededException ex) {\n          if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38\n              return 0.0d;\n          } else if (x > (mean + 20 * standardDeviation)) {\n              return 1.0d;\n          } else {\n              throw ex;\n          }\n      }\n     }\n     \n     /**\n","CodeWithNoComments":"\n    \n     public double cumulativeProbability(double x) throws MathException {\n             return 0.5 * (1.0 + Erf.erf((x - mean) /\n                     (standardDeviation * Math.sqrt(2.0))));\n     }\n     \n","SolutionWithNoComments":"\n     public double cumulativeProbability(double x) throws MathException {\n        try {\n             return 0.5 * (1.0 + Erf.erf((x - mean) /\n                     (standardDeviation * Math.sqrt(2.0))));\n        } catch (MaxIterationsExceededException ex) {\n            if (x < (mean - 20 * standardDeviation)) {                 return 0.0d;\n            } else if (x > (mean + 20 * standardDeviation)) {\n                return 1.0d;\n            } else {\n                throw ex;\n            }\n        }\n     }\n     \n     "},{"ids":328,"error":"junit.framework.AssertionFailedError","source":"/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java","code":"@@ -71,11 +71,28 @@ public double chiSquare(double[] expected, long[] observed)\n             throw new IllegalArgumentException(\n                 \"observed counts must be non-negative and expected counts must be postive\");\n         }\n         double sumSq = 0.0d;\n         double dev = 0.0d;\n         for (int i = 0; i < observed.length; i++) {\n                 dev = ((double) observed[i] - expected[i]);\n                 sumSq += dev * dev / expected[i];\n         }\n         return sumSq;\n     }\n","solution":"@@ -71,11 +71,28 @@ public double chiSquare(double[] expected, long[] observed)\n             throw new IllegalArgumentException(\n                 \"observed counts must be non-negative and expected counts must be postive\");\n         }\n      double sumExpected = 0d;\n      double sumObserved = 0d;\n      for (int i = 0; i < observed.length; i++) {\n          sumExpected += expected[i];\n          sumObserved += observed[i];\n      }\n      double ratio = 1.0d;\n      boolean rescale = false;\n      if (Math.abs(sumExpected - sumObserved) > 10E-6) {\n          ratio = sumObserved / sumExpected;\n          rescale = true;\n      }\n         double sumSq = 0.0d;\n         double dev = 0.0d;\n         for (int i = 0; i < observed.length; i++) {\n          if (rescale) {\n              dev = ((double) observed[i] - ratio * expected[i]);\n              sumSq += dev * dev / (ratio * expected[i]);\n          } else {\n                 dev = ((double) observed[i] - expected[i]);\n                 sumSq += dev * dev / expected[i];\n          }\n         }\n         return sumSq;\n     }\n","CodeWithNoComments":"\n             throw new IllegalArgumentException(\n                 \"observed counts must be non-negative and expected counts must be postive\");\n         }\n         double sumSq = 0.0d;\n         double dev = 0.0d;\n         for (int i = 0; i < observed.length; i++) {\n                 dev = ((double) observed[i] - expected[i]);\n                 sumSq += dev * dev / expected[i];\n         }\n         return sumSq;\n     }\n","SolutionWithNoComments":"\n             throw new IllegalArgumentException(\n                 \"observed counts must be non-negative and expected counts must be postive\");\n         }\n        double sumExpected = 0d;\n        double sumObserved = 0d;\n        for (int i = 0; i < observed.length; i++) {\n            sumExpected += expected[i];\n            sumObserved += observed[i];\n        }\n        double ratio = 1.0d;\n        boolean rescale = false;\n        if (Math.abs(sumExpected - sumObserved) > 10E-6) {\n            ratio = sumObserved / sumExpected;\n            rescale = true;\n        }\n         double sumSq = 0.0d;\n         double dev = 0.0d;\n         for (int i = 0; i < observed.length; i++) {\n            if (rescale) {\n                dev = ((double) observed[i] - ratio * expected[i]);\n                sumSq += dev * dev / (ratio * expected[i]);\n            } else {\n                 dev = ((double) observed[i] - expected[i]);\n                 sumSq += dev * dev / expected[i];\n            }\n         }\n         return sumSq;\n     }\n"},{"ids":329,"error":"junit.framework.AssertionFailedError","source":"/src/java/org/apache/commons/math/util/MathUtils.java","code":"@@ -540,6 +540,11 @@ public static int gcd(final int p, final int q) {\n         int u = p;\n         int v = q;\n         if ((u == 0) || (v == 0)) {\n             return (Math.abs(u) + Math.abs(v));\n         }\n         // keep u and v negative, as negative integers range down to\n@@ -711,6 +716,9 @@ public static int lcm(int a, int b) {\n             return 0;\n         }\n         int lcm = Math.abs(mulAndCheck(a / gcd(a, b), b));\n         return lcm;\n     }\n \n","solution":"@@ -540,6 +540,11 @@ public static int gcd(final int p, final int q) {\n         int u = p;\n         int v = q;\n         if ((u == 0) || (v == 0)) {\n          if ((u == Integer.MIN_VALUE) || (v == Integer.MIN_VALUE)) {\n              throw MathRuntimeException.createArithmeticException(\n                      \"overflow: gcd({0}, {1}) is 2^31\",\n                      new Object[] { p, q });\n          }\n             return (Math.abs(u) + Math.abs(v));\n         }\n         // keep u and v negative, as negative integers range down to\n@@ -711,6 +716,9 @@ public static int lcm(int a, int b) {\n             return 0;\n         }\n         int lcm = Math.abs(mulAndCheck(a / gcd(a, b), b));\n      if (lcm == Integer.MIN_VALUE){\n          throw new ArithmeticException(\"overflow: lcm is 2^31\");\n      }\n         return lcm;\n     }\n \n","CodeWithNoComments":"\n         int u = p;\n         int v = q;\n         if ((u == 0) || (v == 0)) {\n             return (Math.abs(u) + Math.abs(v));\n         }\n         \n             return 0;\n         }\n         int lcm = Math.abs(mulAndCheck(a / gcd(a, b), b));\n         return lcm;\n     }\n \n","SolutionWithNoComments":"\n         int u = p;\n         int v = q;\n         if ((u == 0) || (v == 0)) {\n            if ((u == Integer.MIN_VALUE) || (v == Integer.MIN_VALUE)) {\n                throw MathRuntimeException.createArithmeticException(\n                        \"overflow: gcd({0}, {1}) is 2^31\",\n                        new Object[] { p, q });\n            }\n             return (Math.abs(u) + Math.abs(v));\n         }\n         \n             return 0;\n         }\n         int lcm = Math.abs(mulAndCheck(a / gcd(a, b), b));\n        if (lcm == Integer.MIN_VALUE){\n            throw new ArithmeticException(\"overflow: lcm is 2^31\");\n        }\n         return lcm;\n     }\n \n"},{"ids":330,"error":"junit.framework.AssertionFailedError","source":"/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java","code":"@@ -162,7 +162,11 @@ public Fraction parse(String source, ParsePosition pos) {\n             return null;\n         }\n         \n             // minus signs should be leading, invalid expression\n \n         // parse '/'\n         int startIndex = pos.getIndex();\n@@ -197,7 +201,11 @@ public Fraction parse(String source, ParsePosition pos) {\n             return null;\n         }\n         \n             // minus signs must be leading, invalid\n \n         int w = whole.intValue();\n         int n = num.intValue();\n","solution":"@@ -162,7 +162,11 @@ public Fraction parse(String source, ParsePosition pos) {\n             return null;\n         }\n         \n      if (num.intValue() < 0) {\n             // minus signs should be leading, invalid expression\n          pos.setIndex(initialIndex);\n          return null;\n      }\n \n         // parse '/'\n         int startIndex = pos.getIndex();\n@@ -197,7 +201,11 @@ public Fraction parse(String source, ParsePosition pos) {\n             return null;\n         }\n         \n      if (den.intValue() < 0) {\n             // minus signs must be leading, invalid\n          pos.setIndex(initialIndex);\n          return null;\n      }\n \n         int w = whole.intValue();\n         int n = num.intValue();\n","CodeWithNoComments":"\n             return null;\n         }\n         \n              \n                  int startIndex = pos.getIndex();\n\n             return null;\n         }\n         \n              \n         int w = whole.intValue();\n         int n = num.intValue();\n","SolutionWithNoComments":"\n             return null;\n         }\n         \n        if (num.intValue() < 0) {\n                         pos.setIndex(initialIndex);\n            return null;\n        }\n \n                  int startIndex = pos.getIndex();\n\n             return null;\n         }\n         \n        if (den.intValue() < 0) {\n                         pos.setIndex(initialIndex);\n            return null;\n        }\n \n         int w = whole.intValue();\n         int n = num.intValue();\n"},{"ids":331,"error":"junit.framework.AssertionFailedError","source":"/src/org/mockito/internal/invocation/InvocationMatcher.java","code":"@@ -124,10 +124,12 @@ public void captureArgumentsFrom(Invocation invocation) {\n                     ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));\n                 }\n             }\n          for (int position = indexOfVararg; position < matchers.size(); position++) {\n              Matcher m = matchers.get(position);\n                 if (m instanceof CapturesArguments) {\n                  ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position - indexOfVararg]);\n                 }\n             }\n         } else {\n@@ -140,6 +142,18 @@ public void captureArgumentsFrom(Invocation invocation) {\n         }\n     }\n \n \n     public static List<InvocationMatcher> createFrom(List<Invocation> invocations) {\n         LinkedList<InvocationMatcher> out = new LinkedList<InvocationMatcher>();\n","solution":"@@ -124,10 +124,12 @@ public void captureArgumentsFrom(Invocation invocation) {\n                     ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));\n                 }\n             }\n          for (Matcher m : uniqueMatcherSet(indexOfVararg)) {\n                 if (m instanceof CapturesArguments) {\n                  Object rawArgument = invocation.getRawArguments()[indexOfVararg];\n                  for (int i = 0; i < Array.getLength(rawArgument); i++) {\n                      ((CapturesArguments) m).captureFrom(Array.get(rawArgument, i));\n                  }\n                 }\n             }\n         } else {\n@@ -140,6 +142,18 @@ public void captureArgumentsFrom(Invocation invocation) {\n         }\n     }\n \n  private Set<Matcher> uniqueMatcherSet(int indexOfVararg) {\n      HashSet<Matcher> set = new HashSet<Matcher>();\n      for (int position = indexOfVararg; position < matchers.size(); position++) {\n          Matcher matcher = matchers.get(position);\n          if(matcher instanceof MatcherDecorator) {\n              set.add(((MatcherDecorator) matcher).getActualMatcher());\n          } else {\n              set.add(matcher);\n          }\n      }\n      return set;\n  }\n \n     public static List<InvocationMatcher> createFrom(List<Invocation> invocations) {\n         LinkedList<InvocationMatcher> out = new LinkedList<InvocationMatcher>();\n","CodeWithNoComments":"\n                     ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));\n                 }\n             }\n            for (int position = indexOfVararg; position < matchers.size(); position++) {\n                Matcher m = matchers.get(position);\n                 if (m instanceof CapturesArguments) {\n                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position - indexOfVararg]);\n                 }\n             }\n         } else {\n\n         }\n     }\n \n \n     public static List<InvocationMatcher> createFrom(List<Invocation> invocations) {\n         LinkedList<InvocationMatcher> out = new LinkedList<InvocationMatcher>();\n","SolutionWithNoComments":"\n                     ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));\n                 }\n             }\n            for (Matcher m : uniqueMatcherSet(indexOfVararg)) {\n                 if (m instanceof CapturesArguments) {\n                    Object rawArgument = invocation.getRawArguments()[indexOfVararg];\n                    for (int i = 0; i < Array.getLength(rawArgument); i++) {\n                        ((CapturesArguments) m).captureFrom(Array.get(rawArgument, i));\n                    }\n                 }\n             }\n         } else {\n\n         }\n     }\n \n    private Set<Matcher> uniqueMatcherSet(int indexOfVararg) {\n        HashSet<Matcher> set = new HashSet<Matcher>();\n        for (int position = indexOfVararg; position < matchers.size(); position++) {\n            Matcher matcher = matchers.get(position);\n            if(matcher instanceof MatcherDecorator) {\n                set.add(((MatcherDecorator) matcher).getActualMatcher());\n            } else {\n                set.add(matcher);\n            }\n        }\n        return set;\n    }\n \n     public static List<InvocationMatcher> createFrom(List<Invocation> invocations) {\n         LinkedList<InvocationMatcher> out = new LinkedList<InvocationMatcher>();\n"},{"ids":332,"error":"junit.framework.AssertionFailedError","source":"/src/org/mockito/internal/util/Timer.java","code":"@@ -1,5 +1,6 @@\n package org.mockito.internal.util;\n \n import org.mockito.exceptions.Reporter;\n \n public class Timer {\n \n@@ -7,6 +8,7 @@\n     private long startTime = -1;\n \n     public Timer(long durationMillis) {\n         this.durationMillis = durationMillis;\n     }\n \n@@ -25,4 +27,9 @@ public void start() {\n         startTime = System.currentTimeMillis();\n     }\n \n }\n","solution":"@@ -1,5 +1,6 @@\n package org.mockito.internal.util;\n \n import org.mockito.exceptions.Reporter;\n \n public class Timer {\n \n@@ -7,6 +8,7 @@\n     private long startTime = -1;\n \n     public Timer(long durationMillis) {\n      validateInput(durationMillis);\n         this.durationMillis = durationMillis;\n     }\n \n@@ -25,4 +27,9 @@ public void start() {\n         startTime = System.currentTimeMillis();\n     }\n \n  private void validateInput(long durationMillis) {\n      if (durationMillis < 0) {\n          new Reporter().cannotCreateTimerWithNegativeDurationTime(durationMillis);\n      }\n  }\n }\n","CodeWithNoComments":"\n package org.mockito.internal.util;\n \n import org.mockito.exceptions.Reporter;\n \n public class Timer {\n \n\n     private long startTime = -1;\n \n     public Timer(long durationMillis) {\n         this.durationMillis = durationMillis;\n     }\n \n\n         startTime = System.currentTimeMillis();\n     }\n \n }\n","SolutionWithNoComments":"\n package org.mockito.internal.util;\n \n import org.mockito.exceptions.Reporter;\n \n public class Timer {\n \n\n     private long startTime = -1;\n \n     public Timer(long durationMillis) {\n        validateInput(durationMillis);\n         this.durationMillis = durationMillis;\n     }\n \n\n         startTime = System.currentTimeMillis();\n     }\n \n    private void validateInput(long durationMillis) {\n        if (durationMillis < 0) {\n            new Reporter().cannotCreateTimerWithNegativeDurationTime(durationMillis);\n        }\n    }\n }\n"},{"ids":333,"error":"java.lang.UnsupportedOperationException","source":"/src/org/mockito/internal/invocation/InvocationMatcher.java","code":"@@ -120,7 +120,18 @@ public Location getLocation() {\n     public void captureArgumentsFrom(Invocation invocation) {\n         if (invocation.getMethod().isVarArgs()) {\n             int indexOfVararg = invocation.getRawArguments().length - 1;\n          throw new UnsupportedOperationException();\n \n         } else {\n             for (int position = 0; position < matchers.size(); position++) {\n","solution":"@@ -120,7 +120,18 @@ public Location getLocation() {\n     public void captureArgumentsFrom(Invocation invocation) {\n         if (invocation.getMethod().isVarArgs()) {\n             int indexOfVararg = invocation.getRawArguments().length - 1;\n          for (int position = 0; position < indexOfVararg; position++) {\n              Matcher m = matchers.get(position);\n              if (m instanceof CapturesArguments) {\n                  ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));\n              }\n          }\n          for (int position = indexOfVararg; position < matchers.size(); position++) {\n              Matcher m = matchers.get(position);\n              if (m instanceof CapturesArguments) {\n                  ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position - indexOfVararg]);\n              }\n          }\n \n         } else {\n             for (int position = 0; position < matchers.size(); position++) {\n","CodeWithNoComments":"\n     public void captureArgumentsFrom(Invocation invocation) {\n         if (invocation.getMethod().isVarArgs()) {\n             int indexOfVararg = invocation.getRawArguments().length - 1;\n            throw new UnsupportedOperationException();\n \n         } else {\n             for (int position = 0; position < matchers.size(); position++) {\n","SolutionWithNoComments":"\n     public void captureArgumentsFrom(Invocation invocation) {\n         if (invocation.getMethod().isVarArgs()) {\n             int indexOfVararg = invocation.getRawArguments().length - 1;\n            for (int position = 0; position < indexOfVararg; position++) {\n                Matcher m = matchers.get(position);\n                if (m instanceof CapturesArguments) {\n                    ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));\n                }\n            }\n            for (int position = indexOfVararg; position < matchers.size(); position++) {\n                Matcher m = matchers.get(position);\n                if (m instanceof CapturesArguments) {\n                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position - indexOfVararg]);\n                }\n            }\n \n         } else {\n             for (int position = 0; position < matchers.size(); position++) {\n"},{"ids":334,"error":"org.mockito.exceptions.base.MockitoException","source":"/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java","code":"@@ -376,6 +376,7 @@ private void readTypeVariables() {\n             for (Type type : typeVariable.getBounds()) {\n                 registerTypeVariablesOn(type);\n             }\n             registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n         }\n \n","solution":"@@ -376,6 +376,7 @@ private void readTypeVariables() {\n             for (Type type : typeVariable.getBounds()) {\n                 registerTypeVariablesOn(type);\n             }\n          registerTypeParametersOn(new TypeVariable[] { typeVariable });\n             registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n         }\n \n","CodeWithNoComments":"\n             for (Type type : typeVariable.getBounds()) {\n                 registerTypeVariablesOn(type);\n             }\n             registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n         }\n \n","SolutionWithNoComments":"\n             for (Type type : typeVariable.getBounds()) {\n                 registerTypeVariablesOn(type);\n             }\n            registerTypeParametersOn(new TypeVariable[] { typeVariable });\n             registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n         }\n \n"},{"ids":335,"error":"java.lang.Exception","source":"/src/org/mockito/exceptions/Reporter.java","code":"@@ -421,7 +421,7 @@ public void noMoreInteractionsWanted(Invocation undesired, List<VerificationAwar\n         throw new NoInteractionsWanted(join(\n                 \"No interactions wanted here:\",\n                 new LocationImpl(),\n              \"But found this interaction on mock '\" + undesired.getMock() + \"':\",\n                 undesired.getLocation(),\n                 scenario\n         ));\n@@ -431,7 +431,7 @@ public void noMoreInteractionsWantedInOrder(Invocation undesired) {\n         throw new VerificationInOrderFailure(join(\n                 \"No interactions wanted here:\",\n                 new LocationImpl(),\n              \"But found this interaction on mock '\" + undesired.getMock() + \"':\",\n                 undesired.getLocation()\n         ));\n     }\n@@ -674,6 +674,9 @@ public void cannotInjectDependency(Field field, Object matchingMock, Exception d\n     }\n \n     private String exceptionCauseMessageIfAvailable(Exception details) {\n         return details.getCause().getMessage();\n     }\n \n","solution":"@@ -421,7 +421,7 @@ public void noMoreInteractionsWanted(Invocation undesired, List<VerificationAwar\n         throw new NoInteractionsWanted(join(\n                 \"No interactions wanted here:\",\n                 new LocationImpl(),\n              \"But found this interaction on mock '\" + safelyGetMockName(undesired.getMock()) + \"':\",\n                 undesired.getLocation(),\n                 scenario\n         ));\n@@ -431,7 +431,7 @@ public void noMoreInteractionsWantedInOrder(Invocation undesired) {\n         throw new VerificationInOrderFailure(join(\n                 \"No interactions wanted here:\",\n                 new LocationImpl(),\n              \"But found this interaction on mock '\" + safelyGetMockName(undesired.getMock()) + \"':\",\n                 undesired.getLocation()\n         ));\n     }\n@@ -674,6 +674,9 @@ public void cannotInjectDependency(Field field, Object matchingMock, Exception d\n     }\n \n     private String exceptionCauseMessageIfAvailable(Exception details) {\n      if (details.getCause() == null) {\n          return details.getMessage();\n      }\n         return details.getCause().getMessage();\n     }\n \n","CodeWithNoComments":"\n         throw new NoInteractionsWanted(join(\n                 \"No interactions wanted here:\",\n                 new LocationImpl(),\n                \"But found this interaction on mock '\" + undesired.getMock() + \"':\",\n                 undesired.getLocation(),\n                 scenario\n         ));\n\n         throw new VerificationInOrderFailure(join(\n                 \"No interactions wanted here:\",\n                 new LocationImpl(),\n                \"But found this interaction on mock '\" + undesired.getMock() + \"':\",\n                 undesired.getLocation()\n         ));\n     }\n\n     }\n \n     private String exceptionCauseMessageIfAvailable(Exception details) {\n         return details.getCause().getMessage();\n     }\n \n","SolutionWithNoComments":"\n         throw new NoInteractionsWanted(join(\n                 \"No interactions wanted here:\",\n                 new LocationImpl(),\n                \"But found this interaction on mock '\" + safelyGetMockName(undesired.getMock()) + \"':\",\n                 undesired.getLocation(),\n                 scenario\n         ));\n\n         throw new VerificationInOrderFailure(join(\n                 \"No interactions wanted here:\",\n                 new LocationImpl(),\n                \"But found this interaction on mock '\" + safelyGetMockName(undesired.getMock()) + \"':\",\n                 undesired.getLocation()\n         ));\n     }\n\n     }\n \n     private String exceptionCauseMessageIfAvailable(Exception details) {\n        if (details.getCause() == null) {\n            return details.getMessage();\n        }\n         return details.getCause().getMessage();\n     }\n \n"},{"ids":336,"error":"junit.framework.AssertionFailedError","source":"/src/org/mockito/internal/creation/DelegatingMethod.java","code":"@@ -52,11 +52,19 @@ public boolean isAbstract() {\n      */\n     @Override\n     public boolean equals(Object o) {\n             return method.equals(o);\n     }\n \n     @Override\n     public int hashCode() {\n      return 1;\n     }\n }\n\\ No newline at end of file\n","solution":"@@ -52,11 +52,19 @@ public boolean isAbstract() {\n      */\n     @Override\n     public boolean equals(Object o) {\n      if (this == o) {\n          return true;\n      }\n      if (o instanceof DelegatingMethod) {\n          DelegatingMethod that = (DelegatingMethod) o;\n          return method.equals(that.method);\n      } else {\n             return method.equals(o);\n      }\n     }\n \n     @Override\n     public int hashCode() {\n      return method.hashCode();\n     }\n }\n\\ No newline at end of file\n","CodeWithNoComments":"\n      \n     @Override\n     public boolean equals(Object o) {\n             return method.equals(o);\n     }\n \n     @Override\n     public int hashCode() {\n        return 1;\n     }\n }\n\\ No newline at end of file\n","SolutionWithNoComments":"\n      \n     @Override\n     public boolean equals(Object o) {\n        if (this == o) {\n            return true;\n        }\n        if (o instanceof DelegatingMethod) {\n            DelegatingMethod that = (DelegatingMethod) o;\n            return method.equals(that.method);\n        } else {\n             return method.equals(o);\n        }\n     }\n \n     @Override\n     public int hashCode() {\n        return method.hashCode();\n     }\n }\n\\ No newline at end of file\n"},{"ids":337,"error":"org.mockito.exceptions.base.MockitoException","source":"/src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java","code":"@@ -14,6 +14,7 @@\n import org.mockito.internal.util.MockUtil;\n import org.mockito.internal.util.reflection.GenericMetadataSupport;\n import org.mockito.invocation.InvocationOnMock;\n import org.mockito.mock.MockCreationSettings;\n import org.mockito.stubbing.Answer;\n \n import java.io.IOException;\n@@ -68,7 +69,7 @@ private Object deepStub(InvocationOnMock invocation, GenericMetadataSupport retu\n \n         // record deep stub answer\n         return recordDeepStubAnswer(\n              newDeepStubMock(returnTypeGenericMetadata),\n                 container\n         );\n     }\n@@ -84,22 +85,26 @@ private Object deepStub(InvocationOnMock invocation, GenericMetadataSupport retu\n      * @param parentMock The parent of the current deep stub mock.\n      * @return The mock\n      */\n  private Object newDeepStubMock(GenericMetadataSupport returnTypeGenericMetadata) {\n         return mockitoCore().mock(\n                 returnTypeGenericMetadata.rawType(),\n              withSettingsUsing(returnTypeGenericMetadata)\n         );\n     }\n \n  private MockSettings withSettingsUsing(GenericMetadataSupport returnTypeGenericMetadata) {\n         MockSettings mockSettings = returnTypeGenericMetadata.hasRawExtraInterfaces() ?\n                 withSettings().extraInterfaces(returnTypeGenericMetadata.rawExtraInterfaces())\n                 : withSettings();\n \n      return mockSettings.serializable()\n                 .defaultAnswer(returnsDeepStubsAnswerUsing(returnTypeGenericMetadata));\n     }\n \n \n     private ReturnsDeepStubs returnsDeepStubsAnswerUsing(final GenericMetadataSupport returnTypeGenericMetadata) {\n         return new ReturnsDeepStubsSerializationFallback(returnTypeGenericMetadata);\n","solution":"@@ -14,6 +14,7 @@\n import org.mockito.internal.util.MockUtil;\n import org.mockito.internal.util.reflection.GenericMetadataSupport;\n import org.mockito.invocation.InvocationOnMock;\n import org.mockito.mock.MockCreationSettings;\n import org.mockito.stubbing.Answer;\n \n import java.io.IOException;\n@@ -68,7 +69,7 @@ private Object deepStub(InvocationOnMock invocation, GenericMetadataSupport retu\n \n         // record deep stub answer\n         return recordDeepStubAnswer(\n              newDeepStubMock(returnTypeGenericMetadata, invocation.getMock()),\n                 container\n         );\n     }\n@@ -84,22 +85,26 @@ private Object deepStub(InvocationOnMock invocation, GenericMetadataSupport retu\n      * @param parentMock The parent of the current deep stub mock.\n      * @return The mock\n      */\n  private Object newDeepStubMock(GenericMetadataSupport returnTypeGenericMetadata, Object parentMock) {\n      MockCreationSettings parentMockSettings = new MockUtil().getMockSettings(parentMock);\n         return mockitoCore().mock(\n                 returnTypeGenericMetadata.rawType(),\n              withSettingsUsing(returnTypeGenericMetadata, parentMockSettings)\n         );\n     }\n \n  private MockSettings withSettingsUsing(GenericMetadataSupport returnTypeGenericMetadata, MockCreationSettings parentMockSettings) {\n         MockSettings mockSettings = returnTypeGenericMetadata.hasRawExtraInterfaces() ?\n                 withSettings().extraInterfaces(returnTypeGenericMetadata.rawExtraInterfaces())\n                 : withSettings();\n \n      return propagateSerializationSettings(mockSettings, parentMockSettings)\n                 .defaultAnswer(returnsDeepStubsAnswerUsing(returnTypeGenericMetadata));\n     }\n \n  private MockSettings propagateSerializationSettings(MockSettings mockSettings, MockCreationSettings parentMockSettings) {\n      return mockSettings.serializable(parentMockSettings.getSerializableMode());\n  }\n \n     private ReturnsDeepStubs returnsDeepStubsAnswerUsing(final GenericMetadataSupport returnTypeGenericMetadata) {\n         return new ReturnsDeepStubsSerializationFallback(returnTypeGenericMetadata);\n","CodeWithNoComments":"\n import org.mockito.internal.util.MockUtil;\n import org.mockito.internal.util.reflection.GenericMetadataSupport;\n import org.mockito.invocation.InvocationOnMock;\n import org.mockito.mock.MockCreationSettings;\n import org.mockito.stubbing.Answer;\n \n import java.io.IOException;\n\n \n                  return recordDeepStubAnswer(\n                newDeepStubMock(returnTypeGenericMetadata),\n                 container\n         );\n     }\n\n  \n    private Object newDeepStubMock(GenericMetadataSupport returnTypeGenericMetadata) {\n         return mockitoCore().mock(\n                 returnTypeGenericMetadata.rawType(),\n                withSettingsUsing(returnTypeGenericMetadata)\n         );\n     }\n \n    private MockSettings withSettingsUsing(GenericMetadataSupport returnTypeGenericMetadata) {\n         MockSettings mockSettings = returnTypeGenericMetadata.hasRawExtraInterfaces() ?\n                 withSettings().extraInterfaces(returnTypeGenericMetadata.rawExtraInterfaces())\n                 : withSettings();\n \n        return mockSettings.serializable()\n                 .defaultAnswer(returnsDeepStubsAnswerUsing(returnTypeGenericMetadata));\n     }\n \n \n     private ReturnsDeepStubs returnsDeepStubsAnswerUsing(final GenericMetadataSupport returnTypeGenericMetadata) {\n         return new ReturnsDeepStubsSerializationFallback(returnTypeGenericMetadata);\n","SolutionWithNoComments":"\n import org.mockito.internal.util.MockUtil;\n import org.mockito.internal.util.reflection.GenericMetadataSupport;\n import org.mockito.invocation.InvocationOnMock;\n import org.mockito.mock.MockCreationSettings;\n import org.mockito.stubbing.Answer;\n \n import java.io.IOException;\n\n \n                  return recordDeepStubAnswer(\n                newDeepStubMock(returnTypeGenericMetadata, invocation.getMock()),\n                 container\n         );\n     }\n\n   \n    private Object newDeepStubMock(GenericMetadataSupport returnTypeGenericMetadata, Object parentMock) {\n        MockCreationSettings parentMockSettings = new MockUtil().getMockSettings(parentMock);\n         return mockitoCore().mock(\n                 returnTypeGenericMetadata.rawType(),\n                withSettingsUsing(returnTypeGenericMetadata, parentMockSettings)\n         );\n     }\n \n    private MockSettings withSettingsUsing(GenericMetadataSupport returnTypeGenericMetadata, MockCreationSettings parentMockSettings) {\n         MockSettings mockSettings = returnTypeGenericMetadata.hasRawExtraInterfaces() ?\n                 withSettings().extraInterfaces(returnTypeGenericMetadata.rawExtraInterfaces())\n                 : withSettings();\n \n        return propagateSerializationSettings(mockSettings, parentMockSettings)\n                 .defaultAnswer(returnsDeepStubsAnswerUsing(returnTypeGenericMetadata));\n     }\n \n    private MockSettings propagateSerializationSettings(MockSettings mockSettings, MockCreationSettings parentMockSettings) {\n        return mockSettings.serializable(parentMockSettings.getSerializableMode());\n    }\n \n     private ReturnsDeepStubs returnsDeepStubsAnswerUsing(final GenericMetadataSupport returnTypeGenericMetadata) {\n         return new ReturnsDeepStubsSerializationFallback(returnTypeGenericMetadata);\n"},{"ids":338,"error":"junit.framework.AssertionFailedError","source":"/src/org/mockito/internal/verification/VerificationOverTimeImpl.java","code":"@@ -88,7 +88,7 @@ public void verify(VerificationData data) {\n             } catch (MockitoAssertionError e) {\n                 error = handleVerifyException(e);\n             }\n          catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {\n                 error = handleVerifyException(e);\n             }\n         }\n","solution":"@@ -88,7 +88,7 @@ public void verify(VerificationData data) {\n             } catch (MockitoAssertionError e) {\n                 error = handleVerifyException(e);\n             }\n          catch (AssertionError e) {\n                 error = handleVerifyException(e);\n             }\n         }\n","CodeWithNoComments":"\n             } catch (MockitoAssertionError e) {\n                 error = handleVerifyException(e);\n             }\n            catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {\n                 error = handleVerifyException(e);\n             }\n         }\n","SolutionWithNoComments":"\n             } catch (MockitoAssertionError e) {\n                 error = handleVerifyException(e);\n             }\n            catch (AssertionError e) {\n                 error = handleVerifyException(e);\n             }\n         }\n"},{"ids":339,"error":"junit.framework.ComparisonFailure","source":"/src/org/mockito/Matchers.java","code":"@@ -119,7 +119,7 @@\n      * @return <code>false<\/code>.\n      */\n     public static boolean anyBoolean() {\n      return reportMatcher(Any.ANY).returnFalse();\n     }\n \n     /**\n@@ -134,7 +134,7 @@ public static boolean anyBoolean() {\n      * @return <code>0<\/code>.\n      */\n     public static byte anyByte() {\n      return reportMatcher(Any.ANY).returnZero();\n     }\n \n     /**\n@@ -149,7 +149,7 @@ public static byte anyByte() {\n      * @return <code>0<\/code>.\n      */\n     public static char anyChar() {\n      return reportMatcher(Any.ANY).returnChar();\n     }\n \n     /**\n@@ -164,7 +164,7 @@ public static char anyChar() {\n      * @return <code>0<\/code>.\n      */\n     public static int anyInt() {\n      return reportMatcher(Any.ANY).returnZero();\n     }\n \n     /**\n@@ -179,7 +179,7 @@ public static int anyInt() {\n      * @return <code>0<\/code>.\n      */\n     public static long anyLong() {\n      return reportMatcher(Any.ANY).returnZero();\n     }\n \n     /**\n@@ -194,7 +194,7 @@ public static long anyLong() {\n      * @return <code>0<\/code>.\n      */\n     public static float anyFloat() {\n      return reportMatcher(Any.ANY).returnZero();\n     }\n \n     /**\n@@ -209,7 +209,7 @@ public static float anyFloat() {\n      * @return <code>0<\/code>.\n      */\n     public static double anyDouble() {\n      return reportMatcher(Any.ANY).returnZero();\n     }\n \n     /**\n@@ -224,7 +224,7 @@ public static double anyDouble() {\n      * @return <code>0<\/code>.\n      */\n     public static short anyShort() {\n      return reportMatcher(Any.ANY).returnZero();\n     }\n \n     /**\n@@ -241,7 +241,7 @@ public static short anyShort() {\n      * @return <code>null<\/code>.\n      */\n     public static <T> T anyObject() {\n      return (T) reportMatcher(Any.ANY).returnNull();\n     }\n \n     /**\n@@ -289,7 +289,7 @@ public static short anyShort() {\n      * @return <code>null<\/code>.\n      */\n     public static <T> T any(Class<T> clazz) {\n      return (T) reportMatcher(Any.ANY).returnFor(clazz);\n     }\n     \n     /**\n@@ -306,7 +306,7 @@ public static short anyShort() {\n      * @return <code>null<\/code>.\n      */\n     public static <T> T any() {\n      return (T) anyObject();\n     }\n \n     /**\n@@ -321,7 +321,7 @@ public static short anyShort() {\n      * @return empty String (\"\")\n      */\n     public static String anyString() {\n      return reportMatcher(Any.ANY).returnString();\n     }\n     \n     /**\n@@ -336,7 +336,7 @@ public static String anyString() {\n      * @return empty List.\n      */\n     public static List anyList() {\n      return reportMatcher(Any.ANY).returnList();\n     }    \n     \n     /**\n@@ -355,7 +355,7 @@ public static List anyList() {\n      * @return empty List.\n      */\n     public static <T> List<T> anyListOf(Class<T> clazz) {\n      return (List) reportMatcher(Any.ANY).returnList();\n     }    \n     \n     /**\n@@ -370,7 +370,7 @@ public static List anyList() {\n      * @return empty Set\n      */\n     public static Set anySet() {\n      return reportMatcher(Any.ANY).returnSet();\n     }\n     \n     /**\n@@ -389,7 +389,7 @@ public static Set anySet() {\n      * @return empty Set\n      */\n     public static <T> Set<T> anySetOf(Class<T> clazz) {\n      return (Set) reportMatcher(Any.ANY).returnSet();\n     }\n \n     /**\n@@ -404,7 +404,7 @@ public static Set anySet() {\n      * @return empty Map.\n      */\n     public static Map anyMap() {\n      return reportMatcher(Any.ANY).returnMap();\n     }\n \n     /**\n@@ -424,7 +424,7 @@ public static Map anyMap() {\n      * @return empty Map.\n      */\n     public static <K, V>  Map<K, V> anyMapOf(Class<K> keyClazz, Class<V> valueClazz) {\n      return reportMatcher(Any.ANY).returnMap();\n     }\n     \n     /**\n@@ -439,7 +439,7 @@ public static Map anyMap() {\n      * @return empty Collection.\n      */\n     public static Collection anyCollection() {\n      return reportMatcher(Any.ANY).returnList();\n     }    \n     \n     /**\n@@ -458,7 +458,7 @@ public static Collection anyCollection() {\n      * @return empty Collection.\n      */\n     public static <T> Collection<T> anyCollectionOf(Class<T> clazz) {\n      return (Collection) reportMatcher(Any.ANY).returnList();\n     }    \n \n     /**\n","solution":"@@ -119,7 +119,7 @@\n      * @return <code>false<\/code>.\n      */\n     public static boolean anyBoolean() {\n      return reportMatcher(new InstanceOf(Boolean.class)).returnFalse();\n     }\n \n     /**\n@@ -134,7 +134,7 @@ public static boolean anyBoolean() {\n      * @return <code>0<\/code>.\n      */\n     public static byte anyByte() {\n      return reportMatcher(new InstanceOf(Byte.class)).returnZero();\n     }\n \n     /**\n@@ -149,7 +149,7 @@ public static byte anyByte() {\n      * @return <code>0<\/code>.\n      */\n     public static char anyChar() {\n      return reportMatcher(new InstanceOf(Character.class)).returnChar();\n     }\n \n     /**\n@@ -164,7 +164,7 @@ public static char anyChar() {\n      * @return <code>0<\/code>.\n      */\n     public static int anyInt() {\n      return reportMatcher(new InstanceOf(Integer.class)).returnZero();\n     }\n \n     /**\n@@ -179,7 +179,7 @@ public static int anyInt() {\n      * @return <code>0<\/code>.\n      */\n     public static long anyLong() {\n      return reportMatcher(new InstanceOf(Long.class)).returnZero();\n     }\n \n     /**\n@@ -194,7 +194,7 @@ public static long anyLong() {\n      * @return <code>0<\/code>.\n      */\n     public static float anyFloat() {\n      return reportMatcher(new InstanceOf(Float.class)).returnZero();\n     }\n \n     /**\n@@ -209,7 +209,7 @@ public static float anyFloat() {\n      * @return <code>0<\/code>.\n      */\n     public static double anyDouble() {\n      return reportMatcher(new InstanceOf(Double.class)).returnZero();\n     }\n \n     /**\n@@ -224,7 +224,7 @@ public static double anyDouble() {\n      * @return <code>0<\/code>.\n      */\n     public static short anyShort() {\n      return reportMatcher(new InstanceOf(Short.class)).returnZero();\n     }\n \n     /**\n@@ -241,7 +241,7 @@ public static short anyShort() {\n      * @return <code>null<\/code>.\n      */\n     public static <T> T anyObject() {\n      return (T) reportMatcher(new InstanceOf(Object.class)).returnNull();\n     }\n \n     /**\n@@ -289,7 +289,7 @@ public static short anyShort() {\n      * @return <code>null<\/code>.\n      */\n     public static <T> T any(Class<T> clazz) {\n      return (T) reportMatcher(new InstanceOf(clazz)).returnFor(clazz);\n     }\n     \n     /**\n@@ -306,7 +306,7 @@ public static short anyShort() {\n      * @return <code>null<\/code>.\n      */\n     public static <T> T any() {\n      return (T) reportMatcher(Any.ANY).returnNull();\n     }\n \n     /**\n@@ -321,7 +321,7 @@ public static short anyShort() {\n      * @return empty String (\"\")\n      */\n     public static String anyString() {\n      return reportMatcher(new InstanceOf(String.class)).returnString();\n     }\n     \n     /**\n@@ -336,7 +336,7 @@ public static String anyString() {\n      * @return empty List.\n      */\n     public static List anyList() {\n      return reportMatcher(new InstanceOf(List.class)).returnList();\n     }    \n     \n     /**\n@@ -355,7 +355,7 @@ public static List anyList() {\n      * @return empty List.\n      */\n     public static <T> List<T> anyListOf(Class<T> clazz) {\n      return anyList();\n     }    \n     \n     /**\n@@ -370,7 +370,7 @@ public static List anyList() {\n      * @return empty Set\n      */\n     public static Set anySet() {\n      return reportMatcher(new InstanceOf(Set.class)).returnSet();\n     }\n     \n     /**\n@@ -389,7 +389,7 @@ public static Set anySet() {\n      * @return empty Set\n      */\n     public static <T> Set<T> anySetOf(Class<T> clazz) {\n      return anySet();\n     }\n \n     /**\n@@ -404,7 +404,7 @@ public static Set anySet() {\n      * @return empty Map.\n      */\n     public static Map anyMap() {\n      return reportMatcher(new InstanceOf(Map.class)).returnMap();\n     }\n \n     /**\n@@ -424,7 +424,7 @@ public static Map anyMap() {\n      * @return empty Map.\n      */\n     public static <K, V>  Map<K, V> anyMapOf(Class<K> keyClazz, Class<V> valueClazz) {\n      return anyMap();\n     }\n     \n     /**\n@@ -439,7 +439,7 @@ public static Map anyMap() {\n      * @return empty Collection.\n      */\n     public static Collection anyCollection() {\n      return reportMatcher(new InstanceOf(Collection.class)).returnList();\n     }    \n     \n     /**\n@@ -458,7 +458,7 @@ public static Collection anyCollection() {\n      * @return empty Collection.\n      */\n     public static <T> Collection<T> anyCollectionOf(Class<T> clazz) {\n      return anyCollection();\n     }    \n \n     /**\n","CodeWithNoComments":"\n   \n     public static boolean anyBoolean() {\n        return reportMatcher(Any.ANY).returnFalse();\n     }\n \n     \n   \n     public static byte anyByte() {\n        return reportMatcher(Any.ANY).returnZero();\n     }\n \n     \n   \n     public static char anyChar() {\n        return reportMatcher(Any.ANY).returnChar();\n     }\n \n     \n    \n     public static int anyInt() {\n        return reportMatcher(Any.ANY).returnZero();\n     }\n \n     \n  \n     public static long anyLong() {\n        return reportMatcher(Any.ANY).returnZero();\n     }\n \n     \n  \n     public static float anyFloat() {\n        return reportMatcher(Any.ANY).returnZero();\n     }\n \n     \n   \n     public static double anyDouble() {\n        return reportMatcher(Any.ANY).returnZero();\n     }\n \n     \n   \n     public static short anyShort() {\n        return reportMatcher(Any.ANY).returnZero();\n     }\n \n     \n   \n     public static <T> T anyObject() {\n        return (T) reportMatcher(Any.ANY).returnNull();\n     }\n \n     \n   \n     public static <T> T any(Class<T> clazz) {\n        return (T) reportMatcher(Any.ANY).returnFor(clazz);\n     }\n     \n     \n  \n     public static <T> T any() {\n        return (T) anyObject();\n     }\n \n     \n  \n     public static String anyString() {\n        return reportMatcher(Any.ANY).returnString();\n     }\n     \n     \n   \n     public static List anyList() {\n        return reportMatcher(Any.ANY).returnList();\n     }    \n     \n     \n   \n     public static <T> List<T> anyListOf(Class<T> clazz) {\n        return (List) reportMatcher(Any.ANY).returnList();\n     }    \n     \n     \n  \n     public static Set anySet() {\n        return reportMatcher(Any.ANY).returnSet();\n     }\n     \n     \n    \n     public static <T> Set<T> anySetOf(Class<T> clazz) {\n        return (Set) reportMatcher(Any.ANY).returnSet();\n     }\n \n     \n   \n     public static Map anyMap() {\n        return reportMatcher(Any.ANY).returnMap();\n     }\n \n     \n    \n     public static <K, V>  Map<K, V> anyMapOf(Class<K> keyClazz, Class<V> valueClazz) {\n        return reportMatcher(Any.ANY).returnMap();\n     }\n     \n     \n   \n     public static Collection anyCollection() {\n        return reportMatcher(Any.ANY).returnList();\n     }    \n     \n     \n  \n     public static <T> Collection<T> anyCollectionOf(Class<T> clazz) {\n        return (Collection) reportMatcher(Any.ANY).returnList();\n     }    \n \n     ","SolutionWithNoComments":"\n  \n     public static boolean anyBoolean() {\n        return reportMatcher(new InstanceOf(Boolean.class)).returnFalse();\n     }\n \n     \n  \n     public static byte anyByte() {\n        return reportMatcher(new InstanceOf(Byte.class)).returnZero();\n     }\n \n     \n  \n     public static char anyChar() {\n        return reportMatcher(new InstanceOf(Character.class)).returnChar();\n     }\n \n     \n  \n     public static int anyInt() {\n        return reportMatcher(new InstanceOf(Integer.class)).returnZero();\n     }\n \n     \n   \n     public static long anyLong() {\n        return reportMatcher(new InstanceOf(Long.class)).returnZero();\n     }\n \n     \n  \n     public static float anyFloat() {\n        return reportMatcher(new InstanceOf(Float.class)).returnZero();\n     }\n \n     \n   \n     public static double anyDouble() {\n        return reportMatcher(new InstanceOf(Double.class)).returnZero();\n     }\n \n     \n   \n     public static short anyShort() {\n        return reportMatcher(new InstanceOf(Short.class)).returnZero();\n     }\n \n     \n   \n     public static <T> T anyObject() {\n        return (T) reportMatcher(new InstanceOf(Object.class)).returnNull();\n     }\n \n     \n   \n     public static <T> T any(Class<T> clazz) {\n        return (T) reportMatcher(new InstanceOf(clazz)).returnFor(clazz);\n     }\n     \n     \n   \n     public static <T> T any() {\n        return (T) reportMatcher(Any.ANY).returnNull();\n     }\n \n     \n    \n     public static String anyString() {\n        return reportMatcher(new InstanceOf(String.class)).returnString();\n     }\n     \n     \n   \n     public static List anyList() {\n        return reportMatcher(new InstanceOf(List.class)).returnList();\n     }    \n     \n     \n  \n     public static <T> List<T> anyListOf(Class<T> clazz) {\n        return anyList();\n     }    \n     \n     \n     \n     public static Set anySet() {\n        return reportMatcher(new InstanceOf(Set.class)).returnSet();\n     }\n     \n     \n   \n     public static <T> Set<T> anySetOf(Class<T> clazz) {\n        return anySet();\n     }\n \n     \n   \n     public static Map anyMap() {\n        return reportMatcher(new InstanceOf(Map.class)).returnMap();\n     }\n \n     \n    \n     public static <K, V>  Map<K, V> anyMapOf(Class<K> keyClazz, Class<V> valueClazz) {\n        return anyMap();\n     }\n     \n     \n   \n     public static Collection anyCollection() {\n        return reportMatcher(new InstanceOf(Collection.class)).returnList();\n     }    \n     \n     \n     \n     public static <T> Collection<T> anyCollectionOf(Class<T> clazz) {\n        return anyCollection();\n     }    \n \n     "},{"ids":340,"error":"org.mockito.exceptions.base.MockitoException","source":"/src/org/mockito/internal/stubbing/answers/CallsRealMethods.java","code":"@@ -5,7 +5,9 @@\n package org.mockito.internal.stubbing.answers;\n \n import java.io.Serializable;\n import java.lang.reflect.Modifier;\n \n import org.mockito.internal.stubbing.defaultanswers.GloballyConfiguredAnswer;\n import org.mockito.invocation.InvocationOnMock;\n import org.mockito.stubbing.Answer;\n \n@@ -33,6 +35,9 @@\n     private static final long serialVersionUID = 9057165148930624087L;\n \n     public Object answer(InvocationOnMock invocation) throws Throwable {\n         return invocation.callRealMethod();\n     }\n }\n\\ No newline at end of file\n","solution":"@@ -5,7 +5,9 @@\n package org.mockito.internal.stubbing.answers;\n \n import java.io.Serializable;\n import java.lang.reflect.Modifier;\n \n import org.mockito.internal.stubbing.defaultanswers.GloballyConfiguredAnswer;\n import org.mockito.invocation.InvocationOnMock;\n import org.mockito.stubbing.Answer;\n \n@@ -33,6 +35,9 @@\n     private static final long serialVersionUID = 9057165148930624087L;\n \n     public Object answer(InvocationOnMock invocation) throws Throwable {\n  \tif (Modifier.isAbstract(invocation.getMethod().getModifiers())) {\n  \t\treturn new GloballyConfiguredAnswer().answer(invocation);\n  \t}\n         return invocation.callRealMethod();\n     }\n }\n\\ No newline at end of file\n","CodeWithNoComments":"\n package org.mockito.internal.stubbing.answers;\n \n import java.io.Serializable;\n import java.lang.reflect.Modifier;\n \n import org.mockito.internal.stubbing.defaultanswers.GloballyConfiguredAnswer;\n import org.mockito.invocation.InvocationOnMock;\n import org.mockito.stubbing.Answer;\n \n\n     private static final long serialVersionUID = 9057165148930624087L;\n \n     public Object answer(InvocationOnMock invocation) throws Throwable {\n         return invocation.callRealMethod();\n     }\n }\n\\ No newline at end of file\n","SolutionWithNoComments":"\n package org.mockito.internal.stubbing.answers;\n \n import java.io.Serializable;\n import java.lang.reflect.Modifier;\n \n import org.mockito.internal.stubbing.defaultanswers.GloballyConfiguredAnswer;\n import org.mockito.invocation.InvocationOnMock;\n import org.mockito.stubbing.Answer;\n \n\n     private static final long serialVersionUID = 9057165148930624087L;\n \n     public Object answer(InvocationOnMock invocation) throws Throwable {\n    \tif (Modifier.isAbstract(invocation.getMethod().getModifiers())) {\n    \t\treturn new GloballyConfiguredAnswer().answer(invocation);\n    \t}\n         return invocation.callRealMethod();\n     }\n }\n\\ No newline at end of file\n"},{"ids":341,"error":"java.lang.StackOverflowError","source":"/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java","code":"@@ -76,7 +76,7 @@ protected void registerTypeVariablesOn(Type classType) {\n \n             if (actualTypeArgument instanceof WildcardType) {\n                 contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\n          } else {\n                 contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n             }\n             // logger.log(\"For '\" + parameterizedType + \"' found type variable : { '\" + typeParameter + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' : '\" + actualTypeArgument + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' }\");\n","solution":"@@ -76,7 +76,7 @@ protected void registerTypeVariablesOn(Type classType) {\n \n             if (actualTypeArgument instanceof WildcardType) {\n                 contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\n          } else if (typeParameter != actualTypeArgument) {\n                 contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n             }\n             // logger.log(\"For '\" + parameterizedType + \"' found type variable : { '\" + typeParameter + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' : '\" + actualTypeArgument + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' }\");\n","CodeWithNoComments":"\n \n             if (actualTypeArgument instanceof WildcardType) {\n                 contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\n            } else {\n                 contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n             }\n             ","SolutionWithNoComments":"\n \n             if (actualTypeArgument instanceof WildcardType) {\n                 contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\n            } else if (typeParameter != actualTypeArgument) {\n                 contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n             }\n             "},{"ids":342,"error":"org.mockito.exceptions.misusing.MissingMethodInvocationException","source":"/src/org/mockito/Mockito.java","code":"@@ -1,921 +1,921 @@\n /*\n  * Copyright (c) 2007 Mockito contributors\n  * This program is made available under the terms of the MIT License.\n  */\n package org.mockito;\n \n import org.mockito.internal.MockitoCore;\n import org.mockito.internal.creation.MockSettingsImpl;\n import org.mockito.internal.debugging.MockitoDebuggerImpl;\n import org.mockito.internal.stubbing.answers.*;\n import org.mockito.internal.stubbing.defaultanswers.*;\n import org.mockito.internal.verification.VerificationModeFactory;\n import org.mockito.internal.verification.api.VerificationMode;\n import org.mockito.runners.MockitoJUnitRunner;\n import org.mockito.stubbing.*;\n \n /**\n  * <p align=\"left\"><img src=\"logo.jpg\"/><\/p>\n  * Mockito library enables mocks creation, verification and stubbing.\n  * <p>\n  * This javadoc content is also available on the <a href=\"http://mockito.org\">http://mockito.org<\/a> web page. \n  * All documentation is kept in javadocs because it guarantees consistency between what's on the web and what's in the source code.\n  * Also, it makes possible to access documentation straight from the IDE even if you work offline.   \n  * \n  * <h1>Contents<\/h1>\n  * \n  * <b> \n  *      <a href=\"#1\">1. Let's verify some behaviour! <\/a><br/> \n  *      <a href=\"#2\">2. How about some stubbing? <\/a><br/>\n  *      <a href=\"#3\">3. Argument matchers <\/a><br/>\n  *      <a href=\"#4\">4. Verifying exact number of invocations / at least once / never <\/a><br/> \n  *      <a href=\"#5\">5. Stubbing void methods with exceptions <\/a><br/> \n  *      <a href=\"#6\">6. Verification in order <\/a><br/> \n  *      <a href=\"#7\">7. Making sure interaction(s) never happened on mock <\/a><br/> \n  *      <a href=\"#8\">8. Finding redundant invocations <\/a><br/> \n  *      <a href=\"#9\">9. Shorthand for mocks creation - &#064;Mock annotation <\/a><br/> \n  *      <a href=\"#10\">10. Stubbing consecutive calls (iterator-style stubbing) <\/a><br/> \n  *      <a href=\"#11\">11. Stubbing with callbacks <\/a><br/>\n  *      <a href=\"#12\">12. doThrow()|doAnswer()|doNothing()|doReturn() family of methods mostly for stubbing voids <\/a><br/>\n  *      <a href=\"#13\">13. Spying on real objects <\/a><br/>\n  *      <a href=\"#14\">14. Changing default return values of unstubbed invocations (Since 1.7) <\/a><br/>\n  *      <a href=\"#15\">15. Capturing arguments for further assertions (Since 1.8.0) <\/a><br/>\n  *      <a href=\"#16\">16. Real partial mocks (Since 1.8.0) <\/a><br/>\n  *      <a href=\"#17\">17. Resetting mocks (Since 1.8.0) <\/a><br/>\n  *      <a href=\"#18\">18. Troubleshooting & validating framework usage (Since 1.8.0) <\/a><br/>\n  *      <a href=\"#19\">19. Aliases for behavior driven development (Since 1.8.0) <\/a><br/>\n  *      <a href=\"#20\">20. (**New**) Serializable mocks (Since 1.8.1) <\/a><br/>\n  * <\/b>\n  * \n  * <p>\n  * Following examples mock a List, because everyone knows its interface (methods\n  * like add(), get(), clear() will be used). <br>\n  * You probably wouldn't mock List class 'in real'.\n  * \n  * <h3 id=\"1\">1. Let's verify some behaviour!<\/h3>\n  * \n  * <pre>\n  * //Let's import Mockito statically so that the code looks clearer\n  * import static org.mockito.Mockito.*;\n  * \n  * //mock creation\n  * List mockedList = mock(List.class);\n  *\n  * //using mock object\n  * mockedList.add(\"one\");\n  * mockedList.clear();\n  *\n  * //verification\n  * verify(mockedList).add(\"one\");\n  * verify(mockedList).clear();\n  * <\/pre>\n  * \n  * <p>\n  * Once created, mock will remember all interactions. Then you can selectively\n  * verify whatever interaction you are interested in.\n  * \n  * <h3 id=\"2\">2. How about some stubbing?<\/h3>\n  * \n  * <pre>\n  * //You can mock concrete classes, not only interfaces\n  * LinkedList mockedList = mock(LinkedList.class);\n  * \n  * //stubbing\n  * when(mockedList.get(0)).thenReturn(\"first\");\n  * when(mockedList.get(1)).thenThrow(new RuntimeException());\n  * \n  * //following prints \"first\"\n  * System.out.println(mockedList.get(0));\n  * \n  * //following throws runtime exception\n  * System.out.println(mockedList.get(1));\n  * \n  * //following prints \"null\" because get(999) was not stubbed\n  * System.out.println(mockedList.get(999));\n  *  \n  * //Although it is possible to verify a stubbed invocation, usually <b>it's just redundant<\/b>\n  * //If your code cares what get(0) returns then something else breaks (often before even verify() gets executed).\n  * //If your code doesn't care what get(0) returns then it should not be stubbed. Not convinced? See <a href=\"http://monkeyisland.pl/2008/04/26/asking-and-telling\">here<\/a>.\n  * verify(mockedList).get(0);\n  * <\/pre>\n  * \n  * <ul>\n  * <li> By default, for all methods that return value, mock returns null, an\n  * empty collection or appropriate primitive/primitive wrapper value (e.g: 0,\n  * false, ... for int/Integer, boolean/Boolean, ...). <\/li>\n  * \n  * <li> Stubbing can be overridden: for example common stubbing can go to\n  * fixture setup but the test methods can override it.\n  * Please note that overridding stubbing is a potential code smell that points out too much stubbing<\/li>\n  * \n  * <li> Once stubbed, the method will always return stubbed value regardless\n  * of how many times it is called. <\/li>\n  * \n  * <li> Last stubbing is more important - when you stubbed the same method with\n  * the same arguments many times. <\/li>\n  * \n  * <\/ul>\n  * \n  * <h3 id=\"3\">3. Argument matchers<\/h3>\n  * \n  * Mockito verifies argument values in natural java style: by using an equals() method.\n  * Sometimes, when extra flexibility is required then you might use argument matchers:  \n  * \n  * <pre>\n  * //stubbing using built-in anyInt() argument matcher\n  * when(mockedList.get(anyInt())).thenReturn(\"element\");\n  * \n  * //stubbing using hamcrest (let's say isValid() returns your own hamcrest matcher):\n  * when(mockedList.contains(argThat(isValid()))).thenReturn(\"element\");\n  * \n  * //following prints \"element\"\n  * System.out.println(mockedList.get(999));\n  * \n  * //<b>you can also verify using an argument matcher<\/b>\n  * verify(mockedList).get(anyInt());\n  * <\/pre>\n  * \n  * <p>\n  * Argument matchers allow flexible verification or stubbing. \n  * {@link Matchers Click here to see} more built-in matchers \n  * and examples of <b>custom argument matchers / hamcrest matchers<\/b>.\n  * <p>\n  * For information solely on <b>custom argument matchers<\/b> check out javadoc for {@link ArgumentMatcher} class.\n  * <p>\n  * Be reasonable with using complicated argument matching.\n  * The natural matching style using equals() with occasional anyX() matchers tend to give clean & simple tests.\n  * Sometimes it's just better to refactor the code to allow equals() matching or even implement equals() method to help out with testing.\n  * <p>\n  * Also, read <a href=\"#15\">section 15<\/a> or javadoc for {@link ArgumentCaptor} class.\n  * {@link ArgumentCaptor} is a special implementation of an argument matcher that captures argument values for further assertions.  \n  * <p>\n  * <b>Warning on argument matchers:<\/b>\n  * <p>\n  * If you are using argument matchers, <b>all arguments<\/b> have to be provided\n  * by matchers.\n  * <p>\n  * E.g: (example shows verification but the same applies to stubbing):\n  * \n  * <pre>\n  *   verify(mock).someMethod(anyInt(), anyString(), <b>eq(\"third argument\")<\/b>);\n  *   //above is correct - eq() is also an argument matcher\n  *   \n  *   verify(mock).someMethod(anyInt(), anyString(), <b>\"third argument\"<\/b>);\n  *   //above is incorrect - exception will be thrown because third argument is given without an argument matcher.\n  * <\/pre>\n  * \n  * <h3 id=\"4\">4. Verifying exact number of invocations / at least x / never<\/h3>\n  * \n  * <pre>\n  * //using mock \n  * mockedList.add(\"once\");\n  * \n  * mockedList.add(\"twice\");\n  * mockedList.add(\"twice\");\n  * \n  * mockedList.add(\"three times\");\n  * mockedList.add(\"three times\");\n  * mockedList.add(\"three times\");\n  * \n  * //following two verifications work exactly the same - times(1) is used by default\n  * verify(mockedList).add(\"once\");\n  * verify(mockedList, times(1)).add(\"once\");\n  * \n  * //exact number of invocations verification\n  * verify(mockedList, times(2)).add(\"twice\");\n  * verify(mockedList, times(3)).add(\"three times\");\n  * \n  * //verification using never(). never() is an alias to times(0)\n  * verify(mockedList, never()).add(\"never happened\");\n  * \n  * //verification using atLeast()/atMost()\n  * verify(mockedList, atLeastOnce()).add(\"three times\");\n  * verify(mockedList, atLeast(2)).add(\"five times\");\n  * verify(mockedList, atMost(5)).add(\"three times\");\n  * \n  * <\/pre>\n  * \n  * <p>\n  * <b>times(1) is the default.<\/b> Therefore using times(1) explicitly can be\n  * omitted.\n  * \n  * <h3 id=\"5\">5. Stubbing void methods with exceptions<\/h3>\n  * \n  * <pre>\n  *   doThrow(new RuntimeException()).when(mockedList).clear();\n  *   \n  *   //following throws RuntimeException:\n  *   mockedList.clear();\n  * <\/pre>\n  * \n  * Read more about doThrow|doAnswer family of methods in paragraph 12.\n  * <p>\n  * Initially, {@link Mockito#stubVoid(Object)} was used for stubbing voids.\n  * Currently stubVoid() is deprecated in favor of {@link Mockito#doThrow(Throwable)}.\n  * This is because of improved readability and consistency with the family of {@link Mockito#doAnswer(Answer)} methods. \n  * \n  * <h3 id=\"6\">6. Verification in order<\/h3>\n  * \n  * <pre>\n  * List firstMock = mock(List.class);\n  * List secondMock = mock(List.class);\n  * \n  * //using mocks\n  * firstMock.add(\"was called first\");\n  * secondMock.add(\"was called second\");\n  * \n  * //create inOrder object passing any mocks that need to be verified in order\n  * InOrder inOrder = inOrder(firstMock, secondMock);\n  * \n  * //following will make sure that firstMock was called before secondMock\n  * inOrder.verify(firstMock).add(\"was called first\");\n  * inOrder.verify(secondMock).add(\"was called second\");\n  * <\/pre>\n  * \n  * Verification in order is flexible - <b>you don't have to verify all\n  * interactions<\/b> one-by-one but only those that you are interested in\n  * testing in order.\n  * <p>\n  * Also, you can create InOrder object passing only mocks that are relevant for\n  * in-order verification.\n  * \n  * <h3 id=\"7\">7. Making sure interaction(s) never happened on mock<\/h3>\n  * \n  * <pre>\n  * //using mocks - only mockOne is interacted\n  * mockOne.add(\"one\");\n  * \n  * //ordinary verification\n  * verify(mockOne).add(\"one\");\n  * \n  * //verify that method was never called on a mock\n  * verify(mockOne, never()).add(\"two\");\n  * \n  * //verify that other mocks were not interacted\n  * verifyZeroInteractions(mockTwo, mockThree);\n  * \n  * <\/pre>\n  * \n  * <h3 id=\"8\">8. Finding redundant invocations<\/h3>\n  * \n  * <pre>\n  * //using mocks\n  * mockedList.add(\"one\");\n  * mockedList.add(\"two\");\n  * \n  * verify(mockedList).add(\"one\");\n  * \n  * //following verification will fail \n  * verifyNoMoreInteractions(mockedList);\n  * <\/pre>\n  * \n  * A word of <b>warning<\/b>: \n  * Some users who did a lot of classic, expect-run-verify mocking tend to use verifyNoMoreInteractions() very often, even in every test method. \n  * verifyNoMoreInteractions() is not recommended to use in every test method. \n  * verifyNoMoreInteractions() is a handy assertion from the interaction testing toolkit. Use it only when it's relevant.\n  * Abusing it leads to overspecified, less maintainable tests. You can find further reading \n  * <a href=\"http://monkeyisland.pl/2008/07/12/should-i-worry-about-the-unexpected/\">here<\/a>.\n  * \n  * <p>   \n  * See also {@link Mockito#never()} - it is more explicit and\n  * communicates the intent well.\n  * <p>\n  * \n  * <h3 id=\"9\">9. Shorthand for mocks creation - &#064;Mock annotation<\/h3>\n  * \n  * <ul>\n  * <li>Minimizes repetitive mock creation code.<\/li>\n  * <li>Makes the test class more readable.<\/li>\n  * <li>Makes the verification error easier to read because the <b>field name<\/b>\n  * is used to identify the mock.<\/li>\n  * <\/ul>\n  * \n  * <pre>\n  *   public class ArticleManagerTest { \n  *     \n  *       &#064;Mock private ArticleCalculator calculator;\n  *       &#064;Mock private ArticleDatabase database;\n  *       &#064;Mock private UserProvider userProvider;\n  *     \n  *       private ArticleManager manager;\n  * <\/pre>\n  * \n  * <b>Important!<\/b> This needs to be somewhere in the base class or a test\n  * runner:\n  * \n  * <pre>\n  * MockitoAnnotations.initMocks(testClass);\n  * <\/pre>\n  * \n  * You can use built-in runner: {@link MockitoJUnitRunner}.\n  * <p>\n  * Read more here: {@link MockitoAnnotations}\n  * \n  * <h3 id=\"10\"> 10. Stubbing consecutive calls (iterator-style stubbing)<\/h3>\n  * \n  * Sometimes we need to stub with different return value/exception for the same\n  * method call. Typical use case could be mocking iterators. \n  * Original version of Mockito did not have this feature to promote simple mocking. \n  * For example, instead of iterators one could use {@link Iterable} or simply\n  * collections. Those offer natural ways of stubbing (e.g. using real\n  * collections). In rare scenarios stubbing consecutive calls could be useful,\n  * though:\n  * <p>\n  * \n  * <pre>\n  * when(mock.someMethod(\"some arg\"))\n  *   .thenThrow(new RuntimeException())\n  *   .thenReturn(\"foo\");\n  * \n  * //First call: throws runtime exception:\n  * mock.someMethod(\"some arg\");\n  * \n  * //Second call: prints \"foo\"\n  * System.out.println(mock.someMethod(\"some arg\"));\n  * \n  * //Any consecutive call: prints \"foo\" as well (last stubbing wins). \n  * System.out.println(mock.someMethod(\"some arg\"));\n  * <\/pre>\n  * \n  * Alternative, shorter version of consecutive stubbing:\n  * \n  * <pre>\n  * when(mock.someMethod(\"some arg\"))\n  *   .thenReturn(\"one\", \"two\", \"three\");\n  * <\/pre>\n  * \n  * <h3 id=\"11\"> 11. Stubbing with callbacks<\/h3>\n  * \n  * Allows stubbing with generic {@link Answer} interface.\n *  <p>\n  * Yet another controversial feature which was not included in Mockito\n  * originally. We recommend using simple stubbing with thenReturn() or\n  * thenThrow() only. Those two should be <b>just enough<\/b> to test/test-drive\n  * any clean & simple code.\n  * \n  * <pre>\n  * when(mock.someMethod(anyString())).thenAnswer(new Answer() {\n  *     Object answer(InvocationOnMock invocation) {\n  *         Object[] args = invocation.getArguments();\n  *         Object mock = invocation.getMock();\n  *         return \"called with arguments: \" + args;\n  *     }\n  * });\n  * \n  * //Following prints \"called with arguments: foo\"\n  * System.out.println(mock.someMethod(\"foo\"));\n  * <\/pre>\n  * \n  * <h3 id=\"12\"> 12. doThrow()|doAnswer()|doNothing()|doReturn() family of methods for stubbing voids (mostly)<\/h3>\n  * \n  * Stubbing voids requires different approach from {@link Mockito#when(Object)} because the compiler does not like void methods inside brackets...\n  * <p>\n  * {@link Mockito#doThrow(Throwable)} replaces the {@link Mockito#stubVoid(Object)} method for stubbing voids. \n  * The main reason is improved readability and consistency with the family of doAnswer() methods.\n  * <p>\n  * Use doThrow() when you want to stub a void method with an exception:\n  * <pre>\n  *   doThrow(new RuntimeException()).when(mockedList).clear();\n  *   \n  *   //following throws RuntimeException:\n  *   mockedList.clear();\n  * <\/pre>\n  * \n  * Read more about other methods:\n  * <p>\n  * {@link Mockito#doThrow(Throwable)}\n  * <p>\n  * {@link Mockito#doAnswer(Answer)}\n  * <p>\n  * {@link Mockito#doNothing()}\n  * <p>\n  * {@link Mockito#doReturn(Object)}\n  * \n  * <h3 id=\"13\"> 13. Spying on real objects<\/h3>\n  * \n  * You can create spies of real objects. When you use the spy then the <b>real<\/b> methods are called (unless a method was stubbed).\n  * <p>\n  * Real spies should be used <b>carefully and occasionally<\/b>, for example when dealing with legacy code.\n  * \n  * <p>\n  * Spying on real objects can be associated with \"partial mocking\" concept. \n  * <b>Before the release 1.8<\/b>, Mockito spies were not real partial mocks. \n  * The reason was we thought partial mock is a code smell. \n  * At some point we found legitimate use cases for partial mocks \n  * (3rd party interfaces, interim refactoring of legacy code, the full article is <a href=\n  * \"http://monkeyisland.pl/2009/01/13/subclass-and-override-vs-partial-mocking-vs-refactoring\"\n  * >here<\/a>)\n  * <p>\n  *\n  * <pre>\n  *   List list = new LinkedList();\n  *   List spy = spy(list);\n  * \n  *   //optionally, you can stub out some methods:\n  *   when(spy.size()).thenReturn(100);\n  * \n  *   //using the spy calls <b>real<\/b> methods\n  *   spy.add(\"one\");\n  *   spy.add(\"two\");\n  * \n  *   //prints \"one\" - the first element of a list\n  *   System.out.println(spy.get(0));\n  * \n  *   //size() method was stubbed - 100 is printed\n  *   System.out.println(spy.size());\n  * \n  *   //optionally, you can verify\n  *   verify(spy).add(\"one\");\n  *   verify(spy).add(\"two\");\n  * <\/pre>\n  * \n  * <h4>Important gotcha on spying real objects!<\/h4>\n  * \n  * 1. Sometimes it's impossible to use {@link Mockito#when(Object)} for stubbing spies. Example:\n  * \n  * <pre>\n  *   List list = new LinkedList();\n  *   List spy = spy(list);\n  *   \n  *   //Impossible: real method is called so spy.get(0) throws IndexOutOfBoundsException (the list is yet empty)\n  *   when(spy.get(0)).thenReturn(\"foo\");\n  *   \n  *   //You have to use doReturn() for stubbing\n  *   doReturn(\"foo\").when(spy).get(0);\n  * <\/pre>\n  * \n  * 2. Watch out for final methods. \n  * Mockito doesn't mock final methods so the bottom line is: when you spy on real objects + you try to stub a final method = trouble.\n  * What will happen is the real method will be called *on mock* but *not on the real instance* you passed to the spy() method.\n  * Typically you may get a NullPointerException because mock instances don't have fields initiated.\n  * \n  * <h3 id=\"14\">14. Changing default return values of unstubbed invocations (Since 1.7) <\/h3>\n  * \n  * You can create a mock with specified strategy for its return values.\n  * It's quite advanced feature and typically you don't need it to write decent tests.\n  * However, it can be helpful for working with <b>legacy systems<\/b>.\n  * <p>\n  * It is the default answer so it will be used <b>only when you don't<\/b> stub the method call.\n  * \n  * <pre>\n  *   Foo mock = mock(Foo.class, Mockito.RETURNS_SMART_NULLS);\n  *   Foo mockTwo = mock(Foo.class, new YourOwnAnswer()); \n  * <\/pre>\n  * \n  * <p>\n  * Read more about this interesting implementation of <i>Answer<\/i>: {@link Mockito#RETURNS_SMART_NULLS}\n  * \n  * <h3 id=\"15\">15. Capturing arguments for further assertions (Since 1.8.0) <\/h3>\n  * \n  * Mockito verifies argument values in natural java style: by using an equals() method.\n  * This is also the recommended way of matching arguments because it makes tests clean & simple.\n  * In some situations though, it is helpful to assert on certain arguments after the actual verification.\n  * For example:\n  * <pre>\n  *   ArgumentCaptor&lt;Person&gt; argument = ArgumentCaptor.forClass(Person.class);\n  *   verify(mock).doSomething(argument.capture());\n  *   assertEquals(\"John\", argument.getValue().getName());\n  * <\/pre>\n  * \n  * <b>Warning:<\/b> it is recommended to use ArgumentCaptor with verification <b>but not<\/b> with stubbing.\n  * Using ArgumentCaptor with stubbing may decrease test readability because captor is created outside of assert (aka verify or 'then') block.\n  * Also it may reduce defect localization because if stubbed method was not called then no argument is captured.\n  * <p>\n  * In a way ArgumentCaptor is related to custom argument matchers (see javadoc for {@link ArgumentMatcher} class).\n  * Both techniques can be used for making sure certain arguments where passed to mocks. \n  * However, ArgumentCaptor may be a better fit if:\n  * <ul>  \n  * <li>custom argument matcher is not likely to be reused<\/li>\n  * <li>you just need it to assert on argument values to complete verification<\/li>\n  * <\/ul>\n  * Custom argument matchers via {@link ArgumentMatcher} are usually better for stubbing.\n  * \n  * <h3 id=\"16\">16. Real partial mocks (Since 1.8.0) <\/h3>\n  *  \n  *  Finally, after many internal debates & discussions on the mailing list, partial mock support was added to Mockito.\n  *  Previously we considered partial mocks as code smells. However, we found a legitimate use case for partial mocks - more reading:\n  *  <a href=\"http://monkeyisland.pl/2009/01/13/subclass-and-override-vs-partial-mocking-vs-refactoring\">here<\/a>\n  *  <p>\n  *  <b>Before release 1.8<\/b> spy() was not producing real partial mocks and it was confusing for some users.\n  *  Read more about spying: <a href=\"#13\">here<\/a> or in javadoc for {@link Mockito#spy(Object)} method. \n  *  <p>\n  *  <pre>\n  *    //you can create partial mock with spy() method:    \n  *    List list = spy(new LinkedList());\n  *    \n  *    //you can enable partial mock capabilities selectively on mocks:\n  *    Foo mock = mock(Foo.class);\n  *    //Be sure the real implementation is 'safe'.\n  *    //If real implementation throws exceptions or depends on specific state of the object then you're in trouble.\n  *    when(mock.someMethod()).thenCallRealMethod();\n  *  <\/pre>\n  *  \n  * As usual you are going to read <b>the partial mock warning<\/b>:\n  * Object oriented programming is more less tackling complexity by dividing the complexity into separate, specific, SRPy objects.\n  * How does partial mock fit into this paradigm? Well, it just doesn't... \n  * Partial mock usually means that the complexity has been moved to a different method on the same object.\n  * In most cases, this is not the way you want to design your application.\n  * <p>\n  * However, there are rare cases when partial mocks come handy: \n  * dealing with code you cannot change easily (3rd party interfaces, interim refactoring of legacy code etc.)\n  * However, I wouldn't use partial mocks for new, test-driven & well-designed code.\n  *  \n  * <h3 id=\"17\">17. Resetting mocks (Since 1.8.0) <\/h3>\n  *  \n  * Smart Mockito users hardly use this feature because they know it could be a sign of poor tests.\n  * Normally, you don't need to reset your mocks, just create new mocks for each test method. \n  * <p>\n  * Instead of reset() please consider writing simple, small and focused test methods over lengthy, over-specified tests.\n  * <b>First potential code smell is reset() in the middle of the test method.<\/b> This probably means you're testing too much.\n  * Follow the whisper of your test methods: \"Please keep us small & focused on single behavior\". \n  * There are several threads about it on mockito mailing list.\n  * <p>\n  * The only reason we added reset() method is to\n  * make it possible to work with container-injected mocks.\n  * See issue 55 (<a href=\"http://code.google.com/p/mockito/issues/detail?id=55\">here<\/a>)\n  * or FAQ (<a href=\"http://code.google.com/p/mockito/wiki/FAQ\">here<\/a>).\n  * <p>\n  * <b>Don't harm yourself.<\/b> reset() in the middle of the test method is a code smell (you're probably testing too much). \n  * <pre>\n  *   List mock = mock(List.class);\n  *   when(mock.size()).thenReturn(10);\n  *   mock.add(1);\n  *   \n  *   reset(mock);\n  *   //at this point the mock forgot any interactions & stubbing\n  * <\/pre>\n  *  \n  * <h3 id=\"18\">18. Troubleshooting & validating framework usage (Since 1.8.0) <\/h3>\n  * \n  * First of all, in case of any trouble, I encourage you to read the Mockito FAQ: \n  * <a href=\"http://code.google.com/p/mockito/wiki/FAQ\">http://code.google.com/p/mockito/wiki/FAQ<\/a>\n  * <p>\n  * In case of questions you may also post to mockito mailing list: \n  * <a href=\"http://groups.google.com/group/mockito\">http://groups.google.com/group/mockito<\/a>\n  * <p>\n  * Next, you should know that Mockito validates if you use it correctly <b>all the time<\/b>. \n  * However, there's a gotcha so please read the javadoc for {@link Mockito#validateMockitoUsage()}\n  * \n  * <h3 id=\"19\">19. Aliases for behavior driven development (Since 1.8.0) <\/h3>\n  * \n  * Behavior Driven Development style of writing tests uses <b>//given //when //then<\/b> comments as fundamental parts of your test methods.\n  * This is exactly how we write our tests and we warmly encourage you to do so!\n  * <p>\n  * Start learning about BDD here: <a href=\"http://en.wikipedia.org/wiki/Behavior_Driven_Development\">http://en.wikipedia.org/wiki/Behavior_Driven_Development<\/a>\n  * <p>\n  * The problem is that current stubbing api with canonical role of <b>when<\/b> word does not integrate nicely with <b>//given //when //then<\/b> comments.\n  * It's because stubbing belongs to <b>given<\/b> component of the test and not to the <b>when<\/b> component of the test. \n  * Hence {@link BDDMockito} class introduces an alias so that you stub method calls with {@link BDDMockito#given(Object)} method. \n  * Now it really nicely integrates with the <b>given<\/b> component of a BDD style test!  \n  * <p>\n  * Here is how the test might look like: \n  * <pre>\n  * import static org.mockito.BDDMockito.*;\n  * \n  * Seller seller = mock(Seller.class);\n  * Shop shop = new Shop(seller);\n  * \n  * public void shouldBuyBread() throws Exception {\n  *   //given  \n  *   given(seller.askForBread()).willReturn(new Bread());\n  *   \n  *   //when\n  *   Goods goods = shop.buyBread();\n  *   \n  *   //then\n  *   assertThat(goods, containBread());\n  * }  \n  * <\/pre>\n  * \n  * <h3 id=\"20\">20. (**New**) Serializable mocks (Since 1.8.1) <\/h3>\n  * \n  * Mocks can be made serializable. With this feature you can use a mock in a place that requires dependencies to be serializable.\n  * <p>\n  * WARNING: This should be rarely used in unit testing. \n  * <p>\n  * The behaviour was implemented for a specific use case of a BDD spec that had an unreliable external dependency.  This\n  * was in a web environment and the objects from the external dependency were being serialized to pass between layers. \n  * <p>\n  * To create serializable mock use {@link MockSettings#serializable()}:\n  * <pre>\n  *   List serializableMock = mock(List.class, withSettings().serializable());\n  * <\/pre>\n  * <p>\n  * The mock can be serialized assuming all the normal <a href='http://java.sun.com/j2se/1.5.0/docs/api/java/io/Serializable.html'>\n  * serialization requirements<\/a> are met by the class.\n  * <p>\n  * Making a real object spy serializable is a bit more effort as the spy(...) method does not have an overloaded version \n  * which accepts MockSettings. No worries, you will hardly ever use it.\n  * \n  * <pre>\n  * List<Object> list = new ArrayList<Object>();\n  * List<Object> spy = mock(ArrayList.class, withSettings()\n  *                 .spiedInstance(list)\n  *                 .defaultAnswer(CALLS_REAL_METHODS)\n  *                 .serializable());\n  * <\/pre>\n  */\n @SuppressWarnings(\"unchecked\")\n public class Mockito extends Matchers {\n     \n     private static final MockitoCore MOCKITO_CORE = new MockitoCore();\n     \n     /**\n      * The default Answer of every mock <b>if<\/b> the mock was not stubbed. \n      * Typically it just returns some empty value. \n      * <p>\n      * {@link Answer} can be used to define the return values of unstubbed invocations. \n      * <p>\n      * This implementation first tries the global configuration. \n      * If there is no global configuration then it uses {@link ReturnsEmptyValues} (returns zeros, empty collections, nulls, etc.)\n      */\n     public static final Answer<Object> RETURNS_DEFAULTS = new GloballyConfiguredAnswer();\n     \n     /**\n      * Optional Answer to be used with {@link Mockito#mock(Class, Answer)}\n      * <p>\n      * {@link Answer} can be used to define the return values of unstubbed invocations.\n      * <p>\n      * This implementation can be helpful when working with legacy code.\n      * Unstubbed methods often return null. If your code uses the object returned by an unstubbed call you get a NullPointerException.\n      * This implementation of Answer <b>returns SmartNull instead of null<\/b>.\n      * SmartNull gives nicer exception message than NPE because it points out the line where unstubbed method was called. You just click on the stack trace.\n      * <p>\n      * ReturnsSmartNulls first tries to return ordinary return values (see {@link ReturnsMoreEmptyValues})\n      * then it tries to return SmartNull. If the return type is final then plain null is returned.\n      * <p>\n      * ReturnsSmartNulls will be probably the default return values strategy in Mockito 2.0\n      * <p>\n      * Example:\n      * <pre>\n      *   Foo mock = (Foo.class, RETURNS_SMART_NULLS);\n      *   \n      *   //calling unstubbed method here:\n      *   Stuff stuff = mock.getStuff();\n      *   \n      *   //using object returned by unstubbed call:\n      *   stuff.doSomething();\n      *   \n      *   //Above doesn't yield NullPointerException this time!\n      *   //Instead, SmartNullPointerException is thrown. \n      *   //Exception's cause links to unstubbed <i>mock.getStuff()<\/i> - just click on the stack trace.  \n      * <\/pre>\n      */\n     public static final Answer<Object> RETURNS_SMART_NULLS = new ReturnsSmartNulls();\n     \n     /**\n      * Optional Answer to be used with {@link Mockito#mock(Class, Answer)}\n      * <p>\n      * {@link Answer} can be used to define the return values of unstubbed invocations.\n      * <p>\n      * This implementation can be helpful when working with legacy code. \n      * <p>\n      * ReturnsMocks first tries to return ordinary return values (see {@link ReturnsMoreEmptyValues})\n      * then it tries to return mocks. If the return type cannot be mocked (e.g. is final) then plain null is returned.\n      * <p>\n      */\n     public static final Answer<Object> RETURNS_MOCKS = new ReturnsMocks();\n \n     /**\n      * Optional Answer to be used with {@link Mockito#mock(Class, Answer)}\n      * <p>\n      * {@link Answer} can be used to define the return values of unstubbed invocations.\n      * <p>\n      * This implementation can be helpful when working with legacy code.\n      * When this implementation is used, unstubbed methods will delegate to the real implementation.\n      * This is a way to create a partial mock object that calls real methods by default.\n      * <p>\n      * As usual you are going to read <b>the partial mock warning<\/b>:\n      * Object oriented programming is more less tackling complexity by dividing the complexity into separate, specific, SRPy objects.\n      * How does partial mock fit into this paradigm? Well, it just doesn't... \n      * Partial mock usually means that the complexity has been moved to a different method on the same object.\n      * In most cases, this is not the way you want to design your application.\n      * <p>\n      * However, there are rare cases when partial mocks come handy: \n      * dealing with code you cannot change easily (3rd party interfaces, interim refactoring of legacy code etc.)\n      * However, I wouldn't use partial mocks for new, test-driven & well-designed code.\n      * <p>\n      * Example:\n      * <pre>\n      * Foo mock = mock(Foo.class, CALLS_REAL_METHODS);\n      *\n      * // this calls the real implementation of Foo.getSomething()\n      * value = mock.getSomething();\n      *\n      * when(mock.getSomething()).thenReturn(fakeValue);\n      *\n      * // now fakeValue is returned\n      * value = mock.getSomething();\n      * <\/pre>\n      */\n     public static final Answer<Object> CALLS_REAL_METHODS = new CallsRealMethods();\n     \n     /**\n      * Creates mock object of given class or interface.\n      * <p>\n      * See examples in javadoc for {@link Mockito} class\n      * \n      * @param classToMock class or interface to mock\n      * @return mock object\n      */\n     public static <T> T mock(Class<T> classToMock) {\n         return mock(classToMock, withSettings().defaultAnswer(RETURNS_DEFAULTS));\n     }\n     \n     /**\n      * Specifies mock name. Naming mocks can be helpful for debugging - the name is used in all verification errors. \n      * <p>\n      * Beware that naming mocks is not a solution for complex code which uses too many mocks or collaborators. \n      * <b>If you have too many mocks then refactor the code<\/b> so that it's easy to test/debug without necessity of naming mocks.\n      * <p>\n      * <b>If you use &#064;Mock annotation then you've got naming mocks for free!<\/b> &#064;Mock uses field name as mock name. {@link Mock Read more.}\n      * <p>\n      * \n      * See examples in javadoc for {@link Mockito} class\n      * \n      * @param classToMock class or interface to mock\n      * @param name of the mock \n      * @return mock object\n      */\n     public static <T> T mock(Class<T> classToMock, String name) {\n         return mock(classToMock, withSettings()\n                 .name(name)\n                 .defaultAnswer(RETURNS_DEFAULTS));\n     }\n     \n     /**\n      * @deprecated\n      * <b>Please use mock(Foo.class, defaultAnswer);<\/b>\n      * <p>\n      * See {@link Mockito#mock(Class, Answer)}\n      * <p>\n      * Why it is deprecated? ReturnValues is being replaced by Answer\n      * for better consistency & interoperability of the framework. \n      * Answer interface has been in Mockito for a while and it has the same responsibility as ReturnValues.\n      * There's no point in mainting exactly the same interfaces.\n      * <p>\n      * Creates mock with a specified strategy for its return values. \n      * It's quite advanced feature and typically you don't need it to write decent tests.\n      * However it can be helpful when working with legacy systems.\n      * <p>\n      * Obviously return values are used only when you don't stub the method call.\n      *\n      * <pre>\n      *   Foo mock = mock(Foo.class, Mockito.RETURNS_SMART_NULLS);\n      *   Foo mockTwo = mock(Foo.class, new YourOwnReturnValues()); \n      * <\/pre>\n      * \n      * <p>See examples in javadoc for {@link Mockito} class<\/p>\n      * \n      * @param classToMock class or interface to mock\n      * @param returnValues default return values for unstubbed methods\n      *\n      * @return mock object\n      */\n     @Deprecated\n     public static <T> T mock(Class<T> classToMock, ReturnValues returnValues) {\n         return mock(classToMock, withSettings().defaultAnswer(new AnswerReturnValuesAdapter(returnValues)));\n     }\n     \n     /**\n      * Creates mock with a specified strategy for its answers to interactions. \n      * It's quite advanced feature and typically you don't need it to write decent tests.\n      * However it can be helpful when working with legacy systems.\n      * <p>\n      * It is the default answer so it will be used <b>only when you don't<\/b> stub the method call.\n      *\n      * <pre>\n      *   Foo mock = mock(Foo.class, RETURNS_SMART_NULLS);\n      *   Foo mockTwo = mock(Foo.class, new YourOwnAnswer()); \n      * <\/pre>\n      * \n      * <p>See examples in javadoc for {@link Mockito} class<\/p>\n      * \n      * @param classToMock class or interface to mock\n      * @param defaultAnswer default answer for unstubbed methods\n      *\n      * @return mock object\n      */\n     public static <T> T mock(Class<T> classToMock, Answer defaultAnswer) {\n         return mock(classToMock, withSettings().defaultAnswer(defaultAnswer));\n     }\n     \n     /**\n      * Creates a mock with some non-standard settings.\n      * <p>\n      * The number of configuration points for a mock grows \n      * so we need a fluent way to introduce new configuration without adding more and more overloaded Mockito.mock() methods. \n      * Hence {@link MockSettings}.\n      * <pre>\n      *   Listener mock = mock(Listener.class, withSettings()\n      *     .name(\"firstListner\").defaultBehavior(RETURNS_SMART_NULLS));\n      *   );  \n      * <\/pre>\n      * <b>Use it carefully and occasionally<\/b>. What might be reason your test needs non-standard mocks? \n      * Is the code under test so complicated that it requires non-standard mocks? \n      * Wouldn't you prefer to refactor the code under test so it is testable in a simple way?\n      * <p>\n      * See also {@link Mockito#withSettings()}\n      * <p>\n      * See examples in javadoc for {@link Mockito} class\n      * \n      * @param classToMock class or interface to mock\n      * @param mockSettings additional mock settings\n      * @return mock object\n      */\n     public static <T> T mock(Class<T> classToMock, MockSettings mockSettings) {\n      return MOCKITO_CORE.mock(classToMock, mockSettings);\n     }\n     \n     /**\n      * Creates a spy of the real object. The spy calls <b>real<\/b> methods unless they are stubbed.\n      * <p>\n      * Real spies should be used <b>carefully and occasionally<\/b>, for example when dealing with legacy code.\n      * <p>\n      * As usual you are going to read <b>the partial mock warning<\/b>:\n      * Object oriented programming is more less tackling complexity by dividing the complexity into separate, specific, SRPy objects.\n      * How does partial mock fit into this paradigm? Well, it just doesn't... \n      * Partial mock usually means that the complexity has been moved to a different method on the same object.\n      * In most cases, this is not the way you want to design your application.\n      * <p>\n      * However, there are rare cases when partial mocks come handy: \n      * dealing with code you cannot change easily (3rd party interfaces, interim refactoring of legacy code etc.)\n      * However, I wouldn't use partial mocks for new, test-driven & well-designed code.\n      * <p>\n      * Example:\n      * \n      * <pre>\n      *   List list = new LinkedList();\n      *   List spy = spy(list);\n      * \n      *   //optionally, you can stub out some methods:\n      *   when(spy.size()).thenReturn(100);\n      * \n      *   //using the spy calls <b>real<\/b> methods\n      *   spy.add(\"one\");\n      *   spy.add(\"two\");\n      * \n      *   //prints \"one\" - the first element of a list\n      *   System.out.println(spy.get(0));\n      * \n      *   //size() method was stubbed - 100 is printed\n      *   System.out.println(spy.size());\n      * \n      *   //optionally, you can verify\n      *   verify(spy).add(\"one\");\n      *   verify(spy).add(\"two\");\n      * <\/pre>\n      * \n      * <h4>Important gotcha on spying real objects!<\/h4>\n      * \n      * 1. Sometimes it's impossible to use {@link Mockito#when(Object)} for stubbing spies. Example:\n      * \n      * <pre>\n      *   List list = new LinkedList();\n      *   List spy = spy(list);\n      *   \n      *   //Impossible: real method is called so spy.get(0) throws IndexOutOfBoundsException (the list is yet empty)\n      *   when(spy.get(0)).thenReturn(\"foo\");\n      *   \n      *   //You have to use doReturn() for stubbing\n      *   doReturn(\"foo\").when(spy).get(0);\n      * <\/pre>\n      * \n      * 2. Watch out for final methods. \n      * Mockito doesn't mock final methods so the bottom line is: when you spy on real objects + you try to stub a final method = trouble.\n      * What will happen is the real method will be called *on mock* but *not on the real instance* you passed to the spy() method.\n      * Typically you may get a NullPointerException because mock instances don't have fields initiated.\n      * \n      * <p>\n      * See examples in javadoc for {@link Mockito} class\n      * \n      * @param object\n      *            to spy on\n      * @return a spy of the real object\n      */\n     public static <T> T spy(T object) {\n         return MOCKITO_CORE.mock((Class<T>) object.getClass(), withSettings()\n                 .spiedInstance(object)\n              .defaultAnswer(CALLS_REAL_METHODS)); \n     }\n \n     /**\n      * <pre>\n      *   //Instead of:\n      *   stub(mock.count()).toReturn(10);\n      * \n      *   //Please do:\n      *   when(mock.count()).thenReturn(10);\n      * <\/pre> \n      * \n      * Many users found stub() confusing therefore stub() has been deprecated in favor of {@link Mockito#when(Object)} \n      * <p>\n      * How to fix deprecation warnings? Typically it's just few minutes of search & replace job:\n      * <pre>\n      *   Mockito.stub;  <i>replace with:<\/i>  Mockito.when;\n      *   stub(          <i>replace with:<\/i>  when(\n      *   .toReturn(     <i>replace with:<\/i>  .thenReturn(\n      *   .toThrow(      <i>replace with:<\/i>  .thenThrow(\n      *   .toAnswer(     <i>replace with:<\/i>  .thenAnswer(\n      * <\/pre>\n      * If you're an existing user then sorry for making your code littered with deprecation warnings. \n/src/org/mockito/internal/MockitoCore.java @@ -1,38 +1,39 @@\n /*\n  * Copyright (c) 2007 Mockito contributors\n  * This program is made available under the terms of the MIT License.\n  */\n package org.mockito.internal;\n \n import org.mockito.InOrder;\n import org.mockito.MockSettings;\n import org.mockito.exceptions.Reporter;\n import org.mockito.exceptions.misusing.NotAMockException;\n import org.mockito.internal.creation.MockSettingsImpl;\n import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.progress.IOngoingStubbing;\n import org.mockito.internal.progress.MockingProgress;\n import org.mockito.internal.progress.ThreadSafeMockingProgress;\n import org.mockito.internal.stubbing.OngoingStubbingImpl;\n import org.mockito.internal.stubbing.StubberImpl;\n import org.mockito.internal.util.MockUtil;\n import org.mockito.internal.verification.api.VerificationMode;\n import org.mockito.stubbing.*;\n \n import java.util.Arrays;\n import java.util.List;\n \n @SuppressWarnings(\"unchecked\")\n public class MockitoCore {\n \n     private final Reporter reporter = new Reporter();\n     private final MockUtil mockUtil = new MockUtil();\n     private final MockingProgress mockingProgress = new ThreadSafeMockingProgress();\n     \n  public <T> T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) { return mock(classToMock, mockSettings); }\n  public <T> T mock(Class<T> classToMock, MockSettings mockSettings) {\n         mockingProgress.validateState();\n             mockingProgress.resetOngoingStubbing();\n         return mockUtil.createMock(classToMock, (MockSettingsImpl) mockSettings);\n     }\n     \n","solution":"@@ -1,921 +1,921 @@\n /*\n  * Copyright (c) 2007 Mockito contributors\n  * This program is made available under the terms of the MIT License.\n  */\n package org.mockito;\n \n import org.mockito.internal.MockitoCore;\n import org.mockito.internal.creation.MockSettingsImpl;\n import org.mockito.internal.debugging.MockitoDebuggerImpl;\n import org.mockito.internal.stubbing.answers.*;\n import org.mockito.internal.stubbing.defaultanswers.*;\n import org.mockito.internal.verification.VerificationModeFactory;\n import org.mockito.internal.verification.api.VerificationMode;\n import org.mockito.runners.MockitoJUnitRunner;\n import org.mockito.stubbing.*;\n \n /**\n  * <p align=\"left\"><img src=\"logo.jpg\"/><\/p>\n  * Mockito library enables mocks creation, verification and stubbing.\n  * <p>\n  * This javadoc content is also available on the <a href=\"http://mockito.org\">http://mockito.org<\/a> web page. \n  * All documentation is kept in javadocs because it guarantees consistency between what's on the web and what's in the source code.\n  * Also, it makes possible to access documentation straight from the IDE even if you work offline.   \n  * \n  * <h1>Contents<\/h1>\n  * \n  * <b> \n  *      <a href=\"#1\">1. Let's verify some behaviour! <\/a><br/> \n  *      <a href=\"#2\">2. How about some stubbing? <\/a><br/>\n  *      <a href=\"#3\">3. Argument matchers <\/a><br/>\n  *      <a href=\"#4\">4. Verifying exact number of invocations / at least once / never <\/a><br/> \n  *      <a href=\"#5\">5. Stubbing void methods with exceptions <\/a><br/> \n  *      <a href=\"#6\">6. Verification in order <\/a><br/> \n  *      <a href=\"#7\">7. Making sure interaction(s) never happened on mock <\/a><br/> \n  *      <a href=\"#8\">8. Finding redundant invocations <\/a><br/> \n  *      <a href=\"#9\">9. Shorthand for mocks creation - &#064;Mock annotation <\/a><br/> \n  *      <a href=\"#10\">10. Stubbing consecutive calls (iterator-style stubbing) <\/a><br/> \n  *      <a href=\"#11\">11. Stubbing with callbacks <\/a><br/>\n  *      <a href=\"#12\">12. doThrow()|doAnswer()|doNothing()|doReturn() family of methods mostly for stubbing voids <\/a><br/>\n  *      <a href=\"#13\">13. Spying on real objects <\/a><br/>\n  *      <a href=\"#14\">14. Changing default return values of unstubbed invocations (Since 1.7) <\/a><br/>\n  *      <a href=\"#15\">15. Capturing arguments for further assertions (Since 1.8.0) <\/a><br/>\n  *      <a href=\"#16\">16. Real partial mocks (Since 1.8.0) <\/a><br/>\n  *      <a href=\"#17\">17. Resetting mocks (Since 1.8.0) <\/a><br/>\n  *      <a href=\"#18\">18. Troubleshooting & validating framework usage (Since 1.8.0) <\/a><br/>\n  *      <a href=\"#19\">19. Aliases for behavior driven development (Since 1.8.0) <\/a><br/>\n  *      <a href=\"#20\">20. (**New**) Serializable mocks (Since 1.8.1) <\/a><br/>\n  * <\/b>\n  * \n  * <p>\n  * Following examples mock a List, because everyone knows its interface (methods\n  * like add(), get(), clear() will be used). <br>\n  * You probably wouldn't mock List class 'in real'.\n  * \n  * <h3 id=\"1\">1. Let's verify some behaviour!<\/h3>\n  * \n  * <pre>\n  * //Let's import Mockito statically so that the code looks clearer\n  * import static org.mockito.Mockito.*;\n  * \n  * //mock creation\n  * List mockedList = mock(List.class);\n  *\n  * //using mock object\n  * mockedList.add(\"one\");\n  * mockedList.clear();\n  *\n  * //verification\n  * verify(mockedList).add(\"one\");\n  * verify(mockedList).clear();\n  * <\/pre>\n  * \n  * <p>\n  * Once created, mock will remember all interactions. Then you can selectively\n  * verify whatever interaction you are interested in.\n  * \n  * <h3 id=\"2\">2. How about some stubbing?<\/h3>\n  * \n  * <pre>\n  * //You can mock concrete classes, not only interfaces\n  * LinkedList mockedList = mock(LinkedList.class);\n  * \n  * //stubbing\n  * when(mockedList.get(0)).thenReturn(\"first\");\n  * when(mockedList.get(1)).thenThrow(new RuntimeException());\n  * \n  * //following prints \"first\"\n  * System.out.println(mockedList.get(0));\n  * \n  * //following throws runtime exception\n  * System.out.println(mockedList.get(1));\n  * \n  * //following prints \"null\" because get(999) was not stubbed\n  * System.out.println(mockedList.get(999));\n  *  \n  * //Although it is possible to verify a stubbed invocation, usually <b>it's just redundant<\/b>\n  * //If your code cares what get(0) returns then something else breaks (often before even verify() gets executed).\n  * //If your code doesn't care what get(0) returns then it should not be stubbed. Not convinced? See <a href=\"http://monkeyisland.pl/2008/04/26/asking-and-telling\">here<\/a>.\n  * verify(mockedList).get(0);\n  * <\/pre>\n  * \n  * <ul>\n  * <li> By default, for all methods that return value, mock returns null, an\n  * empty collection or appropriate primitive/primitive wrapper value (e.g: 0,\n  * false, ... for int/Integer, boolean/Boolean, ...). <\/li>\n  * \n  * <li> Stubbing can be overridden: for example common stubbing can go to\n  * fixture setup but the test methods can override it.\n  * Please note that overridding stubbing is a potential code smell that points out too much stubbing<\/li>\n  * \n  * <li> Once stubbed, the method will always return stubbed value regardless\n  * of how many times it is called. <\/li>\n  * \n  * <li> Last stubbing is more important - when you stubbed the same method with\n  * the same arguments many times. <\/li>\n  * \n  * <\/ul>\n  * \n  * <h3 id=\"3\">3. Argument matchers<\/h3>\n  * \n  * Mockito verifies argument values in natural java style: by using an equals() method.\n  * Sometimes, when extra flexibility is required then you might use argument matchers:  \n  * \n  * <pre>\n  * //stubbing using built-in anyInt() argument matcher\n  * when(mockedList.get(anyInt())).thenReturn(\"element\");\n  * \n  * //stubbing using hamcrest (let's say isValid() returns your own hamcrest matcher):\n  * when(mockedList.contains(argThat(isValid()))).thenReturn(\"element\");\n  * \n  * //following prints \"element\"\n  * System.out.println(mockedList.get(999));\n  * \n  * //<b>you can also verify using an argument matcher<\/b>\n  * verify(mockedList).get(anyInt());\n  * <\/pre>\n  * \n  * <p>\n  * Argument matchers allow flexible verification or stubbing. \n  * {@link Matchers Click here to see} more built-in matchers \n  * and examples of <b>custom argument matchers / hamcrest matchers<\/b>.\n  * <p>\n  * For information solely on <b>custom argument matchers<\/b> check out javadoc for {@link ArgumentMatcher} class.\n  * <p>\n  * Be reasonable with using complicated argument matching.\n  * The natural matching style using equals() with occasional anyX() matchers tend to give clean & simple tests.\n  * Sometimes it's just better to refactor the code to allow equals() matching or even implement equals() method to help out with testing.\n  * <p>\n  * Also, read <a href=\"#15\">section 15<\/a> or javadoc for {@link ArgumentCaptor} class.\n  * {@link ArgumentCaptor} is a special implementation of an argument matcher that captures argument values for further assertions.  \n  * <p>\n  * <b>Warning on argument matchers:<\/b>\n  * <p>\n  * If you are using argument matchers, <b>all arguments<\/b> have to be provided\n  * by matchers.\n  * <p>\n  * E.g: (example shows verification but the same applies to stubbing):\n  * \n  * <pre>\n  *   verify(mock).someMethod(anyInt(), anyString(), <b>eq(\"third argument\")<\/b>);\n  *   //above is correct - eq() is also an argument matcher\n  *   \n  *   verify(mock).someMethod(anyInt(), anyString(), <b>\"third argument\"<\/b>);\n  *   //above is incorrect - exception will be thrown because third argument is given without an argument matcher.\n  * <\/pre>\n  * \n  * <h3 id=\"4\">4. Verifying exact number of invocations / at least x / never<\/h3>\n  * \n  * <pre>\n  * //using mock \n  * mockedList.add(\"once\");\n  * \n  * mockedList.add(\"twice\");\n  * mockedList.add(\"twice\");\n  * \n  * mockedList.add(\"three times\");\n  * mockedList.add(\"three times\");\n  * mockedList.add(\"three times\");\n  * \n  * //following two verifications work exactly the same - times(1) is used by default\n  * verify(mockedList).add(\"once\");\n  * verify(mockedList, times(1)).add(\"once\");\n  * \n  * //exact number of invocations verification\n  * verify(mockedList, times(2)).add(\"twice\");\n  * verify(mockedList, times(3)).add(\"three times\");\n  * \n  * //verification using never(). never() is an alias to times(0)\n  * verify(mockedList, never()).add(\"never happened\");\n  * \n  * //verification using atLeast()/atMost()\n  * verify(mockedList, atLeastOnce()).add(\"three times\");\n  * verify(mockedList, atLeast(2)).add(\"five times\");\n  * verify(mockedList, atMost(5)).add(\"three times\");\n  * \n  * <\/pre>\n  * \n  * <p>\n  * <b>times(1) is the default.<\/b> Therefore using times(1) explicitly can be\n  * omitted.\n  * \n  * <h3 id=\"5\">5. Stubbing void methods with exceptions<\/h3>\n  * \n  * <pre>\n  *   doThrow(new RuntimeException()).when(mockedList).clear();\n  *   \n  *   //following throws RuntimeException:\n  *   mockedList.clear();\n  * <\/pre>\n  * \n  * Read more about doThrow|doAnswer family of methods in paragraph 12.\n  * <p>\n  * Initially, {@link Mockito#stubVoid(Object)} was used for stubbing voids.\n  * Currently stubVoid() is deprecated in favor of {@link Mockito#doThrow(Throwable)}.\n  * This is because of improved readability and consistency with the family of {@link Mockito#doAnswer(Answer)} methods. \n  * \n  * <h3 id=\"6\">6. Verification in order<\/h3>\n  * \n  * <pre>\n  * List firstMock = mock(List.class);\n  * List secondMock = mock(List.class);\n  * \n  * //using mocks\n  * firstMock.add(\"was called first\");\n  * secondMock.add(\"was called second\");\n  * \n  * //create inOrder object passing any mocks that need to be verified in order\n  * InOrder inOrder = inOrder(firstMock, secondMock);\n  * \n  * //following will make sure that firstMock was called before secondMock\n  * inOrder.verify(firstMock).add(\"was called first\");\n  * inOrder.verify(secondMock).add(\"was called second\");\n  * <\/pre>\n  * \n  * Verification in order is flexible - <b>you don't have to verify all\n  * interactions<\/b> one-by-one but only those that you are interested in\n  * testing in order.\n  * <p>\n  * Also, you can create InOrder object passing only mocks that are relevant for\n  * in-order verification.\n  * \n  * <h3 id=\"7\">7. Making sure interaction(s) never happened on mock<\/h3>\n  * \n  * <pre>\n  * //using mocks - only mockOne is interacted\n  * mockOne.add(\"one\");\n  * \n  * //ordinary verification\n  * verify(mockOne).add(\"one\");\n  * \n  * //verify that method was never called on a mock\n  * verify(mockOne, never()).add(\"two\");\n  * \n  * //verify that other mocks were not interacted\n  * verifyZeroInteractions(mockTwo, mockThree);\n  * \n  * <\/pre>\n  * \n  * <h3 id=\"8\">8. Finding redundant invocations<\/h3>\n  * \n  * <pre>\n  * //using mocks\n  * mockedList.add(\"one\");\n  * mockedList.add(\"two\");\n  * \n  * verify(mockedList).add(\"one\");\n  * \n  * //following verification will fail \n  * verifyNoMoreInteractions(mockedList);\n  * <\/pre>\n  * \n  * A word of <b>warning<\/b>: \n  * Some users who did a lot of classic, expect-run-verify mocking tend to use verifyNoMoreInteractions() very often, even in every test method. \n  * verifyNoMoreInteractions() is not recommended to use in every test method. \n  * verifyNoMoreInteractions() is a handy assertion from the interaction testing toolkit. Use it only when it's relevant.\n  * Abusing it leads to overspecified, less maintainable tests. You can find further reading \n  * <a href=\"http://monkeyisland.pl/2008/07/12/should-i-worry-about-the-unexpected/\">here<\/a>.\n  * \n  * <p>   \n  * See also {@link Mockito#never()} - it is more explicit and\n  * communicates the intent well.\n  * <p>\n  * \n  * <h3 id=\"9\">9. Shorthand for mocks creation - &#064;Mock annotation<\/h3>\n  * \n  * <ul>\n  * <li>Minimizes repetitive mock creation code.<\/li>\n  * <li>Makes the test class more readable.<\/li>\n  * <li>Makes the verification error easier to read because the <b>field name<\/b>\n  * is used to identify the mock.<\/li>\n  * <\/ul>\n  * \n  * <pre>\n  *   public class ArticleManagerTest { \n  *     \n  *       &#064;Mock private ArticleCalculator calculator;\n  *       &#064;Mock private ArticleDatabase database;\n  *       &#064;Mock private UserProvider userProvider;\n  *     \n  *       private ArticleManager manager;\n  * <\/pre>\n  * \n  * <b>Important!<\/b> This needs to be somewhere in the base class or a test\n  * runner:\n  * \n  * <pre>\n  * MockitoAnnotations.initMocks(testClass);\n  * <\/pre>\n  * \n  * You can use built-in runner: {@link MockitoJUnitRunner}.\n  * <p>\n  * Read more here: {@link MockitoAnnotations}\n  * \n  * <h3 id=\"10\"> 10. Stubbing consecutive calls (iterator-style stubbing)<\/h3>\n  * \n  * Sometimes we need to stub with different return value/exception for the same\n  * method call. Typical use case could be mocking iterators. \n  * Original version of Mockito did not have this feature to promote simple mocking. \n  * For example, instead of iterators one could use {@link Iterable} or simply\n  * collections. Those offer natural ways of stubbing (e.g. using real\n  * collections). In rare scenarios stubbing consecutive calls could be useful,\n  * though:\n  * <p>\n  * \n  * <pre>\n  * when(mock.someMethod(\"some arg\"))\n  *   .thenThrow(new RuntimeException())\n  *   .thenReturn(\"foo\");\n  * \n  * //First call: throws runtime exception:\n  * mock.someMethod(\"some arg\");\n  * \n  * //Second call: prints \"foo\"\n  * System.out.println(mock.someMethod(\"some arg\"));\n  * \n  * //Any consecutive call: prints \"foo\" as well (last stubbing wins). \n  * System.out.println(mock.someMethod(\"some arg\"));\n  * <\/pre>\n  * \n  * Alternative, shorter version of consecutive stubbing:\n  * \n  * <pre>\n  * when(mock.someMethod(\"some arg\"))\n  *   .thenReturn(\"one\", \"two\", \"three\");\n  * <\/pre>\n  * \n  * <h3 id=\"11\"> 11. Stubbing with callbacks<\/h3>\n  * \n  * Allows stubbing with generic {@link Answer} interface.\n *  <p>\n  * Yet another controversial feature which was not included in Mockito\n  * originally. We recommend using simple stubbing with thenReturn() or\n  * thenThrow() only. Those two should be <b>just enough<\/b> to test/test-drive\n  * any clean & simple code.\n  * \n  * <pre>\n  * when(mock.someMethod(anyString())).thenAnswer(new Answer() {\n  *     Object answer(InvocationOnMock invocation) {\n  *         Object[] args = invocation.getArguments();\n  *         Object mock = invocation.getMock();\n  *         return \"called with arguments: \" + args;\n  *     }\n  * });\n  * \n  * //Following prints \"called with arguments: foo\"\n  * System.out.println(mock.someMethod(\"foo\"));\n  * <\/pre>\n  * \n  * <h3 id=\"12\"> 12. doThrow()|doAnswer()|doNothing()|doReturn() family of methods for stubbing voids (mostly)<\/h3>\n  * \n  * Stubbing voids requires different approach from {@link Mockito#when(Object)} because the compiler does not like void methods inside brackets...\n  * <p>\n  * {@link Mockito#doThrow(Throwable)} replaces the {@link Mockito#stubVoid(Object)} method for stubbing voids. \n  * The main reason is improved readability and consistency with the family of doAnswer() methods.\n  * <p>\n  * Use doThrow() when you want to stub a void method with an exception:\n  * <pre>\n  *   doThrow(new RuntimeException()).when(mockedList).clear();\n  *   \n  *   //following throws RuntimeException:\n  *   mockedList.clear();\n  * <\/pre>\n  * \n  * Read more about other methods:\n  * <p>\n  * {@link Mockito#doThrow(Throwable)}\n  * <p>\n  * {@link Mockito#doAnswer(Answer)}\n  * <p>\n  * {@link Mockito#doNothing()}\n  * <p>\n  * {@link Mockito#doReturn(Object)}\n  * \n  * <h3 id=\"13\"> 13. Spying on real objects<\/h3>\n  * \n  * You can create spies of real objects. When you use the spy then the <b>real<\/b> methods are called (unless a method was stubbed).\n  * <p>\n  * Real spies should be used <b>carefully and occasionally<\/b>, for example when dealing with legacy code.\n  * \n  * <p>\n  * Spying on real objects can be associated with \"partial mocking\" concept. \n  * <b>Before the release 1.8<\/b>, Mockito spies were not real partial mocks. \n  * The reason was we thought partial mock is a code smell. \n  * At some point we found legitimate use cases for partial mocks \n  * (3rd party interfaces, interim refactoring of legacy code, the full article is <a href=\n  * \"http://monkeyisland.pl/2009/01/13/subclass-and-override-vs-partial-mocking-vs-refactoring\"\n  * >here<\/a>)\n  * <p>\n  *\n  * <pre>\n  *   List list = new LinkedList();\n  *   List spy = spy(list);\n  * \n  *   //optionally, you can stub out some methods:\n  *   when(spy.size()).thenReturn(100);\n  * \n  *   //using the spy calls <b>real<\/b> methods\n  *   spy.add(\"one\");\n  *   spy.add(\"two\");\n  * \n  *   //prints \"one\" - the first element of a list\n  *   System.out.println(spy.get(0));\n  * \n  *   //size() method was stubbed - 100 is printed\n  *   System.out.println(spy.size());\n  * \n  *   //optionally, you can verify\n  *   verify(spy).add(\"one\");\n  *   verify(spy).add(\"two\");\n  * <\/pre>\n  * \n  * <h4>Important gotcha on spying real objects!<\/h4>\n  * \n  * 1. Sometimes it's impossible to use {@link Mockito#when(Object)} for stubbing spies. Example:\n  * \n  * <pre>\n  *   List list = new LinkedList();\n  *   List spy = spy(list);\n  *   \n  *   //Impossible: real method is called so spy.get(0) throws IndexOutOfBoundsException (the list is yet empty)\n  *   when(spy.get(0)).thenReturn(\"foo\");\n  *   \n  *   //You have to use doReturn() for stubbing\n  *   doReturn(\"foo\").when(spy).get(0);\n  * <\/pre>\n  * \n  * 2. Watch out for final methods. \n  * Mockito doesn't mock final methods so the bottom line is: when you spy on real objects + you try to stub a final method = trouble.\n  * What will happen is the real method will be called *on mock* but *not on the real instance* you passed to the spy() method.\n  * Typically you may get a NullPointerException because mock instances don't have fields initiated.\n  * \n  * <h3 id=\"14\">14. Changing default return values of unstubbed invocations (Since 1.7) <\/h3>\n  * \n  * You can create a mock with specified strategy for its return values.\n  * It's quite advanced feature and typically you don't need it to write decent tests.\n  * However, it can be helpful for working with <b>legacy systems<\/b>.\n  * <p>\n  * It is the default answer so it will be used <b>only when you don't<\/b> stub the method call.\n  * \n  * <pre>\n  *   Foo mock = mock(Foo.class, Mockito.RETURNS_SMART_NULLS);\n  *   Foo mockTwo = mock(Foo.class, new YourOwnAnswer()); \n  * <\/pre>\n  * \n  * <p>\n  * Read more about this interesting implementation of <i>Answer<\/i>: {@link Mockito#RETURNS_SMART_NULLS}\n  * \n  * <h3 id=\"15\">15. Capturing arguments for further assertions (Since 1.8.0) <\/h3>\n  * \n  * Mockito verifies argument values in natural java style: by using an equals() method.\n  * This is also the recommended way of matching arguments because it makes tests clean & simple.\n  * In some situations though, it is helpful to assert on certain arguments after the actual verification.\n  * For example:\n  * <pre>\n  *   ArgumentCaptor&lt;Person&gt; argument = ArgumentCaptor.forClass(Person.class);\n  *   verify(mock).doSomething(argument.capture());\n  *   assertEquals(\"John\", argument.getValue().getName());\n  * <\/pre>\n  * \n  * <b>Warning:<\/b> it is recommended to use ArgumentCaptor with verification <b>but not<\/b> with stubbing.\n  * Using ArgumentCaptor with stubbing may decrease test readability because captor is created outside of assert (aka verify or 'then') block.\n  * Also it may reduce defect localization because if stubbed method was not called then no argument is captured.\n  * <p>\n  * In a way ArgumentCaptor is related to custom argument matchers (see javadoc for {@link ArgumentMatcher} class).\n  * Both techniques can be used for making sure certain arguments where passed to mocks. \n  * However, ArgumentCaptor may be a better fit if:\n  * <ul>  \n  * <li>custom argument matcher is not likely to be reused<\/li>\n  * <li>you just need it to assert on argument values to complete verification<\/li>\n  * <\/ul>\n  * Custom argument matchers via {@link ArgumentMatcher} are usually better for stubbing.\n  * \n  * <h3 id=\"16\">16. Real partial mocks (Since 1.8.0) <\/h3>\n  *  \n  *  Finally, after many internal debates & discussions on the mailing list, partial mock support was added to Mockito.\n  *  Previously we considered partial mocks as code smells. However, we found a legitimate use case for partial mocks - more reading:\n  *  <a href=\"http://monkeyisland.pl/2009/01/13/subclass-and-override-vs-partial-mocking-vs-refactoring\">here<\/a>\n  *  <p>\n  *  <b>Before release 1.8<\/b> spy() was not producing real partial mocks and it was confusing for some users.\n  *  Read more about spying: <a href=\"#13\">here<\/a> or in javadoc for {@link Mockito#spy(Object)} method. \n  *  <p>\n  *  <pre>\n  *    //you can create partial mock with spy() method:    \n  *    List list = spy(new LinkedList());\n  *    \n  *    //you can enable partial mock capabilities selectively on mocks:\n  *    Foo mock = mock(Foo.class);\n  *    //Be sure the real implementation is 'safe'.\n  *    //If real implementation throws exceptions or depends on specific state of the object then you're in trouble.\n  *    when(mock.someMethod()).thenCallRealMethod();\n  *  <\/pre>\n  *  \n  * As usual you are going to read <b>the partial mock warning<\/b>:\n  * Object oriented programming is more less tackling complexity by dividing the complexity into separate, specific, SRPy objects.\n  * How does partial mock fit into this paradigm? Well, it just doesn't... \n  * Partial mock usually means that the complexity has been moved to a different method on the same object.\n  * In most cases, this is not the way you want to design your application.\n  * <p>\n  * However, there are rare cases when partial mocks come handy: \n  * dealing with code you cannot change easily (3rd party interfaces, interim refactoring of legacy code etc.)\n  * However, I wouldn't use partial mocks for new, test-driven & well-designed code.\n  *  \n  * <h3 id=\"17\">17. Resetting mocks (Since 1.8.0) <\/h3>\n  *  \n  * Smart Mockito users hardly use this feature because they know it could be a sign of poor tests.\n  * Normally, you don't need to reset your mocks, just create new mocks for each test method. \n  * <p>\n  * Instead of reset() please consider writing simple, small and focused test methods over lengthy, over-specified tests.\n  * <b>First potential code smell is reset() in the middle of the test method.<\/b> This probably means you're testing too much.\n  * Follow the whisper of your test methods: \"Please keep us small & focused on single behavior\". \n  * There are several threads about it on mockito mailing list.\n  * <p>\n  * The only reason we added reset() method is to\n  * make it possible to work with container-injected mocks.\n  * See issue 55 (<a href=\"http://code.google.com/p/mockito/issues/detail?id=55\">here<\/a>)\n  * or FAQ (<a href=\"http://code.google.com/p/mockito/wiki/FAQ\">here<\/a>).\n  * <p>\n  * <b>Don't harm yourself.<\/b> reset() in the middle of the test method is a code smell (you're probably testing too much). \n  * <pre>\n  *   List mock = mock(List.class);\n  *   when(mock.size()).thenReturn(10);\n  *   mock.add(1);\n  *   \n  *   reset(mock);\n  *   //at this point the mock forgot any interactions & stubbing\n  * <\/pre>\n  *  \n  * <h3 id=\"18\">18. Troubleshooting & validating framework usage (Since 1.8.0) <\/h3>\n  * \n  * First of all, in case of any trouble, I encourage you to read the Mockito FAQ: \n  * <a href=\"http://code.google.com/p/mockito/wiki/FAQ\">http://code.google.com/p/mockito/wiki/FAQ<\/a>\n  * <p>\n  * In case of questions you may also post to mockito mailing list: \n  * <a href=\"http://groups.google.com/group/mockito\">http://groups.google.com/group/mockito<\/a>\n  * <p>\n  * Next, you should know that Mockito validates if you use it correctly <b>all the time<\/b>. \n  * However, there's a gotcha so please read the javadoc for {@link Mockito#validateMockitoUsage()}\n  * \n  * <h3 id=\"19\">19. Aliases for behavior driven development (Since 1.8.0) <\/h3>\n  * \n  * Behavior Driven Development style of writing tests uses <b>//given //when //then<\/b> comments as fundamental parts of your test methods.\n  * This is exactly how we write our tests and we warmly encourage you to do so!\n  * <p>\n  * Start learning about BDD here: <a href=\"http://en.wikipedia.org/wiki/Behavior_Driven_Development\">http://en.wikipedia.org/wiki/Behavior_Driven_Development<\/a>\n  * <p>\n  * The problem is that current stubbing api with canonical role of <b>when<\/b> word does not integrate nicely with <b>//given //when //then<\/b> comments.\n  * It's because stubbing belongs to <b>given<\/b> component of the test and not to the <b>when<\/b> component of the test. \n  * Hence {@link BDDMockito} class introduces an alias so that you stub method calls with {@link BDDMockito#given(Object)} method. \n  * Now it really nicely integrates with the <b>given<\/b> component of a BDD style test!  \n  * <p>\n  * Here is how the test might look like: \n  * <pre>\n  * import static org.mockito.BDDMockito.*;\n  * \n  * Seller seller = mock(Seller.class);\n  * Shop shop = new Shop(seller);\n  * \n  * public void shouldBuyBread() throws Exception {\n  *   //given  \n  *   given(seller.askForBread()).willReturn(new Bread());\n  *   \n  *   //when\n  *   Goods goods = shop.buyBread();\n  *   \n  *   //then\n  *   assertThat(goods, containBread());\n  * }  \n  * <\/pre>\n  * \n  * <h3 id=\"20\">20. (**New**) Serializable mocks (Since 1.8.1) <\/h3>\n  * \n  * Mocks can be made serializable. With this feature you can use a mock in a place that requires dependencies to be serializable.\n  * <p>\n  * WARNING: This should be rarely used in unit testing. \n  * <p>\n  * The behaviour was implemented for a specific use case of a BDD spec that had an unreliable external dependency.  This\n  * was in a web environment and the objects from the external dependency were being serialized to pass between layers. \n  * <p>\n  * To create serializable mock use {@link MockSettings#serializable()}:\n  * <pre>\n  *   List serializableMock = mock(List.class, withSettings().serializable());\n  * <\/pre>\n  * <p>\n  * The mock can be serialized assuming all the normal <a href='http://java.sun.com/j2se/1.5.0/docs/api/java/io/Serializable.html'>\n  * serialization requirements<\/a> are met by the class.\n  * <p>\n  * Making a real object spy serializable is a bit more effort as the spy(...) method does not have an overloaded version \n  * which accepts MockSettings. No worries, you will hardly ever use it.\n  * \n  * <pre>\n  * List<Object> list = new ArrayList<Object>();\n  * List<Object> spy = mock(ArrayList.class, withSettings()\n  *                 .spiedInstance(list)\n  *                 .defaultAnswer(CALLS_REAL_METHODS)\n  *                 .serializable());\n  * <\/pre>\n  */\n @SuppressWarnings(\"unchecked\")\n public class Mockito extends Matchers {\n     \n     private static final MockitoCore MOCKITO_CORE = new MockitoCore();\n     \n     /**\n      * The default Answer of every mock <b>if<\/b> the mock was not stubbed. \n      * Typically it just returns some empty value. \n      * <p>\n      * {@link Answer} can be used to define the return values of unstubbed invocations. \n      * <p>\n      * This implementation first tries the global configuration. \n      * If there is no global configuration then it uses {@link ReturnsEmptyValues} (returns zeros, empty collections, nulls, etc.)\n      */\n     public static final Answer<Object> RETURNS_DEFAULTS = new GloballyConfiguredAnswer();\n     \n     /**\n      * Optional Answer to be used with {@link Mockito#mock(Class, Answer)}\n      * <p>\n      * {@link Answer} can be used to define the return values of unstubbed invocations.\n      * <p>\n      * This implementation can be helpful when working with legacy code.\n      * Unstubbed methods often return null. If your code uses the object returned by an unstubbed call you get a NullPointerException.\n      * This implementation of Answer <b>returns SmartNull instead of null<\/b>.\n      * SmartNull gives nicer exception message than NPE because it points out the line where unstubbed method was called. You just click on the stack trace.\n      * <p>\n      * ReturnsSmartNulls first tries to return ordinary return values (see {@link ReturnsMoreEmptyValues})\n      * then it tries to return SmartNull. If the return type is final then plain null is returned.\n      * <p>\n      * ReturnsSmartNulls will be probably the default return values strategy in Mockito 2.0\n      * <p>\n      * Example:\n      * <pre>\n      *   Foo mock = (Foo.class, RETURNS_SMART_NULLS);\n      *   \n      *   //calling unstubbed method here:\n      *   Stuff stuff = mock.getStuff();\n      *   \n      *   //using object returned by unstubbed call:\n      *   stuff.doSomething();\n      *   \n      *   //Above doesn't yield NullPointerException this time!\n      *   //Instead, SmartNullPointerException is thrown. \n      *   //Exception's cause links to unstubbed <i>mock.getStuff()<\/i> - just click on the stack trace.  \n      * <\/pre>\n      */\n     public static final Answer<Object> RETURNS_SMART_NULLS = new ReturnsSmartNulls();\n     \n     /**\n      * Optional Answer to be used with {@link Mockito#mock(Class, Answer)}\n      * <p>\n      * {@link Answer} can be used to define the return values of unstubbed invocations.\n      * <p>\n      * This implementation can be helpful when working with legacy code. \n      * <p>\n      * ReturnsMocks first tries to return ordinary return values (see {@link ReturnsMoreEmptyValues})\n      * then it tries to return mocks. If the return type cannot be mocked (e.g. is final) then plain null is returned.\n      * <p>\n      */\n     public static final Answer<Object> RETURNS_MOCKS = new ReturnsMocks();\n \n     /**\n      * Optional Answer to be used with {@link Mockito#mock(Class, Answer)}\n      * <p>\n      * {@link Answer} can be used to define the return values of unstubbed invocations.\n      * <p>\n      * This implementation can be helpful when working with legacy code.\n      * When this implementation is used, unstubbed methods will delegate to the real implementation.\n      * This is a way to create a partial mock object that calls real methods by default.\n      * <p>\n      * As usual you are going to read <b>the partial mock warning<\/b>:\n      * Object oriented programming is more less tackling complexity by dividing the complexity into separate, specific, SRPy objects.\n      * How does partial mock fit into this paradigm? Well, it just doesn't... \n      * Partial mock usually means that the complexity has been moved to a different method on the same object.\n      * In most cases, this is not the way you want to design your application.\n      * <p>\n      * However, there are rare cases when partial mocks come handy: \n      * dealing with code you cannot change easily (3rd party interfaces, interim refactoring of legacy code etc.)\n      * However, I wouldn't use partial mocks for new, test-driven & well-designed code.\n      * <p>\n      * Example:\n      * <pre>\n      * Foo mock = mock(Foo.class, CALLS_REAL_METHODS);\n      *\n      * // this calls the real implementation of Foo.getSomething()\n      * value = mock.getSomething();\n      *\n      * when(mock.getSomething()).thenReturn(fakeValue);\n      *\n      * // now fakeValue is returned\n      * value = mock.getSomething();\n      * <\/pre>\n      */\n     public static final Answer<Object> CALLS_REAL_METHODS = new CallsRealMethods();\n     \n     /**\n      * Creates mock object of given class or interface.\n      * <p>\n      * See examples in javadoc for {@link Mockito} class\n      * \n      * @param classToMock class or interface to mock\n      * @return mock object\n      */\n     public static <T> T mock(Class<T> classToMock) {\n         return mock(classToMock, withSettings().defaultAnswer(RETURNS_DEFAULTS));\n     }\n     \n     /**\n      * Specifies mock name. Naming mocks can be helpful for debugging - the name is used in all verification errors. \n      * <p>\n      * Beware that naming mocks is not a solution for complex code which uses too many mocks or collaborators. \n      * <b>If you have too many mocks then refactor the code<\/b> so that it's easy to test/debug without necessity of naming mocks.\n      * <p>\n      * <b>If you use &#064;Mock annotation then you've got naming mocks for free!<\/b> &#064;Mock uses field name as mock name. {@link Mock Read more.}\n      * <p>\n      * \n      * See examples in javadoc for {@link Mockito} class\n      * \n      * @param classToMock class or interface to mock\n      * @param name of the mock \n      * @return mock object\n      */\n     public static <T> T mock(Class<T> classToMock, String name) {\n         return mock(classToMock, withSettings()\n                 .name(name)\n                 .defaultAnswer(RETURNS_DEFAULTS));\n     }\n     \n     /**\n      * @deprecated\n      * <b>Please use mock(Foo.class, defaultAnswer);<\/b>\n      * <p>\n      * See {@link Mockito#mock(Class, Answer)}\n      * <p>\n      * Why it is deprecated? ReturnValues is being replaced by Answer\n      * for better consistency & interoperability of the framework. \n      * Answer interface has been in Mockito for a while and it has the same responsibility as ReturnValues.\n      * There's no point in mainting exactly the same interfaces.\n      * <p>\n      * Creates mock with a specified strategy for its return values. \n      * It's quite advanced feature and typically you don't need it to write decent tests.\n      * However it can be helpful when working with legacy systems.\n      * <p>\n      * Obviously return values are used only when you don't stub the method call.\n      *\n      * <pre>\n      *   Foo mock = mock(Foo.class, Mockito.RETURNS_SMART_NULLS);\n      *   Foo mockTwo = mock(Foo.class, new YourOwnReturnValues()); \n      * <\/pre>\n      * \n      * <p>See examples in javadoc for {@link Mockito} class<\/p>\n      * \n      * @param classToMock class or interface to mock\n      * @param returnValues default return values for unstubbed methods\n      *\n      * @return mock object\n      */\n     @Deprecated\n     public static <T> T mock(Class<T> classToMock, ReturnValues returnValues) {\n         return mock(classToMock, withSettings().defaultAnswer(new AnswerReturnValuesAdapter(returnValues)));\n     }\n     \n     /**\n      * Creates mock with a specified strategy for its answers to interactions. \n      * It's quite advanced feature and typically you don't need it to write decent tests.\n      * However it can be helpful when working with legacy systems.\n      * <p>\n      * It is the default answer so it will be used <b>only when you don't<\/b> stub the method call.\n      *\n      * <pre>\n      *   Foo mock = mock(Foo.class, RETURNS_SMART_NULLS);\n      *   Foo mockTwo = mock(Foo.class, new YourOwnAnswer()); \n      * <\/pre>\n      * \n      * <p>See examples in javadoc for {@link Mockito} class<\/p>\n      * \n      * @param classToMock class or interface to mock\n      * @param defaultAnswer default answer for unstubbed methods\n      *\n      * @return mock object\n      */\n     public static <T> T mock(Class<T> classToMock, Answer defaultAnswer) {\n         return mock(classToMock, withSettings().defaultAnswer(defaultAnswer));\n     }\n     \n     /**\n      * Creates a mock with some non-standard settings.\n      * <p>\n      * The number of configuration points for a mock grows \n      * so we need a fluent way to introduce new configuration without adding more and more overloaded Mockito.mock() methods. \n      * Hence {@link MockSettings}.\n      * <pre>\n      *   Listener mock = mock(Listener.class, withSettings()\n      *     .name(\"firstListner\").defaultBehavior(RETURNS_SMART_NULLS));\n      *   );  \n      * <\/pre>\n      * <b>Use it carefully and occasionally<\/b>. What might be reason your test needs non-standard mocks? \n      * Is the code under test so complicated that it requires non-standard mocks? \n      * Wouldn't you prefer to refactor the code under test so it is testable in a simple way?\n      * <p>\n      * See also {@link Mockito#withSettings()}\n      * <p>\n      * See examples in javadoc for {@link Mockito} class\n      * \n      * @param classToMock class or interface to mock\n      * @param mockSettings additional mock settings\n      * @return mock object\n      */\n     public static <T> T mock(Class<T> classToMock, MockSettings mockSettings) {\n      return MOCKITO_CORE.mock(classToMock, mockSettings, true);\n     }\n     \n     /**\n      * Creates a spy of the real object. The spy calls <b>real<\/b> methods unless they are stubbed.\n      * <p>\n      * Real spies should be used <b>carefully and occasionally<\/b>, for example when dealing with legacy code.\n      * <p>\n      * As usual you are going to read <b>the partial mock warning<\/b>:\n      * Object oriented programming is more less tackling complexity by dividing the complexity into separate, specific, SRPy objects.\n      * How does partial mock fit into this paradigm? Well, it just doesn't... \n      * Partial mock usually means that the complexity has been moved to a different method on the same object.\n      * In most cases, this is not the way you want to design your application.\n      * <p>\n      * However, there are rare cases when partial mocks come handy: \n      * dealing with code you cannot change easily (3rd party interfaces, interim refactoring of legacy code etc.)\n      * However, I wouldn't use partial mocks for new, test-driven & well-designed code.\n      * <p>\n      * Example:\n      * \n      * <pre>\n      *   List list = new LinkedList();\n      *   List spy = spy(list);\n      * \n      *   //optionally, you can stub out some methods:\n      *   when(spy.size()).thenReturn(100);\n      * \n      *   //using the spy calls <b>real<\/b> methods\n      *   spy.add(\"one\");\n      *   spy.add(\"two\");\n      * \n      *   //prints \"one\" - the first element of a list\n      *   System.out.println(spy.get(0));\n      * \n      *   //size() method was stubbed - 100 is printed\n      *   System.out.println(spy.size());\n      * \n      *   //optionally, you can verify\n      *   verify(spy).add(\"one\");\n      *   verify(spy).add(\"two\");\n      * <\/pre>\n      * \n      * <h4>Important gotcha on spying real objects!<\/h4>\n      * \n      * 1. Sometimes it's impossible to use {@link Mockito#when(Object)} for stubbing spies. Example:\n      * \n      * <pre>\n      *   List list = new LinkedList();\n      *   List spy = spy(list);\n      *   \n      *   //Impossible: real method is called so spy.get(0) throws IndexOutOfBoundsException (the list is yet empty)\n      *   when(spy.get(0)).thenReturn(\"foo\");\n      *   \n      *   //You have to use doReturn() for stubbing\n      *   doReturn(\"foo\").when(spy).get(0);\n      * <\/pre>\n      * \n      * 2. Watch out for final methods. \n      * Mockito doesn't mock final methods so the bottom line is: when you spy on real objects + you try to stub a final method = trouble.\n      * What will happen is the real method will be called *on mock* but *not on the real instance* you passed to the spy() method.\n      * Typically you may get a NullPointerException because mock instances don't have fields initiated.\n      * \n      * <p>\n      * See examples in javadoc for {@link Mockito} class\n      * \n      * @param object\n      *            to spy on\n      * @return a spy of the real object\n      */\n     public static <T> T spy(T object) {\n         return MOCKITO_CORE.mock((Class<T>) object.getClass(), withSettings()\n                 .spiedInstance(object)\n              .defaultAnswer(CALLS_REAL_METHODS), true); \n     }\n \n     /**\n      * <pre>\n      *   //Instead of:\n      *   stub(mock.count()).toReturn(10);\n      * \n      *   //Please do:\n      *   when(mock.count()).thenReturn(10);\n      * <\/pre> \n      * \n      * Many users found stub() confusing therefore stub() has been deprecated in favor of {@link Mockito#when(Object)} \n      * <p>\n      * How to fix deprecation warnings? Typically it's just few minutes of search & replace job:\n      * <pre>\n      *   Mockito.stub;  <i>replace with:<\/i>  Mockito.when;\n      *   stub(          <i>replace with:<\/i>  when(\n      *   .toReturn(     <i>replace with:<\/i>  .thenReturn(\n      *   .toThrow(      <i>replace with:<\/i>  .thenThrow(\n      *   .toAnswer(     <i>replace with:<\/i>  .thenAnswer(\n      * <\/pre>\n      * If you're an existing user then sorry for making your code littered with deprecation warnings. \n/src/org/mockito/internal/MockitoCore.java @@ -1,38 +1,39 @@\n /*\n  * Copyright (c) 2007 Mockito contributors\n  * This program is made available under the terms of the MIT License.\n  */\n package org.mockito.internal;\n \n import org.mockito.InOrder;\n import org.mockito.MockSettings;\n import org.mockito.exceptions.Reporter;\n import org.mockito.exceptions.misusing.NotAMockException;\n import org.mockito.internal.creation.MockSettingsImpl;\n import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.progress.IOngoingStubbing;\n import org.mockito.internal.progress.MockingProgress;\n import org.mockito.internal.progress.ThreadSafeMockingProgress;\n import org.mockito.internal.stubbing.OngoingStubbingImpl;\n import org.mockito.internal.stubbing.StubberImpl;\n import org.mockito.internal.util.MockUtil;\n import org.mockito.internal.verification.api.VerificationMode;\n import org.mockito.stubbing.*;\n \n import java.util.Arrays;\n import java.util.List;\n \n @SuppressWarnings(\"unchecked\")\n public class MockitoCore {\n \n     private final Reporter reporter = new Reporter();\n     private final MockUtil mockUtil = new MockUtil();\n     private final MockingProgress mockingProgress = new ThreadSafeMockingProgress();\n     \n  public <T> T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) {\n         mockingProgress.validateState();\n      if (shouldResetOngoingStubbing) {\n             mockingProgress.resetOngoingStubbing();\n      }\n         return mockUtil.createMock(classToMock, (MockSettingsImpl) mockSettings);\n     }\n     \n","CodeWithNoComments":"\n package org.mockito;\n \n import org.mockito.internal.MockitoCore;\n import org.mockito.internal.creation.MockSettingsImpl;\n import org.mockito.internal.debugging.MockitoDebuggerImpl;\n import org.mockito.internal.stubbing.answers.*;\n import org.mockito.internal.stubbing.defaultanswers.*;\n import org.mockito.internal.verification.VerificationModeFactory;\n import org.mockito.internal.verification.api.VerificationMode;\n import org.mockito.runners.MockitoJUnitRunner;\n import org.mockito.stubbing.*;\n \n @SuppressWarnings(\"unchecked\")\n public class Mockito extends Matchers {\n     \n     private static final MockitoCore MOCKITO_CORE = new MockitoCore();\n     \n     public static final Answer<Object> RETURNS_DEFAULTS = new GloballyConfiguredAnswer();\n     \n     \n     public static final Answer<Object> RETURNS_SMART_NULLS = new ReturnsSmartNulls();\n   \n     public static final Answer<Object> RETURNS_MOCKS = new ReturnsMocks();\n \n \n     public static final Answer<Object> CALLS_REAL_METHODS = new CallsRealMethods();     public static <T> T mock(Class<T> classToMock) {\n         return mock(classToMock, withSettings().defaultAnswer(RETURNS_DEFAULTS));\n     }\n  \n     public static <T> T mock(Class<T> classToMock, String name) {\n         return mock(classToMock, withSettings()\n                 .name(name)\n                 .defaultAnswer(RETURNS_DEFAULTS));\n     }\n     \n     @Deprecated\n     public static <T> T mock(Class<T> classToMock, ReturnValues returnValues) {\n         return mock(classToMock, withSettings().defaultAnswer(new AnswerReturnValuesAdapter(returnValues)));\n     }\n     \n     public static <T> T mock(Class<T> classToMock, Answer defaultAnswer) {\n         return mock(classToMock, withSettings().defaultAnswer(defaultAnswer));\n     }     public static <T> T mock(Class<T> classToMock, MockSettings mockSettings) {\n        return MOCKITO_CORE.mock(classToMock, mockSettings);\n     }\n     \n     public static <T> T spy(T object) {\n         return MOCKITO_CORE.mock((Class<T>) object.getClass(), withSettings()\n                 .spiedInstance(object)\n                .defaultAnswer(CALLS_REAL_METHODS)); \n     }\n \n     \n\n package org.mockito.internal;\n \n import org.mockito.InOrder;\n import org.mockito.MockSettings;\n import org.mockito.exceptions.Reporter;\n import org.mockito.exceptions.misusing.NotAMockException;\n import org.mockito.internal.creation.MockSettingsImpl;\n import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.progress.IOngoingStubbing;\n import org.mockito.internal.progress.MockingProgress;\n import org.mockito.internal.progress.ThreadSafeMockingProgress;\n import org.mockito.internal.stubbing.OngoingStubbingImpl;\n import org.mockito.internal.stubbing.StubberImpl;\n import org.mockito.internal.util.MockUtil;\n import org.mockito.internal.verification.api.VerificationMode;\n import org.mockito.stubbing.*;\n \n import java.util.Arrays;\n import java.util.List;\n \n @SuppressWarnings(\"unchecked\")\n public class MockitoCore {\n \n     private final Reporter reporter = new Reporter();\n     private final MockUtil mockUtil = new MockUtil();\n     private final MockingProgress mockingProgress = new ThreadSafeMockingProgress();\n     \n    public <T> T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) { return mock(classToMock, mockSettings); }\n    public <T> T mock(Class<T> classToMock, MockSettings mockSettings) {\n         mockingProgress.validateState();\n             mockingProgress.resetOngoingStubbing();\n         return mockUtil.createMock(classToMock, (MockSettingsImpl) mockSettings);\n     }\n     \n","SolutionWithNoComments":"\n package org.mockito;\n \n import org.mockito.internal.MockitoCore;\n import org.mockito.internal.creation.MockSettingsImpl;\n import org.mockito.internal.debugging.MockitoDebuggerImpl;\n import org.mockito.internal.stubbing.answers.*;\n import org.mockito.internal.stubbing.defaultanswers.*;\n import org.mockito.internal.verification.VerificationModeFactory;\n import org.mockito.internal.verification.api.VerificationMode;\n import org.mockito.runners.MockitoJUnitRunner;\n import org.mockito.stubbing.*;\n \n @SuppressWarnings(\"unchecked\")\n public class Mockito extends Matchers {\n     \n     private static final MockitoCore MOCKITO_CORE = new MockitoCore();\n     public static final Answer<Object> RETURNS_DEFAULTS = new GloballyConfiguredAnswer();\n     public static final Answer<Object> RETURNS_SMART_NULLS = new ReturnsSmartNulls();\n     \n     public static final Answer<Object> RETURNS_MOCKS = new ReturnsMocks();     public static final Answer<Object> CALLS_REAL_METHODS = new CallsRealMethods();\n     \n     public static <T> T mock(Class<T> classToMock) {\n         return mock(classToMock, withSettings().defaultAnswer(RETURNS_DEFAULTS));\n     }\n     public static <T> T mock(Class<T> classToMock, String name) {\n         return mock(classToMock, withSettings()\n                 .name(name)\n                 .defaultAnswer(RETURNS_DEFAULTS));\n     }\n     \n     @Deprecated\n     public static <T> T mock(Class<T> classToMock, ReturnValues returnValues) {\n         return mock(classToMock, withSettings().defaultAnswer(new AnswerReturnValuesAdapter(returnValues)));\n     }\n     public static <T> T mock(Class<T> classToMock, Answer defaultAnswer) {\n         return mock(classToMock, withSettings().defaultAnswer(defaultAnswer));\n     }\n     public static <T> T mock(Class<T> classToMock, MockSettings mockSettings) {\n        return MOCKITO_CORE.mock(classToMock, mockSettings, true);\n     }\n     \n     public static <T> T spy(T object) {\n         return MOCKITO_CORE.mock((Class<T>) object.getClass(), withSettings()\n                 .spiedInstance(object)\n                .defaultAnswer(CALLS_REAL_METHODS), true); \n     }\n \n\n package org.mockito.internal;\n \n import org.mockito.InOrder;\n import org.mockito.MockSettings;\n import org.mockito.exceptions.Reporter;\n import org.mockito.exceptions.misusing.NotAMockException;\n import org.mockito.internal.creation.MockSettingsImpl;\n import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.progress.IOngoingStubbing;\n import org.mockito.internal.progress.MockingProgress;\n import org.mockito.internal.progress.ThreadSafeMockingProgress;\n import org.mockito.internal.stubbing.OngoingStubbingImpl;\n import org.mockito.internal.stubbing.StubberImpl;\n import org.mockito.internal.util.MockUtil;\n import org.mockito.internal.verification.api.VerificationMode;\n import org.mockito.stubbing.*;\n \n import java.util.Arrays;\n import java.util.List;\n \n @SuppressWarnings(\"unchecked\")\n public class MockitoCore {\n \n     private final Reporter reporter = new Reporter();\n     private final MockUtil mockUtil = new MockUtil();\n     private final MockingProgress mockingProgress = new ThreadSafeMockingProgress();\n     \n    public <T> T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) {\n         mockingProgress.validateState();\n        if (shouldResetOngoingStubbing) {\n             mockingProgress.resetOngoingStubbing();\n        }\n         return mockUtil.createMock(classToMock, (MockSettingsImpl) mockSettings);\n     }\n     \n"},{"ids":343,"error":"junit.framework.AssertionFailedError","source":"/src/org/mockito/internal/configuration/injection/FinalMockCandidateFilter.java","code":"@@ -1,6 +1,7 @@\n package org.mockito.internal.configuration.injection;\n \n import org.mockito.exceptions.base.MockitoException;\n import org.mockito.internal.util.reflection.BeanPropertySetter;\n import org.mockito.internal.util.reflection.FieldSetter;\n \n import java.lang.reflect.Field;\n@@ -22,7 +23,9 @@ public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Fie\n             return new OngoingInjecter() {\n                 public boolean thenInject() {\n                     try {\n                             new FieldSetter(fieldInstance, field).set(matchingMock);\n                     } catch (Exception e) {\n                         throw new MockitoException(\"Problems injecting dependency in \" + field.getName(), e);\n                     }\n","solution":"@@ -1,6 +1,7 @@\n package org.mockito.internal.configuration.injection;\n \n import org.mockito.exceptions.base.MockitoException;\n import org.mockito.internal.util.reflection.BeanPropertySetter;\n import org.mockito.internal.util.reflection.FieldSetter;\n \n import java.lang.reflect.Field;\n@@ -22,7 +23,9 @@ public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Fie\n             return new OngoingInjecter() {\n                 public boolean thenInject() {\n                     try {\n                      if (!new BeanPropertySetter(fieldInstance, field).set(matchingMock)) {\n                             new FieldSetter(fieldInstance, field).set(matchingMock);\n                      }\n                     } catch (Exception e) {\n                         throw new MockitoException(\"Problems injecting dependency in \" + field.getName(), e);\n                     }\n","CodeWithNoComments":"\n package org.mockito.internal.configuration.injection;\n \n import org.mockito.exceptions.base.MockitoException;\n import org.mockito.internal.util.reflection.FieldSetter;\n \n import java.lang.reflect.Field;\n\n             return new OngoingInjecter() {\n                 public boolean thenInject() {\n                     try {\n                             new FieldSetter(fieldInstance, field).set(matchingMock);\n                     } catch (Exception e) {\n                         throw new MockitoException(\"Problems injecting dependency in \" + field.getName(), e);\n                     }\n","SolutionWithNoComments":"\n package org.mockito.internal.configuration.injection;\n \n import org.mockito.exceptions.base.MockitoException;\n import org.mockito.internal.util.reflection.BeanPropertySetter;\n import org.mockito.internal.util.reflection.FieldSetter;\n \n import java.lang.reflect.Field;\n\n             return new OngoingInjecter() {\n                 public boolean thenInject() {\n                     try {\n                        if (!new BeanPropertySetter(fieldInstance, field).set(matchingMock)) {\n                             new FieldSetter(fieldInstance, field).set(matchingMock);\n                        }\n                     } catch (Exception e) {\n                         throw new MockitoException(\"Problems injecting dependency in \" + field.getName(), e);\n                     }\n"},{"ids":344,"error":"junit.framework.AssertionFailedError","source":"/src/org/mockito/internal/MockHandler.java","code":"@@ -17,6 +17,7 @@\n import org.mockito.internal.stubbing.OngoingStubbingImpl;\n import org.mockito.internal.stubbing.StubbedInvocationMatcher;\n import org.mockito.internal.stubbing.VoidMethodStubbableImpl;\n import org.mockito.internal.verification.MockAwareVerificationMode;\n import org.mockito.internal.verification.VerificationDataImpl;\n import org.mockito.stubbing.Answer;\n import org.mockito.stubbing.VoidMethodStubbable;\n@@ -73,9 +74,11 @@ public Object handle(Invocation invocation) throws Throwable {\n         if (verificationMode != null) {\n             //We need to check if verification was started on the correct mock \n             // - see VerifyingWithAnExtraCallToADifferentMockTest\n                 VerificationDataImpl data = new VerificationDataImpl(invocationContainerImpl.getInvocations(), invocationMatcher);            \n                 verificationMode.verify(data);\n                 return null;\n         }\n         \n         invocationContainerImpl.setInvocationForPotentialStubbing(invocationMatcher);\n/src/org/mockito/internal/MockitoCore.java @@ -20,6 +20,7 @@\n import org.mockito.internal.stubbing.OngoingStubbingImpl;\n import org.mockito.internal.stubbing.StubberImpl;\n import org.mockito.internal.util.MockUtil;\n import org.mockito.internal.verification.MockAwareVerificationMode;\n import org.mockito.internal.verification.VerificationDataImpl;\n import org.mockito.internal.verification.VerificationModeFactory;\n import org.mockito.internal.verification.api.InOrderContext;\n@@ -70,7 +71,7 @@ public IOngoingStubbing stub() {\n         } else if (!mockUtil.isMock(mock)) {\n             reporter.notAMockPassedToVerify();\n         }\n      mockingProgress.verificationStarted(mode);\n         return mock;\n     }\n     \n","solution":"@@ -17,6 +17,7 @@\n import org.mockito.internal.stubbing.OngoingStubbingImpl;\n import org.mockito.internal.stubbing.StubbedInvocationMatcher;\n import org.mockito.internal.stubbing.VoidMethodStubbableImpl;\n import org.mockito.internal.verification.MockAwareVerificationMode;\n import org.mockito.internal.verification.VerificationDataImpl;\n import org.mockito.stubbing.Answer;\n import org.mockito.stubbing.VoidMethodStubbable;\n@@ -73,9 +74,11 @@ public Object handle(Invocation invocation) throws Throwable {\n         if (verificationMode != null) {\n             //We need to check if verification was started on the correct mock \n             // - see VerifyingWithAnExtraCallToADifferentMockTest\n          if (verificationMode instanceof MockAwareVerificationMode && ((MockAwareVerificationMode) verificationMode).getMock() == invocation.getMock()) {\n                 VerificationDataImpl data = new VerificationDataImpl(invocationContainerImpl.getInvocations(), invocationMatcher);            \n                 verificationMode.verify(data);\n                 return null;\n          }\n         }\n         \n         invocationContainerImpl.setInvocationForPotentialStubbing(invocationMatcher);\n/src/org/mockito/internal/MockitoCore.java @@ -20,6 +20,7 @@\n import org.mockito.internal.stubbing.OngoingStubbingImpl;\n import org.mockito.internal.stubbing.StubberImpl;\n import org.mockito.internal.util.MockUtil;\n import org.mockito.internal.verification.MockAwareVerificationMode;\n import org.mockito.internal.verification.VerificationDataImpl;\n import org.mockito.internal.verification.VerificationModeFactory;\n import org.mockito.internal.verification.api.InOrderContext;\n@@ -70,7 +71,7 @@ public IOngoingStubbing stub() {\n         } else if (!mockUtil.isMock(mock)) {\n             reporter.notAMockPassedToVerify();\n         }\n      mockingProgress.verificationStarted(new MockAwareVerificationMode(mock, mode));\n         return mock;\n     }\n     \n","CodeWithNoComments":"\n import org.mockito.internal.stubbing.OngoingStubbingImpl;\n import org.mockito.internal.stubbing.StubbedInvocationMatcher;\n import org.mockito.internal.stubbing.VoidMethodStubbableImpl;\n import org.mockito.internal.verification.VerificationDataImpl;\n import org.mockito.stubbing.Answer;\n import org.mockito.stubbing.VoidMethodStubbable;\n\n         if (verificationMode != null) {\n                                           VerificationDataImpl data = new VerificationDataImpl(invocationContainerImpl.getInvocations(), invocationMatcher);            \n                 verificationMode.verify(data);\n                 return null;\n         }\n         \n         invocationContainerImpl.setInvocationForPotentialStubbing(invocationMatcher);\n\n import org.mockito.internal.stubbing.OngoingStubbingImpl;\n import org.mockito.internal.stubbing.StubberImpl;\n import org.mockito.internal.util.MockUtil;\n import org.mockito.internal.verification.VerificationDataImpl;\n import org.mockito.internal.verification.VerificationModeFactory;\n import org.mockito.internal.verification.api.InOrderContext;\n\n         } else if (!mockUtil.isMock(mock)) {\n             reporter.notAMockPassedToVerify();\n         }\n        mockingProgress.verificationStarted(mode);\n         return mock;\n     }\n     \n","SolutionWithNoComments":"\n import org.mockito.internal.stubbing.OngoingStubbingImpl;\n import org.mockito.internal.stubbing.StubbedInvocationMatcher;\n import org.mockito.internal.stubbing.VoidMethodStubbableImpl;\n import org.mockito.internal.verification.MockAwareVerificationMode;\n import org.mockito.internal.verification.VerificationDataImpl;\n import org.mockito.stubbing.Answer;\n import org.mockito.stubbing.VoidMethodStubbable;\n\n         if (verificationMode != null) {\n                                      if (verificationMode instanceof MockAwareVerificationMode && ((MockAwareVerificationMode) verificationMode).getMock() == invocation.getMock()) {\n                 VerificationDataImpl data = new VerificationDataImpl(invocationContainerImpl.getInvocations(), invocationMatcher);            \n                 verificationMode.verify(data);\n                 return null;\n            }\n         }\n         \n         invocationContainerImpl.setInvocationForPotentialStubbing(invocationMatcher);\n\n import org.mockito.internal.stubbing.OngoingStubbingImpl;\n import org.mockito.internal.stubbing.StubberImpl;\n import org.mockito.internal.util.MockUtil;\n import org.mockito.internal.verification.MockAwareVerificationMode;\n import org.mockito.internal.verification.VerificationDataImpl;\n import org.mockito.internal.verification.VerificationModeFactory;\n import org.mockito.internal.verification.api.InOrderContext;\n\n         } else if (!mockUtil.isMock(mock)) {\n             reporter.notAMockPassedToVerify();\n         }\n        mockingProgress.verificationStarted(new MockAwareVerificationMode(mock, mode));\n         return mock;\n     }\n     \n"},{"ids":345,"error":"java.lang.ClassCastException","source":"/src/org/mockito/internal/util/reflection/GenericMaster.java","code":"@@ -17,8 +17,12 @@ public Class getGenericType(Field field) {\n         Type generic = field.getGenericType();\n         if (generic != null && generic instanceof ParameterizedType) {\n             Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0];\n                 return (Class) actual;\n                 //in case of nested generics we don't go deep\n         }\n         \n         return Object.class;\n","solution":"@@ -17,8 +17,12 @@ public Class getGenericType(Field field) {\n         Type generic = field.getGenericType();\n         if (generic != null && generic instanceof ParameterizedType) {\n             Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0];\n          if (actual instanceof Class) {\n                 return (Class) actual;\n          } else if (actual instanceof ParameterizedType) {\n                 //in case of nested generics we don't go deep\n              return (Class) ((ParameterizedType) actual).getRawType();\n          }\n         }\n         \n         return Object.class;\n","CodeWithNoComments":"\n         Type generic = field.getGenericType();\n         if (generic != null && generic instanceof ParameterizedType) {\n             Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0];\n                 return (Class) actual;\n                          }\n         \n         return Object.class;\n","SolutionWithNoComments":"\n         Type generic = field.getGenericType();\n         if (generic != null && generic instanceof ParameterizedType) {\n             Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0];\n            if (actual instanceof Class) {\n                 return (Class) actual;\n            } else if (actual instanceof ParameterizedType) {\n                                 return (Class) ((ParameterizedType) actual).getRawType();\n            }\n         }\n         \n         return Object.class;\n"},{"ids":346,"error":"junit.framework.AssertionFailedError","source":"/src/org/mockito/internal/MockHandler.java","code":"@@ -74,12 +74,14 @@ public Object handle(Invocation invocation) throws Throwable {\n         if (verificationMode != null) {\n             //We need to check if verification was started on the correct mock \n             // - see VerifyingWithAnExtraCallToADifferentMockTest (bug 138)\n          if (verificationMode instanceof MockAwareVerificationMode && ((MockAwareVerificationMode) verificationMode).getMock() == invocation.getMock()) {                \n                 VerificationDataImpl data = new VerificationDataImpl(invocationContainerImpl, invocationMatcher);            \n                 verificationMode.verify(data);\n                 return null;\n                 // this means there is an invocation on a different mock. Re-adding verification mode \n                 // - see VerifyingWithAnExtraCallToADifferentMockTest (bug 138)\n             }\n         }\n         \n","solution":"@@ -74,12 +74,14 @@ public Object handle(Invocation invocation) throws Throwable {\n         if (verificationMode != null) {\n             //We need to check if verification was started on the correct mock \n             // - see VerifyingWithAnExtraCallToADifferentMockTest (bug 138)\n          if (((MockAwareVerificationMode) verificationMode).getMock() == invocation.getMock()) {                \n                 VerificationDataImpl data = new VerificationDataImpl(invocationContainerImpl, invocationMatcher);            \n                 verificationMode.verify(data);\n                 return null;\n          } else {\n                 // this means there is an invocation on a different mock. Re-adding verification mode \n                 // - see VerifyingWithAnExtraCallToADifferentMockTest (bug 138)\n              mockingProgress.verificationStarted(verificationMode);\n             }\n         }\n         \n","CodeWithNoComments":"\n         if (verificationMode != null) {\n                                      if (verificationMode instanceof MockAwareVerificationMode && ((MockAwareVerificationMode) verificationMode).getMock() == invocation.getMock()) {                \n                 VerificationDataImpl data = new VerificationDataImpl(invocationContainerImpl, invocationMatcher);            \n                 verificationMode.verify(data);\n                 return null;\n                                               }\n         }\n         \n","SolutionWithNoComments":"\n         if (verificationMode != null) {\n                                      if (((MockAwareVerificationMode) verificationMode).getMock() == invocation.getMock()) {                \n                 VerificationDataImpl data = new VerificationDataImpl(invocationContainerImpl, invocationMatcher);            \n                 verificationMode.verify(data);\n                 return null;\n            } else {\n                                                  mockingProgress.verificationStarted(verificationMode);\n             }\n         }\n         \n"},{"ids":347,"error":"java.io.NotSerializableException","source":"/src/org/mockito/internal/creation/MockSettingsImpl.java","code":"@@ -17,9 +17,11 @@\n     private Object spiedInstance;\n     private Answer<Object> defaultAnswer;\n     private MockName mockName;\n \n     public MockSettings serializable() {\n      return this.extraInterfaces(java.io.Serializable.class);\n     }\n \n     public MockSettings extraInterfaces(Class<?>... extraInterfaces) {\n@@ -71,7 +73,7 @@ public MockSettings defaultAnswer(Answer defaultAnswer) {\n     }\n \n     public boolean isSerializable() {\n      return extraInterfaces != null && java.util.Arrays.asList(extraInterfaces).contains(java.io.Serializable.class);\n     }\n \n     public void initiateMockName(Class classToMock) {\n/src/org/mockito/internal/util/MockUtil.java @@ -16,6 +16,7 @@\n import org.mockito.internal.creation.jmock.ClassImposterizer;\n import org.mockito.internal.util.reflection.LenientCopyTool;\n \n import java.io.Serializable;\n \n @SuppressWarnings(\"unchecked\")\n public class MockUtil {\n@@ -42,7 +43,11 @@ public MockUtil() {\n         Class<?>[] interfaces = settings.getExtraInterfaces();\n \n         Class<?>[] ancillaryTypes;\n             ancillaryTypes = interfaces == null ? new Class<?>[0] : interfaces;\n \n         Object spiedInstance = settings.getSpiedInstance();\n         \n","solution":"@@ -17,9 +17,11 @@\n     private Object spiedInstance;\n     private Answer<Object> defaultAnswer;\n     private MockName mockName;\n  private boolean serializable;\n \n     public MockSettings serializable() {\n      this.serializable = true;\n      return this;\n     }\n \n     public MockSettings extraInterfaces(Class<?>... extraInterfaces) {\n@@ -71,7 +73,7 @@ public MockSettings defaultAnswer(Answer defaultAnswer) {\n     }\n \n     public boolean isSerializable() {\n      return serializable;\n     }\n \n     public void initiateMockName(Class classToMock) {\n/src/org/mockito/internal/util/MockUtil.java @@ -16,6 +16,7 @@\n import org.mockito.internal.creation.jmock.ClassImposterizer;\n import org.mockito.internal.util.reflection.LenientCopyTool;\n \n import java.io.Serializable;\n \n @SuppressWarnings(\"unchecked\")\n public class MockUtil {\n@@ -42,7 +43,11 @@ public MockUtil() {\n         Class<?>[] interfaces = settings.getExtraInterfaces();\n \n         Class<?>[] ancillaryTypes;\n      if (settings.isSerializable()) {\n          ancillaryTypes = interfaces == null ? new Class<?>[] {Serializable.class} : new ArrayUtils().concat(interfaces, Serializable.class);\n      } else {\n             ancillaryTypes = interfaces == null ? new Class<?>[0] : interfaces;\n      }\n \n         Object spiedInstance = settings.getSpiedInstance();\n         \n","CodeWithNoComments":"\n     private Object spiedInstance;\n     private Answer<Object> defaultAnswer;\n     private MockName mockName;\n \n     public MockSettings serializable() {\n        return this.extraInterfaces(java.io.Serializable.class);\n     }\n \n     public MockSettings extraInterfaces(Class<?>... extraInterfaces) {\n\n     }\n \n     public boolean isSerializable() {\n        return extraInterfaces != null && java.util.Arrays.asList(extraInterfaces).contains(java.io.Serializable.class);\n     }\n \n     public void initiateMockName(Class classToMock) {\n\n import org.mockito.internal.creation.jmock.ClassImposterizer;\n import org.mockito.internal.util.reflection.LenientCopyTool;\n \n \n @SuppressWarnings(\"unchecked\")\n public class MockUtil {\n\n         Class<?>[] interfaces = settings.getExtraInterfaces();\n \n         Class<?>[] ancillaryTypes;\n             ancillaryTypes = interfaces == null ? new Class<?>[0] : interfaces;\n \n         Object spiedInstance = settings.getSpiedInstance();\n         \n","SolutionWithNoComments":"\n     private Object spiedInstance;\n     private Answer<Object> defaultAnswer;\n     private MockName mockName;\n    private boolean serializable;\n \n     public MockSettings serializable() {\n        this.serializable = true;\n        return this;\n     }\n \n     public MockSettings extraInterfaces(Class<?>... extraInterfaces) {\n\n     }\n \n     public boolean isSerializable() {\n        return serializable;\n     }\n \n     public void initiateMockName(Class classToMock) {\n\n import org.mockito.internal.creation.jmock.ClassImposterizer;\n import org.mockito.internal.util.reflection.LenientCopyTool;\n \n import java.io.Serializable;\n \n @SuppressWarnings(\"unchecked\")\n public class MockUtil {\n\n         Class<?>[] interfaces = settings.getExtraInterfaces();\n \n         Class<?>[] ancillaryTypes;\n        if (settings.isSerializable()) {\n            ancillaryTypes = interfaces == null ? new Class<?>[] {Serializable.class} : new ArrayUtils().concat(interfaces, Serializable.class);\n        } else {\n             ancillaryTypes = interfaces == null ? new Class<?>[0] : interfaces;\n        }\n \n         Object spiedInstance = settings.getSpiedInstance();\n         \n"},{"ids":348,"error":"java.lang.NullPointerException","source":"/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java","code":"@@ -84,6 +84,8 @@ Object returnValueFor(Class<?> type) {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n         } else if (type == Collection.class) {\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n","solution":"@@ -84,6 +84,8 @@ Object returnValueFor(Class<?> type) {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n      } else if (type == Iterable.class) {\n          return new ArrayList<Object>(0);\n         } else if (type == Collection.class) {\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n","CodeWithNoComments":"\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n                                   } else if (type == Collection.class) {\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n","SolutionWithNoComments":"\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n                                  } else if (type == Iterable.class) {\n            return new ArrayList<Object>(0);\n         } else if (type == Collection.class) {\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n"},{"ids":349,"error":"java.lang.RuntimeException","source":"/src/org/mockito/internal/matchers/Equality.java","code":"@@ -10,7 +10,9 @@\n public class Equality {\n \n     public static boolean areEqual(Object o1, Object o2) {\n      if (o1 == null || o2 == null) {\n             return o1 == null && o2 == null;\n         } else if (isArray(o1)) {\n             return isArray(o2) && areArraysEqual(o1, o2);\n","solution":"@@ -10,7 +10,9 @@\n public class Equality {\n \n     public static boolean areEqual(Object o1, Object o2) {\n      if (o1 == o2 ) {\n          return true;\n\t} else if (o1 == null || o2 == null) {\n             return o1 == null && o2 == null;\n         } else if (isArray(o1)) {\n             return isArray(o2) && areArraysEqual(o1, o2);\n","CodeWithNoComments":"\n public class Equality {\n \n     public static boolean areEqual(Object o1, Object o2) {\n        if (o1 == null || o2 == null) {\n             return o1 == null && o2 == null;\n         } else if (isArray(o1)) {\n             return isArray(o2) && areArraysEqual(o1, o2);\n","SolutionWithNoComments":"\n public class Equality {\n \n     public static boolean areEqual(Object o1, Object o2) {\n        if (o1 == o2 ) {\n            return true;\n        } else if (o1 == null || o2 == null) {\n             return o1 == null && o2 == null;\n         } else if (isArray(o1)) {\n             return isArray(o2) && areArraysEqual(o1, o2);\n"},{"ids":350,"error":"junit.framework.ComparisonFailure","source":"/src/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java","code":"@@ -29,9 +29,10 @@ public ByteBuddyMockMaker() {\n                 settings.getTypeToMock(),\n                 settings.getExtraInterfaces()\n         );\n         T mockInstance = null;\n         try {\n          mockInstance = classInstantiator.instantiate(mockedProxyType);\n             MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;\n             mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));\n \n@@ -42,7 +43,7 @@ public ByteBuddyMockMaker() {\n                     \"  class to mock : \" + describeClass(mockedProxyType),\n                     \"  created class : \" + describeClass(settings.getTypeToMock()),\n                     \"  proxy instance class : \" + describeClass(mockInstance),\n                  \"  instance creation by : \" + classInstantiator.getClass().getSimpleName(),\n                     \"\",\n                     \"You might experience classloading issues, please ask the mockito mailing-list.\",\n                     \"\"\n","solution":"@@ -29,9 +29,10 @@ public ByteBuddyMockMaker() {\n                 settings.getTypeToMock(),\n                 settings.getExtraInterfaces()\n         );\n      Instantiator instantiator = new InstantiatorProvider().getInstantiator(settings);\n         T mockInstance = null;\n         try {\n          mockInstance = instantiator.newInstance(mockedProxyType);\n             MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;\n             mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));\n \n@@ -42,7 +43,7 @@ public ByteBuddyMockMaker() {\n                     \"  class to mock : \" + describeClass(mockedProxyType),\n                     \"  created class : \" + describeClass(settings.getTypeToMock()),\n                     \"  proxy instance class : \" + describeClass(mockInstance),\n                  \"  instance creation by : \" + instantiator.getClass().getSimpleName(),\n                     \"\",\n                     \"You might experience classloading issues, please ask the mockito mailing-list.\",\n                     \"\"\n","CodeWithNoComments":"\n                 settings.getTypeToMock(),\n                 settings.getExtraInterfaces()\n         );\n         T mockInstance = null;\n         try {\n            mockInstance = classInstantiator.instantiate(mockedProxyType);\n             MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;\n             mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));\n \n\n                     \"  class to mock : \" + describeClass(mockedProxyType),\n                     \"  created class : \" + describeClass(settings.getTypeToMock()),\n                     \"  proxy instance class : \" + describeClass(mockInstance),\n                    \"  instance creation by : \" + classInstantiator.getClass().getSimpleName(),\n                     \"\",\n                     \"You might experience classloading issues, please ask the mockito mailing-list.\",\n                     \"\"\n","SolutionWithNoComments":"\n                 settings.getTypeToMock(),\n                 settings.getExtraInterfaces()\n         );\n        Instantiator instantiator = new InstantiatorProvider().getInstantiator(settings);\n         T mockInstance = null;\n         try {\n            mockInstance = instantiator.newInstance(mockedProxyType);\n             MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;\n             mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));\n \n\n                     \"  class to mock : \" + describeClass(mockedProxyType),\n                     \"  created class : \" + describeClass(settings.getTypeToMock()),\n                     \"  proxy instance class : \" + describeClass(mockInstance),\n                    \"  instance creation by : \" + instantiator.getClass().getSimpleName(),\n                     \"\",\n                     \"You might experience classloading issues, please ask the mockito mailing-list.\",\n                     \"\"\n"},{"ids":351,"error":"junit.framework.AssertionFailedError","source":"/src/org/mockito/internal/configuration/injection/PropertyAndSetterInjection.java","code":"@@ -111,7 +111,7 @@ private boolean injectMockCandidates(Class<?> awaitingInjectionClazz, Set<Object\n     private boolean injectMockCandidatesOnFields(Set<Object> mocks, Object instance, boolean injectionOccurred, List<Field> orderedInstanceFields) {\n         for (Iterator<Field> it = orderedInstanceFields.iterator(); it.hasNext(); ) {\n             Field field = it.next();\n          Object injected = mockCandidateFilter.filterCandidate(mocks, field, instance).thenInject();\n             if (injected != null) {\n                 injectionOccurred |= true;\n                 mocks.remove(injected);\n/src/org/mockito/internal/configuration/injection/filter/FinalMockCandidateFilter.java @@ -10,6 +10,7 @@\n \n import java.lang.reflect.Field;\n import java.util.Collection;\n import java.util.List;\n \n /**\n  * This node returns an actual injecter which will be either :\n@@ -20,7 +21,7 @@\n  * <\/ul>\n  */\n public class FinalMockCandidateFilter implements MockCandidateFilter {\n  public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, final Object fieldInstance) {\n         if(mocks.size() == 1) {\n             final Object matchingMock = mocks.iterator().next();\n \n/src/org/mockito/internal/configuration/injection/filter/MockCandidateFilter.java @@ -6,13 +6,14 @@\n \n import java.lang.reflect.Field;\n import java.util.Collection;\n import java.util.List;\n \n public interface MockCandidateFilter {\n \n     OngoingInjecter filterCandidate(\n             Collection<Object> mocks,\n             Field fieldToBeInjected,\n          Object fieldInstance\n     );\n \n }\n/src/org/mockito/internal/configuration/injection/filter/NameBasedCandidateFilter.java @@ -20,7 +20,7 @@ public NameBasedCandidateFilter(MockCandidateFilter next) {\n \t}\n \n \tpublic OngoingInjecter filterCandidate(Collection<Object> mocks,\n\t\tField field, Object fieldInstance) {\n \t\tList<Object> mockNameMatches = new ArrayList<Object>();\n \t\tif (mocks.size() > 1) {\n \t\t\tfor (Object mock : mocks) {\n@@ -28,7 +28,7 @@ public OngoingInjecter filterCandidate(Collection<Object> mocks,\n \t\t\t\t\tmockNameMatches.add(mock);\n \t\t\t\t}\n \t\t\t}\n\t\treturn next.filterCandidate(mockNameMatches, field,\n \t\t\t\t\tfieldInstance);\n \t\t\t/*\n \t\t\t * In this case we have to check whether we have conflicting naming\n@@ -39,7 +39,23 @@ public OngoingInjecter filterCandidate(Collection<Object> mocks,\n \t\t\t * whenever we find a field that does match its name with the mock\n \t\t\t * name, we should take that field instead.\n \t\t\t */\n\n\n \t\t}\n\treturn next.filterCandidate(mocks, field, fieldInstance);\n \t}\n }\n/src/org/mockito/internal/configuration/injection/filter/TypeBasedCandidateFilter.java @@ -17,7 +17,7 @@ public TypeBasedCandidateFilter(MockCandidateFilter next) {\n         this.next = next;\n     }\n \n  public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, Object fieldInstance) {\n         List<Object> mockTypeMatches = new ArrayList<Object>();\n         for (Object mock : mocks) {\n             if (field.getType().isAssignableFrom(mock.getClass())) {\n@@ -25,6 +25,6 @@ public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, Ob\n             }\n         }\n \n      return next.filterCandidate(mockTypeMatches, field, fieldInstance);\n     }\n }\n","solution":"@@ -111,7 +111,7 @@ private boolean injectMockCandidates(Class<?> awaitingInjectionClazz, Set<Object\n     private boolean injectMockCandidatesOnFields(Set<Object> mocks, Object instance, boolean injectionOccurred, List<Field> orderedInstanceFields) {\n         for (Iterator<Field> it = orderedInstanceFields.iterator(); it.hasNext(); ) {\n             Field field = it.next();\n          Object injected = mockCandidateFilter.filterCandidate(mocks, field, orderedInstanceFields, instance).thenInject();\n             if (injected != null) {\n                 injectionOccurred |= true;\n                 mocks.remove(injected);\n/src/org/mockito/internal/configuration/injection/filter/FinalMockCandidateFilter.java @@ -10,6 +10,7 @@\n \n import java.lang.reflect.Field;\n import java.util.Collection;\n import java.util.List;\n \n /**\n  * This node returns an actual injecter which will be either :\n@@ -20,7 +21,7 @@\n  * <\/ul>\n  */\n public class FinalMockCandidateFilter implements MockCandidateFilter {\n  public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, List<Field> fields, final Object fieldInstance) {\n         if(mocks.size() == 1) {\n             final Object matchingMock = mocks.iterator().next();\n \n/src/org/mockito/internal/configuration/injection/filter/MockCandidateFilter.java @@ -6,13 +6,14 @@\n \n import java.lang.reflect.Field;\n import java.util.Collection;\n import java.util.List;\n \n public interface MockCandidateFilter {\n \n     OngoingInjecter filterCandidate(\n             Collection<Object> mocks,\n             Field fieldToBeInjected,\n          List<Field> fields, Object instance\n     );\n \n }\n/src/org/mockito/internal/configuration/injection/filter/NameBasedCandidateFilter.java @@ -20,7 +20,7 @@ public NameBasedCandidateFilter(MockCandidateFilter next) {\n \t}\n \n \tpublic OngoingInjecter filterCandidate(Collection<Object> mocks,\n\t\t\tField field, List<Field> fields, Object fieldInstance) {\n \t\tList<Object> mockNameMatches = new ArrayList<Object>();\n \t\tif (mocks.size() > 1) {\n \t\t\tfor (Object mock : mocks) {\n@@ -28,7 +28,7 @@ public OngoingInjecter filterCandidate(Collection<Object> mocks,\n \t\t\t\t\tmockNameMatches.add(mock);\n \t\t\t\t}\n \t\t\t}\n\t\t\treturn next.filterCandidate(mockNameMatches, field, fields,\n \t\t\t\t\tfieldInstance);\n \t\t\t/*\n \t\t\t * In this case we have to check whether we have conflicting naming\n@@ -39,7 +39,23 @@ public OngoingInjecter filterCandidate(Collection<Object> mocks,\n \t\t\t * whenever we find a field that does match its name with the mock\n \t\t\t * name, we should take that field instead.\n \t\t\t */\n\t\t} else if (mocks.size() == 1) {\n\t\t\tString mockName = mockUtil.getMockName(mocks.iterator().next())\n\t\t\t\t\t.toString();\n\n\t\t\tfor (Field otherField : fields) {\n\t\t\t\tif (!otherField.equals(field)\n\t\t\t\t\t\t&& otherField.getType().equals(field.getType())\n\t\t\t\t\t\t&& otherField.getName().equals(mockName)) {\n\n\t\t\t\t\treturn new OngoingInjecter() {\n\t\t\t\t\t\tpublic Object thenInject() {\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n \t\t}\n\t\treturn next.filterCandidate(mocks, field, fields, fieldInstance);\n \t}\n }\n/src/org/mockito/internal/configuration/injection/filter/TypeBasedCandidateFilter.java @@ -17,7 +17,7 @@ public TypeBasedCandidateFilter(MockCandidateFilter next) {\n         this.next = next;\n     }\n \n  public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, List<Field> fields, Object fieldInstance) {\n         List<Object> mockTypeMatches = new ArrayList<Object>();\n         for (Object mock : mocks) {\n             if (field.getType().isAssignableFrom(mock.getClass())) {\n@@ -25,6 +25,6 @@ public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, Ob\n             }\n         }\n \n      return next.filterCandidate(mockTypeMatches, field, fields, fieldInstance);\n     }\n }\n","CodeWithNoComments":"\n     private boolean injectMockCandidatesOnFields(Set<Object> mocks, Object instance, boolean injectionOccurred, List<Field> orderedInstanceFields) {\n         for (Iterator<Field> it = orderedInstanceFields.iterator(); it.hasNext(); ) {\n             Field field = it.next();\n            Object injected = mockCandidateFilter.filterCandidate(mocks, field, instance).thenInject();\n             if (injected != null) {\n                 injectionOccurred |= true;\n                 mocks.remove(injected);\n\n \n import java.lang.reflect.Field;\n import java.util.Collection;\n \n public class FinalMockCandidateFilter implements MockCandidateFilter {\n    public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, final Object fieldInstance) {\n         if(mocks.size() == 1) {\n             final Object matchingMock = mocks.iterator().next();\n \n\n \n import java.lang.reflect.Field;\n import java.util.Collection;\n \n public interface MockCandidateFilter {\n \n     OngoingInjecter filterCandidate(\n             Collection<Object> mocks,\n             Field fieldToBeInjected,\n            Object fieldInstance\n     );\n \n }\n\n \t}\n \n \tpublic OngoingInjecter filterCandidate(Collection<Object> mocks,\n\t\t\tField field, Object fieldInstance) {\n \t\tList<Object> mockNameMatches = new ArrayList<Object>();\n \t\tif (mocks.size() > 1) {\n \t\t\tfor (Object mock : mocks) {\n\n \t\t\t\t\tmockNameMatches.add(mock);\n \t\t\t\t}\n \t\t\t}\n\t\t\treturn next.filterCandidate(mockNameMatches, field,\n \t\t\t\t\tfieldInstance);\n \t\t\t\n \t\t}\n-\t\treturn next.filterCandidate(mocks, field, fieldInstance);\n \t}\n }\n\n         this.next = next;\n     }\n \n    public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, Object fieldInstance) {\n         List<Object> mockTypeMatches = new ArrayList<Object>();\n         for (Object mock : mocks) {\n             if (field.getType().isAssignableFrom(mock.getClass())) {\n\n             }\n         }\n \n        return next.filterCandidate(mockTypeMatches, field, fieldInstance);\n     }\n }\n","SolutionWithNoComments":"\n     private boolean injectMockCandidatesOnFields(Set<Object> mocks, Object instance, boolean injectionOccurred, List<Field> orderedInstanceFields) {\n         for (Iterator<Field> it = orderedInstanceFields.iterator(); it.hasNext(); ) {\n             Field field = it.next();\n            Object injected = mockCandidateFilter.filterCandidate(mocks, field, orderedInstanceFields, instance).thenInject();\n             if (injected != null) {\n                 injectionOccurred |= true;\n                 mocks.remove(injected);\n\n \n import java.lang.reflect.Field;\n import java.util.Collection;\n import java.util.List;\n public class FinalMockCandidateFilter implements MockCandidateFilter {\n    public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, List<Field> fields, final Object fieldInstance) {\n         if(mocks.size() == 1) {\n             final Object matchingMock = mocks.iterator().next();\n \n\n \n import java.lang.reflect.Field;\n import java.util.Collection;\n import java.util.List;\n \n public interface MockCandidateFilter {\n \n     OngoingInjecter filterCandidate(\n             Collection<Object> mocks,\n             Field fieldToBeInjected,\n            List<Field> fields, Object instance\n     );\n \n }\n\n \t}\n \n \tpublic OngoingInjecter filterCandidate(Collection<Object> mocks,\n\t\t\tField field, List<Field> fields, Object fieldInstance) {\n \t\tList<Object> mockNameMatches = new ArrayList<Object>();\n \t\tif (mocks.size() > 1) {\n \t\t\tfor (Object mock : mocks) {\n\n \t\t\t\t\tmockNameMatches.add(mock);\n \t\t\t\t}\n \t\t\t}\n\t\t\treturn next.filterCandidate(mockNameMatches, field, fields,\n \t\t\t\t\tfieldInstance);\n\t\t} else if (mocks.size() == 1) {\n\t\t\tString mockName = mockUtil.getMockName(mocks.iterator().next())\n\t\t\t\t\t.toString();\t\t\tfor (Field otherField : fields) {\n\t\t\t\tif (!otherField.equals(field)\n\t\t\t\t\t\t&& otherField.getType().equals(field.getType())\n\t\t\t\t\t\t&& otherField.getName().equals(mockName)) {\t\t\t\t\treturn new OngoingInjecter() {\n\t\t\t\t\t\tpublic Object thenInject() {\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n \t\t}\n\t\treturn next.filterCandidate(mocks, field, fields, fieldInstance);\n \t}\n }\n\n         this.next = next;\n     }\n \n    public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, List<Field> fields, Object fieldInstance) {\n         List<Object> mockTypeMatches = new ArrayList<Object>();\n         for (Object mock : mocks) {\n             if (field.getType().isAssignableFrom(mock.getClass())) {\n\n             }\n         }\n \n        return next.filterCandidate(mockTypeMatches, field, fields, fieldInstance);\n     }\n }\n"},{"ids":352,"error":"org.mockito.internal.creation.instance.InstantationException","source":"/src/org/mockito/internal/creation/instance/ConstructorInstantiator.java","code":"@@ -14,18 +14,23 @@ public ConstructorInstantiator(Object outerClassInstance) {\n         if (outerClassInstance == null) {\n             return noArgConstructor(cls);\n         }\n      return withOuterClass(cls);\n     }\n \n  private <T> T withOuterClass(Class<T> cls) {\n         try {\n             //this is kind of overengineered because we don't need to support more params\n             //however, I know we will be needing it :)\n          Constructor<T> c = cls.getDeclaredConstructor(outerClassInstance.getClass());\n          return c.newInstance(outerClassInstance);\n         } catch (Exception e) {\n             throw paramsException(cls, e);\n         }\n     }\n \n     private static <T> InstantationException paramsException(Class<T> cls, Exception e) {\n@@ -33,6 +38,17 @@ public ConstructorInstantiator(Object outerClassInstance) {\n                 + cls.getSimpleName() + \"'.\\nPlease ensure that the outer instance has correct type and that the target class has parameter-less constructor.\", e);\n     }\n \n \n     private static <T> T noArgConstructor(Class<T> cls) {\n         try {\n","solution":"@@ -14,18 +14,23 @@ public ConstructorInstantiator(Object outerClassInstance) {\n         if (outerClassInstance == null) {\n             return noArgConstructor(cls);\n         }\n      return withParams(cls, outerClassInstance);\n     }\n \n  private static <T> T withParams(Class<T> cls, Object... params) {\n         try {\n             //this is kind of overengineered because we don't need to support more params\n             //however, I know we will be needing it :)\n          for (Constructor<?> constructor : cls.getDeclaredConstructors()) {\n              Class<?>[] types = constructor.getParameterTypes();\n              if (paramsMatch(types, params)) {\n                  return (T) constructor.newInstance(params);\n              }\n          }\n         } catch (Exception e) {\n             throw paramsException(cls, e);\n         }\n      throw paramsException(cls, null);\n     }\n \n     private static <T> InstantationException paramsException(Class<T> cls, Exception e) {\n@@ -33,6 +38,17 @@ public ConstructorInstantiator(Object outerClassInstance) {\n                 + cls.getSimpleName() + \"'.\\nPlease ensure that the outer instance has correct type and that the target class has parameter-less constructor.\", e);\n     }\n \n  private static boolean paramsMatch(Class<?>[] types, Object[] params) {\n      if (params.length != types.length) {\n          return false;\n      }\n      for (int i = 0; i < params.length; i++) {\n          if (!types[i].isInstance(params[i])) {\n              return false;\n          }\n      }\n      return true;\n  }\n \n     private static <T> T noArgConstructor(Class<T> cls) {\n         try {\n","CodeWithNoComments":"\n         if (outerClassInstance == null) {\n             return noArgConstructor(cls);\n         }\n        return withOuterClass(cls);\n     }\n \n    private <T> T withOuterClass(Class<T> cls) {\n         try {\n                                      Constructor<T> c = cls.getDeclaredConstructor(outerClassInstance.getClass());\n            return c.newInstance(outerClassInstance);\n         } catch (Exception e) {\n             throw paramsException(cls, e);\n         }\n     }\n \n     private static <T> InstantationException paramsException(Class<T> cls, Exception e) {\n\n                 + cls.getSimpleName() + \"'.\\nPlease ensure that the outer instance has correct type and that the target class has parameter-less constructor.\", e);\n     }\n \n \n     private static <T> T noArgConstructor(Class<T> cls) {\n         try {\n","SolutionWithNoComments":"\n         if (outerClassInstance == null) {\n             return noArgConstructor(cls);\n         }\n        return withParams(cls, outerClassInstance);\n     }\n \n    private static <T> T withParams(Class<T> cls, Object... params) {\n         try {\n                                      for (Constructor<?> constructor : cls.getDeclaredConstructors()) {\n                Class<?>[] types = constructor.getParameterTypes();\n                if (paramsMatch(types, params)) {\n                    return (T) constructor.newInstance(params);\n                }\n            }\n         } catch (Exception e) {\n             throw paramsException(cls, e);\n         }\n        throw paramsException(cls, null);\n     }\n \n     private static <T> InstantationException paramsException(Class<T> cls, Exception e) {\n\n                 + cls.getSimpleName() + \"'.\\nPlease ensure that the outer instance has correct type and that the target class has parameter-less constructor.\", e);\n     }\n \n    private static boolean paramsMatch(Class<?>[] types, Object[] params) {\n        if (params.length != types.length) {\n            return false;\n        }\n        for (int i = 0; i < params.length; i++) {\n            if (!types[i].isInstance(params[i])) {\n                return false;\n            }\n        }\n        return true;\n    }\n \n     private static <T> T noArgConstructor(Class<T> cls) {\n         try {\n"},{"ids":353,"error":"java.io.NotSerializableException","source":"/src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java","code":"@@ -41,14 +41,16 @@\n     \n     private static final long serialVersionUID = -7105341425736035847L;\n \n  private MockitoCore mockitoCore = new MockitoCore();\n  private ReturnsEmptyValues delegate = new ReturnsEmptyValues();\n \n     public Object answer(InvocationOnMock invocation) throws Throwable {\n         GenericMetadataSupport returnTypeGenericMetadata =\n                 actualParameterizedType(invocation.getMock()).resolveGenericReturnType(invocation.getMethod());\n \n         Class<?> rawType = returnTypeGenericMetadata.rawType();\n         if (!mockitoCore.isTypeMockable(rawType)) {\n             return delegate.returnValueFor(rawType);\n         }\n@@ -56,7 +58,17 @@ public Object answer(InvocationOnMock invocation) throws Throwable {\n         return getMock(invocation, returnTypeGenericMetadata);\n     }\n \n \n \n     private Object getMock(InvocationOnMock invocation, GenericMetadataSupport returnTypeGenericMetadata) throws Throwable {\n     \tInternalMockHandler<Object> handler = new MockUtil().getMockHandler(invocation.getMock());\n@@ -97,6 +109,7 @@ private MockSettings withSettingsUsing(GenericMetadataSupport returnTypeGenericM\n                 : withSettings();\n \n         return mockSettings\n                 .defaultAnswer(returnsDeepStubsAnswerUsing(returnTypeGenericMetadata));\n     }\n \n@@ -111,7 +124,7 @@ protected GenericMetadataSupport actualParameterizedType(Object mock) {\n \n     private Object recordDeepStubMock(final Object mock, InvocationContainerImpl container) throws Throwable {\n \n      container.addAnswer(new Answer<Object>() {\n             public Object answer(InvocationOnMock invocation) throws Throwable {\n                 return mock;\n             }\n@@ -120,7 +133,9 @@ public Object answer(InvocationOnMock invocation) throws Throwable {\n         return mock;\n     }\n \t\n \t\t\n \t\n \n     protected GenericMetadataSupport actualParameterizedType(Object mock) {\n","solution":"@@ -41,14 +41,16 @@\n     \n     private static final long serialVersionUID = -7105341425736035847L;\n \n  private transient MockitoCore mockitoCore;\n  private transient ReturnsEmptyValues delegate;\n \n     public Object answer(InvocationOnMock invocation) throws Throwable {\n         GenericMetadataSupport returnTypeGenericMetadata =\n                 actualParameterizedType(invocation.getMock()).resolveGenericReturnType(invocation.getMethod());\n \n         Class<?> rawType = returnTypeGenericMetadata.rawType();\n      instantiateMockitoCoreIfNeeded();\n      instantiateDelegateIfNeeded();\n         if (!mockitoCore.isTypeMockable(rawType)) {\n             return delegate.returnValueFor(rawType);\n         }\n@@ -56,7 +58,17 @@ public Object answer(InvocationOnMock invocation) throws Throwable {\n         return getMock(invocation, returnTypeGenericMetadata);\n     }\n \n  private synchronized void instantiateMockitoCoreIfNeeded() {\n      if (mockitoCore == null) {\n          mockitoCore = new MockitoCore();\n      }\n  }\n \n  private synchronized void instantiateDelegateIfNeeded() {\n      if (delegate == null) {\n          delegate = new ReturnsEmptyValues();\n      }\n  }\n \n     private Object getMock(InvocationOnMock invocation, GenericMetadataSupport returnTypeGenericMetadata) throws Throwable {\n     \tInternalMockHandler<Object> handler = new MockUtil().getMockHandler(invocation.getMock());\n@@ -97,6 +109,7 @@ private MockSettings withSettingsUsing(GenericMetadataSupport returnTypeGenericM\n                 : withSettings();\n \n         return mockSettings\n\t\t        .serializable()\n                 .defaultAnswer(returnsDeepStubsAnswerUsing(returnTypeGenericMetadata));\n     }\n \n@@ -111,7 +124,7 @@ protected GenericMetadataSupport actualParameterizedType(Object mock) {\n \n     private Object recordDeepStubMock(final Object mock, InvocationContainerImpl container) throws Throwable {\n \n      container.addAnswer(new SerializableAnswer() {\n             public Object answer(InvocationOnMock invocation) throws Throwable {\n                 return mock;\n             }\n@@ -120,7 +133,9 @@ public Object answer(InvocationOnMock invocation) throws Throwable {\n         return mock;\n     }\n \t\n\tabstract class SerializableAnswer implements Answer<Object>, Serializable {\n \t\t\n\t}\n \t\n \n     protected GenericMetadataSupport actualParameterizedType(Object mock) {\n","CodeWithNoComments":"\n     \n     private static final long serialVersionUID = -7105341425736035847L;\n \n    private MockitoCore mockitoCore = new MockitoCore();\n    private ReturnsEmptyValues delegate = new ReturnsEmptyValues();\n \n     public Object answer(InvocationOnMock invocation) throws Throwable {\n         GenericMetadataSupport returnTypeGenericMetadata =\n                 actualParameterizedType(invocation.getMock()).resolveGenericReturnType(invocation.getMethod());\n \n         Class<?> rawType = returnTypeGenericMetadata.rawType();\n         if (!mockitoCore.isTypeMockable(rawType)) {\n             return delegate.returnValueFor(rawType);\n         }\n\n         return getMock(invocation, returnTypeGenericMetadata);\n     }\n \n \n \n     private Object getMock(InvocationOnMock invocation, GenericMetadataSupport returnTypeGenericMetadata) throws Throwable {\n     \tInternalMockHandler<Object> handler = new MockUtil().getMockHandler(invocation.getMock());\n\n                 : withSettings();\n \n         return mockSettings\n+\t\t        .serializable()\n                 .defaultAnswer(returnsDeepStubsAnswerUsing(returnTypeGenericMetadata));\n     }\n \n\n \n     private Object recordDeepStubMock(final Object mock, InvocationContainerImpl container) throws Throwable {\n \n        container.addAnswer(new Answer<Object>() {\n             public Object answer(InvocationOnMock invocation) throws Throwable {\n                 return mock;\n             }\n\n         return mock;\n     }\n \t\n+\tabstract class SerializableAnswer implements Answer<Object>, Serializable {\n \t\t\n+\t}\n \t\n \n     protected GenericMetadataSupport actualParameterizedType(Object mock) {\n","SolutionWithNoComments":"\n     \n     private static final long serialVersionUID = -7105341425736035847L;\n \n    private transient MockitoCore mockitoCore;\n    private transient ReturnsEmptyValues delegate;\n \n     public Object answer(InvocationOnMock invocation) throws Throwable {\n         GenericMetadataSupport returnTypeGenericMetadata =\n                 actualParameterizedType(invocation.getMock()).resolveGenericReturnType(invocation.getMethod());\n \n         Class<?> rawType = returnTypeGenericMetadata.rawType();\n        instantiateMockitoCoreIfNeeded();\n        instantiateDelegateIfNeeded();\n         if (!mockitoCore.isTypeMockable(rawType)) {\n             return delegate.returnValueFor(rawType);\n         }\n\n         return getMock(invocation, returnTypeGenericMetadata);\n     }\n \n    private synchronized void instantiateMockitoCoreIfNeeded() {\n        if (mockitoCore == null) {\n            mockitoCore = new MockitoCore();\n        }\n    }\n \n    private synchronized void instantiateDelegateIfNeeded() {\n        if (delegate == null) {\n            delegate = new ReturnsEmptyValues();\n        }\n    }\n \n     private Object getMock(InvocationOnMock invocation, GenericMetadataSupport returnTypeGenericMetadata) throws Throwable {\n     \tInternalMockHandler<Object> handler = new MockUtil().getMockHandler(invocation.getMock());\n\n                 : withSettings();\n \n         return mockSettings\n\t\t        .serializable()\n                 .defaultAnswer(returnsDeepStubsAnswerUsing(returnTypeGenericMetadata));\n     }\n \n\n \n     private Object recordDeepStubMock(final Object mock, InvocationContainerImpl container) throws Throwable {\n \n        container.addAnswer(new SerializableAnswer() {\n             public Object answer(InvocationOnMock invocation) throws Throwable {\n                 return mock;\n             }\n\n         return mock;\n     }\n \t\n\tabstract class SerializableAnswer implements Answer<Object>, Serializable {\n \t\t\n\t}\n \t\n \n     protected GenericMetadataSupport actualParameterizedType(Object mock) {\n"},{"ids":354,"error":"junit.framework.AssertionFailedError","source":"/src/org/mockito/internal/configuration/DefaultInjectionEngine.java","code":"@@ -90,7 +90,8 @@ public void injectMocksOnFields(Set<Field> injectMocksFields, Set<Object> mocks,\n \n     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n         for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n          mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n         }\n     }\n \n","solution":"@@ -90,7 +90,8 @@ public void injectMocksOnFields(Set<Field> injectMocksFields, Set<Object> mocks,\n \n     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n         for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n          Object injected = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n          mocks.remove(injected);\n         }\n     }\n \n","CodeWithNoComments":"\n \n     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n         for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n         }\n     }\n \n","SolutionWithNoComments":"\n \n     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n         for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n            Object injected = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n            mocks.remove(injected);\n         }\n     }\n \n"},{"ids":355,"error":"junit.framework.AssertionFailedError","source":"/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java","code":"@@ -73,7 +73,7 @@ public Object answer(InvocationOnMock invocation) {\n             //see issue 184.\n             //mocks by default should return 0 if references are the same, otherwise some other value because they are not the same. Hence we return 1 (anything but 0 is good).\n             //Only for compareTo() method by the Comparable interface\n          return 1;\n         }\n         \n         Class<?> returnType = invocation.getMethod().getReturnType();\n","solution":"@@ -73,7 +73,7 @@ public Object answer(InvocationOnMock invocation) {\n             //see issue 184.\n             //mocks by default should return 0 if references are the same, otherwise some other value because they are not the same. Hence we return 1 (anything but 0 is good).\n             //Only for compareTo() method by the Comparable interface\n          return invocation.getMock() == invocation.getArguments()[0] ? 0 : 1;\n         }\n         \n         Class<?> returnType = invocation.getMethod().getReturnType();\n","CodeWithNoComments":"\n                                                   return 1;\n         }\n         \n         Class<?> returnType = invocation.getMethod().getReturnType();\n","SolutionWithNoComments":"\n                                                   return invocation.getMock() == invocation.getArguments()[0] ? 0 : 1;\n         }\n         \n         Class<?> returnType = invocation.getMethod().getReturnType();\n"},{"ids":356,"error":"java.lang.Exception","source":"/src/org/mockito/internal/matchers/Same.java","code":"@@ -26,7 +26,7 @@ public boolean matches(Object actual) {\n     public void describeTo(Description description) {\n         description.appendText(\"same(\");\n         appendQuoting(description);\n      description.appendText(wanted.toString());\n         appendQuoting(description);\n         description.appendText(\")\");\n     }\n","solution":"@@ -26,7 +26,7 @@ public boolean matches(Object actual) {\n     public void describeTo(Description description) {\n         description.appendText(\"same(\");\n         appendQuoting(description);\n      description.appendText(wanted == null ? \"null\" : wanted.toString());\n         appendQuoting(description);\n         description.appendText(\")\");\n     }\n","CodeWithNoComments":"\n     public void describeTo(Description description) {\n         description.appendText(\"same(\");\n         appendQuoting(description);\n        description.appendText(wanted.toString());\n         appendQuoting(description);\n         description.appendText(\")\");\n     }\n","SolutionWithNoComments":"\n     public void describeTo(Description description) {\n         description.appendText(\"same(\");\n         appendQuoting(description);\n        description.appendText(wanted == null ? \"null\" : wanted.toString());\n         appendQuoting(description);\n         description.appendText(\")\");\n     }\n"},{"ids":357,"error":"java.lang.ClassCastException","source":"/src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java","code":"@@ -1,85 +1,108 @@\n /*\n  * Copyright (c) 2007 Mockito contributors\n  * This program is made available under the terms of the MIT License.\n  */\n package org.mockito.internal.stubbing.defaultanswers;\n \n import org.mockito.MockSettings;\n import org.mockito.internal.InternalMockHandler;\n import org.mockito.internal.creation.settings.CreationSettings;\n import org.mockito.internal.stubbing.InvocationContainerImpl;\n import org.mockito.internal.stubbing.StubbedInvocationMatcher;\n import org.mockito.internal.util.MockCreationValidator;\n import org.mockito.internal.util.MockUtil;\n import org.mockito.internal.util.reflection.GenericMetadataSupport;\n import org.mockito.invocation.InvocationOnMock;\n import org.mockito.stubbing.Answer;\n \n import java.io.Serializable;\n \n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.withSettings;\n \n /**\n  * Returning deep stub implementation.\n  *\n  * Will return previously created mock if the invocation matches.\n  *\n  * <p>Supports nested generic information, with this answer you can write code like this :\n  *\n  * <pre class=\"code\"><code class=\"java\">\n  *     interface GenericsNest&lt;K extends Comparable&lt;K&gt; & Cloneable&gt; extends Map&lt;K, Set&lt;Number&gt;&gt; {}\n  *\n  *     GenericsNest&lt;?&gt; mock = mock(GenericsNest.class, new ReturnsGenericDeepStubs());\n  *     Number number = mock.entrySet().iterator().next().getValue().iterator().next();\n  * <\/code><\/pre>\n  * <\/p>\n  *\n  * @see org.mockito.Mockito#RETURNS_DEEP_STUBS\n  * @see org.mockito.Answers#RETURNS_DEEP_STUBS\n  */\n public class ReturnsDeepStubs implements Answer<Object>, Serializable {\n     \n     private static final long serialVersionUID = -7105341425736035847L;\n \n     private ReturnsEmptyValues delegate = new ReturnsEmptyValues();\n \n     public Object answer(InvocationOnMock invocation) throws Throwable {\n         GenericMetadataSupport returnTypeGenericMetadata =\n                 actualParameterizedType(invocation.getMock()).resolveGenericReturnType(invocation.getMethod());\n \n         Class<?> rawType = returnTypeGenericMetadata.rawType();\n         if (!new MockCreationValidator().isTypeMockable(rawType)) {\n             return delegate.returnValueFor(rawType);\n         }\n \n      return getMock(invocation);\n     }\n \n  private Object getMock(InvocationOnMock invocation) throws Throwable {\n     \tInternalMockHandler<Object> handler = new MockUtil().getMockHandler(invocation.getMock());\n     \tInvocationContainerImpl container = (InvocationContainerImpl) handler.getInvocationContainer();\n \n         // matches invocation for verification\n         for (StubbedInvocationMatcher stubbedInvocationMatcher : container.getStubbedInvocations()) {\n     \t\tif(container.getInvocationForStubbing().matches(stubbedInvocationMatcher.getInvocation())) {\n     \t\t\treturn stubbedInvocationMatcher.answer(invocation);\n     \t\t}\n \t\t}\n \n         // deep stub\n      return recordDeepStubMock(invocation, container);\n     }\n \n     /**\n      * Creates a mock using the Generics Metadata.\n      *\n      * @param returnTypeGenericMetadata The metadata to use to create the new mock.\n      * @return The mock\n      */\n \n \n \n \n  private Object recordDeepStubMock(InvocationOnMock invocation, InvocationContainerImpl container) {\n      Class<?> clz = invocation.getMethod().getReturnType();\n      final Object mock = org.mockito.Mockito.mock(clz, this);\n \n         container.addAnswer(new Answer<Object>() {\n","solution":"@@ -1,85 +1,108 @@\n /*\n  * Copyright (c) 2007 Mockito contributors\n  * This program is made available under the terms of the MIT License.\n  */\n package org.mockito.internal.stubbing.defaultanswers;\n \n import org.mockito.MockSettings;\n import org.mockito.internal.InternalMockHandler;\n import org.mockito.internal.creation.settings.CreationSettings;\n import org.mockito.internal.stubbing.InvocationContainerImpl;\n import org.mockito.internal.stubbing.StubbedInvocationMatcher;\n import org.mockito.internal.util.MockCreationValidator;\n import org.mockito.internal.util.MockUtil;\n import org.mockito.internal.util.reflection.GenericMetadataSupport;\n import org.mockito.invocation.InvocationOnMock;\n import org.mockito.stubbing.Answer;\n \n import java.io.Serializable;\n \n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.withSettings;\n \n /**\n  * Returning deep stub implementation.\n  *\n  * Will return previously created mock if the invocation matches.\n  *\n  * <p>Supports nested generic information, with this answer you can write code like this :\n  *\n  * <pre class=\"code\"><code class=\"java\">\n  *     interface GenericsNest&lt;K extends Comparable&lt;K&gt; & Cloneable&gt; extends Map&lt;K, Set&lt;Number&gt;&gt; {}\n  *\n  *     GenericsNest&lt;?&gt; mock = mock(GenericsNest.class, new ReturnsGenericDeepStubs());\n  *     Number number = mock.entrySet().iterator().next().getValue().iterator().next();\n  * <\/code><\/pre>\n  * <\/p>\n  *\n  * @see org.mockito.Mockito#RETURNS_DEEP_STUBS\n  * @see org.mockito.Answers#RETURNS_DEEP_STUBS\n  */\n public class ReturnsDeepStubs implements Answer<Object>, Serializable {\n     \n     private static final long serialVersionUID = -7105341425736035847L;\n \n     private ReturnsEmptyValues delegate = new ReturnsEmptyValues();\n \n     public Object answer(InvocationOnMock invocation) throws Throwable {\n         GenericMetadataSupport returnTypeGenericMetadata =\n                 actualParameterizedType(invocation.getMock()).resolveGenericReturnType(invocation.getMethod());\n \n         Class<?> rawType = returnTypeGenericMetadata.rawType();\n         if (!new MockCreationValidator().isTypeMockable(rawType)) {\n             return delegate.returnValueFor(rawType);\n         }\n \n      return getMock(invocation, returnTypeGenericMetadata);\n     }\n \n  private Object getMock(InvocationOnMock invocation, GenericMetadataSupport returnTypeGenericMetadata) throws Throwable {\n     \tInternalMockHandler<Object> handler = new MockUtil().getMockHandler(invocation.getMock());\n     \tInvocationContainerImpl container = (InvocationContainerImpl) handler.getInvocationContainer();\n \n         // matches invocation for verification\n         for (StubbedInvocationMatcher stubbedInvocationMatcher : container.getStubbedInvocations()) {\n     \t\tif(container.getInvocationForStubbing().matches(stubbedInvocationMatcher.getInvocation())) {\n     \t\t\treturn stubbedInvocationMatcher.answer(invocation);\n     \t\t}\n \t\t}\n \n         // deep stub\n      return recordDeepStubMock(createNewDeepStubMock(returnTypeGenericMetadata), container);\n     }\n \n     /**\n      * Creates a mock using the Generics Metadata.\n      *\n      * @param returnTypeGenericMetadata The metadata to use to create the new mock.\n      * @return The mock\n      */\n  private Object createNewDeepStubMock(GenericMetadataSupport returnTypeGenericMetadata) {\n      return mock(\n              returnTypeGenericMetadata.rawType(),\n              withSettingsUsing(returnTypeGenericMetadata)\n      );\n  }\n \n  private MockSettings withSettingsUsing(GenericMetadataSupport returnTypeGenericMetadata) {\n      MockSettings mockSettings =\n              returnTypeGenericMetadata.rawExtraInterfaces().length > 0 ?\n              withSettings().extraInterfaces(returnTypeGenericMetadata.rawExtraInterfaces())\n              : withSettings();\n \n      return mockSettings\n              .defaultAnswer(returnsDeepStubsAnswerUsing(returnTypeGenericMetadata));\n  }\n \n  private ReturnsDeepStubs returnsDeepStubsAnswerUsing(final GenericMetadataSupport returnTypeGenericMetadata) {\n      return new ReturnsDeepStubs() {\n          @Override\n          protected GenericMetadataSupport actualParameterizedType(Object mock) {\n              return returnTypeGenericMetadata;\n          }\n      };\n  }\n \n  private Object recordDeepStubMock(final Object mock, InvocationContainerImpl container) throws Throwable {\n \n         container.addAnswer(new Answer<Object>() {\n","CodeWithNoComments":"\n package org.mockito.internal.stubbing.defaultanswers;\n \n import org.mockito.internal.InternalMockHandler;\n import org.mockito.internal.creation.settings.CreationSettings;\n import org.mockito.internal.stubbing.InvocationContainerImpl;\n import org.mockito.internal.stubbing.StubbedInvocationMatcher;\n import org.mockito.internal.util.MockCreationValidator;\n import org.mockito.internal.util.MockUtil;\n import org.mockito.internal.util.reflection.GenericMetadataSupport;\n import org.mockito.invocation.InvocationOnMock;\n import org.mockito.stubbing.Answer;\n \n import java.io.Serializable;\n public class ReturnsDeepStubs implements Answer<Object>, Serializable {\n     \n     private static final long serialVersionUID = -7105341425736035847L;\n \n     private ReturnsEmptyValues delegate = new ReturnsEmptyValues();\n \n     public Object answer(InvocationOnMock invocation) throws Throwable {\n         GenericMetadataSupport returnTypeGenericMetadata =\n                 actualParameterizedType(invocation.getMock()).resolveGenericReturnType(invocation.getMethod());\n \n         Class<?> rawType = returnTypeGenericMetadata.rawType();\n         if (!new MockCreationValidator().isTypeMockable(rawType)) {\n             return delegate.returnValueFor(rawType);\n         }\n \n        return getMock(invocation);\n     }\n \n    private Object getMock(InvocationOnMock invocation) throws Throwable {\n     \tInternalMockHandler<Object> handler = new MockUtil().getMockHandler(invocation.getMock());\n     \tInvocationContainerImpl container = (InvocationContainerImpl) handler.getInvocationContainer();\n \n                  for (StubbedInvocationMatcher stubbedInvocationMatcher : container.getStubbedInvocations()) {\n     \t\tif(container.getInvocationForStubbing().matches(stubbedInvocationMatcher.getInvocation())) {\n     \t\t\treturn stubbedInvocationMatcher.answer(invocation);\n     \t\t}\n \t\t}\n \n                 return recordDeepStubMock(invocation, container);\n     }\n \n \n \n \n \n    private Object recordDeepStubMock(InvocationOnMock invocation, InvocationContainerImpl container) {\n        Class<?> clz = invocation.getMethod().getReturnType();\n        final Object mock = org.mockito.Mockito.mock(clz, this);\n \n         container.addAnswer(new Answer<Object>() {\n","SolutionWithNoComments":"\n package org.mockito.internal.stubbing.defaultanswers;\n \n import org.mockito.MockSettings;\n import org.mockito.internal.InternalMockHandler;\n import org.mockito.internal.creation.settings.CreationSettings;\n import org.mockito.internal.stubbing.InvocationContainerImpl;\n import org.mockito.internal.stubbing.StubbedInvocationMatcher;\n import org.mockito.internal.util.MockCreationValidator;\n import org.mockito.internal.util.MockUtil;\n import org.mockito.internal.util.reflection.GenericMetadataSupport;\n import org.mockito.invocation.InvocationOnMock;\n import org.mockito.stubbing.Answer;\n \n import java.io.Serializable;\n \n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.withSettings;\n \n public class ReturnsDeepStubs implements Answer<Object>, Serializable {\n     \n     private static final long serialVersionUID = -7105341425736035847L;\n \n     private ReturnsEmptyValues delegate = new ReturnsEmptyValues();\n \n     public Object answer(InvocationOnMock invocation) throws Throwable {\n         GenericMetadataSupport returnTypeGenericMetadata =\n                 actualParameterizedType(invocation.getMock()).resolveGenericReturnType(invocation.getMethod());\n \n         Class<?> rawType = returnTypeGenericMetadata.rawType();\n         if (!new MockCreationValidator().isTypeMockable(rawType)) {\n             return delegate.returnValueFor(rawType);\n         }\n \n        return getMock(invocation, returnTypeGenericMetadata);\n     }\n \n    private Object getMock(InvocationOnMock invocation, GenericMetadataSupport returnTypeGenericMetadata) throws Throwable {\n     \tInternalMockHandler<Object> handler = new MockUtil().getMockHandler(invocation.getMock());\n     \tInvocationContainerImpl container = (InvocationContainerImpl) handler.getInvocationContainer();\n \n                  for (StubbedInvocationMatcher stubbedInvocationMatcher : container.getStubbedInvocations()) {\n     \t\tif(container.getInvocationForStubbing().matches(stubbedInvocationMatcher.getInvocation())) {\n     \t\t\treturn stubbedInvocationMatcher.answer(invocation);\n     \t\t}\n \t\t}\n \n                 return recordDeepStubMock(createNewDeepStubMock(returnTypeGenericMetadata), container);\n     }\n    private Object createNewDeepStubMock(GenericMetadataSupport returnTypeGenericMetadata) {\n        return mock(\n                returnTypeGenericMetadata.rawType(),\n                withSettingsUsing(returnTypeGenericMetadata)\n        );\n    }\n \n    private MockSettings withSettingsUsing(GenericMetadataSupport returnTypeGenericMetadata) {\n        MockSettings mockSettings =\n                returnTypeGenericMetadata.rawExtraInterfaces().length > 0 ?\n                withSettings().extraInterfaces(returnTypeGenericMetadata.rawExtraInterfaces())\n                : withSettings();\n \n        return mockSettings\n                .defaultAnswer(returnsDeepStubsAnswerUsing(returnTypeGenericMetadata));\n    }\n \n    private ReturnsDeepStubs returnsDeepStubsAnswerUsing(final GenericMetadataSupport returnTypeGenericMetadata) {\n        return new ReturnsDeepStubs() {\n            @Override\n            protected GenericMetadataSupport actualParameterizedType(Object mock) {\n                return returnTypeGenericMetadata;\n            }\n        };\n    }\n \n    private Object recordDeepStubMock(final Object mock, InvocationContainerImpl container) throws Throwable {\n \n         container.addAnswer(new Answer<Object>() {\n"},{"ids":358,"error":"junit.framework.AssertionFailedError","source":"/src/org/mockito/internal/util/MockUtil.java","code":"@@ -61,8 +61,7 @@ public MockUtil() {\n \n     public <T> void resetMock(T mock) {\n         MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n      MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n      MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n         ((Factory) mock).setCallback(0, newFilter);\n     }\n \n","solution":"@@ -61,8 +61,7 @@ public MockUtil() {\n \n     public <T> void resetMock(T mock) {\n         MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n      MethodInterceptorFilter newFilter = newMethodInterceptorFilter(oldMockHandler.getMockSettings());\n         ((Factory) mock).setCallback(0, newFilter);\n     }\n \n","CodeWithNoComments":"\n \n     public <T> void resetMock(T mock) {\n         MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n         ((Factory) mock).setCallback(0, newFilter);\n     }\n \n","SolutionWithNoComments":"\n \n     public <T> void resetMock(T mock) {\n         MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n        MethodInterceptorFilter newFilter = newMethodInterceptorFilter(oldMockHandler.getMockSettings());\n         ((Factory) mock).setCallback(0, newFilter);\n     }\n \n"},{"ids":359,"error":"java.lang.ClassCastException","source":"/src/org/mockito/internal/util/Primitives.java","code":"@@ -63,6 +63,6 @@ public static boolean isPrimitiveWrapper(Class<?> type) {\n         primitiveValues.put(int.class, 0);\n         primitiveValues.put(long.class, 0L);\n         primitiveValues.put(float.class, 0F);\n      primitiveValues.put(double.class, 0);\n     }\n }\n\\ No newline at end of file\n","solution":"@@ -63,6 +63,6 @@ public static boolean isPrimitiveWrapper(Class<?> type) {\n         primitiveValues.put(int.class, 0);\n         primitiveValues.put(long.class, 0L);\n         primitiveValues.put(float.class, 0F);\n      primitiveValues.put(double.class, 0D);\n     }\n }\n\\ No newline at end of file\n","CodeWithNoComments":"\n         primitiveValues.put(int.class, 0);\n         primitiveValues.put(long.class, 0L);\n         primitiveValues.put(float.class, 0F);\n        primitiveValues.put(double.class, 0);\n     }\n }\n\\ No newline at end of file\n","SolutionWithNoComments":"\n         primitiveValues.put(int.class, 0);\n         primitiveValues.put(long.class, 0L);\n         primitiveValues.put(float.class, 0F);\n        primitiveValues.put(double.class, 0D);\n     }\n }\n\\ No newline at end of file\n"},{"ids":360,"error":"junit.framework.AssertionFailedError","source":"/src/org/mockito/internal/configuration/SpyAnnotationEngine.java","code":"@@ -16,6 +16,7 @@\n import org.mockito.exceptions.base.MockitoException;\n import org.mockito.internal.util.MockUtil;\n \n import static org.mockito.Mockito.withSettings;\n \n @SuppressWarnings({\"unchecked\"})\n public class SpyAnnotationEngine implements AnnotationEngine {\n@@ -46,7 +47,10 @@ public void process(Class<?> context, Object testClass) {\n                         // instance has been spied earlier\n                         Mockito.reset(instance);\n                     } else {\n                      field.set(testClass, Mockito.spy(instance));\n                     }\n                 } catch (IllegalAccessException e) {\n                     throw new MockitoException(\"Problems initiating spied field \" + field.getName(), e);\n","solution":"@@ -16,6 +16,7 @@\n import org.mockito.exceptions.base.MockitoException;\n import org.mockito.internal.util.MockUtil;\n \n import static org.mockito.Mockito.withSettings;\n \n @SuppressWarnings({\"unchecked\"})\n public class SpyAnnotationEngine implements AnnotationEngine {\n@@ -46,7 +47,10 @@ public void process(Class<?> context, Object testClass) {\n                         // instance has been spied earlier\n                         Mockito.reset(instance);\n                     } else {\n                      field.set(testClass, Mockito.mock(instance.getClass(), withSettings()\n                              .spiedInstance(instance)\n                              .defaultAnswer(Mockito.CALLS_REAL_METHODS)\n                              .name(field.getName())));\n                     }\n                 } catch (IllegalAccessException e) {\n                     throw new MockitoException(\"Problems initiating spied field \" + field.getName(), e);\n","CodeWithNoComments":"\n import org.mockito.exceptions.base.MockitoException;\n import org.mockito.internal.util.MockUtil;\n \n \n @SuppressWarnings({\"unchecked\"})\n public class SpyAnnotationEngine implements AnnotationEngine {\n\n                                                  Mockito.reset(instance);\n                     } else {\n                        field.set(testClass, Mockito.spy(instance));\n                     }\n                 } catch (IllegalAccessException e) {\n                     throw new MockitoException(\"Problems initiating spied field \" + field.getName(), e);\n","SolutionWithNoComments":"\n import org.mockito.exceptions.base.MockitoException;\n import org.mockito.internal.util.MockUtil;\n \n import static org.mockito.Mockito.withSettings;\n \n @SuppressWarnings({\"unchecked\"})\n public class SpyAnnotationEngine implements AnnotationEngine {\n\n                                                  Mockito.reset(instance);\n                     } else {\n                        field.set(testClass, Mockito.mock(instance.getClass(), withSettings()\n                                .spiedInstance(instance)\n                                .defaultAnswer(Mockito.CALLS_REAL_METHODS)\n                                .name(field.getName())));\n                     }\n                 } catch (IllegalAccessException e) {\n                     throw new MockitoException(\"Problems initiating spied field \" + field.getName(), e);\n"},{"ids":361,"error":"junit.framework.ComparisonFailure","source":"/src/org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNulls.java","code":"@@ -6,6 +6,7 @@\n \n import java.io.Serializable;\n import java.lang.reflect.Method;\n import java.util.Arrays;\n \n import org.mockito.Mockito;\n import org.mockito.cglib.proxy.MethodInterceptor;\n@@ -57,7 +58,8 @@ public Object intercept(Object obj, Method method, Object[] args, MethodProxy pr\n         }\n \n \t\tprivate String formatMethodCall() {\n\t\treturn invocation.getMethod().getName() + \"()\";\n \t\t}\n     }\n \n","solution":"@@ -6,6 +6,7 @@\n \n import java.io.Serializable;\n import java.lang.reflect.Method;\n import java.util.Arrays;\n \n import org.mockito.Mockito;\n import org.mockito.cglib.proxy.MethodInterceptor;\n@@ -57,7 +58,8 @@ public Object intercept(Object obj, Method method, Object[] args, MethodProxy pr\n         }\n \n \t\tprivate String formatMethodCall() {\n\t\t\tString args = Arrays.toString(invocation.getArguments());\n\t\t\treturn invocation.getMethod().getName() + \"(\" + args.substring(1, args.length() - 1) +\t\")\";\n \t\t}\n     }\n \n","CodeWithNoComments":"\n \n import java.io.Serializable;\n import java.lang.reflect.Method;\n \n import org.mockito.Mockito;\n import org.mockito.cglib.proxy.MethodInterceptor;\n\n         }\n \n \t\tprivate String formatMethodCall() {\n-\t\t\treturn invocation.getMethod().getName() + \"()\";\n \t\t}\n     }\n \n","SolutionWithNoComments":"\n \n import java.io.Serializable;\n import java.lang.reflect.Method;\n import java.util.Arrays;\n \n import org.mockito.Mockito;\n import org.mockito.cglib.proxy.MethodInterceptor;\n\n         }\n \n \t\tprivate String formatMethodCall() {\n\t\t\tString args = Arrays.toString(invocation.getArguments());\n\t\t\treturn invocation.getMethod().getName() + \"(\" + args.substring(1, args.length() - 1) +\t\")\";\n \t\t}\n     }\n \n"},{"ids":362,"error":"java.lang.ArrayIndexOutOfBoundsException","source":"/src/org/mockito/internal/invocation/InvocationMatcher.java","code":"@@ -103,7 +103,7 @@ public String toString(PrintSettings printSettings) {\n     public void captureArgumentsFrom(Invocation i) {\n         int k = 0;\n         for (Matcher m : matchers) {\n          if (m instanceof CapturesArguments) {\n                 ((CapturesArguments) m).captureFrom(i.getArguments()[k]);\n             }\n             k++;\n","solution":"@@ -103,7 +103,7 @@ public String toString(PrintSettings printSettings) {\n     public void captureArgumentsFrom(Invocation i) {\n         int k = 0;\n         for (Matcher m : matchers) {\n          if (m instanceof CapturesArguments && i.getArguments().length > k) {\n                 ((CapturesArguments) m).captureFrom(i.getArguments()[k]);\n             }\n             k++;\n","CodeWithNoComments":"\n     public void captureArgumentsFrom(Invocation i) {\n         int k = 0;\n         for (Matcher m : matchers) {\n            if (m instanceof CapturesArguments) {\n                 ((CapturesArguments) m).captureFrom(i.getArguments()[k]);\n             }\n             k++;\n","SolutionWithNoComments":"\n     public void captureArgumentsFrom(Invocation i) {\n         int k = 0;\n         for (Matcher m : matchers) {\n            if (m instanceof CapturesArguments && i.getArguments().length > k) {\n                 ((CapturesArguments) m).captureFrom(i.getArguments()[k]);\n             }\n             k++;\n"},{"ids":363,"error":"java.lang.NullPointerException","source":"/src/org/mockito/internal/invocation/Invocation.java","code":"@@ -8,6 +8,7 @@\n \n import org.hamcrest.Matcher;\n import org.mockito.exceptions.PrintableInvocation;\n import org.mockito.exceptions.Reporter;\n import org.mockito.internal.debugging.Location;\n import org.mockito.internal.invocation.realmethod.RealMethod;\n import org.mockito.internal.matchers.*;\n@@ -199,6 +200,9 @@ public int getArgumentsCount() {\n     }\n \n     public Object callRealMethod() throws Throwable {\n         return realMethod.invoke(mock, rawArguments);\n     }\n \n","solution":"@@ -8,6 +8,7 @@\n \n import org.hamcrest.Matcher;\n import org.mockito.exceptions.PrintableInvocation;\n import org.mockito.exceptions.Reporter;\n import org.mockito.internal.debugging.Location;\n import org.mockito.internal.invocation.realmethod.RealMethod;\n import org.mockito.internal.matchers.*;\n@@ -199,6 +200,9 @@ public int getArgumentsCount() {\n     }\n \n     public Object callRealMethod() throws Throwable {\n      if (this.getMethod().getDeclaringClass().isInterface()) {\n          new Reporter().cannotCallRealMethodOnInterface();\n      }\n         return realMethod.invoke(mock, rawArguments);\n     }\n \n","CodeWithNoComments":"\n \n import org.hamcrest.Matcher;\n import org.mockito.exceptions.PrintableInvocation;\n import org.mockito.internal.debugging.Location;\n import org.mockito.internal.invocation.realmethod.RealMethod;\n import org.mockito.internal.matchers.*;\n\n     }\n \n     public Object callRealMethod() throws Throwable {\n         return realMethod.invoke(mock, rawArguments);\n     }\n \n","SolutionWithNoComments":"\n \n import org.hamcrest.Matcher;\n import org.mockito.exceptions.PrintableInvocation;\n import org.mockito.exceptions.Reporter;\n import org.mockito.internal.debugging.Location;\n import org.mockito.internal.invocation.realmethod.RealMethod;\n import org.mockito.internal.matchers.*;\n\n     }\n \n     public Object callRealMethod() throws Throwable {\n        if (this.getMethod().getDeclaringClass().isInterface()) {\n            new Reporter().cannotCallRealMethodOnInterface();\n        }\n         return realMethod.invoke(mock, rawArguments);\n     }\n \n"},{"ids":364,"error":"junit.framework.AssertionFailedError","source":"/src/org/mockito/internal/invocation/InvocationMatcher.java","code":"@@ -95,8 +95,19 @@ public boolean hasSameMethod(Invocation candidate) {\n         Method m1 = invocation.getMethod();\n         Method m2 = candidate.getMethod();\n         \n         \t/* Avoid unnecessary cloning */\n      return m1.equals(m2);\n     }\n     \n     public Location getLocation() {\n","solution":"@@ -95,8 +95,19 @@ public boolean hasSameMethod(Invocation candidate) {\n         Method m1 = invocation.getMethod();\n         Method m2 = candidate.getMethod();\n         \n      if (m1.getName() != null && m1.getName().equals(m2.getName())) {\n         \t/* Avoid unnecessary cloning */\n      \tClass[] params1 = m1.getParameterTypes();\n      \tClass[] params2 = m2.getParameterTypes();\n      \tif (params1.length == params2.length) {\n      \t    for (int i = 0; i < params1.length; i++) {\n      \t\tif (params1[i] != params2[i])\n      \t\t    return false;\n      \t    }\n      \t    return true;\n      \t}\n      }\n      return false;\n     }\n     \n     public Location getLocation() {\n","CodeWithNoComments":"\n         Method m1 = invocation.getMethod();\n         Method m2 = candidate.getMethod();\n         \n        return m1.equals(m2);\n     }\n     \n     public Location getLocation() {\n","SolutionWithNoComments":"\n         Method m1 = invocation.getMethod();\n         Method m2 = candidate.getMethod();\n         \n        if (m1.getName() != null && m1.getName().equals(m2.getName())) {\n        \tClass[] params1 = m1.getParameterTypes();\n        \tClass[] params2 = m2.getParameterTypes();\n        \tif (params1.length == params2.length) {\n        \t    for (int i = 0; i < params1.length; i++) {\n        \t\tif (params1[i] != params2[i])\n        \t\t    return false;\n        \t    }\n        \t    return true;\n        \t}\n        }\n        return false;\n     }\n     \n     public Location getLocation() {\n"},{"ids":365,"error":"java.lang.NullPointerException","source":"/src/org/mockito/Matchers.java","code":"@@ -359,7 +359,7 @@ public static Collection anyCollection() {\n      * @return <code>null<\/code>.\n      */\n     public static <T> T isA(Class<T> clazz) {\n      return reportMatcher(new InstanceOf(clazz)).<T>returnNull();\n     }\n \n     /**\n@@ -476,7 +476,7 @@ public static short eq(short value) {\n      * @return <code>null<\/code>.\n      */\n     public static <T> T eq(T value) {\n      return reportMatcher(new Equals(value)).<T>returnNull();\n     }  \n \n     /**\n@@ -513,7 +513,7 @@ public static short eq(short value) {\n      * @return <code>null<\/code>.\n      */\n     public static <T> T same(T value) {\n      return reportMatcher(new Same(value)).<T>returnNull();\n     }\n \n     /**\n","solution":"@@ -359,7 +359,7 @@ public static Collection anyCollection() {\n      * @return <code>null<\/code>.\n      */\n     public static <T> T isA(Class<T> clazz) {\n      return reportMatcher(new InstanceOf(clazz)).<T>returnFor(clazz);\n     }\n \n     /**\n@@ -476,7 +476,7 @@ public static short eq(short value) {\n      * @return <code>null<\/code>.\n      */\n     public static <T> T eq(T value) {\n      return (T) reportMatcher(new Equals(value)).<T>returnFor((Class) value.getClass());\n     }  \n \n     /**\n@@ -513,7 +513,7 @@ public static short eq(short value) {\n      * @return <code>null<\/code>.\n      */\n     public static <T> T same(T value) {\n      return (T) reportMatcher(new Same(value)).<T>returnFor((Class) value.getClass());\n     }\n \n     /**\n","CodeWithNoComments":"\n     public static <T> T isA(Class<T> clazz) {\n        return reportMatcher(new InstanceOf(clazz)).<T>returnNull();\n     }\n \n\n     public static <T> T eq(T value) {\n        return reportMatcher(new Equals(value)).<T>returnNull();\n     }  \n \n\n     public static <T> T same(T value) {\n        return reportMatcher(new Same(value)).<T>returnNull();\n     }\n \n","SolutionWithNoComments":"\n     public static <T> T isA(Class<T> clazz) {\n        return reportMatcher(new InstanceOf(clazz)).<T>returnFor(clazz);\n     }\n \n\n     public static <T> T eq(T value) {\n        return (T) reportMatcher(new Equals(value)).<T>returnFor((Class) value.getClass());\n     }  \n \n\n     public static <T> T same(T value) {\n        return (T) reportMatcher(new Same(value)).<T>returnFor((Class) value.getClass());\n     }\n \n"},{"ids":366,"error":"junit.framework.AssertionFailedError","source":"/src/org/mockito/exceptions/Reporter.java","code":"@@ -435,10 +435,11 @@ public void misplacedArgumentMatcher(Location location) {\n                 ));\n     }\n \n  public void smartNullPointerException(Location location) {\n         throw new SmartNullPointerException(join(\n                 \"You have a NullPointerException here:\",\n                 new Location(),\n                 \"Because this method was *not* stubbed correctly:\",\n                 location,\n                 \"\"\n/src/org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNulls.java @@ -53,7 +53,7 @@ public Object intercept(Object obj, Method method, Object[] args, MethodProxy pr\n                 return \"SmartNull returned by unstubbed \" + formatMethodCall()  + \" method on mock\";\n             }\n \n          new Reporter().smartNullPointerException(location);\n             return null;\n         }\n \n","solution":"@@ -435,10 +435,11 @@ public void misplacedArgumentMatcher(Location location) {\n                 ));\n     }\n \n  public void smartNullPointerException(Object obj, Location location) {\n         throw new SmartNullPointerException(join(\n                 \"You have a NullPointerException here:\",\n                 new Location(),\n              obj,\n                 \"Because this method was *not* stubbed correctly:\",\n                 location,\n                 \"\"\n/src/org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNulls.java @@ -53,7 +53,7 @@ public Object intercept(Object obj, Method method, Object[] args, MethodProxy pr\n                 return \"SmartNull returned by unstubbed \" + formatMethodCall()  + \" method on mock\";\n             }\n \n          new Reporter().smartNullPointerException(obj, location);\n             return null;\n         }\n \n","CodeWithNoComments":"\n                 ));\n     }\n \n    public void smartNullPointerException(Location location) {\n         throw new SmartNullPointerException(join(\n                 \"You have a NullPointerException here:\",\n                 new Location(),\n                 \"Because this method was *not* stubbed correctly:\",\n                 location,\n                 \"\"\n\n                 return \"SmartNull returned by unstubbed \" + formatMethodCall()  + \" method on mock\";\n             }\n \n            new Reporter().smartNullPointerException(location);\n             return null;\n         }\n \n","SolutionWithNoComments":"\n                 ));\n     }\n \n    public void smartNullPointerException(Object obj, Location location) {\n         throw new SmartNullPointerException(join(\n                 \"You have a NullPointerException here:\",\n                 new Location(),\n                obj,\n                 \"Because this method was *not* stubbed correctly:\",\n                 location,\n                 \"\"\n\n                 return \"SmartNull returned by unstubbed \" + formatMethodCall()  + \" method on mock\";\n             }\n \n            new Reporter().smartNullPointerException(obj, location);\n             return null;\n         }\n \n"},{"ids":367,"error":"java.lang.NullPointerException","source":"/src/org/mockito/internal/verification/argumentmatching/ArgumentMatchingTool.java","code":"@@ -45,6 +45,6 @@ private boolean safelyMatches(Matcher m, Object arg) {\n     }\n \n     private boolean toStringEquals(Matcher m, Object arg) {\n      return StringDescription.toString(m).equals(arg.toString());\n     }\n }\n","solution":"@@ -45,6 +45,6 @@ private boolean safelyMatches(Matcher m, Object arg) {\n     }\n \n     private boolean toStringEquals(Matcher m, Object arg) {\n      return StringDescription.toString(m).equals(arg == null? \"null\" : arg.toString());\n     }\n }\n","CodeWithNoComments":"\n     }\n \n     private boolean toStringEquals(Matcher m, Object arg) {\n        return StringDescription.toString(m).equals(arg.toString());\n     }\n }\n","SolutionWithNoComments":"\n     }\n \n     private boolean toStringEquals(Matcher m, Object arg) {\n        return StringDescription.toString(m).equals(arg == null? \"null\" : arg.toString());\n     }\n }\n"},{"ids":368,"error":"java.lang.UnsupportedOperationException","source":"/src/main/java/org/joda/time/Period.java","code":"@@ -1625,13 +1625,19 @@ public Period normalizedStandard(PeriodType type) {\n         int years = getYears();\n         int months = getMonths();\n         if (years != 0 || months != 0) {\n          years = FieldUtils.safeAdd(years, months / 12);\n          months = months % 12;\n          if (years != 0) {\n              result = result.withYears(years);\n             }\n          if (months != 0) {\n              result = result.withMonths(months);\n             }\n         }\n         return result;\n","solution":"@@ -1625,13 +1625,19 @@ public Period normalizedStandard(PeriodType type) {\n         int years = getYears();\n         int months = getMonths();\n         if (years != 0 || months != 0) {\n          long totalMonths = years * 12L + months;\n          if (type.isSupported(DurationFieldType.YEARS_TYPE)) {\n              int normalizedYears = FieldUtils.safeToInt(totalMonths / 12);\n              result = result.withYears(normalizedYears);\n              totalMonths = totalMonths - (normalizedYears * 12);\n             }\n          if (type.isSupported(DurationFieldType.MONTHS_TYPE)) {\n              int normalizedMonths = FieldUtils.safeToInt(totalMonths);\n              result = result.withMonths(normalizedMonths);\n              totalMonths = totalMonths - normalizedMonths;\n          }\n          if (totalMonths != 0) {\n              throw new UnsupportedOperationException(\"Unable to normalize as PeriodType is missing either years or months but period has a month/year amount: \" + toString());\n             }\n         }\n         return result;\n","CodeWithNoComments":"\n         int years = getYears();\n         int months = getMonths();\n         if (years != 0 || months != 0) {\n            years = FieldUtils.safeAdd(years, months / 12);\n            months = months % 12;\n            if (years != 0) {\n                result = result.withYears(years);\n             }\n            if (months != 0) {\n                result = result.withMonths(months);\n             }\n         }\n         return result;\n","SolutionWithNoComments":"\n         int years = getYears();\n         int months = getMonths();\n         if (years != 0 || months != 0) {\n            long totalMonths = years * 12L + months;\n            if (type.isSupported(DurationFieldType.YEARS_TYPE)) {\n                int normalizedYears = FieldUtils.safeToInt(totalMonths / 12);\n                result = result.withYears(normalizedYears);\n                totalMonths = totalMonths - (normalizedYears * 12);\n             }\n            if (type.isSupported(DurationFieldType.MONTHS_TYPE)) {\n                int normalizedMonths = FieldUtils.safeToInt(totalMonths);\n                result = result.withMonths(normalizedMonths);\n                totalMonths = totalMonths - normalizedMonths;\n            }\n            if (totalMonths != 0) {\n                throw new UnsupportedOperationException(\"Unable to normalize as PeriodType is missing either years or months but period has a month/year amount: \" + toString());\n             }\n         }\n         return result;\n"},{"ids":369,"error":"junit.framework.ComparisonFailure","source":"/src/main/java/org/joda/time/MutableDateTime.java","code":"@@ -636,7 +636,9 @@ public void add(DurationFieldType type, int amount) {\n         if (type == null) {\n             throw new IllegalArgumentException(\"Field must not be null\");\n         }\n             setMillis(type.getField(getChronology()).add(getMillis(), amount));\n     }\n \n     //-----------------------------------------------------------------------\n@@ -657,7 +659,9 @@ public void setYear(final int year) {\n      * @throws IllegalArgumentException if the value is invalid\n      */\n     public void addYears(final int years) {\n             setMillis(getChronology().years().add(getMillis(), years));\n     }\n \n     //-----------------------------------------------------------------------\n@@ -678,7 +682,9 @@ public void setWeekyear(final int weekyear) {\n      * @throws IllegalArgumentException if the value is invalid\n      */\n     public void addWeekyears(final int weekyears) {\n             setMillis(getChronology().weekyears().add(getMillis(), weekyears));\n     }\n \n     //-----------------------------------------------------------------------\n@@ -699,7 +705,9 @@ public void setMonthOfYear(final int monthOfYear) {\n      * @throws IllegalArgumentException if the value is invalid\n      */\n     public void addMonths(final int months) {\n             setMillis(getChronology().months().add(getMillis(), months));\n     }\n \n     //-----------------------------------------------------------------------\n@@ -720,7 +728,9 @@ public void setWeekOfWeekyear(final int weekOfWeekyear) {\n      * @throws IllegalArgumentException if the value is invalid\n      */\n     public void addWeeks(final int weeks) {\n             setMillis(getChronology().weeks().add(getMillis(), weeks));\n     }\n \n     //-----------------------------------------------------------------------\n@@ -761,7 +771,9 @@ public void setDayOfWeek(final int dayOfWeek) {\n      * @throws IllegalArgumentException if the value is invalid\n      */\n     public void addDays(final int days) {\n             setMillis(getChronology().days().add(getMillis(), days));\n     }\n \n     //-----------------------------------------------------------------------\n@@ -782,7 +794,9 @@ public void setHourOfDay(final int hourOfDay) {\n      * @throws IllegalArgumentException if the value is invalid\n      */\n     public void addHours(final int hours) {\n             setMillis(getChronology().hours().add(getMillis(), hours));\n     }\n     \n     //-----------------------------------------------------------------------\n@@ -813,7 +827,9 @@ public void setMinuteOfHour(final int minuteOfHour) {\n      * @throws IllegalArgumentException if the value is invalid\n      */\n     public void addMinutes(final int minutes) {\n             setMillis(getChronology().minutes().add(getMillis(), minutes));\n     }\n \n     //-----------------------------------------------------------------------\n@@ -844,7 +860,9 @@ public void setSecondOfMinute(final int secondOfMinute) {\n      * @throws IllegalArgumentException if the value is invalid\n      */\n     public void addSeconds(final int seconds) {\n             setMillis(getChronology().seconds().add(getMillis(), seconds));\n     }\n \n     //-----------------------------------------------------------------------\n@@ -877,7 +895,9 @@ public void setMillisOfSecond(final int millisOfSecond) {\n      * @throws IllegalArgumentException if the value is invalid\n      */\n     public void addMillis(final int millis) {\n             setMillis(getChronology().millis().add(getMillis(), millis));\n     }\n \n     //-----------------------------------------------------------------------\n","solution":"@@ -636,7 +636,9 @@ public void add(DurationFieldType type, int amount) {\n         if (type == null) {\n             throw new IllegalArgumentException(\"Field must not be null\");\n         }\n      if (amount != 0) {\n             setMillis(type.getField(getChronology()).add(getMillis(), amount));\n      }\n     }\n \n     //-----------------------------------------------------------------------\n@@ -657,7 +659,9 @@ public void setYear(final int year) {\n      * @throws IllegalArgumentException if the value is invalid\n      */\n     public void addYears(final int years) {\n      if (years != 0) {\n             setMillis(getChronology().years().add(getMillis(), years));\n      }\n     }\n \n     //-----------------------------------------------------------------------\n@@ -678,7 +682,9 @@ public void setWeekyear(final int weekyear) {\n      * @throws IllegalArgumentException if the value is invalid\n      */\n     public void addWeekyears(final int weekyears) {\n      if (weekyears != 0) {\n             setMillis(getChronology().weekyears().add(getMillis(), weekyears));\n      }\n     }\n \n     //-----------------------------------------------------------------------\n@@ -699,7 +705,9 @@ public void setMonthOfYear(final int monthOfYear) {\n      * @throws IllegalArgumentException if the value is invalid\n      */\n     public void addMonths(final int months) {\n      if (months != 0) {\n             setMillis(getChronology().months().add(getMillis(), months));\n      }\n     }\n \n     //-----------------------------------------------------------------------\n@@ -720,7 +728,9 @@ public void setWeekOfWeekyear(final int weekOfWeekyear) {\n      * @throws IllegalArgumentException if the value is invalid\n      */\n     public void addWeeks(final int weeks) {\n      if (weeks != 0) {\n             setMillis(getChronology().weeks().add(getMillis(), weeks));\n      }\n     }\n \n     //-----------------------------------------------------------------------\n@@ -761,7 +771,9 @@ public void setDayOfWeek(final int dayOfWeek) {\n      * @throws IllegalArgumentException if the value is invalid\n      */\n     public void addDays(final int days) {\n      if (days != 0) {\n             setMillis(getChronology().days().add(getMillis(), days));\n      }\n     }\n \n     //-----------------------------------------------------------------------\n@@ -782,7 +794,9 @@ public void setHourOfDay(final int hourOfDay) {\n      * @throws IllegalArgumentException if the value is invalid\n      */\n     public void addHours(final int hours) {\n      if (hours != 0) {\n             setMillis(getChronology().hours().add(getMillis(), hours));\n      }\n     }\n     \n     //-----------------------------------------------------------------------\n@@ -813,7 +827,9 @@ public void setMinuteOfHour(final int minuteOfHour) {\n      * @throws IllegalArgumentException if the value is invalid\n      */\n     public void addMinutes(final int minutes) {\n      if (minutes != 0) {\n             setMillis(getChronology().minutes().add(getMillis(), minutes));\n      }\n     }\n \n     //-----------------------------------------------------------------------\n@@ -844,7 +860,9 @@ public void setSecondOfMinute(final int secondOfMinute) {\n      * @throws IllegalArgumentException if the value is invalid\n      */\n     public void addSeconds(final int seconds) {\n      if (seconds != 0) {\n             setMillis(getChronology().seconds().add(getMillis(), seconds));\n      }\n     }\n \n     //-----------------------------------------------------------------------\n@@ -877,7 +895,9 @@ public void setMillisOfSecond(final int millisOfSecond) {\n      * @throws IllegalArgumentException if the value is invalid\n      */\n     public void addMillis(final int millis) {\n      if (millis != 0) {\n             setMillis(getChronology().millis().add(getMillis(), millis));\n      }\n     }\n \n     //-----------------------------------------------------------------------\n","CodeWithNoComments":"\n         if (type == null) {\n             throw new IllegalArgumentException(\"Field must not be null\");\n         }\n             setMillis(type.getField(getChronology()).add(getMillis(), amount));\n     }\n \n     \n   \n     public void addYears(final int years) {\n             setMillis(getChronology().years().add(getMillis(), years));\n     }\n \n     \n     \n     public void addWeekyears(final int weekyears) {\n             setMillis(getChronology().weekyears().add(getMillis(), weekyears));\n     }\n \n     \n   \n     public void addMonths(final int months) {\n             setMillis(getChronology().months().add(getMillis(), months));\n     }\n \n     \n    \n     public void addWeeks(final int weeks) {\n             setMillis(getChronology().weeks().add(getMillis(), weeks));\n     }\n \n     \n    \n     public void addDays(final int days) {\n             setMillis(getChronology().days().add(getMillis(), days));\n     }\n \n     \n      \n     public void addHours(final int hours) {\n             setMillis(getChronology().hours().add(getMillis(), hours));\n     }\n     \n     \n      \n     public void addMinutes(final int minutes) {\n             setMillis(getChronology().minutes().add(getMillis(), minutes));\n     }\n \n     \n     \n     public void addSeconds(final int seconds) {\n             setMillis(getChronology().seconds().add(getMillis(), seconds));\n     }\n \n     \n    \n     public void addMillis(final int millis) {\n             setMillis(getChronology().millis().add(getMillis(), millis));\n     }\n \n     ","SolutionWithNoComments":"\n         if (type == null) {\n             throw new IllegalArgumentException(\"Field must not be null\");\n         }\n        if (amount != 0) {\n             setMillis(type.getField(getChronology()).add(getMillis(), amount));\n        }\n     }\n \n     \n      \n     public void addYears(final int years) {\n        if (years != 0) {\n             setMillis(getChronology().years().add(getMillis(), years));\n        }\n     }\n \n     \n      \n     public void addWeekyears(final int weekyears) {\n        if (weekyears != 0) {\n             setMillis(getChronology().weekyears().add(getMillis(), weekyears));\n        }\n     }\n \n     \n     \n     public void addMonths(final int months) {\n        if (months != 0) {\n             setMillis(getChronology().months().add(getMillis(), months));\n        }\n     }\n \n     \n    \n     public void addWeeks(final int weeks) {\n        if (weeks != 0) {\n             setMillis(getChronology().weeks().add(getMillis(), weeks));\n        }\n     }\n \n     \n     \n     public void addDays(final int days) {\n        if (days != 0) {\n             setMillis(getChronology().days().add(getMillis(), days));\n        }\n     }\n \n     \n    \n     public void addHours(final int hours) {\n        if (hours != 0) {\n             setMillis(getChronology().hours().add(getMillis(), hours));\n        }\n     }\n     \n     \n    \n     public void addMinutes(final int minutes) {\n        if (minutes != 0) {\n             setMillis(getChronology().minutes().add(getMillis(), minutes));\n        }\n     }\n \n     \n  \n     public void addSeconds(final int seconds) {\n        if (seconds != 0) {\n             setMillis(getChronology().seconds().add(getMillis(), seconds));\n        }\n     }\n \n     \n     \n     public void addMillis(final int millis) {\n        if (millis != 0) {\n             setMillis(getChronology().millis().add(getMillis(), millis));\n        }\n     }\n \n     "},{"ids":370,"error":"junit.framework.AssertionFailedError","source":"/src/main/java/org/joda/time/Partial.java","code":"@@ -214,11 +214,20 @@ public Partial(DateTimeFieldType[] types, int[] values, Chronology chronology) {\n             DateTimeFieldType loopType = types[i];\n             DurationField loopUnitField = loopType.getDurationType().getField(iChronology);\n             if (i > 0) {\n                 int compare = lastUnitField.compareTo(loopUnitField);\n                 if (compare < 0) {\n                     throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" +\n                             types[i - 1].getName() + \" < \" + loopType.getName());\n              } else if (compare == 0) {\n                     if (types[i - 1].getRangeDurationType() == null) {\n                         if (loopType.getRangeDurationType() == null) {\n                             throw new IllegalArgumentException(\"Types array must not contain duplicate: \" +\n/src/main/java/org/joda/time/field/UnsupportedDurationField.java @@ -224,9 +224,6 @@ public long getUnitMillis() {\n      * @return zero always\n      */\n     public int compareTo(DurationField durationField) {\n      if (durationField.isSupported()) {\n          return 1;\n      }\n         return 0;\n     }\n \n","solution":"@@ -214,11 +214,20 @@ public Partial(DateTimeFieldType[] types, int[] values, Chronology chronology) {\n             DateTimeFieldType loopType = types[i];\n             DurationField loopUnitField = loopType.getDurationType().getField(iChronology);\n             if (i > 0) {\n              if (loopUnitField.isSupported() == false) {\n                  if (lastUnitField.isSupported()) {\n                      throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" +\n                                      types[i - 1].getName() + \" < \" + loopType.getName());\n                  } else {\n                      throw new IllegalArgumentException(\"Types array must not contain duplicate unsupported: \" +\n                                      types[i - 1].getName() + \" and \" + loopType.getName());\n                  }\n              }\n                 int compare = lastUnitField.compareTo(loopUnitField);\n                 if (compare < 0) {\n                     throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" +\n                             types[i - 1].getName() + \" < \" + loopType.getName());\n              } else if (compare == 0 && lastUnitField.equals(loopUnitField)) {\n                     if (types[i - 1].getRangeDurationType() == null) {\n                         if (loopType.getRangeDurationType() == null) {\n                             throw new IllegalArgumentException(\"Types array must not contain duplicate: \" +\n/src/main/java/org/joda/time/field/UnsupportedDurationField.java @@ -224,9 +224,6 @@ public long getUnitMillis() {\n      * @return zero always\n      */\n     public int compareTo(DurationField durationField) {\n         return 0;\n     }\n \n","CodeWithNoComments":"\n             DateTimeFieldType loopType = types[i];\n             DurationField loopUnitField = loopType.getDurationType().getField(iChronology);\n             if (i > 0) {\n                 int compare = lastUnitField.compareTo(loopUnitField);\n                 if (compare < 0) {\n                     throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" +\n                             types[i - 1].getName() + \" < \" + loopType.getName());\n                } else if (compare == 0) {\n                     if (types[i - 1].getRangeDurationType() == null) {\n                         if (loopType.getRangeDurationType() == null) {\n                             throw new IllegalArgumentException(\"Types array must not contain duplicate: \" +\n\n    \n     public int compareTo(DurationField durationField) {\n        if (durationField.isSupported()) {\n            return 1;\n        }\n         return 0;\n     }\n \n","SolutionWithNoComments":"\n             DateTimeFieldType loopType = types[i];\n             DurationField loopUnitField = loopType.getDurationType().getField(iChronology);\n             if (i > 0) {\n                if (loopUnitField.isSupported() == false) {\n                    if (lastUnitField.isSupported()) {\n                        throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" +\n                                        types[i - 1].getName() + \" < \" + loopType.getName());\n                    } else {\n                        throw new IllegalArgumentException(\"Types array must not contain duplicate unsupported: \" +\n                                        types[i - 1].getName() + \" and \" + loopType.getName());\n                    }\n                }\n                 int compare = lastUnitField.compareTo(loopUnitField);\n                 if (compare < 0) {\n                     throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" +\n                             types[i - 1].getName() + \" < \" + loopType.getName());\n                } else if (compare == 0 && lastUnitField.equals(loopUnitField)) {\n                     if (types[i - 1].getRangeDurationType() == null) {\n                         if (loopType.getRangeDurationType() == null) {\n                             throw new IllegalArgumentException(\"Types array must not contain duplicate: \" +\n\n   \n     public int compareTo(DurationField durationField) {\n         return 0;\n     }\n \n"},{"ids":371,"error":"junit.framework.AssertionFailedError","source":"/src/main/java/org/joda/time/Partial.java","code":"@@ -461,7 +461,7 @@ public Partial with(DateTimeFieldType fieldType, int value) {\n             System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);\n             // use public constructor to ensure full validation\n             // this isn't overly efficient, but is safe\n          Partial newPartial = new Partial(iChronology, newTypes, newValues);\n             iChronology.validate(newPartial, newValues);\n             return newPartial;\n         }\n","solution":"@@ -461,7 +461,7 @@ public Partial with(DateTimeFieldType fieldType, int value) {\n             System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);\n             // use public constructor to ensure full validation\n             // this isn't overly efficient, but is safe\n          Partial newPartial = new Partial(newTypes, newValues, iChronology);\n             iChronology.validate(newPartial, newValues);\n             return newPartial;\n         }\n","CodeWithNoComments":"\n             System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);\n                                      Partial newPartial = new Partial(iChronology, newTypes, newValues);\n             iChronology.validate(newPartial, newValues);\n             return newPartial;\n         }\n","SolutionWithNoComments":"\n             System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);\n                                      Partial newPartial = new Partial(newTypes, newValues, iChronology);\n             iChronology.validate(newPartial, newValues);\n             return newPartial;\n         }\n"},{"ids":372,"error":"junit.framework.AssertionFailedError","source":"/src/org/mockito/internal/stubbing/answers/AnswersValidator.java","code":"@@ -25,8 +25,16 @@ public void validate(Answer<?> answer, Invocation invocation) {\n             validateDoNothing((DoesNothing) answer, invocation);\n         }\n         \n     }\n \n \n     private void validateDoNothing(DoesNothing answer, Invocation invocation) {\n         if (!invocation.isVoid()) {\n","solution":"@@ -25,8 +25,16 @@ public void validate(Answer<?> answer, Invocation invocation) {\n             validateDoNothing((DoesNothing) answer, invocation);\n         }\n         \n      if (answer instanceof CallsRealMethods) {\n          validateMockingConcreteClass((CallsRealMethods) answer, invocation);\n      }\n     }\n \n  private void validateMockingConcreteClass(CallsRealMethods answer, Invocation invocation) {\n      if (invocation.getMethod().getDeclaringClass().isInterface()) {\n          reporter.cannotCallRealMethodOnInterface();\n      }\n  }\n \n     private void validateDoNothing(DoesNothing answer, Invocation invocation) {\n         if (!invocation.isVoid()) {\n","CodeWithNoComments":"\n             validateDoNothing((DoesNothing) answer, invocation);\n         }\n         \n     }\n \n \n     private void validateDoNothing(DoesNothing answer, Invocation invocation) {\n         if (!invocation.isVoid()) {\n","SolutionWithNoComments":"\n             validateDoNothing((DoesNothing) answer, invocation);\n         }\n         \n        if (answer instanceof CallsRealMethods) {\n            validateMockingConcreteClass((CallsRealMethods) answer, invocation);\n        }\n     }\n \n    private void validateMockingConcreteClass(CallsRealMethods answer, Invocation invocation) {\n        if (invocation.getMethod().getDeclaringClass().isInterface()) {\n            reporter.cannotCallRealMethodOnInterface();\n        }\n    }\n \n     private void validateDoNothing(DoesNothing answer, Invocation invocation) {\n         if (!invocation.isVoid()) {\n"},{"ids":373,"error":"java.lang.IllegalArgumentException","source":"/src/main/java/org/joda/time/Partial.java","code":"@@ -215,7 +215,7 @@ public Partial(DateTimeFieldType[] types, int[] values, Chronology chronology) {\n             DurationField loopUnitField = loopType.getDurationType().getField(iChronology);\n             if (i > 0) {\n                 int compare = lastUnitField.compareTo(loopUnitField);\n              if (compare < 0 || (compare != 0 && loopUnitField.isSupported() == false)) {\n                     throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" +\n                             types[i - 1].getName() + \" < \" + loopType.getName());\n                 } else if (compare == 0) {\n@@ -446,6 +446,9 @@ public Partial with(DateTimeFieldType fieldType, int value) {\n                         if (compare > 0) {\n                             break;\n                         } else if (compare == 0) {\n                             DurationField rangeField = fieldType.getRangeDurationType().getField(iChronology);\n                             DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology);\n                             if (rangeField.compareTo(loopRangeField) > 0) {\n/src/main/java/org/joda/time/field/UnsupportedDurationField.java @@ -224,6 +224,9 @@ public long getUnitMillis() {\n      * @return zero always\n      */\n     public int compareTo(DurationField durationField) {\n         return 0;\n     }\n \n","solution":"@@ -215,7 +215,7 @@ public Partial(DateTimeFieldType[] types, int[] values, Chronology chronology) {\n             DurationField loopUnitField = loopType.getDurationType().getField(iChronology);\n             if (i > 0) {\n                 int compare = lastUnitField.compareTo(loopUnitField);\n              if (compare < 0) {\n                     throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" +\n                             types[i - 1].getName() + \" < \" + loopType.getName());\n                 } else if (compare == 0) {\n@@ -446,6 +446,9 @@ public Partial with(DateTimeFieldType fieldType, int value) {\n                         if (compare > 0) {\n                             break;\n                         } else if (compare == 0) {\n                          if (fieldType.getRangeDurationType() == null) {\n                              break;\n                          }\n                             DurationField rangeField = fieldType.getRangeDurationType().getField(iChronology);\n                             DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology);\n                             if (rangeField.compareTo(loopRangeField) > 0) {\n/src/main/java/org/joda/time/field/UnsupportedDurationField.java @@ -224,6 +224,9 @@ public long getUnitMillis() {\n      * @return zero always\n      */\n     public int compareTo(DurationField durationField) {\n      if (durationField.isSupported()) {\n          return 1;\n      }\n         return 0;\n     }\n \n","CodeWithNoComments":"\n             DurationField loopUnitField = loopType.getDurationType().getField(iChronology);\n             if (i > 0) {\n                 int compare = lastUnitField.compareTo(loopUnitField);\n                if (compare < 0 || (compare != 0 && loopUnitField.isSupported() == false)) {\n                     throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" +\n                             types[i - 1].getName() + \" < \" + loopType.getName());\n                 } else if (compare == 0) {\n\n                         if (compare > 0) {\n                             break;\n                         } else if (compare == 0) {\n                             DurationField rangeField = fieldType.getRangeDurationType().getField(iChronology);\n                             DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology);\n                             if (rangeField.compareTo(loopRangeField) > 0) {\n\n     \n     public int compareTo(DurationField durationField) {\n         return 0;\n     }\n \n","SolutionWithNoComments":"\n             DurationField loopUnitField = loopType.getDurationType().getField(iChronology);\n             if (i > 0) {\n                 int compare = lastUnitField.compareTo(loopUnitField);\n                if (compare < 0) {\n                     throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" +\n                             types[i - 1].getName() + \" < \" + loopType.getName());\n                 } else if (compare == 0) {\n\n                         if (compare > 0) {\n                             break;\n                         } else if (compare == 0) {\n                            if (fieldType.getRangeDurationType() == null) {\n                                break;\n                            }\n                             DurationField rangeField = fieldType.getRangeDurationType().getField(iChronology);\n                             DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology);\n                             if (rangeField.compareTo(loopRangeField) > 0) {\n\n     \n     public int compareTo(DurationField durationField) {\n        if (durationField.isSupported()) {\n            return 1;\n        }\n         return 0;\n     }\n \n"},{"ids":374,"error":"java.lang.IllegalArgumentException","source":"/src/main/java/org/joda/time/DateTimeZone.java","code":"@@ -276,14 +276,17 @@ public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOff\n         if (hoursOffset < -23 || hoursOffset > 23) {\n             throw new IllegalArgumentException(\"Hours out of range: \" + hoursOffset);\n         }\n      if (minutesOffset < 0 || minutesOffset > 59) {\n             throw new IllegalArgumentException(\"Minutes out of range: \" + minutesOffset);\n         }\n         int offset = 0;\n         try {\n             int hoursInMinutes = hoursOffset * 60;\n             if (hoursInMinutes < 0) {\n              minutesOffset = hoursInMinutes - minutesOffset;\n             } else {\n                 minutesOffset = hoursInMinutes + minutesOffset;\n             }\n","solution":"@@ -276,14 +276,17 @@ public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOff\n         if (hoursOffset < -23 || hoursOffset > 23) {\n             throw new IllegalArgumentException(\"Hours out of range: \" + hoursOffset);\n         }\n      if (minutesOffset < -59 || minutesOffset > 59) {\n             throw new IllegalArgumentException(\"Minutes out of range: \" + minutesOffset);\n         }\n      if (hoursOffset > 0 && minutesOffset < 0) {\n          throw new IllegalArgumentException(\"Positive hours must not have negative minutes: \" + minutesOffset);\n      }\n         int offset = 0;\n         try {\n             int hoursInMinutes = hoursOffset * 60;\n             if (hoursInMinutes < 0) {\n              minutesOffset = hoursInMinutes - Math.abs(minutesOffset);\n             } else {\n                 minutesOffset = hoursInMinutes + minutesOffset;\n             }\n","CodeWithNoComments":"\n         if (hoursOffset < -23 || hoursOffset > 23) {\n             throw new IllegalArgumentException(\"Hours out of range: \" + hoursOffset);\n         }\n        if (minutesOffset < 0 || minutesOffset > 59) {\n             throw new IllegalArgumentException(\"Minutes out of range: \" + minutesOffset);\n         }\n         int offset = 0;\n         try {\n             int hoursInMinutes = hoursOffset * 60;\n             if (hoursInMinutes < 0) {\n                minutesOffset = hoursInMinutes - minutesOffset;\n             } else {\n                 minutesOffset = hoursInMinutes + minutesOffset;\n             }\n","SolutionWithNoComments":"\n         if (hoursOffset < -23 || hoursOffset > 23) {\n             throw new IllegalArgumentException(\"Hours out of range: \" + hoursOffset);\n         }\n        if (minutesOffset < -59 || minutesOffset > 59) {\n             throw new IllegalArgumentException(\"Minutes out of range: \" + minutesOffset);\n         }\n        if (hoursOffset > 0 && minutesOffset < 0) {\n            throw new IllegalArgumentException(\"Positive hours must not have negative minutes: \" + minutesOffset);\n        }\n         int offset = 0;\n         try {\n             int hoursInMinutes = hoursOffset * 60;\n             if (hoursInMinutes < 0) {\n                minutesOffset = hoursInMinutes - Math.abs(minutesOffset);\n             } else {\n                 minutesOffset = hoursInMinutes + minutesOffset;\n             }\n"},{"ids":375,"error":"junit.framework.AssertionFailedError","source":"/src/main/java/org/joda/time/chrono/GJChronology.java","code":"@@ -193,6 +193,10 @@ public static synchronized GJChronology getInstance(\n             cutoverInstant = DEFAULT_CUTOVER;\n         } else {\n             cutoverInstant = gregorianCutover.toInstant();\n         }\n \n         GJChronology chrono;\n@@ -976,6 +980,17 @@ public long add(long instant, int value) {\n                 if (instant < iCutover) {\n                     // Only adjust if gap fully crossed.\n                     if (instant + iGapDuration < iCutover) {\n                         instant = gregorianToJulian(instant);\n                     }\n                 }\n@@ -998,6 +1013,17 @@ public long add(long instant, long value) {\n                 if (instant < iCutover) {\n                     // Only adjust if gap fully crossed.\n                     if (instant + iGapDuration < iCutover) {\n                         instant = gregorianToJulian(instant);\n                     }\n                 }\n","solution":"@@ -193,6 +193,10 @@ public static synchronized GJChronology getInstance(\n             cutoverInstant = DEFAULT_CUTOVER;\n         } else {\n             cutoverInstant = gregorianCutover.toInstant();\n          LocalDate cutoverDate = new LocalDate(cutoverInstant.getMillis(), GregorianChronology.getInstance(zone));\n          if (cutoverDate.getYear() <= 0) {\n              throw new IllegalArgumentException(\"Cutover too early. Must be on or after 0001-01-01.\");\n          }\n         }\n \n         GJChronology chrono;\n@@ -976,6 +980,17 @@ public long add(long instant, int value) {\n                 if (instant < iCutover) {\n                     // Only adjust if gap fully crossed.\n                     if (instant + iGapDuration < iCutover) {\n                      if (iConvertByWeekyear) {\n                          int wyear = iGregorianChronology.weekyear().get(instant);\n                          if (wyear <= 0) {\n                              instant = iGregorianChronology.weekyear().add(instant, -1);\n                          }\n                      } else {\n                          int year = iGregorianChronology.year().get(instant);\n                          if (year <= 0) {\n                              instant = iGregorianChronology.year().add(instant, -1);\n                          }\n                      }\n                         instant = gregorianToJulian(instant);\n                     }\n                 }\n@@ -998,6 +1013,17 @@ public long add(long instant, long value) {\n                 if (instant < iCutover) {\n                     // Only adjust if gap fully crossed.\n                     if (instant + iGapDuration < iCutover) {\n                      if (iConvertByWeekyear) {\n                          int wyear = iGregorianChronology.weekyear().get(instant);\n                          if (wyear <= 0) {\n                              instant = iGregorianChronology.weekyear().add(instant, -1);\n                          }\n                      } else {\n                          int year = iGregorianChronology.year().get(instant);\n                          if (year <= 0) {\n                              instant = iGregorianChronology.year().add(instant, -1);\n                          }\n                      }\n                         instant = gregorianToJulian(instant);\n                     }\n                 }\n","CodeWithNoComments":"\n             cutoverInstant = DEFAULT_CUTOVER;\n         } else {\n             cutoverInstant = gregorianCutover.toInstant();\n         }\n \n         GJChronology chrono;\n\n                 if (instant < iCutover) {\n                                          if (instant + iGapDuration < iCutover) {\n                         instant = gregorianToJulian(instant);\n                     }\n                 }\n\n                 if (instant < iCutover) {\n                                          if (instant + iGapDuration < iCutover) {\n                         instant = gregorianToJulian(instant);\n                     }\n                 }\n","SolutionWithNoComments":"\n             cutoverInstant = DEFAULT_CUTOVER;\n         } else {\n             cutoverInstant = gregorianCutover.toInstant();\n            LocalDate cutoverDate = new LocalDate(cutoverInstant.getMillis(), GregorianChronology.getInstance(zone));\n            if (cutoverDate.getYear() <= 0) {\n                throw new IllegalArgumentException(\"Cutover too early. Must be on or after 0001-01-01.\");\n            }\n         }\n \n         GJChronology chrono;\n\n                 if (instant < iCutover) {\n                                          if (instant + iGapDuration < iCutover) {\n                        if (iConvertByWeekyear) {\n                            int wyear = iGregorianChronology.weekyear().get(instant);\n                            if (wyear <= 0) {\n                                instant = iGregorianChronology.weekyear().add(instant, -1);\n                            }\n                        } else {\n                            int year = iGregorianChronology.year().get(instant);\n                            if (year <= 0) {\n                                instant = iGregorianChronology.year().add(instant, -1);\n                            }\n                        }\n                         instant = gregorianToJulian(instant);\n                     }\n                 }\n\n                 if (instant < iCutover) {\n                                          if (instant + iGapDuration < iCutover) {\n                        if (iConvertByWeekyear) {\n                            int wyear = iGregorianChronology.weekyear().get(instant);\n                            if (wyear <= 0) {\n                                instant = iGregorianChronology.weekyear().add(instant, -1);\n                            }\n                        } else {\n                            int year = iGregorianChronology.year().get(instant);\n                            if (year <= 0) {\n                                instant = iGregorianChronology.year().add(instant, -1);\n                            }\n                        }\n                         instant = gregorianToJulian(instant);\n                     }\n                 }\n"},{"ids":376,"error":"org.joda.time.IllegalFieldValueException","source":"/src/main/java/org/joda/time/format/DateTimeFormatter.java","code":"@@ -705,9 +705,9 @@ public int parseInto(ReadWritableInstant instant, String text, int position) {\n         \n         long instantMillis = instant.getMillis();\n         Chronology chrono = instant.getChronology();\n         long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n         chrono = selectChronology(chrono);\n      int defaultYear = chrono.year().get(instantLocal);\n         \n         DateTimeParserBucket bucket = new DateTimeParserBucket(\n             instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n","solution":"@@ -705,9 +705,9 @@ public int parseInto(ReadWritableInstant instant, String text, int position) {\n         \n         long instantMillis = instant.getMillis();\n         Chronology chrono = instant.getChronology();\n      int defaultYear = DateTimeUtils.getChronology(chrono).year().get(instantMillis);\n         long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n         chrono = selectChronology(chrono);\n         \n         DateTimeParserBucket bucket = new DateTimeParserBucket(\n             instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n","CodeWithNoComments":"\n         \n         long instantMillis = instant.getMillis();\n         Chronology chrono = instant.getChronology();\n         long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n         chrono = selectChronology(chrono);\n        int defaultYear = chrono.year().get(instantLocal);\n         \n         DateTimeParserBucket bucket = new DateTimeParserBucket(\n             instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n","SolutionWithNoComments":"\n         \n         long instantMillis = instant.getMillis();\n         Chronology chrono = instant.getChronology();\n        int defaultYear = DateTimeUtils.getChronology(chrono).year().get(instantMillis);\n         long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n         chrono = selectChronology(chrono);\n         \n         DateTimeParserBucket bucket = new DateTimeParserBucket(\n             instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n"},{"ids":377,"error":"junit.framework.AssertionFailedError","source":"/src/main/java/org/joda/time/DateTimeZone.java","code":"@@ -255,16 +255,19 @@ public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOff\n         if (hoursOffset == 0 && minutesOffset == 0) {\n             return DateTimeZone.UTC;\n         }\n         if (minutesOffset < 0 || minutesOffset > 59) {\n             throw new IllegalArgumentException(\"Minutes out of range: \" + minutesOffset);\n         }\n         int offset = 0;\n         try {\n          int hoursInMinutes = FieldUtils.safeMultiply(hoursOffset, 60);\n             if (hoursInMinutes < 0) {\n              minutesOffset = FieldUtils.safeAdd(hoursInMinutes, -minutesOffset);\n             } else {\n              minutesOffset = FieldUtils.safeAdd(hoursInMinutes, minutesOffset);\n             }\n             offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);\n         } catch (ArithmeticException ex) {\n@@ -280,6 +283,9 @@ public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOff\n      * @return the DateTimeZone object for the offset\n      */\n     public static DateTimeZone forOffsetMillis(int millisOffset) {\n         String id = printOffset(millisOffset);\n         return fixedOffsetZone(id, millisOffset);\n     }\n","solution":"@@ -255,16 +255,19 @@ public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOff\n         if (hoursOffset == 0 && minutesOffset == 0) {\n             return DateTimeZone.UTC;\n         }\n      if (hoursOffset < -23 || hoursOffset > 23) {\n          throw new IllegalArgumentException(\"Hours out of range: \" + hoursOffset);\n      }\n         if (minutesOffset < 0 || minutesOffset > 59) {\n             throw new IllegalArgumentException(\"Minutes out of range: \" + minutesOffset);\n         }\n         int offset = 0;\n         try {\n          int hoursInMinutes = hoursOffset * 60;\n             if (hoursInMinutes < 0) {\n              minutesOffset = hoursInMinutes - minutesOffset;\n             } else {\n              minutesOffset = hoursInMinutes + minutesOffset;\n             }\n             offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);\n         } catch (ArithmeticException ex) {\n@@ -280,6 +283,9 @@ public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOff\n      * @return the DateTimeZone object for the offset\n      */\n     public static DateTimeZone forOffsetMillis(int millisOffset) {\n      if (millisOffset < -MAX_MILLIS || millisOffset > MAX_MILLIS) {\n          throw new IllegalArgumentException(\"Millis out of range: \" + millisOffset);\n      }\n         String id = printOffset(millisOffset);\n         return fixedOffsetZone(id, millisOffset);\n     }\n","CodeWithNoComments":"\n         if (hoursOffset == 0 && minutesOffset == 0) {\n             return DateTimeZone.UTC;\n         }\n         if (minutesOffset < 0 || minutesOffset > 59) {\n             throw new IllegalArgumentException(\"Minutes out of range: \" + minutesOffset);\n         }\n         int offset = 0;\n         try {\n            int hoursInMinutes = FieldUtils.safeMultiply(hoursOffset, 60);\n             if (hoursInMinutes < 0) {\n                minutesOffset = FieldUtils.safeAdd(hoursInMinutes, -minutesOffset);\n             } else {\n                minutesOffset = FieldUtils.safeAdd(hoursInMinutes, minutesOffset);\n             }\n             offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);\n         } catch (ArithmeticException ex) {\n\n    \n     public static DateTimeZone forOffsetMillis(int millisOffset) {\n         String id = printOffset(millisOffset);\n         return fixedOffsetZone(id, millisOffset);\n     }\n","SolutionWithNoComments":"\n         if (hoursOffset == 0 && minutesOffset == 0) {\n             return DateTimeZone.UTC;\n         }\n        if (hoursOffset < -23 || hoursOffset > 23) {\n            throw new IllegalArgumentException(\"Hours out of range: \" + hoursOffset);\n        }\n         if (minutesOffset < 0 || minutesOffset > 59) {\n             throw new IllegalArgumentException(\"Minutes out of range: \" + minutesOffset);\n         }\n         int offset = 0;\n         try {\n            int hoursInMinutes = hoursOffset * 60;\n             if (hoursInMinutes < 0) {\n                minutesOffset = hoursInMinutes - minutesOffset;\n             } else {\n                minutesOffset = hoursInMinutes + minutesOffset;\n             }\n             offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);\n         } catch (ArithmeticException ex) {\n\n    \n     public static DateTimeZone forOffsetMillis(int millisOffset) {\n        if (millisOffset < -MAX_MILLIS || millisOffset > MAX_MILLIS) {\n            throw new IllegalArgumentException(\"Millis out of range: \" + millisOffset);\n        }\n         String id = printOffset(millisOffset);\n         return fixedOffsetZone(id, millisOffset);\n     }\n"},{"ids":378,"error":"org.joda.time.IllegalFieldValueException","source":"/src/main/java/org/joda/time/base/BaseSingleFieldPeriod.java","code":"@@ -49,6 +49,7 @@\n     /** Serialization version. */\n     private static final long serialVersionUID = 9386874258972L;\n     /** The start of 1972. */\n \n     /** The period in the units of this period. */\n     private volatile int iPeriod;\n@@ -101,7 +102,7 @@ protected static int between(ReadablePartial start, ReadablePartial end, Readabl\n             throw new IllegalArgumentException(\"ReadablePartial objects must be contiguous\");\n         }\n         Chronology chrono = DateTimeUtils.getChronology(start.getChronology()).withUTC();\n      int[] values = chrono.get(zeroInstance, chrono.set(start, 0L), chrono.set(end, 0L));\n         return values[0];\n     }\n \n","solution":"@@ -49,6 +49,7 @@\n     /** Serialization version. */\n     private static final long serialVersionUID = 9386874258972L;\n     /** The start of 1972. */\n  private static final long START_1972 = 2L * 365L * 86400L * 1000L;\n \n     /** The period in the units of this period. */\n     private volatile int iPeriod;\n@@ -101,7 +102,7 @@ protected static int between(ReadablePartial start, ReadablePartial end, Readabl\n             throw new IllegalArgumentException(\"ReadablePartial objects must be contiguous\");\n         }\n         Chronology chrono = DateTimeUtils.getChronology(start.getChronology()).withUTC();\n      int[] values = chrono.get(zeroInstance, chrono.set(start, START_1972), chrono.set(end, START_1972));\n         return values[0];\n     }\n \n","CodeWithNoComments":"\n          private static final long serialVersionUID = 9386874258972L;\n      \n          private volatile int iPeriod;\n\n             throw new IllegalArgumentException(\"ReadablePartial objects must be contiguous\");\n         }\n         Chronology chrono = DateTimeUtils.getChronology(start.getChronology()).withUTC();\n        int[] values = chrono.get(zeroInstance, chrono.set(start, 0L), chrono.set(end, 0L));\n         return values[0];\n     }\n \n","SolutionWithNoComments":"\n          private static final long serialVersionUID = 9386874258972L;\n         private static final long START_1972 = 2L * 365L * 86400L * 1000L;\n \n          private volatile int iPeriod;\n\n             throw new IllegalArgumentException(\"ReadablePartial objects must be contiguous\");\n         }\n         Chronology chrono = DateTimeUtils.getChronology(start.getChronology()).withUTC();\n        int[] values = chrono.get(zeroInstance, chrono.set(start, START_1972), chrono.set(end, START_1972));\n         return values[0];\n     }\n \n"},{"ids":379,"error":"junit.framework.AssertionFailedError","source":"/src/main/java/org/joda/time/LocalDate.java","code":"@@ -207,9 +207,10 @@ public static LocalDate fromCalendarFields(Calendar calendar) {\n         if (calendar == null) {\n             throw new IllegalArgumentException(\"The calendar must not be null\");\n         }\n         int yearOfEra = calendar.get(Calendar.YEAR);\n         return new LocalDate(\n          yearOfEra,\n             calendar.get(Calendar.MONTH) + 1,\n             calendar.get(Calendar.DAY_OF_MONTH)\n         );\n@@ -240,7 +241,12 @@ public static LocalDate fromDateFields(Date date) {\n         if (date == null) {\n             throw new IllegalArgumentException(\"The date must not be null\");\n         }\n             // handle years in era BC\n         return new LocalDate(\n             date.getYear() + 1900,\n             date.getMonth() + 1,\n/src/main/java/org/joda/time/LocalDateTime.java @@ -196,9 +196,10 @@ public static LocalDateTime fromCalendarFields(Calendar calendar) {\n         if (calendar == null) {\n             throw new IllegalArgumentException(\"The calendar must not be null\");\n         }\n         int yearOfEra = calendar.get(Calendar.YEAR);\n         return new LocalDateTime(\n          yearOfEra,\n             calendar.get(Calendar.MONTH) + 1,\n             calendar.get(Calendar.DAY_OF_MONTH),\n             calendar.get(Calendar.HOUR_OF_DAY),\n@@ -233,7 +234,12 @@ public static LocalDateTime fromDateFields(Date date) {\n         if (date == null) {\n             throw new IllegalArgumentException(\"The date must not be null\");\n         }\n             // handle years in era BC\n         return new LocalDateTime(\n             date.getYear() + 1900,\n             date.getMonth() + 1,\n","solution":"@@ -207,9 +207,10 @@ public static LocalDate fromCalendarFields(Calendar calendar) {\n         if (calendar == null) {\n             throw new IllegalArgumentException(\"The calendar must not be null\");\n         }\n      int era = calendar.get(Calendar.ERA);\n         int yearOfEra = calendar.get(Calendar.YEAR);\n         return new LocalDate(\n          (era == GregorianCalendar.AD ? yearOfEra : 1 - yearOfEra),\n             calendar.get(Calendar.MONTH) + 1,\n             calendar.get(Calendar.DAY_OF_MONTH)\n         );\n@@ -240,7 +241,12 @@ public static LocalDate fromDateFields(Date date) {\n         if (date == null) {\n             throw new IllegalArgumentException(\"The date must not be null\");\n         }\n      if (date.getTime() < 0) {\n             // handle years in era BC\n          GregorianCalendar cal = new GregorianCalendar();\n          cal.setTime(date);\n          return fromCalendarFields(cal);\n      }\n         return new LocalDate(\n             date.getYear() + 1900,\n             date.getMonth() + 1,\n/src/main/java/org/joda/time/LocalDateTime.java @@ -196,9 +196,10 @@ public static LocalDateTime fromCalendarFields(Calendar calendar) {\n         if (calendar == null) {\n             throw new IllegalArgumentException(\"The calendar must not be null\");\n         }\n      int era = calendar.get(Calendar.ERA);\n         int yearOfEra = calendar.get(Calendar.YEAR);\n         return new LocalDateTime(\n          (era == GregorianCalendar.AD ? yearOfEra : 1 - yearOfEra),\n             calendar.get(Calendar.MONTH) + 1,\n             calendar.get(Calendar.DAY_OF_MONTH),\n             calendar.get(Calendar.HOUR_OF_DAY),\n@@ -233,7 +234,12 @@ public static LocalDateTime fromDateFields(Date date) {\n         if (date == null) {\n             throw new IllegalArgumentException(\"The date must not be null\");\n         }\n      if (date.getTime() < 0) {\n             // handle years in era BC\n          GregorianCalendar cal = new GregorianCalendar();\n          cal.setTime(date);\n          return fromCalendarFields(cal);\n      }\n         return new LocalDateTime(\n             date.getYear() + 1900,\n             date.getMonth() + 1,\n","CodeWithNoComments":"\n         if (calendar == null) {\n             throw new IllegalArgumentException(\"The calendar must not be null\");\n         }\n         int yearOfEra = calendar.get(Calendar.YEAR);\n         return new LocalDate(\n            yearOfEra,\n             calendar.get(Calendar.MONTH) + 1,\n             calendar.get(Calendar.DAY_OF_MONTH)\n         );\n\n         if (date == null) {\n             throw new IllegalArgumentException(\"The date must not be null\");\n         }\n                      return new LocalDate(\n             date.getYear() + 1900,\n             date.getMonth() + 1,\n\n         if (calendar == null) {\n             throw new IllegalArgumentException(\"The calendar must not be null\");\n         }\n         int yearOfEra = calendar.get(Calendar.YEAR);\n         return new LocalDateTime(\n            yearOfEra,\n             calendar.get(Calendar.MONTH) + 1,\n             calendar.get(Calendar.DAY_OF_MONTH),\n             calendar.get(Calendar.HOUR_OF_DAY),\n\n         if (date == null) {\n             throw new IllegalArgumentException(\"The date must not be null\");\n         }\n                      return new LocalDateTime(\n             date.getYear() + 1900,\n             date.getMonth() + 1,\n","SolutionWithNoComments":"\n         if (calendar == null) {\n             throw new IllegalArgumentException(\"The calendar must not be null\");\n         }\n        int era = calendar.get(Calendar.ERA);\n         int yearOfEra = calendar.get(Calendar.YEAR);\n         return new LocalDate(\n            (era == GregorianCalendar.AD ? yearOfEra : 1 - yearOfEra),\n             calendar.get(Calendar.MONTH) + 1,\n             calendar.get(Calendar.DAY_OF_MONTH)\n         );\n\n         if (date == null) {\n             throw new IllegalArgumentException(\"The date must not be null\");\n         }\n        if (date.getTime() < 0) {\n                         GregorianCalendar cal = new GregorianCalendar();\n            cal.setTime(date);\n            return fromCalendarFields(cal);\n        }\n         return new LocalDate(\n             date.getYear() + 1900,\n             date.getMonth() + 1,\n\n         if (calendar == null) {\n             throw new IllegalArgumentException(\"The calendar must not be null\");\n         }\n        int era = calendar.get(Calendar.ERA);\n         int yearOfEra = calendar.get(Calendar.YEAR);\n         return new LocalDateTime(\n            (era == GregorianCalendar.AD ? yearOfEra : 1 - yearOfEra),\n             calendar.get(Calendar.MONTH) + 1,\n             calendar.get(Calendar.DAY_OF_MONTH),\n             calendar.get(Calendar.HOUR_OF_DAY),\n\n         if (date == null) {\n             throw new IllegalArgumentException(\"The date must not be null\");\n         }\n        if (date.getTime() < 0) {\n                         GregorianCalendar cal = new GregorianCalendar();\n            cal.setTime(date);\n            return fromCalendarFields(cal);\n        }\n         return new LocalDateTime(\n             date.getYear() + 1900,\n             date.getMonth() + 1,\n"},{"ids":380,"error":"junit.framework.AssertionFailedError","source":"/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java","code":"@@ -65,10 +65,11 @@\n \n     static Chronology cLenientISO;\n \n  static ThreadLocal<Boolean> cVerbose = new ThreadLocal<Boolean>();\n  static {\n      cVerbose.set(Boolean.FALSE);\n  }\n \n     /**\n      * Gets a flag indicating that verbose logging is required.\n","solution":"@@ -65,10 +65,11 @@\n \n     static Chronology cLenientISO;\n \n  static ThreadLocal<Boolean> cVerbose = new ThreadLocal<Boolean>() {\n      protected Boolean initialValue() {\n          return Boolean.FALSE;\n      }\n  };\n \n     /**\n      * Gets a flag indicating that verbose logging is required.\n","CodeWithNoComments":"\n \n     static Chronology cLenientISO;\n \n    static ThreadLocal<Boolean> cVerbose = new ThreadLocal<Boolean>();\n    static {\n        cVerbose.set(Boolean.FALSE);\n    }\n \n","SolutionWithNoComments":"\n \n     static Chronology cLenientISO;\n \n    static ThreadLocal<Boolean> cVerbose = new ThreadLocal<Boolean>() {\n        protected Boolean initialValue() {\n            return Boolean.FALSE;\n        }\n    };\n"},{"ids":381,"error":"org.joda.time.IllegalFieldValueException","source":"/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java","code":"@@ -206,7 +206,12 @@ public long add(long instant, long months) {\n         if (valueToAdd == 0) {\n             return values;\n         }\n             // month is largest field and being added to, such as month-day\n         if (DateTimeUtils.isContiguous(partial)) {\n             long instant = 0L;\n             for (int i = 0, isize = partial.size(); i < isize; i++) {\n","solution":"@@ -206,7 +206,12 @@ public long add(long instant, long months) {\n         if (valueToAdd == 0) {\n             return values;\n         }\n      if (partial.size() > 0 && partial.getFieldType(0).equals(DateTimeFieldType.monthOfYear()) && fieldIndex == 0) {\n             // month is largest field and being added to, such as month-day\n          int curMonth0 = partial.getValue(0) - 1;\n          int newMonth = ((curMonth0 + (valueToAdd % 12) + 12) % 12) + 1;\n          return set(partial, 0, values, newMonth);\n      }\n         if (DateTimeUtils.isContiguous(partial)) {\n             long instant = 0L;\n             for (int i = 0, isize = partial.size(); i < isize; i++) {\n","CodeWithNoComments":"\n         if (valueToAdd == 0) {\n             return values;\n         }\n                      if (DateTimeUtils.isContiguous(partial)) {\n             long instant = 0L;\n             for (int i = 0, isize = partial.size(); i < isize; i++) {\n","SolutionWithNoComments":"\n         if (valueToAdd == 0) {\n             return values;\n         }\n        if (partial.size() > 0 && partial.getFieldType(0).equals(DateTimeFieldType.monthOfYear()) && fieldIndex == 0) {\n                         int curMonth0 = partial.getValue(0) - 1;\n            int newMonth = ((curMonth0 + (valueToAdd % 12) + 12) % 12) + 1;\n            return set(partial, 0, values, newMonth);\n        }\n         if (DateTimeUtils.isContiguous(partial)) {\n             long instant = 0L;\n             for (int i = 0, isize = partial.size(); i < isize; i++) {\n"},{"ids":382,"error":"junit.framework.ComparisonFailure","source":"/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java","code":"@@ -1095,7 +1095,7 @@ public int calculatePrintedLength(ReadablePeriod period, Locale locale) {\n             if (iFieldType >= SECONDS_MILLIS) {\n                 // valueLong contains the seconds and millis fields\n                 // the minimum output is 0.000, which is 4 or 5 digits with a negative\n              sum = Math.max(sum, 4);\n                 // plus one for the decimal point\n                 sum++;\n                 if (iFieldType == SECONDS_OPTIONAL_MILLIS &&\n@@ -1130,6 +1130,7 @@ public void printTo(StringBuffer buf, ReadablePeriod period, Locale locale) {\n             if (iPrefix != null) {\n                 iPrefix.printTo(buf, value);\n             }\n             int minDigits = iMinPrintedDigits;\n             if (minDigits <= 1) {\n                 FormatUtils.appendUnpaddedInteger(buf, value);\n@@ -1139,6 +1140,9 @@ public void printTo(StringBuffer buf, ReadablePeriod period, Locale locale) {\n             if (iFieldType >= SECONDS_MILLIS) {\n                 int dp = (int) (Math.abs(valueLong) % DateTimeConstants.MILLIS_PER_SECOND);\n                 if (iFieldType == SECONDS_MILLIS || dp > 0) {\n                     buf.append('.');\n                     FormatUtils.appendPaddedInteger(buf, dp, 3);\n                 }\n","solution":"@@ -1095,7 +1095,7 @@ public int calculatePrintedLength(ReadablePeriod period, Locale locale) {\n             if (iFieldType >= SECONDS_MILLIS) {\n                 // valueLong contains the seconds and millis fields\n                 // the minimum output is 0.000, which is 4 or 5 digits with a negative\n              sum = (valueLong < 0 ? Math.max(sum, 5) : Math.max(sum, 4));\n                 // plus one for the decimal point\n                 sum++;\n                 if (iFieldType == SECONDS_OPTIONAL_MILLIS &&\n@@ -1130,6 +1130,7 @@ public void printTo(StringBuffer buf, ReadablePeriod period, Locale locale) {\n             if (iPrefix != null) {\n                 iPrefix.printTo(buf, value);\n             }\n          int bufLen = buf.length();\n             int minDigits = iMinPrintedDigits;\n             if (minDigits <= 1) {\n                 FormatUtils.appendUnpaddedInteger(buf, value);\n@@ -1139,6 +1140,9 @@ public void printTo(StringBuffer buf, ReadablePeriod period, Locale locale) {\n             if (iFieldType >= SECONDS_MILLIS) {\n                 int dp = (int) (Math.abs(valueLong) % DateTimeConstants.MILLIS_PER_SECOND);\n                 if (iFieldType == SECONDS_MILLIS || dp > 0) {\n                  if (valueLong < 0 && valueLong > -DateTimeConstants.MILLIS_PER_SECOND) {\n                      buf.insert(bufLen, '-');\n                  }\n                     buf.append('.');\n                     FormatUtils.appendPaddedInteger(buf, dp, 3);\n                 }\n","CodeWithNoComments":"\n             if (iFieldType >= SECONDS_MILLIS) {\n                                                  sum = Math.max(sum, 4);\n                                  sum++;\n                 if (iFieldType == SECONDS_OPTIONAL_MILLIS &&\n\n             if (iPrefix != null) {\n                 iPrefix.printTo(buf, value);\n             }\n             int minDigits = iMinPrintedDigits;\n             if (minDigits <= 1) {\n                 FormatUtils.appendUnpaddedInteger(buf, value);\n\n             if (iFieldType >= SECONDS_MILLIS) {\n                 int dp = (int) (Math.abs(valueLong) % DateTimeConstants.MILLIS_PER_SECOND);\n                 if (iFieldType == SECONDS_MILLIS || dp > 0) {\n                     buf.append('.');\n                     FormatUtils.appendPaddedInteger(buf, dp, 3);\n                 }\n","SolutionWithNoComments":"\n             if (iFieldType >= SECONDS_MILLIS) {\n                                                  sum = (valueLong < 0 ? Math.max(sum, 5) : Math.max(sum, 4));\n                                  sum++;\n                 if (iFieldType == SECONDS_OPTIONAL_MILLIS &&\n\n             if (iPrefix != null) {\n                 iPrefix.printTo(buf, value);\n             }\n            int bufLen = buf.length();\n             int minDigits = iMinPrintedDigits;\n             if (minDigits <= 1) {\n                 FormatUtils.appendUnpaddedInteger(buf, value);\n\n             if (iFieldType >= SECONDS_MILLIS) {\n                 int dp = (int) (Math.abs(valueLong) % DateTimeConstants.MILLIS_PER_SECOND);\n                 if (iFieldType == SECONDS_MILLIS || dp > 0) {\n                    if (valueLong < 0 && valueLong > -DateTimeConstants.MILLIS_PER_SECOND) {\n                        buf.insert(bufLen, '-');\n                    }\n                     buf.append('.');\n                     FormatUtils.appendPaddedInteger(buf, dp, 3);\n                 }\n"},{"ids":383,"error":"junit.framework.AssertionFailedError","source":"/src/main/java/org/joda/time/field/FieldUtils.java","code":"@@ -135,6 +135,9 @@ public static int safeMultiply(int val1, int val2) {\n     public static long safeMultiply(long val1, int val2) {\n         switch (val2) {\n             case -1:\n                 return -val1;\n             case 0:\n                 return 0L;\n","solution":"@@ -135,6 +135,9 @@ public static int safeMultiply(int val1, int val2) {\n     public static long safeMultiply(long val1, int val2) {\n         switch (val2) {\n             case -1:\n              if (val1 == Long.MIN_VALUE) {\n                  throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n              }\n                 return -val1;\n             case 0:\n                 return 0L;\n","CodeWithNoComments":"\n     public static long safeMultiply(long val1, int val2) {\n         switch (val2) {\n             case -1:\n                 return -val1;\n             case 0:\n                 return 0L;\n","SolutionWithNoComments":"\n     public static long safeMultiply(long val1, int val2) {\n         switch (val2) {\n             case -1:\n                if (val1 == Long.MIN_VALUE) {\n                    throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n                }\n                 return -val1;\n             case 0:\n                 return 0L;\n"},{"ids":384,"error":"junit.framework.AssertionFailedError","source":"/src/main/java/org/joda/time/DateTimeZone.java","code":"@@ -1164,19 +1164,32 @@ public long adjustOffset(long instant, boolean earlierOrLater) {\n         // a bit messy, but will work in all non-pathological cases\n         \n         // evaluate 3 hours before and after to work out if anything is happening\n      long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);\n      long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);\n      if (instantBefore == instantAfter) {\n             return instant;  // not an overlap (less than is a gap, equal is normal case)\n         }\n         \n         // work out range of instants that have duplicate local times\n      long local = convertUTCToLocal(instant);\n      return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);\n         \n         // calculate result\n           // currently in later offset\n           // currently in earlier offset\n     }\n //    System.out.println(new DateTime(transitionStart, DateTimeZone.UTC) + \" \" + new DateTime(transitionStart, this));\n \n","solution":"@@ -1164,19 +1164,32 @@ public long adjustOffset(long instant, boolean earlierOrLater) {\n         // a bit messy, but will work in all non-pathological cases\n         \n         // evaluate 3 hours before and after to work out if anything is happening\n      long instantBefore = instant - 3 * DateTimeConstants.MILLIS_PER_HOUR;\n      long instantAfter = instant + 3 * DateTimeConstants.MILLIS_PER_HOUR;\n      long offsetBefore = getOffset(instantBefore);\n      long offsetAfter = getOffset(instantAfter);\n      if (offsetBefore <= offsetAfter) {\n             return instant;  // not an overlap (less than is a gap, equal is normal case)\n         }\n         \n         // work out range of instants that have duplicate local times\n      long diff = offsetBefore - offsetAfter;\n      long transition = nextTransition(instantBefore);\n      long overlapStart = transition - diff;\n      long overlapEnd = transition + diff;\n      if (instant < overlapStart || instant >= overlapEnd) {\n        return instant;  // not an overlap\n      }\n         \n         // calculate result\n      long afterStart = instant - overlapStart;\n      if (afterStart >= diff) {\n           // currently in later offset\n        return earlierOrLater ? instant : instant - diff;\n      } else {\n           // currently in earlier offset\n        return earlierOrLater ? instant + diff : instant;\n      }\n     }\n //    System.out.println(new DateTime(transitionStart, DateTimeZone.UTC) + \" \" + new DateTime(transitionStart, this));\n \n","CodeWithNoComments":"\n                  \n                 long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);\n        long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);\n        if (instantBefore == instantAfter) {\n             return instant;           }\n         \n                 long local = convertUTCToLocal(instant);\n        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);\n         \n                                    }\n  \n","SolutionWithNoComments":"\n                  \n                 long instantBefore = instant - 3 * DateTimeConstants.MILLIS_PER_HOUR;\n        long instantAfter = instant + 3 * DateTimeConstants.MILLIS_PER_HOUR;\n        long offsetBefore = getOffset(instantBefore);\n        long offsetAfter = getOffset(instantAfter);\n        if (offsetBefore <= offsetAfter) {\n             return instant;           }\n         \n                 long diff = offsetBefore - offsetAfter;\n        long transition = nextTransition(instantBefore);\n        long overlapStart = transition - diff;\n        long overlapEnd = transition + diff;\n        if (instant < overlapStart || instant >= overlapEnd) {\n          return instant;          }\n         \n                 long afterStart = instant - overlapStart;\n        if (afterStart >= diff) {\n                     return earlierOrLater ? instant : instant - diff;\n        } else {\n                     return earlierOrLater ? instant + diff : instant;\n        }\n     }\n  \n"},{"ids":385,"error":"junit.framework.AssertionFailedError","source":"/src/main/java/org/joda/time/format/DateTimeFormatter.java","code":"@@ -706,7 +706,7 @@ public int parseInto(ReadWritableInstant instant, String text, int position) {\n         chrono = selectChronology(chrono);\n         \n         DateTimeParserBucket bucket = new DateTimeParserBucket(\n          instantLocal, chrono, iLocale, iPivotYear, iDefaultYear);\n         int newPos = parser.parseInto(bucket, text, position);\n         instant.setMillis(bucket.computeMillis(false, text));\n         if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n","solution":"@@ -706,7 +706,7 @@ public int parseInto(ReadWritableInstant instant, String text, int position) {\n         chrono = selectChronology(chrono);\n         \n         DateTimeParserBucket bucket = new DateTimeParserBucket(\n          instantLocal, chrono, iLocale, iPivotYear, chrono.year().get(instantLocal));\n         int newPos = parser.parseInto(bucket, text, position);\n         instant.setMillis(bucket.computeMillis(false, text));\n         if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n","CodeWithNoComments":"\n         chrono = selectChronology(chrono);\n         \n         DateTimeParserBucket bucket = new DateTimeParserBucket(\n            instantLocal, chrono, iLocale, iPivotYear, iDefaultYear);\n         int newPos = parser.parseInto(bucket, text, position);\n         instant.setMillis(bucket.computeMillis(false, text));\n         if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n","SolutionWithNoComments":"\n         chrono = selectChronology(chrono);\n         \n         DateTimeParserBucket bucket = new DateTimeParserBucket(\n            instantLocal, chrono, iLocale, iPivotYear, chrono.year().get(instantLocal));\n         int newPos = parser.parseInto(bucket, text, position);\n         instant.setMillis(bucket.computeMillis(false, text));\n         if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n"},{"ids":386,"error":"java.lang.IllegalArgumentException","source":"/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java","code":"@@ -2539,12 +2539,18 @@ public int estimateParsedLength() {\n \n         public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n             String str = text.substring(position);\n             for (String id : ALL_IDS) {\n                 if (str.startsWith(id)) {\n                  bucket.setZone(DateTimeZone.forID(id));\n                  return position + id.length();\n                 }\n             }\n             return ~position;\n         }\n     }\n","solution":"@@ -2539,12 +2539,18 @@ public int estimateParsedLength() {\n \n         public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n             String str = text.substring(position);\n          String best = null;\n             for (String id : ALL_IDS) {\n                 if (str.startsWith(id)) {\n              \tif (best == null || id.length() > best.length()) {\n              \t\tbest = id;\n              \t}\n                 }\n             }\n          if (best != null) {\n              bucket.setZone(DateTimeZone.forID(best));\n              return position + best.length();\n          }\n             return ~position;\n         }\n     }\n","CodeWithNoComments":"\n \n         public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n             String str = text.substring(position);\n             for (String id : ALL_IDS) {\n                 if (str.startsWith(id)) {\n                    bucket.setZone(DateTimeZone.forID(id));\n                    return position + id.length();\n                 }\n             }\n             return ~position;\n         }\n     }\n","SolutionWithNoComments":"\n \n         public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n             String str = text.substring(position);\n            String best = null;\n             for (String id : ALL_IDS) {\n                 if (str.startsWith(id)) {\n                \tif (best == null || id.length() > best.length()) {\n                \t\tbest = id;\n                \t}\n                 }\n             }\n            if (best != null) {\n                bucket.setZone(DateTimeZone.forID(best));\n                return position + best.length();\n            }\n             return ~position;\n         }\n     }\n"},{"ids":387,"error":"org.joda.time.IllegalFieldValueException","source":"/src/main/java/org/joda/time/chrono/GJChronology.java","code":"@@ -361,9 +361,21 @@ public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n \n         // Assume date is Gregorian.\n         long instant;\n             instant = iGregorianChronology.getDateTimeMillis\n                 (year, monthOfYear, dayOfMonth,\n                  hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n         if (instant < iCutoverMillis) {\n             // Maybe it's Julian.\n             instant = iJulianChronology.getDateTimeMillis\n","solution":"@@ -361,9 +361,21 @@ public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n \n         // Assume date is Gregorian.\n         long instant;\n      try {\n             instant = iGregorianChronology.getDateTimeMillis\n                 (year, monthOfYear, dayOfMonth,\n                  hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n      } catch (IllegalFieldValueException ex) {\n          if (monthOfYear != 2 || dayOfMonth != 29) {\n              throw ex;\n          }\n          instant = iGregorianChronology.getDateTimeMillis\n              (year, monthOfYear, 28,\n               hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n          if (instant >= iCutoverMillis) {\n              throw ex;\n          }\n      }\n         if (instant < iCutoverMillis) {\n             // Maybe it's Julian.\n             instant = iJulianChronology.getDateTimeMillis\n","CodeWithNoComments":"\n \n                  long instant;\n             instant = iGregorianChronology.getDateTimeMillis\n                 (year, monthOfYear, dayOfMonth,\n                  hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n         if (instant < iCutoverMillis) {\n                          instant = iJulianChronology.getDateTimeMillis\n","SolutionWithNoComments":"\n \n                  long instant;\n        try {\n             instant = iGregorianChronology.getDateTimeMillis\n                 (year, monthOfYear, dayOfMonth,\n                  hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n        } catch (IllegalFieldValueException ex) {\n            if (monthOfYear != 2 || dayOfMonth != 29) {\n                throw ex;\n            }\n            instant = iGregorianChronology.getDateTimeMillis\n                (year, monthOfYear, 28,\n                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n            if (instant >= iCutoverMillis) {\n                throw ex;\n            }\n        }\n         if (instant < iCutoverMillis) {\n                          instant = iJulianChronology.getDateTimeMillis\n"},{"ids":388,"error":"junit.framework.ComparisonFailure","source":"/src/main/java/org/joda/time/DateTimeZone.java","code":"@@ -897,7 +897,7 @@ public int getOffsetFromLocal(long instantLocal) {\n                     return offsetLocal;\n                 }\n             }\n      } else if (offsetLocal > 0) {\n             long prev = previousTransition(instantAdjusted);\n             if (prev < instantAdjusted) {\n                 int offsetPrev = getOffset(prev);\n","solution":"@@ -897,7 +897,7 @@ public int getOffsetFromLocal(long instantLocal) {\n                     return offsetLocal;\n                 }\n             }\n      } else if (offsetLocal >= 0) {\n             long prev = previousTransition(instantAdjusted);\n             if (prev < instantAdjusted) {\n                 int offsetPrev = getOffset(prev);\n","CodeWithNoComments":"\n                     return offsetLocal;\n                 }\n             }\n        } else if (offsetLocal > 0) {\n             long prev = previousTransition(instantAdjusted);\n             if (prev < instantAdjusted) {\n                 int offsetPrev = getOffset(prev);\n","SolutionWithNoComments":"\n                     return offsetLocal;\n                 }\n             }\n        } else if (offsetLocal >= 0) {\n             long prev = previousTransition(instantAdjusted);\n             if (prev < instantAdjusted) {\n                 int offsetPrev = getOffset(prev);\n"},{"ids":389,"error":"junit.framework.ComparisonFailure","source":"/src/main/java/org/joda/time/tz/DefaultNameProvider.java","code":"@@ -63,22 +63,32 @@ public String getName(Locale locale, String id, String nameKey) {\n         if (byNameKeyCache == null) {\n             byIdCache.put(id, byNameKeyCache = createCache());\n             \n             String[][] zoneStringsLoc = DateTimeUtils.getDateFormatSymbols(locale).getZoneStrings();\n             String[] setLoc = null;\n             for (String[] strings : zoneStringsLoc) {\n               if (strings != null && strings.length == 5 && id.equals(strings[0])) {\n                 setLoc = strings;\n             \n            byNameKeyCache.put(setLoc[2], new String[] {setLoc[2], setLoc[1]});\n               // need to handle case where summer and winter have the same\n               // abbreviation, such as EST in Australia [1716305]\n               // we handle this by appending \"-Summer\", cf ZoneInfoCompiler\n            if (setLoc[2].equals(setLoc[4])) {\n                byNameKeyCache.put(setLoc[4] + \"-Summer\", new String[] {setLoc[4], setLoc[3]});\n               } else {\n                byNameKeyCache.put(setLoc[4], new String[] {setLoc[4], setLoc[3]});\n            }\n              break;\n               }\n             }\n         }\n","solution":"@@ -63,22 +63,32 @@ public String getName(Locale locale, String id, String nameKey) {\n         if (byNameKeyCache == null) {\n             byIdCache.put(id, byNameKeyCache = createCache());\n             \n          String[][] zoneStringsEn = DateTimeUtils.getDateFormatSymbols(Locale.ENGLISH).getZoneStrings();\n          String[] setEn = null;\n          for (String[] strings : zoneStringsEn) {\n            if (strings != null && strings.length == 5 && id.equals(strings[0])) {\n              setEn = strings;\n              break;\n            }\n          }\n             String[][] zoneStringsLoc = DateTimeUtils.getDateFormatSymbols(locale).getZoneStrings();\n             String[] setLoc = null;\n             for (String[] strings : zoneStringsLoc) {\n               if (strings != null && strings.length == 5 && id.equals(strings[0])) {\n                 setLoc = strings;\n              break;\n            }\n          }\n             \n          if (setEn != null && setLoc != null) {\n            byNameKeyCache.put(setEn[2], new String[] {setLoc[2], setLoc[1]});\n               // need to handle case where summer and winter have the same\n               // abbreviation, such as EST in Australia [1716305]\n               // we handle this by appending \"-Summer\", cf ZoneInfoCompiler\n            if (setEn[2].equals(setEn[4])) {\n                byNameKeyCache.put(setEn[4] + \"-Summer\", new String[] {setLoc[4], setLoc[3]});\n               } else {\n                byNameKeyCache.put(setEn[4], new String[] {setLoc[4], setLoc[3]});\n               }\n             }\n         }\n","CodeWithNoComments":"\n         if (byNameKeyCache == null) {\n             byIdCache.put(id, byNameKeyCache = createCache());\n             \n             String[][] zoneStringsLoc = DateTimeUtils.getDateFormatSymbols(locale).getZoneStrings();\n             String[] setLoc = null;\n             for (String[] strings : zoneStringsLoc) {\n               if (strings != null && strings.length == 5 && id.equals(strings[0])) {\n                 setLoc = strings;\n             \n              byNameKeyCache.put(setLoc[2], new String[] {setLoc[2], setLoc[1]});\n                                                           if (setLoc[2].equals(setLoc[4])) {\n                  byNameKeyCache.put(setLoc[4] + \"-Summer\", new String[] {setLoc[4], setLoc[3]});\n               } else {\n                  byNameKeyCache.put(setLoc[4], new String[] {setLoc[4], setLoc[3]});\n              }\n                break;\n               }\n             }\n         }\n","SolutionWithNoComments":"\n         if (byNameKeyCache == null) {\n             byIdCache.put(id, byNameKeyCache = createCache());\n             \n            String[][] zoneStringsEn = DateTimeUtils.getDateFormatSymbols(Locale.ENGLISH).getZoneStrings();\n            String[] setEn = null;\n            for (String[] strings : zoneStringsEn) {\n              if (strings != null && strings.length == 5 && id.equals(strings[0])) {\n                setEn = strings;\n                break;\n              }\n            }\n             String[][] zoneStringsLoc = DateTimeUtils.getDateFormatSymbols(locale).getZoneStrings();\n             String[] setLoc = null;\n             for (String[] strings : zoneStringsLoc) {\n               if (strings != null && strings.length == 5 && id.equals(strings[0])) {\n                 setLoc = strings;\n                break;\n              }\n            }\n             \n            if (setEn != null && setLoc != null) {\n              byNameKeyCache.put(setEn[2], new String[] {setLoc[2], setLoc[1]});\n                                                           if (setEn[2].equals(setEn[4])) {\n                  byNameKeyCache.put(setEn[4] + \"-Summer\", new String[] {setLoc[4], setLoc[3]});\n               } else {\n                  byNameKeyCache.put(setEn[4], new String[] {setLoc[4], setLoc[3]});\n               }\n             }\n         }\n"},{"ids":390,"error":"junit.framework.AssertionFailedError","source":"/src/main/java/org/joda/time/base/BasePeriod.java","code":"@@ -219,8 +219,13 @@ protected BasePeriod(ReadableDuration duration, ReadableInstant endInstant, Peri\n      * @param duration  the duration, in milliseconds\n      */\n     protected BasePeriod(long duration) {\n      this(duration, null, null);\n         // bug [3264409]\n     }\n \n     /**\n","solution":"@@ -219,8 +219,13 @@ protected BasePeriod(ReadableDuration duration, ReadableInstant endInstant, Peri\n      * @param duration  the duration, in milliseconds\n      */\n     protected BasePeriod(long duration) {\n      super();\n         // bug [3264409]\n      iType = PeriodType.time();\n      int[] values = ISOChronology.getInstanceUTC().get(this, duration);\n      iType = PeriodType.standard();\n      iValues = new int[8];\n      System.arraycopy(values, 0, iValues, 4, 4);\n     }\n \n     /**\n","CodeWithNoComments":"\n     \n     protected BasePeriod(long duration) {\n        this(duration, null, null);\n              }\n","SolutionWithNoComments":"\n    \n     protected BasePeriod(long duration) {\n        super();\n                 iType = PeriodType.time();\n        int[] values = ISOChronology.getInstanceUTC().get(this, duration);\n        iType = PeriodType.standard();\n        iValues = new int[8];\n        System.arraycopy(values, 0, iValues, 4, 4);\n     }\n \n"},{"ids":391,"error":"junit.framework.ComparisonFailure","source":"/src/main/java/org/joda/time/DateTimeZone.java","code":"@@ -561,6 +561,11 @@ private static synchronized String getConvertedId(String id) {\n             // Backwards compatibility with TimeZone.\n             map = new HashMap<String, String>();\n             map.put(\"GMT\", \"UTC\");\n             map.put(\"MIT\", \"Pacific/Apia\");\n             map.put(\"HST\", \"Pacific/Honolulu\");  // JDK 1.1 compatible\n             map.put(\"AST\", \"America/Anchorage\");\n@@ -569,23 +574,19 @@ private static synchronized String getConvertedId(String id) {\n             map.put(\"PNT\", \"America/Phoenix\");\n             map.put(\"CST\", \"America/Chicago\");\n             map.put(\"EST\", \"America/New_York\");  // JDK 1.1 compatible\n          map.put(\"IET\", \"America/Indianapolis\");\n             map.put(\"PRT\", \"America/Puerto_Rico\");\n             map.put(\"CNT\", \"America/St_Johns\");\n          map.put(\"AGT\", \"America/Buenos_Aires\");\n             map.put(\"BET\", \"America/Sao_Paulo\");\n          map.put(\"WET\", \"Europe/London\");\n          map.put(\"ECT\", \"Europe/Paris\");\n             map.put(\"ART\", \"Africa/Cairo\");\n             map.put(\"CAT\", \"Africa/Harare\");\n          map.put(\"EET\", \"Europe/Bucharest\");\n             map.put(\"EAT\", \"Africa/Addis_Ababa\");\n          map.put(\"MET\", \"Asia/Tehran\");\n             map.put(\"NET\", \"Asia/Yerevan\");\n             map.put(\"PLT\", \"Asia/Karachi\");\n          map.put(\"IST\", \"Asia/Calcutta\");\n             map.put(\"BST\", \"Asia/Dhaka\");\n          map.put(\"VST\", \"Asia/Saigon\");\n             map.put(\"CTT\", \"Asia/Shanghai\");\n             map.put(\"JST\", \"Asia/Tokyo\");\n             map.put(\"ACT\", \"Australia/Darwin\");\n","solution":"@@ -561,6 +561,11 @@ private static synchronized String getConvertedId(String id) {\n             // Backwards compatibility with TimeZone.\n             map = new HashMap<String, String>();\n             map.put(\"GMT\", \"UTC\");\n          map.put(\"WET\", \"WET\");\n          map.put(\"CET\", \"CET\");\n          map.put(\"MET\", \"CET\");\n          map.put(\"ECT\", \"CET\");\n          map.put(\"EET\", \"EET\");\n             map.put(\"MIT\", \"Pacific/Apia\");\n             map.put(\"HST\", \"Pacific/Honolulu\");  // JDK 1.1 compatible\n             map.put(\"AST\", \"America/Anchorage\");\n@@ -569,23 +574,19 @@ private static synchronized String getConvertedId(String id) {\n             map.put(\"PNT\", \"America/Phoenix\");\n             map.put(\"CST\", \"America/Chicago\");\n             map.put(\"EST\", \"America/New_York\");  // JDK 1.1 compatible\n          map.put(\"IET\", \"America/Indiana/Indianapolis\");\n             map.put(\"PRT\", \"America/Puerto_Rico\");\n             map.put(\"CNT\", \"America/St_Johns\");\n          map.put(\"AGT\", \"America/Argentina/Buenos_Aires\");\n             map.put(\"BET\", \"America/Sao_Paulo\");\n             map.put(\"ART\", \"Africa/Cairo\");\n             map.put(\"CAT\", \"Africa/Harare\");\n             map.put(\"EAT\", \"Africa/Addis_Ababa\");\n             map.put(\"NET\", \"Asia/Yerevan\");\n             map.put(\"PLT\", \"Asia/Karachi\");\n          map.put(\"IST\", \"Asia/Kolkata\");\n             map.put(\"BST\", \"Asia/Dhaka\");\n          map.put(\"VST\", \"Asia/Ho_Chi_Minh\");\n             map.put(\"CTT\", \"Asia/Shanghai\");\n             map.put(\"JST\", \"Asia/Tokyo\");\n             map.put(\"ACT\", \"Australia/Darwin\");\n","CodeWithNoComments":"\n                          map = new HashMap<String, String>();\n             map.put(\"GMT\", \"UTC\");\n             map.put(\"MIT\", \"Pacific/Apia\");\n             map.put(\"HST\", \"Pacific/Honolulu\");               map.put(\"AST\", \"America/Anchorage\");\n\n             map.put(\"PNT\", \"America/Phoenix\");\n             map.put(\"CST\", \"America/Chicago\");\n             map.put(\"EST\", \"America/New_York\");              map.put(\"IET\", \"America/Indianapolis\");\n             map.put(\"PRT\", \"America/Puerto_Rico\");\n             map.put(\"CNT\", \"America/St_Johns\");\n            map.put(\"AGT\", \"America/Buenos_Aires\");\n             map.put(\"BET\", \"America/Sao_Paulo\");\n            map.put(\"WET\", \"Europe/London\");\n            map.put(\"ECT\", \"Europe/Paris\");\n             map.put(\"ART\", \"Africa/Cairo\");\n             map.put(\"CAT\", \"Africa/Harare\");\n            map.put(\"EET\", \"Europe/Bucharest\");\n             map.put(\"EAT\", \"Africa/Addis_Ababa\");\n            map.put(\"MET\", \"Asia/Tehran\");\n             map.put(\"NET\", \"Asia/Yerevan\");\n             map.put(\"PLT\", \"Asia/Karachi\");\n            map.put(\"IST\", \"Asia/Calcutta\");\n             map.put(\"BST\", \"Asia/Dhaka\");\n            map.put(\"VST\", \"Asia/Saigon\");\n             map.put(\"CTT\", \"Asia/Shanghai\");\n             map.put(\"JST\", \"Asia/Tokyo\");\n             map.put(\"ACT\", \"Australia/Darwin\");\n","SolutionWithNoComments":"\n                          map = new HashMap<String, String>();\n             map.put(\"GMT\", \"UTC\");\n            map.put(\"WET\", \"WET\");\n            map.put(\"CET\", \"CET\");\n            map.put(\"MET\", \"CET\");\n            map.put(\"ECT\", \"CET\");\n            map.put(\"EET\", \"EET\");\n             map.put(\"MIT\", \"Pacific/Apia\");\n             map.put(\"HST\", \"Pacific/Honolulu\");               map.put(\"AST\", \"America/Anchorage\");\n\n             map.put(\"PNT\", \"America/Phoenix\");\n             map.put(\"CST\", \"America/Chicago\");\n             map.put(\"EST\", \"America/New_York\");              map.put(\"IET\", \"America/Indiana/Indianapolis\");\n             map.put(\"PRT\", \"America/Puerto_Rico\");\n             map.put(\"CNT\", \"America/St_Johns\");\n            map.put(\"AGT\", \"America/Argentina/Buenos_Aires\");\n             map.put(\"BET\", \"America/Sao_Paulo\");\n             map.put(\"ART\", \"Africa/Cairo\");\n             map.put(\"CAT\", \"Africa/Harare\");\n             map.put(\"EAT\", \"Africa/Addis_Ababa\");\n             map.put(\"NET\", \"Asia/Yerevan\");\n             map.put(\"PLT\", \"Asia/Karachi\");\n            map.put(\"IST\", \"Asia/Kolkata\");\n             map.put(\"BST\", \"Asia/Dhaka\");\n            map.put(\"VST\", \"Asia/Ho_Chi_Minh\");\n             map.put(\"CTT\", \"Asia/Shanghai\");\n             map.put(\"JST\", \"Asia/Tokyo\");\n             map.put(\"ACT\", \"Australia/Darwin\");\n"},{"ids":392,"error":"junit.framework.ComparisonFailure","source":"/src/main/java/org/joda/time/DateTimeZone.java","code":"@@ -896,6 +896,15 @@ public int getOffsetFromLocal(long instantLocal) {\n                     return offsetLocal;\n                 }\n             }\n         }\n         return offsetAdjusted;\n     }\n","solution":"@@ -896,6 +896,15 @@ public int getOffsetFromLocal(long instantLocal) {\n                     return offsetLocal;\n                 }\n             }\n      } else if (offsetLocal > 0) {\n          long prev = previousTransition(instantAdjusted);\n          if (prev < instantAdjusted) {\n              int offsetPrev = getOffset(prev);\n              int diff = offsetPrev - offsetLocal;\n              if (instantAdjusted - prev <= diff) {\n                  return offsetPrev;\n              }\n          }\n         }\n         return offsetAdjusted;\n     }\n","CodeWithNoComments":"\n                     return offsetLocal;\n                 }\n             }\n         }\n         return offsetAdjusted;\n     }\n","SolutionWithNoComments":"\n                     return offsetLocal;\n                 }\n             }\n        } else if (offsetLocal > 0) {\n            long prev = previousTransition(instantAdjusted);\n            if (prev < instantAdjusted) {\n                int offsetPrev = getOffset(prev);\n                int diff = offsetPrev - offsetLocal;\n                if (instantAdjusted - prev <= diff) {\n                    return offsetPrev;\n                }\n            }\n         }\n         return offsetAdjusted;\n     }\n"},{"ids":393,"error":"junit.framework.ComparisonFailure","source":"/src/main/java/org/joda/time/chrono/ZonedChronology.java","code":"@@ -433,7 +433,7 @@ public long add(long instant, int value) {\n             } else {\n                long localInstant = iZone.convertUTCToLocal(instant);\n                localInstant = iField.add(localInstant, value);\n             return iZone.convertLocalToUTC(localInstant, false);\n             }\n         }\n \n@@ -445,7 +445,7 @@ public long add(long instant, long value) {\n             } else {\n                long localInstant = iZone.convertUTCToLocal(instant);\n                localInstant = iField.add(localInstant, value);\n             return iZone.convertLocalToUTC(localInstant, false);\n             }\n         }\n \n@@ -457,14 +457,14 @@ public long addWrapField(long instant, int value) {\n             } else {\n                 long localInstant = iZone.convertUTCToLocal(instant);\n                 localInstant = iField.addWrapField(localInstant, value);\n              return iZone.convertLocalToUTC(localInstant, false);\n             }\n         }\n \n         public long set(long instant, int value) {\n             long localInstant = iZone.convertUTCToLocal(instant);\n             localInstant = iField.set(localInstant, value);\n          long result = iZone.convertLocalToUTC(localInstant, false);\n             if (get(result) != value) {\n                 throw new IllegalFieldValueException(iField.getType(), new Integer(value),\n                     \"Illegal instant due to time zone offset transition: \" +\n@@ -478,7 +478,7 @@ public long set(long instant, String text, Locale locale) {\n             // cannot verify that new value stuck because set may be lenient\n             long localInstant = iZone.convertUTCToLocal(instant);\n             localInstant = iField.set(localInstant, text, locale);\n          return iZone.convertLocalToUTC(localInstant, false);\n         }\n \n         public int getDifference(long minuendInstant, long subtrahendInstant) {\n@@ -525,7 +525,7 @@ public long roundFloor(long instant) {\n             } else {\n                 long localInstant = iZone.convertUTCToLocal(instant);\n                 localInstant = iField.roundFloor(localInstant);\n              return iZone.convertLocalToUTC(localInstant, false);\n             }\n         }\n \n@@ -537,7 +537,7 @@ public long roundCeiling(long instant) {\n             } else {\n                 long localInstant = iZone.convertUTCToLocal(instant);\n                 localInstant = iField.roundCeiling(localInstant);\n              return iZone.convertLocalToUTC(localInstant, false);\n             }\n         }\n \n","solution":"@@ -433,7 +433,7 @@ public long add(long instant, int value) {\n             } else {\n                long localInstant = iZone.convertUTCToLocal(instant);\n                localInstant = iField.add(localInstant, value);\n             return iZone.convertLocalToUTC(localInstant, false, instant);\n             }\n         }\n \n@@ -445,7 +445,7 @@ public long add(long instant, long value) {\n             } else {\n                long localInstant = iZone.convertUTCToLocal(instant);\n                localInstant = iField.add(localInstant, value);\n             return iZone.convertLocalToUTC(localInstant, false, instant);\n             }\n         }\n \n@@ -457,14 +457,14 @@ public long addWrapField(long instant, int value) {\n             } else {\n                 long localInstant = iZone.convertUTCToLocal(instant);\n                 localInstant = iField.addWrapField(localInstant, value);\n              return iZone.convertLocalToUTC(localInstant, false, instant);\n             }\n         }\n \n         public long set(long instant, int value) {\n             long localInstant = iZone.convertUTCToLocal(instant);\n             localInstant = iField.set(localInstant, value);\n          long result = iZone.convertLocalToUTC(localInstant, false, instant);\n             if (get(result) != value) {\n                 throw new IllegalFieldValueException(iField.getType(), new Integer(value),\n                     \"Illegal instant due to time zone offset transition: \" +\n@@ -478,7 +478,7 @@ public long set(long instant, String text, Locale locale) {\n             // cannot verify that new value stuck because set may be lenient\n             long localInstant = iZone.convertUTCToLocal(instant);\n             localInstant = iField.set(localInstant, text, locale);\n          return iZone.convertLocalToUTC(localInstant, false, instant);\n         }\n \n         public int getDifference(long minuendInstant, long subtrahendInstant) {\n@@ -525,7 +525,7 @@ public long roundFloor(long instant) {\n             } else {\n                 long localInstant = iZone.convertUTCToLocal(instant);\n                 localInstant = iField.roundFloor(localInstant);\n              return iZone.convertLocalToUTC(localInstant, false, instant);\n             }\n         }\n \n@@ -537,7 +537,7 @@ public long roundCeiling(long instant) {\n             } else {\n                 long localInstant = iZone.convertUTCToLocal(instant);\n                 localInstant = iField.roundCeiling(localInstant);\n              return iZone.convertLocalToUTC(localInstant, false, instant);\n             }\n         }\n \n","CodeWithNoComments":"\n             } else {\n                long localInstant = iZone.convertUTCToLocal(instant);\n                localInstant = iField.add(localInstant, value);\n               return iZone.convertLocalToUTC(localInstant, false);\n             }\n         }\n \n\n             } else {\n                long localInstant = iZone.convertUTCToLocal(instant);\n                localInstant = iField.add(localInstant, value);\n               return iZone.convertLocalToUTC(localInstant, false);\n             }\n         }\n \n\n             } else {\n                 long localInstant = iZone.convertUTCToLocal(instant);\n                 localInstant = iField.addWrapField(localInstant, value);\n                return iZone.convertLocalToUTC(localInstant, false);\n             }\n         }\n \n         public long set(long instant, int value) {\n             long localInstant = iZone.convertUTCToLocal(instant);\n             localInstant = iField.set(localInstant, value);\n            long result = iZone.convertLocalToUTC(localInstant, false);\n             if (get(result) != value) {\n                 throw new IllegalFieldValueException(iField.getType(), new Integer(value),\n                     \"Illegal instant due to time zone offset transition: \" +\n\n                          long localInstant = iZone.convertUTCToLocal(instant);\n             localInstant = iField.set(localInstant, text, locale);\n            return iZone.convertLocalToUTC(localInstant, false);\n         }\n \n         public int getDifference(long minuendInstant, long subtrahendInstant) {\n\n             } else {\n                 long localInstant = iZone.convertUTCToLocal(instant);\n                 localInstant = iField.roundFloor(localInstant);\n                return iZone.convertLocalToUTC(localInstant, false);\n             }\n         }\n \n\n             } else {\n                 long localInstant = iZone.convertUTCToLocal(instant);\n                 localInstant = iField.roundCeiling(localInstant);\n                return iZone.convertLocalToUTC(localInstant, false);\n             }\n         }\n \n","SolutionWithNoComments":"\n             } else {\n                long localInstant = iZone.convertUTCToLocal(instant);\n                localInstant = iField.add(localInstant, value);\n               return iZone.convertLocalToUTC(localInstant, false, instant);\n             }\n         }\n \n\n             } else {\n                long localInstant = iZone.convertUTCToLocal(instant);\n                localInstant = iField.add(localInstant, value);\n               return iZone.convertLocalToUTC(localInstant, false, instant);\n             }\n         }\n \n\n             } else {\n                 long localInstant = iZone.convertUTCToLocal(instant);\n                 localInstant = iField.addWrapField(localInstant, value);\n                return iZone.convertLocalToUTC(localInstant, false, instant);\n             }\n         }\n \n         public long set(long instant, int value) {\n             long localInstant = iZone.convertUTCToLocal(instant);\n             localInstant = iField.set(localInstant, value);\n            long result = iZone.convertLocalToUTC(localInstant, false, instant);\n             if (get(result) != value) {\n                 throw new IllegalFieldValueException(iField.getType(), new Integer(value),\n                     \"Illegal instant due to time zone offset transition: \" +\n\n                          long localInstant = iZone.convertUTCToLocal(instant);\n             localInstant = iField.set(localInstant, text, locale);\n            return iZone.convertLocalToUTC(localInstant, false, instant);\n         }\n \n         public int getDifference(long minuendInstant, long subtrahendInstant) {\n\n             } else {\n                 long localInstant = iZone.convertUTCToLocal(instant);\n                 localInstant = iField.roundFloor(localInstant);\n                return iZone.convertLocalToUTC(localInstant, false, instant);\n             }\n         }\n \n\n             } else {\n                 long localInstant = iZone.convertUTCToLocal(instant);\n                 localInstant = iField.roundCeiling(localInstant);\n                return iZone.convertLocalToUTC(localInstant, false, instant);\n             }\n         }\n \n"},{"ids":394,"error":"junit.framework.AssertionFailedError","source":"/src/main/java/org/joda/time/format/DateTimeParserBucket.java","code":"@@ -352,6 +352,11 @@ public long computeMillis(boolean resetFields, String text) {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n","solution":"@@ -352,6 +352,11 @@ public long computeMillis(boolean resetFields, String text) {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n          if (resetFields) {\n              for (int i = 0; i < count; i++) {\n                  millis = savedFields[i].set(millis, i == (count - 1));\n              }\n          }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n","CodeWithNoComments":"\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n","SolutionWithNoComments":"\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n            if (resetFields) {\n                for (int i = 0; i < count; i++) {\n                    millis = savedFields[i].set(millis, i == (count - 1));\n                }\n            }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n"},{"ids":395,"error":"java.lang.IllegalArgumentException","source":"/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java","code":"@@ -798,9 +798,11 @@ private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean no\n         int size = elementPairs.size();\n         if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n             Separator sep = (Separator) elementPairs.get(0);\n                 PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n                 sep = sep.finish(f.getPrinter(), f.getParser());\n                 return new PeriodFormatter(sep, sep);\n         }\n         Object[] comp = createComposite(elementPairs);\n         if (notPrinter) {\n","solution":"@@ -798,9 +798,11 @@ private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean no\n         int size = elementPairs.size();\n         if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n             Separator sep = (Separator) elementPairs.get(0);\n          if (sep.iAfterParser == null && sep.iAfterPrinter == null) {\n                 PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n                 sep = sep.finish(f.getPrinter(), f.getParser());\n                 return new PeriodFormatter(sep, sep);\n          }\n         }\n         Object[] comp = createComposite(elementPairs);\n         if (notPrinter) {\n","CodeWithNoComments":"\n         int size = elementPairs.size();\n         if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n             Separator sep = (Separator) elementPairs.get(0);\n                 PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n                 sep = sep.finish(f.getPrinter(), f.getParser());\n                 return new PeriodFormatter(sep, sep);\n         }\n         Object[] comp = createComposite(elementPairs);\n         if (notPrinter) {\n","SolutionWithNoComments":"\n         int size = elementPairs.size();\n         if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n             Separator sep = (Separator) elementPairs.get(0);\n            if (sep.iAfterParser == null && sep.iAfterPrinter == null) {\n                 PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n                 sep = sep.finish(f.getPrinter(), f.getParser());\n                 return new PeriodFormatter(sep, sep);\n            }\n         }\n         Object[] comp = createComposite(elementPairs);\n         if (notPrinter) {\n"}]
