package com.entonomachia.server;

import static org.junit.Assert.*;

import org.junit.Before;
import org.junit.Test;
import org.mockito.Mock;

import static org.mockito.Mockito.*;
import static org.mockito.BDDMockito.*;
import static org.mockito.MockitoAnnotations.initMocks;

public class ElasticInterfaceTest {
	String jsonTest;
	
	@Mock
	ElasticRequestHandler mockElasticReq;
	
	@Before
	public void setUp() throws Exception {
		initMocks(this);
		jsonTest = "{\n"
				+ "    \"took\": 3,\n"
				+ "    \"timed_out\": false,\n"
				+ "    \"_shards\": {\n"
				+ "        \"total\": 1,\n"
				+ "        \"successful\": 1,\n"
				+ "        \"skipped\": 0,\n"
				+ "        \"failed\": 0\n"
				+ "    },\n"
				+ "    \"hits\": {\n"
				+ "        \"total\": {\n"
				+ "            \"value\": 1,\n"
				+ "            \"relation\": \"eq\"\n"
				+ "        },\n"
				+ "        \"max_score\": 1.0,\n"
				+ "        \"hits\": [\n"
				+ "            {\n"
				+ "                \"_index\": \"primarydirect\",\n"
				+ "                \"_type\": \"classified\",\n"
				+ "                \"_id\": \"216\",\n"
				+ "                \"_score\": 1.0,\n"
				+ "                \"_source\": {\n"
				+ "                    \"ids\": 216,\n"
				+ "                    \"code\": \"@@ -1,152 +1,152 @@\\n /*\\n  * Licensed to the Apache Software Foundation (ASF) under one or more\\n  * contributor license agreements.  See the NOTICE file distributed with\\n  * this work for additional information regarding copyright ownership.\\n  * The ASF licenses this file to You under the Apache License, Version 2.0\\n  * (the \\\"License\\\"); you may not use this file except in compliance with\\n  * the License.  You may obtain a copy of the License at\\n  * \\n  *      http://www.apache.org/licenses/LICENSE-2.0\\n  * \\n  * Unless required by applicable law or agreed to in writing, software\\n  * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  * See the License for the specific language governing permissions and\\n  * limitations under the License.\\n  */\\n package org.apache.commons.lang.time;\\n \\n import java.io.IOException;\\n import java.io.ObjectInputStream;\\n \\n import java.text.DateFormat;\\n import java.text.DateFormatSymbols;\\n import java.text.FieldPosition;\\n import java.text.Format;\\n import java.text.ParsePosition;\\n import java.text.SimpleDateFormat;\\n import java.util.ArrayList;\\n import java.util.Calendar;\\n import java.util.Date;\\n import java.util.GregorianCalendar;\\n import java.util.HashMap;\\n import java.util.List;\\n import java.util.Locale;\\n import java.util.Map;\\n import java.util.TimeZone;\\n \\n import org.apache.commons.lang.Validate;\\n \\n /**\\n  * <p>FastDateFormat is a fast and thread-safe version of\\n  * {@link java.text.SimpleDateFormat}.</p>\\n  * \\n  * <p>This class can be used as a direct replacement to\\n  * <code>SimpleDateFormat</code> in most formatting situations.\\n  * This class is especially useful in multi-threaded server environments.\\n  * <code>SimpleDateFormat</code> is not thread-safe in any JDK version,\\n  * nor will it be as Sun have closed the bug/RFE.\\n  * </p>\\n  *\\n  * <p>Only formatting is supported, but all patterns are compatible with\\n  * SimpleDateFormat (except time zones - see below).</p>\\n  *\\n  * <p>Java 1.4 introduced a new pattern letter, <code>'Z'</code>, to represent\\n  * time zones in RFC822 format (eg. <code>+0800</code> or <code>-1100</code>).\\n  * This pattern letter can be used here (on all JDK versions).</p>\\n  *\\n  * <p>In addition, the pattern <code>'ZZ'</code> has been made to represent\\n  * ISO8601 full format time zones (eg. <code>+08:00</code> or <code>-11:00</code>).\\n  * This introduces a minor incompatibility with Java 1.4, but at a gain of\\n  * useful functionality.</p>\\n  *\\n  * @author TeaTrove project\\n  * @author Brian S O'Neill\\n  * @author Sean Schofield\\n  * @author Gary Gregory\\n  * @author Stephen Colebourne\\n  * @author Nikolay Metchev\\n  * @since 2.0\\n  * @version $Id$\\n  */\\n public class FastDateFormat extends Format {\\n     // A lot of the speed in this class comes from caching, but some comes\\n     // from the special int to StringBuffer conversion.\\n     //\\n     // The following produces a padded 2 digit number:\\n     //   buffer.append((char)(value / 10 + '0'));\\n     //   buffer.append((char)(value % 10 + '0'));\\n     //\\n     // Note that the fastest append to StringBuffer is a single char (used here).\\n     // Note that Integer.toString() is not called, the conversion is simply\\n     // taking the value and adding (mathematically) the ASCII value for '0'.\\n     // So, don't change this code! It works and is very fast.\\n     \\n     /**\\n      * Required for serialization support.\\n      * \\n      * @see java.io.Serializable\\n      */\\n     private static final long serialVersionUID = 1L;\\n \\n     /**\\n      * FULL locale dependent date or time style.\\n      */\\n     public static final int FULL = DateFormat.FULL;\\n     /**\\n      * LONG locale dependent date or time style.\\n      */\\n     public static final int LONG = DateFormat.LONG;\\n     /**\\n      * MEDIUM locale dependent date or time style.\\n      */\\n     public static final int MEDIUM = DateFormat.MEDIUM;\\n     /**\\n      * SHORT locale dependent date or time style.\\n      */\\n     public static final int SHORT = DateFormat.SHORT;\\n     \\n     private static String cDefaultPattern;\\n \\n     private static Map cInstanceCache = new HashMap(7);\\n     private static Map cDateInstanceCache = new HashMap(7);\\n     private static Map cTimeInstanceCache = new HashMap(7);\\n     private static Map cDateTimeInstanceCache = new HashMap(7);\\n     private static Map cTimeZoneDisplayCache = new HashMap(7);\\n \\n     /**\\n      * The pattern.\\n      */\\n     private final String mPattern;\\n     /**\\n      * The time zone.\\n      */\\n     private final TimeZone mTimeZone;\\n     /**\\n      * Whether the time zone overrides any on Calendars.\\n      */\\n     private final boolean mTimeZoneForced;\\n     /**\\n      * The locale.\\n      */\\n     private final Locale mLocale;\\n     /**\\n      * Whether the locale overrides the default.\\n      */\\n     private final boolean mLocaleForced;\\n     /**\\n      * The parsed rules.\\n      */\\n  private Rule[] mRules;\\n     /**\\n      * The estimated maximum length.\\n      */\\n  private int mMaxLengthEstimate;\\n \\n     //-----------------------------------------------------------------------\\n     /**\\n      * <p>Gets a formatter instance using the default pattern in the\\n      * default locale.</p>\\n      * \\n      * @return a date/time formatter\\n      */\\n@@ -1016,37 +1016,41 @@ public int hashCode() {\\n     public String toString() {\\n         return \\\"FastDateFormat[\\\" + mPattern + \\\"]\\\";\\n     }\\n \\n     // Serializing\\n     //-----------------------------------------------------------------------\\n     \\n     // Rules\\n     //-----------------------------------------------------------------------\\n     /**\\n      * <p>Inner class defining a rule.</p>\\n      */\\n     private interface Rule {\\n         /**\\n          * Returns the estimated lentgh of the result.\\n          * \\n          * @return the estimated length\\n          */\\n         int estimateLength();\\n         \\n         /**\\n          * Appends the value of the specified calendar to the output buffer based on the rule implementation.\\n          * \\n          * @param buffer the output buffer\\n          * @param calendar calendar to be appended\\n          */\\n         void appendTo(StringBuffer buffer, Calendar calendar);\\n     }\\n \\n     /**\\n      * <p>Inner class defining a numeric rule.</p>\\n      */\\n     private interface NumberRule extends Rule {\\n         /**\\n          * Appends the specified value to the output buffer based on the rule implementation.\\n          * \\n          * @param buffer the output buffer\\n\",\n"
				+ "                    \"solution\": \"@@ -1,152 +1,152 @@\\n /*\\n  * Licensed to the Apache Software Foundation (ASF) under one or more\\n  * contributor license agreements.  See the NOTICE file distributed with\\n  * this work for additional information regarding copyright ownership.\\n  * The ASF licenses this file to You under the Apache License, Version 2.0\\n  * (the \\\"License\\\"); you may not use this file except in compliance with\\n  * the License.  You may obtain a copy of the License at\\n  * \\n  *      http://www.apache.org/licenses/LICENSE-2.0\\n  * \\n  * Unless required by applicable law or agreed to in writing, software\\n  * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  * See the License for the specific language governing permissions and\\n  * limitations under the License.\\n  */\\n package org.apache.commons.lang.time;\\n \\n import java.io.IOException;\\n import java.io.ObjectInputStream;\\n \\n import java.text.DateFormat;\\n import java.text.DateFormatSymbols;\\n import java.text.FieldPosition;\\n import java.text.Format;\\n import java.text.ParsePosition;\\n import java.text.SimpleDateFormat;\\n import java.util.ArrayList;\\n import java.util.Calendar;\\n import java.util.Date;\\n import java.util.GregorianCalendar;\\n import java.util.HashMap;\\n import java.util.List;\\n import java.util.Locale;\\n import java.util.Map;\\n import java.util.TimeZone;\\n \\n import org.apache.commons.lang.Validate;\\n \\n /**\\n  * <p>FastDateFormat is a fast and thread-safe version of\\n  * {@link java.text.SimpleDateFormat}.</p>\\n  * \\n  * <p>This class can be used as a direct replacement to\\n  * <code>SimpleDateFormat</code> in most formatting situations.\\n  * This class is especially useful in multi-threaded server environments.\\n  * <code>SimpleDateFormat</code> is not thread-safe in any JDK version,\\n  * nor will it be as Sun have closed the bug/RFE.\\n  * </p>\\n  *\\n  * <p>Only formatting is supported, but all patterns are compatible with\\n  * SimpleDateFormat (except time zones - see below).</p>\\n  *\\n  * <p>Java 1.4 introduced a new pattern letter, <code>'Z'</code>, to represent\\n  * time zones in RFC822 format (eg. <code>+0800</code> or <code>-1100</code>).\\n  * This pattern letter can be used here (on all JDK versions).</p>\\n  *\\n  * <p>In addition, the pattern <code>'ZZ'</code> has been made to represent\\n  * ISO8601 full format time zones (eg. <code>+08:00</code> or <code>-11:00</code>).\\n  * This introduces a minor incompatibility with Java 1.4, but at a gain of\\n  * useful functionality.</p>\\n  *\\n  * @author TeaTrove project\\n  * @author Brian S O'Neill\\n  * @author Sean Schofield\\n  * @author Gary Gregory\\n  * @author Stephen Colebourne\\n  * @author Nikolay Metchev\\n  * @since 2.0\\n  * @version $Id$\\n  */\\n public class FastDateFormat extends Format {\\n     // A lot of the speed in this class comes from caching, but some comes\\n     // from the special int to StringBuffer conversion.\\n     //\\n     // The following produces a padded 2 digit number:\\n     //   buffer.append((char)(value / 10 + '0'));\\n     //   buffer.append((char)(value % 10 + '0'));\\n     //\\n     // Note that the fastest append to StringBuffer is a single char (used here).\\n     // Note that Integer.toString() is not called, the conversion is simply\\n     // taking the value and adding (mathematically) the ASCII value for '0'.\\n     // So, don't change this code! It works and is very fast.\\n     \\n     /**\\n      * Required for serialization support.\\n      * \\n      * @see java.io.Serializable\\n      */\\n     private static final long serialVersionUID = 1L;\\n \\n     /**\\n      * FULL locale dependent date or time style.\\n      */\\n     public static final int FULL = DateFormat.FULL;\\n     /**\\n      * LONG locale dependent date or time style.\\n      */\\n     public static final int LONG = DateFormat.LONG;\\n     /**\\n      * MEDIUM locale dependent date or time style.\\n      */\\n     public static final int MEDIUM = DateFormat.MEDIUM;\\n     /**\\n      * SHORT locale dependent date or time style.\\n      */\\n     public static final int SHORT = DateFormat.SHORT;\\n     \\n     private static String cDefaultPattern;\\n \\n     private static Map cInstanceCache = new HashMap(7);\\n     private static Map cDateInstanceCache = new HashMap(7);\\n     private static Map cTimeInstanceCache = new HashMap(7);\\n     private static Map cDateTimeInstanceCache = new HashMap(7);\\n     private static Map cTimeZoneDisplayCache = new HashMap(7);\\n \\n     /**\\n      * The pattern.\\n      */\\n     private final String mPattern;\\n     /**\\n      * The time zone.\\n      */\\n     private final TimeZone mTimeZone;\\n     /**\\n      * Whether the time zone overrides any on Calendars.\\n      */\\n     private final boolean mTimeZoneForced;\\n     /**\\n      * The locale.\\n      */\\n     private final Locale mLocale;\\n     /**\\n      * Whether the locale overrides the default.\\n      */\\n     private final boolean mLocaleForced;\\n     /**\\n      * The parsed rules.\\n      */\\n  private transient Rule[] mRules;\\n     /**\\n      * The estimated maximum length.\\n      */\\n  private transient int mMaxLengthEstimate;\\n \\n     //-----------------------------------------------------------------------\\n     /**\\n      * <p>Gets a formatter instance using the default pattern in the\\n      * default locale.</p>\\n      * \\n      * @return a date/time formatter\\n      */\\n@@ -1016,37 +1016,41 @@ public int hashCode() {\\n     public String toString() {\\n         return \\\"FastDateFormat[\\\" + mPattern + \\\"]\\\";\\n     }\\n \\n     // Serializing\\n     //-----------------------------------------------------------------------\\n  private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {\\n      in.defaultReadObject();\\n      init();\\n  }\\n     \\n     // Rules\\n     //-----------------------------------------------------------------------\\n     /**\\n      * <p>Inner class defining a rule.</p>\\n      */\\n     private interface Rule {\\n         /**\\n          * Returns the estimated lentgh of the result.\\n          * \\n          * @return the estimated length\\n          */\\n         int estimateLength();\\n         \\n         /**\\n          * Appends the value of the specified calendar to the output buffer based on the rule implementation.\\n          * \\n          * @param buffer the output buffer\\n          * @param calendar calendar to be appended\\n          */\\n         void appendTo(StringBuffer buffer, Calendar calendar);\\n     }\\n \\n     /**\\n      * <p>Inner class defining a numeric rule.</p>\\n      */\\n     private interface NumberRule extends Rule {\\n         /**\\n          * Appends the specified value to the output buffer based on the rule implementation.\\n          * \\n          * @param buffer the output buffer\\n\",\n"
				+ "                    \"source\": \"/src/java/org/apache/commons/lang/time/FastDateFormat.java\",\n"
				+ "                    \"user\": \"MACHINA\",\n"
				+ "                    \"group\": \"ALL\",\n"
				+ "                    \"labelError\": 1.0,\n"
				+ "                    \"probabilityErrorString\": \"4.905400547133783E-114 0.7485360233361187 1.1238340834441723E-25 5.601915245210689E-17 9.034527260044198E-147 7.564385539700435E-38 3.186322738634105E-134 2.258870784539487E-11 6.727870352541333E-14 7.693522892146335E-24 1.2584658765273564E-114 6.089129022379022E-51 5.0535037454221055E-116 1.6184393062362086E-4 4.795207155488529E-24 1.8837457020784892E-101 6.195641939541542E-185 2.317273510973759E-7 5.0450020545974E-32 1.4339178530352292E-12 4.1128093539925815E-19 1.1069447174457492E-45 8.964579192306642E-37 1.2302380069497286E-46 6.334024132479629E-26 3.081548367476854E-11 4.699584590415406E-19 7.763098477685198E-26 2.633607741484361E-122 5.860435363139981E-15 1.108670845111685E-7 9.383170598906409E-6 6.452730150439857E-10 7.710699170884367E-65 7.846741304181006E-8 7.660687915499733E-39 1.6032624092262671E-77 9.577395266005903E-54 9.408208222916809E-113 5.114446222305503E-4 5.4924128974596364E-158 5.965553204414096E-9 8.436801767840997E-66 4.13845355987063E-85 1.1325196510460114E-183 1.912125611721887E-22 9.45556025362238E-120 5.4974073765130824E-14 3.451018748259121E-69 1.9645506336212572E-4 5.476611107502314E-19 9.135523061387253E-28 2.960917379849708E-90 1.0416516856206925E-65 2.1522176186493495E-30 5.4759332269855725E-8 4.553855548060925E-55 1.4036814275702217E-22 5.643830174946886E-50 7.976709653294226E-46 5.2436203559205905E-14 1.2708228366346883E-39 5.4459095025880535E-8 6.191986230616831E-20 1.0651651202275625E-30 1.584313932656827E-48 4.6221974824995355E-15 5.246748989731678E-25 8.2206448847962E-27 6.7794230792146785E-90 2.8784427415322395E-47 5.310693029407004E-39 1.5271057772839694E-61 1.3509320719599934E-13 3.4816434677100967E-16 3.870761804012658E-26 5.688658514111053E-44 6.842347177976737E-17 3.653362559943799E-5 2.2111765555559186E-37 1.0042693408234519E-60 3.772370224773508E-48 6.438379052359475E-39 4.1695880042521697E-44 4.2389397869990376E-6 2.1355798239547611E-13 2.4302791570454185E-34 8.447204223961327E-13 2.0372894327050755E-46 3.970458626276742E-152 6.0641959704756455E-56 2.8777133466264847E-54 6.728096145347268E-22 7.45157066676318E-42 8.391956813907449E-11 2.510431257284033E-51 0.007478566918576352 1.3016309019938057E-33 1.2872025564444856E-38 4.99407217995459E-25 3.9223414042251206E-53 2.3508596267427694E-61 9.945417335237357E-10 3.439192090886041E-54 1.0713638583868735E-30 1.6807816899434092E-46 5.79343259860714E-21 1.1598729737552756E-53 1.4932404871722211E-38 2.4838503320793293E-53 6.778607902706557E-14 5.630462349999373E-78 1.8634017861173892E-73 4.641828122147314E-46 2.3145272727771907E-82 2.2314085539434872E-85 6.841979255804561E-30 8.67042136289489E-54 4.9423130712030854E-12 1.1324068184353294E-112 4.408770301241515E-50 7.03148081576263E-24 2.4279748270333086E-52 2.1572180689519025E-4 6.2587986272033556E-55 4.698825374481913E-41 9.961295872158748E-23 1.1284315777806416E-4 0.24247092131037942 4.816948963353197E-18 5.450178442699363E-82 2.6548608725978566E-4\",\n"
				+ "                    \"rawPredictionErrorString\": \"-160.45605937817703 100.15866852356446 43.000423275605826 63.02746643891967 -235.83065059815672 14.973522058545393 -206.9392304833629 75.9347334850984 70.11837182320747 47.226641032647024 -161.81650270802035 -15.17703021639884 -165.0314845011475 91.71942639417175 46.75387915041648 -131.47952773054467 -323.7060915995083 85.17060010530645 28.383979557725645 73.17769381189184 58.1132940417063 -3.066420998850513 17.445937198700438 -5.26340215300021 42.427027812729904 76.24530063691996 58.24666182538039 42.63047359749248 -179.49872220179535 67.6777519724452 84.43337068250472 88.87171163735542 79.28695686292328 -47.17711770503123 84.08772205364453 12.683587631628827 -76.37870712900475 -21.631884887091108 -157.50222851240244 92.8700332286078 -261.65677255388357 81.51104042850775 -49.38970836579827 -93.85110625022642 -320.8003226152934 50.43964793558498 -173.61530373170922 69.91638976557134 -57.191397467309315 91.91322763448801 58.39967420421379 38.18809231587911 -105.69885475104483 -49.17891895952482 32.13725044374862 83.72798644211773 -24.677901394852004 50.130530803023554 -12.950387233173942 -3.3940838029665206 69.86912533794339 10.887150439241669 83.72248850541072 56.21985852514188 31.433881512264804 -9.615628527674929 67.44039831513757 44.541285792368406 40.385155620765225 -104.87046189021812 -6.715945465081551 12.317208186457897 -39.58601190501819 70.81549304144447 64.85444742771327 41.93454339088188 0.8730348390602753 63.22748871902198 90.23102700030958 16.046180783642065 -37.702540854122695 -8.74807648049571 12.509762654197983 0.5623776117275628 88.07710710225118 71.27343645366885 23.048417440874765 72.64853378910566 -4.758989590369966 -248.16574805160107 -26.6940587703423 -22.834294547287556 51.69772463950601 5.748155404649384 77.24714217451914 -16.063080716184807 95.55259037869865 24.726614421856887 13.202542241446475 44.49192879271234 -20.22201668372126 -39.15460514027933 79.71956541828797 -22.6560539627016 31.43968415347802 -4.951350828417108 53.85074248501991 -21.440394962470258 13.351019520759008 -20.678895546739135 70.12588492734464 -77.42514121972279 -67.01800358153014 -3.93550152476482 -87.52446768817427 -94.46879540740642 33.29382873731429 -21.731373159488317 74.4151168111969 -157.31688064739507 -13.197354369907996 47.13665956661492 -18.39906285785014 92.00678356105854 -24.359887388089966 7.589628216877289 49.787554504392084 91.35879278481617 99.03143098455865 60.573913531064164 -86.66802480311746 92.21435635178541\",\n"
				+ "                    \"labelMutation\": 9.0,\n"
				+ "                    \"probabilityMutationString\": \"8.903675749298745E-98 4.0213389625776766E-143 5.734073409063553E-22 5.805753469596989E-53 4.752585724445142E-10 7.986831312928718E-52 3.734860570928249E-96 4.6008054997888795E-8 2.8916909792401102E-30 0.9853728451388882 9.750730640458889E-61 6.365013939009214E-52 5.724235566997049E-140 7.598150305984845E-71 2.9329334222337204E-16 2.3738524607604047E-5 5.306849365453103E-37 4.141427520026263E-51 9.23497754658776E-146 6.296645894103336E-29 8.105801422323313E-6 8.076541393029111E-70 5.588645011917078E-67 3.2493595461883377E-49 1.1028587976850905E-11 7.054785441450178E-10 2.5776450448937844E-24 0.007755014552010632 9.808511946613042E-130 1.3281096769427466E-177 3.667256579021508E-4 2.377260579226756E-43 1.3430054232070444E-10 2.0434243295236714E-58 6.67999619075239E-40 1.534509688876355E-5 2.907011013578952E-83 9.143698091844051E-59 9.339615691290736E-56 5.502891689352938E-9 2.3248180561177404E-5 8.495380864188961E-34 3.470253447265392E-58 6.767095459932213E-40 5.724599134970569E-61 2.0410922858786764E-35 2.6398074384474852E-48 2.7183877729544502E-8 4.883536196485019E-9 2.6748068058545695E-96 1.4939274189393235E-57 1.2496545917275857E-43 0.004716680847344907 5.572615377398423E-52 2.1043091763468363E-16 1.5324388066890075E-11 3.0548907973425366E-14 4.895085258517303E-22 1.505589345190656E-16 2.454996063817844E-72 1.7806058215908444E-9 4.143959106633179E-123 7.276874270065719E-41 0.0010106362271103213 8.489857034904585E-70 4.0944844381726676E-24 2.28111508256018E-125 3.7943314617322306E-64 1.6854078840853733E-7 7.443791319921709E-40 1.8064721359269158E-79 8.423874965257972E-75 1.6871766871864502E-75 3.721062679687174E-33 3.0055837255826347E-46 5.557490520431645E-9 4.560849017650637E-13 6.706566214190776E-182 3.879262898507976E-15 1.7415325625669365E-73 1.0890747000948147E-83 6.827091452121591E-4 8.197440860848538E-11 6.287510086894903E-55 2.6155505334587055E-136 3.277543728825357E-112 1.992911431061148E-20 1.3049795998431945E-34 3.039132220314037E-46 9.25047343254173E-34 4.623206957034252E-20 7.989548883776359E-41 6.149127878079196E-31 1.1329257865410931E-39 1.4321882874683487E-37 2.1207081661024437E-16 5.72160979559273E-52 5.937658116507572E-29 2.1713817893237495E-67 1.2486610427380045E-47 7.907721779059062E-56 4.0248480264610873E-54 2.013209647467322E-8 4.54201275729777E-60 1.644519190506349E-92 3.724091057226376E-40 7.749345344874594E-47 2.4413074528582745E-55 5.782756102497641E-127 3.3067030345434205E-66 1.0260828069992077E-11 5.349215827428373E-65 1.2678869805116397E-41 3.273475279306383E-62 6.538585734778057E-20 2.193301855114244E-82 8.277534126259088E-59 2.06653811586016E-5 6.559180395900989E-48 8.629995960548192E-62 1.7871142311040459E-9 4.142676662471608E-40 2.7676268500727127E-57 3.759956690010768E-28 2.4603243567003534E-8 2.0501077352880495E-153 3.978020697553645E-6 1.9188195418565344E-15 9.376194809685192E-14 7.708969812813842E-67 1.2283022423847675E-11 1.4393024301126608E-21\",\n"
				+ "                    \"rawPredictionMutationString\": \"-115.83753490098407 -220.24871336028835 58.71889413934643 -12.648820509881457 86.16217791845379 -10.027290720763977 -112.10111842452939 90.73489066828114 39.613628670532904 107.61460482897027 -30.55100843753332 -10.254268398318523 -212.9878639886383 -53.826296750279894 71.8639816177061 96.98092869675176 24.1026898939575 -8.381459187273995 -226.32508537940265 42.694389412453205 95.90640948774403 -51.46265275868654 -44.923124352403924 -4.0188716270788465 82.39880970795583 86.55719525805242 53.31417399236666 102.7699244095312 -189.4234714991352 -299.6444648088243 99.71844349981956 9.484129824297266 84.89839904113977 -25.205968384738814 17.425053712958352 96.54462545953417 -82.41809729287695 -26.010115562360244 -19.081160087396665 88.61134789424672 96.96005633099217 31.4809694416643 -24.676367747386962 17.438008259491422 -31.08357813032205 27.752346859443428 -1.9240384737797958 90.20869824550833 88.49194376634647 -112.43495175638057 -23.21660178141228 8.841048203185508 102.27269007835713 -10.387220329426274 71.53196575852643 82.72776445013254 76.50989255993574 58.56069966285055 71.19716294055141 -57.258661522240516 87.4830278340787 -174.16697478603118 15.208052614162945 100.7321647968002 -51.41274433321715 53.77693859261612 -179.36913221412902 -38.402597703787826 92.03325196667723 17.533316600717722 -73.68350648396616 -62.93347202709415 -64.54148542650509 32.95804124068762 2.810897538256934 88.62122083960148 79.21324260077256 -309.53805983104996 74.44620878148412 -59.90460626449782 -83.39989426636068 100.33989837744146 84.40472600790345 -17.174274959551994 -204.56075802736572 -149.0730961212197 62.26723475577123 29.607634261969274 2.8219977585166816 31.566121585731867 63.10872676636709 15.301485500743722 38.06551239592327 17.95332486682223 22.792895120195965 71.53972860103283 -10.36083462167909 42.63568711774593 -45.868497481008184 -0.3700875439052135 -19.247585469771742 -15.317767853503309 89.90838955948041 -29.01239531180475 -103.71104048394663 16.84075910622962 1.455449012866525 -18.120306362125312 -183.0440863914483 -43.14532449127057 82.32665244455197 -40.36174105334215 13.460702922616472 -33.94508355310413 63.45535904911666 -80.39722950529881 -26.109635358025834 96.84228934989336 -1.0138787927946198 -32.97569171318808 87.48667633599972 16.947278411407822 -22.600020065073977 44.481364850306456 90.1089524650358 -243.94828686710207 95.19461384087734 73.74227379551719 77.63132272360409 -44.60147665355002 82.5065369176454 59.63921163522752\",\n"
				+ "                    \"featureString\": \"0.003312670174790056 0.07472187386531579 -0.1392430407656847 0.054348602224337426 -0.005003151228945506 -0.049607252260964164 0.035025208720349164 -0.046328681246622615 0.038084654559038186 -0.06889205206381648 -0.04186744495834175 0.007578862527091252 0.01710323279135321 -0.09751873816314496 -0.013717134377772087 0.03713944074942877 0.01435984882746676 -0.0760143415512223 -0.07390027525099484 0.05897001379022473 0.0477341529533365 -0.00906752519015419 2.773550584128028E-4 -0.003567142314032504 -0.134937119998626 -0.014166751372823982 -0.040073072253481334 -0.05451478873820681 0.06220986853770323 -0.0070581981875492555 -0.009834848206159413 -0.01030148506581195 0.05318171376068341 0.07965166639340551 -0.027088634307055097 0.056258042421387995 -0.10210662400840144 -0.05215902712049061 -0.10449460298803291 0.014876136213148894 0.01694205619737898 0.0062412315722260815 -0.06518911219349033 -0.04845817455850345 -0.09080369303885259 -0.04793503564157474 0.044276229133461846 0.028604042784948096 5.647611020034865E-4 0.05870087228862471 0.06716489381107844 0.07737934485469994 0.08602325982953372 -0.03969800086986077 -0.08024871283651967 0.007015447944745813 0.016953735210393603 0.07878619444213415 -0.0961259923483196 0.0034076334418434843 -0.03820561523500242 0.08216163057490791 0.019540174540720486 0.023160706302396167 0.012470375008783058 -0.03313241187287004 0.07672294164566618 -0.05668848458873598 0.11874037634973462 0.02203554082906952 0.016052637852140162 0.031990580451919846 0.012979731887676997 -0.07237549982964993 -0.08182270211216651 0.064973977443419 -0.07885906352710567 -0.1255160057696661 -0.09288779506704917 0.05436634834316608 -0.006477311925080262 0.04950558104993481 0.10581319165710164 -0.06825512283677725 -0.011486000807857827 -0.07515219530384791 0.05715172628528978 -0.04802220996077124 -0.12040399697266127 -0.023072221037000417 0.03991232804316831 -0.0979245785231653 0.019889365749335603 -0.09998771120843135 0.015833619986905863 0.0606184153915628 -0.0580521086328908 -1.7416751698443763E-5 -0.03139710006745238 0.0037096158503309674 0.0942012578322503 -0.001942517749481148 -0.028132807309004037 0.029251997928306656 -0.0201768256736135 6.879281669266914E-4 0.06470199515062727 0.01670415940155324 -0.005886391806416214 -0.06792328698854697 -0.06103436638307022 -0.03120774870836421 0.008910017926245928 0.04361297382335914 -0.018583764410332628 -0.014401663535911786 0.07933265475654289 -0.0430557306757883 -0.04380871490330288 -0.10515320793186363 -0.02086460481054689 0.009952915712308727 0.07996102272483863 -0.012629133744753504 0.06289180404457606 -0.036756620379654985 0.03999743528271976 -0.06105684234491108 -0.12112114314774149 0.0555736455968336 -0.00928430178472282 0.07792327678517291 -0.01829227306389887 -0.08732264602164688 0.037102107507617846 0.1330682011811357 -0.013236746653963469 -0.023109557229633395 -0.004383671533708509 -0.060395487040697936 -0.07956016319313723 -0.003517046879584852 -0.039854512471509604 0.006179206847752396 -0.08677585868066863 -0.08621351628711349 0.06400943969033267 0.01598720459365531 -0.1309732414316386 -0.01486465697005195 0.050922339767413706 0.06105855460229673 0.12373425299791913 -0.11308081296125524 -0.0776988177021083 0.042528936614919646 -0.07703149683381381 -0.023157322993747106 -0.030738967850706293 0.04123012757198395 -0.030161548072570248 -0.026841738261282444 0.04843252023780032 -0.020211487175210527 0.07964114104642679 0.02678978228206305 -0.02535775980274928 -0.07584503676962892 -0.04507168230453604 -0.01823507012296958 -0.05048818743150485 0.02551544863534601 -0.010903989854513815 0.03185594850464871 -0.06023327350420387 0.019641991773326147 0.13186723347753285 -0.0942004784071622 0.03674566289900165 -0.016369971507964164 -0.01365499366197343 0.04805631449838218 0.03496579169540813 -0.006950882415434247 -0.0786796730183261 0.009476085391973978 0.01129918387649875 -0.01099979115564278 -0.016864788635192734 0.07063560992185222 0.004958535891369377 0.008424335350833931 -0.06627886405116633 0.05440786935781178 0.021086019385409983 -0.014592064843562088 -0.08246715611925251 -0.043304311327244105 0.04709908915193457 0.0052853809914698725 0.08467930732785087 -0.1077519395854324 0.014757858612574637 0.016698090457602552 0.024316402990370987 -0.037611606947489475 0.07526099948506607 -0.02575831264502516 -0.008067145687527954 0.03428201430085066 0.07143911147784246 -0.06055023015329712 -0.060196978113565 -0.007352766319864282 0.002944768396647353 0.015163854735070153 -0.055113988122167556 0.08268533532850836 -0.006235259822814873 -0.058259266752161476 0.019759183146647718 -0.07472006837396244 -0.06160244507421004 0.043219902432572684 0.0421471516234114 -0.03276148786964385 -0.04015204200128976 0.03629679514193221 -0.023890992991724296 -0.0987813844296493 0.06655601615968504 0.00841829131210321 0.058262950691737626 0.02188924410331406 0.10741400562814976 0.0025351176847164566 0.009890775607996866 0.0563406320975015 -0.03749151780809227 -0.015762448614757313 -0.035825688372317116 -0.0828644057000546 -0.0765980562048131 -0.0431277730943341 0.04661005217778055 0.011897643471724893 -0.05575902908060111 -0.028827646583024606 -0.01484186919038429 0.03515575754848358 -0.026455039972145305 0.035709368859074615 0.030857000377421315 9.766193449889358E-4 -0.023591559154814794 -0.05935839833201546 0.06323892798421807 -0.11449019189825968 0.0655282518875442 -0.0323079900718049 -0.09816640636785642 -0.01273809395558936 0.06572772429177635 -0.12360459622485857 0.06547663631898008 0.017840469686167412 -0.07963499290084368 0.05870049269379754 0.036151348716138225 -0.06387346768751741 -0.007059881502860471 -0.042424137258019884 0.04333009108116752 -0.03294073872660336 0.030734185656336576 -0.02854223799597668 0.10456891455932667 -0.06444071823436963 -0.06102996158756708 0.09984294329034654 0.05084546139757884 -0.0484055256225953 -0.05989220111238721 -0.04670381652387349 0.027237146438442564 0.004482085845972362 -0.024528981431534414 0.07320808150168312 -9.791012093620865E-4 -0.07441005083291154 0.02740751374512911 0.10912335525315843 0.02314059840221154 -0.08911271926603818 0.03138469358612048 -0.023749784951245315 -0.022603031233149138 -0.09206852180589187 0.1075338348158096 0.05037797179661299\"\n"
				+ "                }\n"
				+ "            }\n"
				+ "        ]\n"
				+ "    }\n"
				+ "}";
	}
	
	
	
	
}
